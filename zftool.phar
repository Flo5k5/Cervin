
<!-- saved from url=(0046)https://packages.zendframework.com/zftool.phar -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css"></style></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">#!/usr/bin/env php
&lt;?php
/*
 * This file is part of ZFTool command line tool
 *
 * @link      http://github.com/zendframework/ZFTool for the canonical source repository
 * @copyright Copyright (c) 2005-2013 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */
Phar::mapPhar('zftool.phar');
require 'phar://zftool.phar/zf.php';
__HALT_COMPILER(); ?&gt;
z�����������zftool.phar�������zf.php&amp;��AQ&amp;����ޯ�������!���vendor/composer/autoload_real.php��AQ�������������%���vendor/composer/autoload_classmap.phpW���AQW����_S����������vendor/composer/ClassLoader.php	��AQ	����¶������'���vendor/composer/autoload_namespaces.php	��AQ	��G-o�����������vendor/autoload.php����AQ������+�������6���vendor/zendframework/zend-mvc/Zend/Mvc/Application.php���AQ������
�������=���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Scheme.php\��AQ\����-��������?���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Hostname.php��AQ�������������E���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/TreeRouteStack.php���AQ���҆��������&lt;���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Query.php���AQ����Iq�������&lt;���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Regex.php���AQ����Iu�������&gt;���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Segment.php���AQ����eAa�������;���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Part.php�
��AQ�
��a+�[�������?���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Wildcard.phpW
��AQW
��3��y�������=���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Method.phpm��AQm������������E���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/RouteInterface.php����AQ����Gv��������A���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/RouteMatch.php���AQ���BA8�������&gt;���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Http/Literal.php5��AQ5�������������E���vendor/zendframework/zend-mvc/Zend/Mvc/Router/RouteStackInterface.php��AQ���qVO�������T���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Exception/InvalidArgumentException.php����AQ��������������N���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Exception/ExceptionInterface.php����AQ����m�}�������L���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Exception/RuntimeException.php����AQ����Y$���������&gt;���vendor/zendframework/zend-mvc/Zend/Mvc/Router/PriorityList.phpD��AQD��Esݝ�������@���vendor/zendframework/zend-mvc/Zend/Mvc/Router/RouteInterface.php��AQ���Z]��������D���vendor/zendframework/zend-mvc/Zend/Mvc/Router/RoutePluginManager.php���AQ����_���������&lt;���vendor/zendframework/zend-mvc/Zend/Mvc/Router/RouteMatch.php���AQ���Ԓ���������B���vendor/zendframework/zend-mvc/Zend/Mvc/Router/SimpleRouteStack.php���AQ����l��������B���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Console/Catchall.php���AQ�����Wն������H���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Console/RouteInterface.php����AQ�����`�˶������D���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Console/RouteMatch.php���AQ���]ys�������J���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Console/SimpleRouteStack.php���AQ���Vp֦�������@���vendor/zendframework/zend-mvc/Zend/Mvc/Router/Console/Simple.php0��AQ0���2��������&gt;���vendor/zendframework/zend-mvc/Zend/Mvc/ModuleRouteListener.php���AQ��������������K���vendor/zendframework/zend-mvc/Zend/Mvc/Exception/InvalidPluginException.phpw���AQw���z�V��������D���vendor/zendframework/zend-mvc/Zend/Mvc/Exception/DomainException.phpv���AQv���ר�E�������M���vendor/zendframework/zend-mvc/Zend/Mvc/Exception/InvalidArgumentException.php����AQ����d��2�������O���vendor/zendframework/zend-mvc/Zend/Mvc/Exception/InvalidControllerException.php{���AQ{�����&gt;.�������G���vendor/zendframework/zend-mvc/Zend/Mvc/Exception/ExceptionInterface.phpF���AQF���w�W��������E���vendor/zendframework/zend-mvc/Zend/Mvc/Exception/RuntimeException.phpx���AQx������϶������L���vendor/zendframework/zend-mvc/Zend/Mvc/Exception/MissingLocatorException.php`���AQ`�����a2�������E���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ApplicationFactory.phpe��AQe���8E�������X���vendor/zendframework/zend-mvc/Zend/Mvc/Service/DiStrictAbstractServiceFactoryFactory.php���AQ���V��9�������G���vendor/zendframework/zend-mvc/Zend/Mvc/Service/FilterManagerFactory.php���AQ����I�¶������Q���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewTemplateMapResolverFactory.php`��AQ`����̶������J���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ValidatorManagerFactory.php���AQ���G�ض������O���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewTemplatePathStackFactory.php���AQ��������������N���vendor/zendframework/zend-mvc/Zend/Mvc/Service/DiServiceInitializerFactory.php���AQ���wPIն������J���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewFeedRendererFactory.phpf��AQf������������K���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewHelperManagerFactory.php���AQ����bZ��������Q���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ControllerPluginManagerFactory.php���AQ���(PgC�������X���vendor/zendframework/zend-mvc/Zend/Mvc/Service/SerializerAdapterPluginManagerFactory.php&lt;��AQ&lt;��9����������@���vendor/zendframework/zend-mvc/Zend/Mvc/Service/RouterFactory.php���AQ���D��O�������I���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ServiceListenerFactory.php��AQ���8z�������J���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ControllerLoaderFactory.php��AQ���M���������A���vendor/zendframework/zend-mvc/Zend/Mvc/Service/RequestFactory.php���AQ���\���������F���vendor/zendframework/zend-mvc/Zend/Mvc/Service/EventManagerFactory.php���AQ����V�������F���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewResolverFactory.php���AQ�����������Q���vendor/zendframework/zend-mvc/Zend/Mvc/Service/DiStrictAbstractServiceFactory.php�	��AQ�	����9N�������E���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewManagerFactory.php���AQ�����ж������G���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ModuleManagerFactory.php�	��AQ�	��S���������&lt;���vendor/zendframework/zend-mvc/Zend/Mvc/Service/DiFactory.php���AQ����	��������G���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ServiceManagerConfig.php��AQ����{�������J���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewJsonStrategyFactory.php���AQ����.���������J���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewJsonRendererFactory.phpf��AQf���_P��������P���vendor/zendframework/zend-mvc/Zend/Mvc/Service/PaginatorPluginManagerFactory.phpt��AQt��Y��������R���vendor/zendframework/zend-mvc/Zend/Mvc/Service/DiAbstractServiceFactoryFactory.phpP��AQP����Ѥ�������L���vendor/zendframework/zend-mvc/Zend/Mvc/Service/FormElementManagerFactory.php���AQ���R(�������H���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ConsoleAdapterFactory.php���AQ����Ew�������B���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ResponseFactory.php���AQ����-Į�������J���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ViewFeedStrategyFactory.php���AQ���hbg϶������@���vendor/zendframework/zend-mvc/Zend/Mvc/Service/ConfigFactory.php���AQ����p�������O���vendor/zendframework/zend-mvc/Zend/Mvc/Service/AbstractPluginManagerFactory.php
��AQ
��qɜ��������L���vendor/zendframework/zend-mvc/Zend/Mvc/Service/RoutePluginManagerFactory.php����AQ�����,�ֶ������L���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/CreateViewModelListener.phpG��AQG����������F���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/ExceptionStrategy.php���AQ����,��������S���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/InjectRoutematchParamsListener.php=��AQ=��[���������L���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/InjectViewModelListener.php���AQ����Ȣ��������J���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/RouteNotFoundStrategy.php}��AQ}��[�k�������@���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/ViewManager.php3#��AQ3#���!;Q�������K���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/InjectTemplateListener.php�
��AQ�
��Y����������M���vendor/zendframework/zend-mvc/Zend/Mvc/View/Http/DefaultRenderingStrategy.php=��AQ=��R�h^�������D���vendor/zendframework/zend-mvc/Zend/Mvc/View/SendResponseListener.php����AQ����?5Ď�������O���vendor/zendframework/zend-mvc/Zend/Mvc/View/Console/CreateViewModelListener.php���AQ���Si�L�������I���vendor/zendframework/zend-mvc/Zend/Mvc/View/Console/ExceptionStrategy.php���AQ����?�������O���vendor/zendframework/zend-mvc/Zend/Mvc/View/Console/InjectViewModelListener.php��AQ��բ�{�������M���vendor/zendframework/zend-mvc/Zend/Mvc/View/Console/RouteNotFoundStrategy.php/��AQ/��l��2�������C���vendor/zendframework/zend-mvc/Zend/Mvc/View/Console/ViewManager.phpV��AQV����FY�������X���vendor/zendframework/zend-mvc/Zend/Mvc/View/Console/InjectNamedConsoleParamsListener.php���AQ���'��+�������P���vendor/zendframework/zend-mvc/Zend/Mvc/View/Console/DefaultRenderingStrategy.php��AQ��vl3 �������C���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/PluginManager.php0	��AQ0	���P�ֶ������G���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/ControllerManager.php���AQ������ȶ������D���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/Forward.php_��AQ_����t��������X���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/AcceptableViewModelSelector.php���AQ���"�Y�������K���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/AbstractPlugin.phpS��AQS��vDj��������C���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/Layout.php��AQ���~{��������@���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/Url.php��AQ���'Y��������E���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/Redirect.phpr��AQr�����j�������C���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/Params.php���AQ���o��ٶ������E���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/Identity.php���AQ���&lt;���������K���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/FlashMessenger.php���AQ���:or|�������P���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/FilePostRedirectGet.phpk��AQk���fH��������L���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/PostRedirectGet.php���AQ���qͬg�������L���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/Plugin/PluginInterface.php����AQ����ՂiI�������O���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/AbstractRestfulController.php���AQ�����D��������H���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/AbstractController.phpa��AQa��~����������N���vendor/zendframework/zend-mvc/Zend/Mvc/Controller/AbstractActionController.php���AQ���t'�������J���vendor/zendframework/zend-mvc/Zend/Mvc/InjectApplicationEventInterface.php����AQ����3�#�������8���vendor/zendframework/zend-mvc/Zend/Mvc/RouteListener.php(��AQ(��	��C�������?���vendor/zendframework/zend-mvc/Zend/Mvc/SendResponseListener.php���AQ����*9w�������;���vendor/zendframework/zend-mvc/Zend/Mvc/DispatchListener.phpw��AQw��#��Q�������?���vendor/zendframework/zend-mvc/Zend/Mvc/ApplicationInterface.php3��AQ3��&amp;2(۶������3���vendor/zendframework/zend-mvc/Zend/Mvc/MvcEvent.phpf
��AQf
���yr��������O���vendor/zendframework/zend-mvc/Zend/Mvc/ResponseSender/ConsoleResponseSender.phpl��AQl���֬�������P���vendor/zendframework/zend-mvc/Zend/Mvc/ResponseSender/AbstractResponseSender.phpS��AQS������������Q���vendor/zendframework/zend-mvc/Zend/Mvc/ResponseSender/ResponseSenderInterface.php����AQ������7&gt;�������K���vendor/zendframework/zend-mvc/Zend/Mvc/ResponseSender/SendResponseEvent.php���AQ���h��L�������T���vendor/zendframework/zend-mvc/Zend/Mvc/ResponseSender/SimpleStreamResponseSender.php���AQ��������������V���vendor/zendframework/zend-mvc/Zend/Mvc/ResponseSender/PhpEnvironmentResponseSender.php���AQ����&lt;@O�������O���vendor/zendframework/zend-inputfilter/Zend/InputFilter/InputFilterInterface.phpn��AQn�������������P���vendor/zendframework/zend-inputfilter/Zend/InputFilter/InputFilterAwareTrait.phpD��AQD��@�ڶ������]���vendor/zendframework/zend-inputfilter/Zend/InputFilter/Exception/InvalidArgumentException.php����AQ������ଶ������W���vendor/zendframework/zend-inputfilter/Zend/InputFilter/Exception/ExceptionInterface.phpM���AQM���Y�C��������U���vendor/zendframework/zend-inputfilter/Zend/InputFilter/Exception/RuntimeException.php���AQ����U�K�������@���vendor/zendframework/zend-inputfilter/Zend/InputFilter/Input.php���AQ���g��p�������T���vendor/zendframework/zend-inputfilter/Zend/InputFilter/InputFilterAwareInterface.php����AQ����Ɯs��������W���vendor/zendframework/zend-inputfilter/Zend/InputFilter/InputFilterProviderInterface.php}���AQ}���0MĶ������F���vendor/zendframework/zend-inputfilter/Zend/InputFilter/InputFilter.phpM��AQM��k����������X���vendor/zendframework/zend-inputfilter/Zend/InputFilter/UnknownInputsCapableInterface.php����AQ�����Lx��������D���vendor/zendframework/zend-inputfilter/Zend/InputFilter/FileInput.php���AQ����2�I�������J���vendor/zendframework/zend-inputfilter/Zend/InputFilter/BaseInputFilter.phpS��AQS��A�/��������Q���vendor/zendframework/zend-inputfilter/Zend/InputFilter/InputProviderInterface.phpq���AQq���$0�F�������B���vendor/zendframework/zend-inputfilter/Zend/InputFilter/Factory.php���AQ�����G�������I���vendor/zendframework/zend-inputfilter/Zend/InputFilter/InputInterface.php}��AQ}��4��#�������C���vendor/zendframework/zend-loader/Zend/Loader/StandardAutoloader.php9��AQ9��ͦhW�������P���vendor/zendframework/zend-loader/Zend/Loader/Exception/PluginLoaderException.php����AQ����m���������O���vendor/zendframework/zend-loader/Zend/Loader/Exception/InvalidPathException.php����AQ�������Ҷ������\���vendor/zendframework/zend-loader/Zend/Loader/Exception/MissingResourceNamespaceException.php����AQ����U���������J���vendor/zendframework/zend-loader/Zend/Loader/Exception/DomainException.php����AQ����Ѓ�:�������S���vendor/zendframework/zend-loader/Zend/Loader/Exception/InvalidArgumentException.php����AQ����ת(�������L���vendor/zendframework/zend-loader/Zend/Loader/Exception/SecurityException.php����AQ����=NT��������M���vendor/zendframework/zend-loader/Zend/Loader/Exception/ExceptionInterface.phpH���AQH���M�a��������K���vendor/zendframework/zend-loader/Zend/Loader/Exception/RuntimeException.php����AQ�����w���������Q���vendor/zendframework/zend-loader/Zend/Loader/Exception/BadMethodCallException.php����AQ������i4�������C���vendor/zendframework/zend-loader/Zend/Loader/ClassMapAutoloader.phpn
��AQn
��_��P�������&gt;���vendor/zendframework/zend-loader/Zend/Loader/SplAutoloader.php��AQ����c��������A���vendor/zendframework/zend-loader/Zend/Loader/ModuleAutoloader.php���AQ�����0��������C���vendor/zendframework/zend-loader/Zend/Loader/PluginClassLocator.php��AQ��"�Ķ������B���vendor/zendframework/zend-loader/Zend/Loader/PluginClassLoader.php���AQ���n���������A���vendor/zendframework/zend-loader/Zend/Loader/ShortNameLocator.php����AQ�����"���������B���vendor/zendframework/zend-loader/Zend/Loader/AutoloaderFactory.php)
��AQ)
�����������M���vendor/zendframework/zend-view/Zend/View/Exception/InvalidHelperException.phpx���AQx���6
���������F���vendor/zendframework/zend-view/Zend/View/Exception/DomainException.phpw���AQw����
%�������O���vendor/zendframework/zend-view/Zend/View/Exception/InvalidArgumentException.php����AQ����{)P#�������I���vendor/zendframework/zend-view/Zend/View/Exception/ExceptionInterface.phpF���AQF�������������G���vendor/zendframework/zend-view/Zend/View/Exception/RuntimeException.phpy���AQy���S���������M���vendor/zendframework/zend-view/Zend/View/Exception/BadMethodCallException.php����AQ����x�ϩ�������E���vendor/zendframework/zend-view/Zend/View/Helper/PaginationControl.phpn��AQn��L���������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/BasePath.php���AQ������������;���vendor/zendframework/zend-view/Zend/View/Helper/Partial.php���AQ���Rc	�������=���vendor/zendframework/zend-view/Zend/View/Helper/HeadTitle.phpo��AQo��k�-�������:���vendor/zendframework/zend-view/Zend/View/Helper/Layout.php���AQ���;��`�������&gt;���vendor/zendframework/zend-view/Zend/View/Helper/HeadScript.php���AQ���v�˓�������&gt;���vendor/zendframework/zend-view/Zend/View/Helper/EscapeHtml.php����AQ���������������=���vendor/zendframework/zend-view/Zend/View/Helper/ViewModel.php&lt;��AQ&lt;��ckʄ�������Q���vendor/zendframework/zend-view/Zend/View/Helper/Service/FlashMessengerFactory.php���AQ������߶������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/HtmlList.phpp��AQp��m~��������;���vendor/zendframework/zend-view/Zend/View/Helper/Doctype.php���AQ������̶������=���vendor/zendframework/zend-view/Zend/View/Helper/EscapeUrl.php����AQ����2�������7���vendor/zendframework/zend-view/Zend/View/Helper/Url.php���AQ���3R�Ѷ������=���vendor/zendframework/zend-view/Zend/View/Helper/EscapeCss.php����AQ��������������=���vendor/zendframework/zend-view/Zend/View/Helper/ServerUrl.php5��AQ5��J;�������?���vendor/zendframework/zend-view/Zend/View/Helper/PartialLoop.php���AQ���M��Ѷ������G���vendor/zendframework/zend-view/Zend/View/Helper/AbstractHtmlElement.php2��AQ2���J˶������8���vendor/zendframework/zend-view/Zend/View/Helper/Json.php��AQ���|o�������G���vendor/zendframework/zend-view/Zend/View/Helper/RenderToPlaceholder.phpn��AQn���4Bi�������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/HeadMeta.php���AQ�����߶������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/Identity.php���AQ����j7|�������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/HtmlPage.php&lt;��AQ&lt;��ѧNb�������B���vendor/zendframework/zend-view/Zend/View/Helper/FlashMessenger.phpq��AQq���Ig�������=���vendor/zendframework/zend-view/Zend/View/Helper/HtmlFlash.php���AQ���i�9�������9���vendor/zendframework/zend-view/Zend/View/Helper/Cycle.phpc��AQc��@c��������C���vendor/zendframework/zend-view/Zend/View/Helper/Navigation/Menu.php� ��AQ� ��[b:O�������J���vendor/zendframework/zend-view/Zend/View/Helper/Navigation/Breadcrumbs.phpX��AQX��6����������L���vendor/zendframework/zend-view/Zend/View/Helper/Navigation/PluginManager.php���AQ����UӶ������F���vendor/zendframework/zend-view/Zend/View/Helper/Navigation/Sitemap.php���AQ���(���������D���vendor/zendframework/zend-view/Zend/View/Helper/Navigation/Links.php�!��AQ�!��,粙�������N���vendor/zendframework/zend-view/Zend/View/Helper/Navigation/HelperInterface.php���AQ���C����������M���vendor/zendframework/zend-view/Zend/View/Helper/Navigation/AbstractHelper.php"��AQ"����G��������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/EscapeJs.php����AQ����4 g��������?���vendor/zendframework/zend-view/Zend/View/Helper/Placeholder.php&lt;��AQ&lt;����/1�������?���vendor/zendframework/zend-view/Zend/View/Helper/DeclareVars.php��AQ����l`�������&gt;���vendor/zendframework/zend-view/Zend/View/Helper/HtmlObject.phpn��AQn��E�V�������&gt;���vendor/zendframework/zend-view/Zend/View/Helper/Navigation.php���AQ���� 
߶������C���vendor/zendframework/zend-view/Zend/View/Helper/HelperInterface.php����AQ��������������A���vendor/zendframework/zend-view/Zend/View/Helper/HtmlQuicktime.php���AQ���C��0�������B���vendor/zendframework/zend-view/Zend/View/Helper/AbstractHelper.phpU��AQU���[
��������@���vendor/zendframework/zend-view/Zend/View/Helper/InlineScript.phpS��AQS��0qb��������D���vendor/zendframework/zend-view/Zend/View/Helper/RenderChildModel.php���AQ����UB|�������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/HeadLink.php��AQ�� �D�������=���vendor/zendframework/zend-view/Zend/View/Helper/HeadStyle.php&gt;��AQ&gt;��m%ֶ������&lt;���vendor/zendframework/zend-view/Zend/View/Helper/Gravatar.phpM��AQM����=��������B���vendor/zendframework/zend-view/Zend/View/Helper/EscapeHtmlAttr.php����AQ����4���������[���vendor/zendframework/zend-view/Zend/View/Helper/Placeholder/Container/AbstractContainer.php���AQ���t�	��������\���vendor/zendframework/zend-view/Zend/View/Helper/Placeholder/Container/AbstractStandalone.php���AQ��������������I���vendor/zendframework/zend-view/Zend/View/Helper/Placeholder/Container.phpg���AQg���7lȪ�������H���vendor/zendframework/zend-view/Zend/View/Helper/Placeholder/Registry.php���AQ���hq��������J���vendor/zendframework/zend-view/Zend/View/Helper/Escaper/AbstractHelper.phpz��AQz���_�϶������6���vendor/zendframework/zend-view/Zend/View/ViewEvent.php
��AQ
����T�������@���vendor/zendframework/zend-view/Zend/View/HelperPluginManager.php���AQ����{J[�������&lt;���vendor/zendframework/zend-view/Zend/View/Model/JsonModel.phpp��AQp��$�]3�������A���vendor/zendframework/zend-view/Zend/View/Model/ModelInterface.phpH��AQH����v*�������&lt;���vendor/zendframework/zend-view/Zend/View/Model/FeedModel.php2��AQ2���Z7�������&lt;���vendor/zendframework/zend-view/Zend/View/Model/ViewModel.phpJ��AQJ��:�:Զ������J���vendor/zendframework/zend-view/Zend/View/Model/ClearableModelInterface.php����AQ����xv�Ӷ������?���vendor/zendframework/zend-view/Zend/View/Model/ConsoleModel.php��AQ����i��������B���vendor/zendframework/zend-view/Zend/View/Strategy/JsonStrategy.php���AQ���~�U
�������B���vendor/zendframework/zend-view/Zend/View/Strategy/FeedStrategy.php;��AQ;����1Զ������I���vendor/zendframework/zend-view/Zend/View/Strategy/PhpRendererStrategy.php���AQ���y�^Ѷ������6���vendor/zendframework/zend-view/Zend/View/Variables.php���AQ���l
$!�������G���vendor/zendframework/zend-view/Zend/View/Renderer/RendererInterface.php ��AQ ���+1U�������K���vendor/zendframework/zend-view/Zend/View/Renderer/TreeRendererInterface.phpk���AQk������6�������B���vendor/zendframework/zend-view/Zend/View/Renderer/FeedRenderer.php���AQ���I�Ҷ������B���vendor/zendframework/zend-view/Zend/View/Renderer/JsonRenderer.php���AQ���OC6�������E���vendor/zendframework/zend-view/Zend/View/Renderer/ConsoleRenderer.phpY��AQY��HTB��������A���vendor/zendframework/zend-view/Zend/View/Renderer/PhpRenderer.php=��AQ=��b��L�������G���vendor/zendframework/zend-view/Zend/View/Resolver/AggregateResolver.php���AQ���CY�G�������G���vendor/zendframework/zend-view/Zend/View/Resolver/TemplatePathStack.php���AQ���.�+T�������G���vendor/zendframework/zend-view/Zend/View/Resolver/ResolverInterface.php����AQ����mt��������I���vendor/zendframework/zend-view/Zend/View/Resolver/TemplateMapResolver.phpD��AQD������������1���vendor/zendframework/zend-view/Zend/View/View.php���AQ�������������3���vendor/zendframework/zend-view/Zend/View/Stream.phpF��AQF��ރĶ������9���vendor/zendframework/zend-filter/Zend/Filter/BaseName.php����AQ����eڳ��������D���vendor/zendframework/zend-filter/Zend/Filter/FilterPluginManager.phpL��AQL���n�ܶ������=���vendor/zendframework/zend-filter/Zend/Filter/HtmlEntities.php���AQ����j羶������@���vendor/zendframework/zend-filter/Zend/Filter/FilterInterface.php\���AQ\����W�U�������J���vendor/zendframework/zend-filter/Zend/Filter/Exception/DomainException.phpy���AQy���q����������S���vendor/zendframework/zend-filter/Zend/Filter/Exception/InvalidArgumentException.php����AQ������Z��������M���vendor/zendframework/zend-filter/Zend/Filter/Exception/ExceptionInterface.phpI���AQI����G��������K���vendor/zendframework/zend-filter/Zend/Filter/Exception/RuntimeException.php{���AQ{���:�lF�������Q���vendor/zendframework/zend-filter/Zend/Filter/Exception/BadMethodCallException.php����AQ����^,g��������V���vendor/zendframework/zend-filter/Zend/Filter/Exception/ExtensionNotLoadedException.phpg���AQg���m�eƶ������5���vendor/zendframework/zend-filter/Zend/Filter/Null.php�	��AQ�	��S��f�������9���vendor/zendframework/zend-filter/Zend/Filter/Callback.phpM��AQM��ط��������;���vendor/zendframework/zend-filter/Zend/Filter/StringTrim.phpq��AQq����[?�������&gt;���vendor/zendframework/zend-filter/Zend/Filter/StringToUpper.php1��AQ1������������=���vendor/zendframework/zend-filter/Zend/Filter/UriNormalize.php���AQ���ո���������4���vendor/zendframework/zend-filter/Zend/Filter/Dir.php����AQ����0%��������?���vendor/zendframework/zend-filter/Zend/Filter/AbstractFilter.php���AQ�����$"�������@���vendor/zendframework/zend-filter/Zend/Filter/Encrypt/Openssl.php���AQ���8s^�������D���vendor/zendframework/zend-filter/Zend/Filter/Encrypt/BlockCipher.php{��AQ{��g�S�������U���vendor/zendframework/zend-filter/Zend/Filter/Encrypt/EncryptionAlgorithmInterface.php����AQ����۴r �������&gt;���vendor/zendframework/zend-filter/Zend/Filter/StripNewlines.php����AQ����43���������9���vendor/zendframework/zend-filter/Zend/Filter/Compress.php;��AQ;��IT���������:���vendor/zendframework/zend-filter/Zend/Filter/StripTags.php���AQ����Ɏ��������&lt;���vendor/zendframework/zend-filter/Zend/Filter/PregReplace.php���AQ����й�������@���vendor/zendframework/zend-filter/Zend/Filter/AbstractUnicode.php^��AQ^���4&lt;�������?���vendor/zendframework/zend-filter/Zend/Filter/File/LowerCase.phpt��AQt��H&lt;Zٶ������B���vendor/zendframework/zend-filter/Zend/Filter/File/RenameUpload.php���AQ���H�_Ķ������=���vendor/zendframework/zend-filter/Zend/Filter/File/Decrypt.php���AQ������������?���vendor/zendframework/zend-filter/Zend/Filter/File/UpperCase.php|��AQ|��T-_�������&lt;���vendor/zendframework/zend-filter/Zend/Filter/File/Rename.php��AQ����]��������=���vendor/zendframework/zend-filter/Zend/Filter/File/Encrypt.php���AQ����Ð�������8���vendor/zendframework/zend-filter/Zend/Filter/Decrypt.php����AQ�����ᭈ�������&lt;���vendor/zendframework/zend-filter/Zend/Filter/FilterChain.php���AQ���,Nc��������:���vendor/zendframework/zend-filter/Zend/Filter/Inflector.php���AQ�����E��������8���vendor/zendframework/zend-filter/Zend/Filter/Boolean.php���AQ�����`��������4���vendor/zendframework/zend-filter/Zend/Filter/Int.php����AQ����c(2��������;���vendor/zendframework/zend-filter/Zend/Filter/Decompress.php����AQ������Ѵ�������7���vendor/zendframework/zend-filter/Zend/Filter/Digits.phpi��AQi��_����������J���vendor/zendframework/zend-filter/Zend/Filter/Word/SeparatorToSeparator.php=��AQ=��X���������K���vendor/zendframework/zend-filter/Zend/Filter/Word/UnderscoreToCamelCase.php����AQ����	5Q7�������G���vendor/zendframework/zend-filter/Zend/Filter/Word/AbstractSeparator.php���AQ�������������J���vendor/zendframework/zend-filter/Zend/Filter/Word/SeparatorToCamelCase.phpK��AQK����ٶ������E���vendor/zendframework/zend-filter/Zend/Filter/Word/CamelCaseToDash.php����AQ�����\���������E���vendor/zendframework/zend-filter/Zend/Filter/Word/SeparatorToDash.php����AQ������\�������K���vendor/zendframework/zend-filter/Zend/Filter/Word/CamelCaseToUnderscore.php����AQ����&gt;fg��������K���vendor/zendframework/zend-filter/Zend/Filter/Word/UnderscoreToSeparator.php����AQ����z�d�������F���vendor/zendframework/zend-filter/Zend/Filter/Word/DashToUnderscore.php����AQ������1|�������E���vendor/zendframework/zend-filter/Zend/Filter/Word/DashToSeparator.php����AQ�����{�C�������F���vendor/zendframework/zend-filter/Zend/Filter/Word/UnderscoreToDash.php����AQ�����.0�������E���vendor/zendframework/zend-filter/Zend/Filter/Word/DashToCamelCase.php����AQ�����,�.�������J���vendor/zendframework/zend-filter/Zend/Filter/Word/CamelCaseToSeparator.phpP��AQP��5� �������8���vendor/zendframework/zend-filter/Zend/Filter/Encrypt.phpf��AQf�����A�������&gt;���vendor/zendframework/zend-filter/Zend/Filter/StringToLower.php1��AQ1��e��,�������9���vendor/zendframework/zend-filter/Zend/Filter/RealPath.php��AQ�����\�������=���vendor/zendframework/zend-filter/Zend/Filter/StaticFilter.php{��AQ{�� qAܶ������=���vendor/zendframework/zend-filter/Zend/Filter/Compress/Lzf.php���AQ���w�K�������=���vendor/zendframework/zend-filter/Zend/Filter/Compress/Tar.php���AQ���u��������V���vendor/zendframework/zend-filter/Zend/Filter/Compress/AbstractCompressionAlgorithm.php��AQ��Y)o��������=���vendor/zendframework/zend-filter/Zend/Filter/Compress/Zip.php���AQ������Զ������W���vendor/zendframework/zend-filter/Zend/Filter/Compress/CompressionAlgorithmInterface.php����AQ������$�������=���vendor/zendframework/zend-filter/Zend/Filter/Compress/Bz2.phpY��AQY��v$���������=���vendor/zendframework/zend-filter/Zend/Filter/Compress/Rar.php�
��AQ�
��
�3ٶ������@���vendor/zendframework/zend-filter/Zend/Filter/Compress/Snappy.php���AQ���^�+�������&lt;���vendor/zendframework/zend-filter/Zend/Filter/Compress/Gz.php�	��AQ�	��P��;�������&gt;���vendor/zendframework/zend-stdlib/Zend/Stdlib/PriorityQueue.php
��AQ
��XH��������&lt;���vendor/zendframework/zend-stdlib/Zend/Stdlib/StringUtils.phps
��AQs
����vZ�������S���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/InvalidCallbackException.php����AQ����n[��������J���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/DomainException.phpy���AQy��� {;�������S���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/InvalidArgumentException.php����AQ�����5B�������I���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/LogicException.phpw���AQw����*߶������M���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/ExceptionInterface.phpI���AQI���&gt;w�������K���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/RuntimeException.php{���AQ{���/=��������Q���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/BadMethodCallException.php����AQ����9d~��������V���vendor/zendframework/zend-stdlib/Zend/Stdlib/Exception/ExtensionNotLoadedException.phpg���AQg����?&lt;ж������9���vendor/zendframework/zend-stdlib/Zend/Stdlib/DateTime.php���AQ���mvЗ�������;���vendor/zendframework/zend-stdlib/Zend/Stdlib/ArrayStack.php����AQ����uQ�Q�������9���vendor/zendframework/zend-stdlib/Zend/Stdlib/SplQueue.php���AQ���Y	�Ҷ������A���vendor/zendframework/zend-stdlib/Zend/Stdlib/RequestInterface.phpV���AQV������t�������A���vendor/zendframework/zend-stdlib/Zend/Stdlib/SplPriorityQueue.php���AQ���?D��������9���vendor/zendframework/zend-stdlib/Zend/Stdlib/Response.php^���AQ^���⹠��������G���vendor/zendframework/zend-stdlib/Zend/Stdlib/InitializableInterface.php[���AQ[����g&gt;�������8���vendor/zendframework/zend-stdlib/Zend/Stdlib/Message.php��AQ��¨��������I���vendor/zendframework/zend-stdlib/Zend/Stdlib/ParameterObjectInterface.php����AQ�����BN��������@���vendor/zendframework/zend-stdlib/Zend/Stdlib/CallbackHandler.php�
��AQ�
��0��������5���vendor/zendframework/zend-stdlib/Zend/Stdlib/Glob.php�
��AQ�
�������������@���vendor/zendframework/zend-stdlib/Zend/Stdlib/AbstractOptions.php��AQ����_�������&lt;���vendor/zendframework/zend-stdlib/Zend/Stdlib/ArrayObject.php��AQ��@!B��������G���vendor/zendframework/zend-stdlib/Zend/Stdlib/compatibility/autoload.php����AQ����FΨ`�������J���vendor/zendframework/zend-stdlib/Zend/Stdlib/compatibility/ArrayObject.php��AQ��~����������D���vendor/zendframework/zend-stdlib/Zend/Stdlib/StringWrapper/Iconv.phpS
��AQS
����V��������T���vendor/zendframework/zend-stdlib/Zend/Stdlib/StringWrapper/AbstractStringWrapper.php���AQ��������������C���vendor/zendframework/zend-stdlib/Zend/Stdlib/StringWrapper/Intl.php���AQ����|��������E���vendor/zendframework/zend-stdlib/Zend/Stdlib/StringWrapper/Native.phpw��AQw�������������U���vendor/zendframework/zend-stdlib/Zend/Stdlib/StringWrapper/StringWrapperInterface.php���AQ�������������G���vendor/zendframework/zend-stdlib/Zend/Stdlib/StringWrapper/MbString.php���AQ�������������J���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/AbstractHydrator.php���AQ���]B��������P���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/FilterInterface.phpo���AQo�����;��������R���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/MethodMatchFilter.php��AQ���*�
�������I���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/IsFilter.php ��AQ ��tN�	�������J���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/GetFilter.php"��AQ"��4H���������X���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/NumberOfParameterFilter.php���AQ�����s6�������P���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/FilterComposite.php�	��AQ�	���SD��������J���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/HasFilter.php"��AQ"��豉k�������X���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Filter/FilterProviderInterface.phpq���AQq����,�!�������R���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/HydratorOptionsInterface.phpt���AQt���Y���������F���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/ClassMethods.php�
��AQ�
����v�������R���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Strategy/DefaultStrategy.php����AQ����(�������T���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Strategy/StrategyInterface.php����AQ������H��������W���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Strategy/SerializableStrategy.php���AQ���t����������R���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Strategy/ClosureStrategy.phpW��AQW��?&gt;��������D���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/Reflection.php=��AQ=��o{�Ŷ������H���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/ObjectProperty.phpm��AQm���t��������K���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/ArraySerializable.phpG��AQG���e�8�������R���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/StrategyEnabledInterface.php3��AQ3������������K���vendor/zendframework/zend-stdlib/Zend/Stdlib/Hydrator/HydratorInterface.php����AQ�����Wy$�������9���vendor/zendframework/zend-stdlib/Zend/Stdlib/SplStack.php���AQ���K���������8���vendor/zendframework/zend-stdlib/Zend/Stdlib/Request.php\���AQ\����J�������=���vendor/zendframework/zend-stdlib/Zend/Stdlib/ErrorHandler.php��AQ���:3�������B���vendor/zendframework/zend-stdlib/Zend/Stdlib/ResponseInterface.phpW���AQW���^���������;���vendor/zendframework/zend-stdlib/Zend/Stdlib/ArrayUtils.php�	��AQ�	���$p�������F���vendor/zendframework/zend-stdlib/Zend/Stdlib/DispatchableInterface.php����AQ�����W��������D���vendor/zendframework/zend-stdlib/Zend/Stdlib/ParametersInterface.php���AQ���oS�7�������;���vendor/zendframework/zend-stdlib/Zend/Stdlib/Parameters.php���AQ�����P�������A���vendor/zendframework/zend-stdlib/Zend/Stdlib/MessageInterface.php����AQ������ J�������K���vendor/zendframework/zend-stdlib/Zend/Stdlib/ArraySerializableInterface.php����AQ����(w��������G���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Config.php'��AQ'��T�$�������V���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/AbstractPluginManager.phpw
��AQw
��h��J�������f���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Exception/InvalidServiceNameException.phpo���AQo���z-�t�������e���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Exception/ServiceNotCreatedException.phpn���AQn�����0�������c���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Exception/InvalidArgumentException.php����AQ�����Y�;�������c���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Exception/ServiceNotFoundException.phpt���AQt����&amp;�^�������k���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Exception/CircularDependencyFoundException.phpt���AQt���d^���������]���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Exception/ExceptionInterface.phpQ���AQQ�������������[���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Exception/RuntimeException.php����AQ�����,"��������X���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/ServiceLocatorInterface.php����AQ�������l�������Y���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/ServiceLocatorAwareTrait.phph��AQh��x���������]���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/ServiceLocatorAwareInterface.php����AQ����e��޶������O���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/ServiceManager.php�A��AQ�A��7n�[�������]���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/ServiceManagerAwareInterface.php����AQ�����h�d�������U���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/InitializerInterface.php����AQ�����o�ٶ������P���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/ConfigInterface.php����AQ����K(���������Q���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/FactoryInterface.php����AQ����"Yf�������Y���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/AbstractFactoryInterface.php��AQ���!�'�������X���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Di/DiServiceInitializer.php��AQ��x���������\���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Di/DiAbstractServiceFactory.php���AQ����t~�������T���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Di/DiServiceFactory.php���AQ���A(y��������Z���vendor/zendframework/zend-servicemanager/Zend/ServiceManager/Di/DiInstanceManagerProxy.php���AQ���.D�ض������&gt;���vendor/zendframework/zend-form/Zend/Form/FieldsetInterface.php���AQ���/0�M�������5���vendor/zendframework/zend-form/Zend/Form/Fieldset.php, ��AQ, ��S���������F���vendor/zendframework/zend-form/Zend/Form/FormFactoryAwareInterface.phpv���AQv�������������N���vendor/zendframework/zend-form/Zend/Form/Exception/InvalidElementException.phph���AQh���X�CL�������F���vendor/zendframework/zend-form/Zend/Form/Exception/DomainException.phpv���AQv���+ �-�������O���vendor/zendframework/zend-form/Zend/Form/Exception/InvalidArgumentException.php����AQ����An�k�������O���vendor/zendframework/zend-form/Zend/Form/Exception/UnexpectedValueException.php����AQ��������������I���vendor/zendframework/zend-form/Zend/Form/Exception/ExceptionInterface.phpF���AQF���ꡧ�������M���vendor/zendframework/zend-form/Zend/Form/Exception/BadMethodCallException.php����AQ������E��������:���vendor/zendframework/zend-form/Zend/Form/FormInterface.php���AQ���`
�"�������J���vendor/zendframework/zend-form/Zend/Form/FieldsetPrepareAwareInterface.phpk���AQk����wSF�������1���vendor/zendframework/zend-form/Zend/Form/Form.php�+��AQ�+��=�ud�������B���vendor/zendframework/zend-form/Zend/Form/FormFactoryAwareTrait.php����AQ����N��������M���vendor/zendframework/zend-form/Zend/Form/ElementAttributeRemovalInterface.php����AQ����d'˦�������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormMonth.php����AQ�����rԶ������D���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormElement.php
��AQ
��!�[Z�������A���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormTime.php����AQ������l��������J���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormDateTimeLocal.php����AQ������?��������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormInput.php.��AQ.��ɻ^��������C���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormSelect.php���AQ����!�z�������A���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormText.php���AQ���M�(Ƕ������C���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormSearch.php����AQ�����t��������D���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormCaptcha.php���AQ���~����������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormRange.php���AQ���aU���������=���vendor/zendframework/zend-form/Zend/Form/View/Helper/Form.phpf��AQf�������������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormReset.php���AQ���#S��������C���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormButton.phpQ
��AQQ
�����I�������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormEmail.php���AQ���mD	ֶ������@���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormRow.phpX��AQX���L|�������C���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormSubmit.php��AQ��9��^�������E���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormDateTime.php���AQ���0�b��������K���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormDateTimeSelect.php��AQ��ܹ�)�������H���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormMonthSelect.php.��AQ.�����S�������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormColor.phpt��AQt���cJ�������J���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormElementErrors.php]	��AQ]	���%=]�������C���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormNumber.php���AQ�������������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormImage.php��AQ���Z��������G���vendor/zendframework/zend-form/Zend/Form/View/Helper/Captcha/Figlet.php���AQ���g�O�������J���vendor/zendframework/zend-form/Zend/Form/View/Helper/Captcha/ReCaptcha.php��AQ��
��U�������M���vendor/zendframework/zend-form/Zend/Form/View/Helper/Captcha/AbstractWord.php���AQ���a;6�������F���vendor/zendframework/zend-form/Zend/Form/View/Helper/Captcha/Image.php��AQ��(��O�������E���vendor/zendframework/zend-form/Zend/Form/View/Helper/Captcha/Dumb.php���AQ���/]�������C���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormHidden.php9��AQ9��Zc#?�������G���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormCollection.php�
��AQ�
���+���������E���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormCheckbox.phpL��AQL���bCֶ������U���vendor/zendframework/zend-form/Zend/Form/View/Helper/File/FormFileSessionProgress.php����AQ����*~Y&lt;�������Q���vendor/zendframework/zend-form/Zend/Form/View/Helper/File/FormFileApcProgress.php����AQ�����qg��������T���vendor/zendframework/zend-form/Zend/Form/View/Helper/File/FormFileUploadProgress.php���AQ����צM�������J���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormMultiCheckbox.php��AQ��+��������E���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormPassword.php���AQ�������������G���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormDateSelect.php���AQ���F?v|�������A���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormWeek.php����AQ����{R�߶������G���vendor/zendframework/zend-form/Zend/Form/View/Helper/AbstractHelper.php���AQ���Ch�~�������E���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormTextarea.php"��AQ"��ج8��������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormLabel.php	��AQ	��fW���������A���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormDate.php����AQ����6R���������B���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormRadio.php	��AQ	�������������@���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormTel.php���AQ���g��4�������A���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormFile.php���AQ���r�ћ�������@���vendor/zendframework/zend-form/Zend/Form/View/Helper/FormUrl.php���AQ����g���������&gt;���vendor/zendframework/zend-form/Zend/Form/View/HelperConfig.php]��AQ]�������������?���vendor/zendframework/zend-form/Zend/Form/FormElementManager.php���AQ�����޶������4���vendor/zendframework/zend-form/Zend/Form/Element.php�
��AQ�
���Dޏ�������;���vendor/zendframework/zend-form/Zend/Form/Element/Hidden.php����AQ����*�?C�������9���vendor/zendframework/zend-form/Zend/Form/Element/Week.php���AQ���wC�b�������@���vendor/zendframework/zend-form/Zend/Form/Element/MonthSelect.php���AQ���:�}�������=���vendor/zendframework/zend-form/Zend/Form/Element/DateTime.php�	��AQ�	�����,�������9���vendor/zendframework/zend-form/Zend/Form/Element/Csrf.php$��AQ$��g�2x�������B���vendor/zendframework/zend-form/Zend/Form/Element/MultiCheckbox.php���AQ���7�`8�������C���vendor/zendframework/zend-form/Zend/Form/Element/DateTimeSelect.php���AQ���8,+ �������9���vendor/zendframework/zend-form/Zend/Form/Element/Text.php����AQ�������ݶ������9���vendor/zendframework/zend-form/Zend/Form/Element/Date.php���AQ���(+�%�������8���vendor/zendframework/zend-form/Zend/Form/Element/Url.php���AQ�����=��������=���vendor/zendframework/zend-form/Zend/Form/Element/Checkbox.php��AQ�������������;���vendor/zendframework/zend-form/Zend/Form/Element/Button.php����AQ�����޶������9���vendor/zendframework/zend-form/Zend/Form/Element/Time.php���AQ����}��������9���vendor/zendframework/zend-form/Zend/Form/Element/File.phpI��AQI�����ζ������:���vendor/zendframework/zend-form/Zend/Form/Element/Image.php����AQ����'���������=���vendor/zendframework/zend-form/Zend/Form/Element/Password.phpT��AQT����;%�������:���vendor/zendframework/zend-form/Zend/Form/Element/Range.php	��AQ	��:�ֶ������;���vendor/zendframework/zend-form/Zend/Form/Element/Submit.php����AQ������_��������B���vendor/zendframework/zend-form/Zend/Form/Element/DateTimeLocal.php���AQ����z�$�������&lt;���vendor/zendframework/zend-form/Zend/Form/Element/Captcha.php-��AQ-������������:���vendor/zendframework/zend-form/Zend/Form/Element/Email.php���AQ����k�R�������:���vendor/zendframework/zend-form/Zend/Form/Element/Radio.php���AQ���Ep�!�������?���vendor/zendframework/zend-form/Zend/Form/Element/Collection.php���AQ����I��������:���vendor/zendframework/zend-form/Zend/Form/Element/Month.php���AQ���A� �������;���vendor/zendframework/zend-form/Zend/Form/Element/Select.php���AQ�����ض������?���vendor/zendframework/zend-form/Zend/Form/Element/DateSelect.php���AQ���\X:ֶ������:���vendor/zendframework/zend-form/Zend/Form/Element/Color.php���AQ����Y���������=���vendor/zendframework/zend-form/Zend/Form/Element/Textarea.php����AQ����a�{��������;���vendor/zendframework/zend-form/Zend/Form/Element/Number.phpF��AQF��&lt;��s�������?���vendor/zendframework/zend-form/Zend/Form/Annotation/Exclude.php9���AQ9���n����������?���vendor/zendframework/zend-form/Zend/Form/Annotation/Options.php����AQ����׆���������G���vendor/zendframework/zend-form/Zend/Form/Annotation/ValidationGroup.php����AQ�����4ys�������=���vendor/zendframework/zend-form/Zend/Form/Annotation/Input.php����AQ����Ա�f�������&lt;���vendor/zendframework/zend-form/Zend/Form/Annotation/Type.php����AQ�������n�������&lt;���vendor/zendframework/zend-form/Zend/Form/Annotation/Name.php����AQ�����"�@�������S���vendor/zendframework/zend-form/Zend/Form/Annotation/AbstractAnnotationsListener.php���AQ���܃A�������C���vendor/zendframework/zend-form/Zend/Form/Annotation/InputFilter.php����AQ������U�������B���vendor/zendframework/zend-form/Zend/Form/Annotation/AllowEmpty.php���AQ����p&amp;��������B���vendor/zendframework/zend-form/Zend/Form/Annotation/Attributes.php����AQ�����z�ɶ������O���vendor/zendframework/zend-form/Zend/Form/Annotation/FormAnnotationsListener.php���AQ���c�L�������O���vendor/zendframework/zend-form/Zend/Form/Annotation/AbstractArrayAnnotation.php���AQ�����,��������&gt;���vendor/zendframework/zend-form/Zend/Form/Annotation/Object.php����AQ������r϶������P���vendor/zendframework/zend-form/Zend/Form/Annotation/AbstractStringAnnotation.php���AQ����GW�������I���vendor/zendframework/zend-form/Zend/Form/Annotation/AnnotationBuilder.php���AQ���8����������D���vendor/zendframework/zend-form/Zend/Form/Annotation/ErrorMessage.php����AQ������P��������W���vendor/zendframework/zend-form/Zend/Form/Annotation/AbstractArrayOrStringAnnotation.php���AQ����Q�=�������F���vendor/zendframework/zend-form/Zend/Form/Annotation/ComposedObject.php����AQ����:É�������A���vendor/zendframework/zend-form/Zend/Form/Annotation/Validator.php����AQ����徛Ŷ������@���vendor/zendframework/zend-form/Zend/Form/Annotation/Required.php���AQ�����y��������@���vendor/zendframework/zend-form/Zend/Form/Annotation/Hydrator.php����AQ�����Q*c�������R���vendor/zendframework/zend-form/Zend/Form/Annotation/ElementAnnotationsListener.phpY��AQY�����ʶ������&gt;���vendor/zendframework/zend-form/Zend/Form/Annotation/Filter.php����AQ������i6�������=���vendor/zendframework/zend-form/Zend/Form/Annotation/Flags.php����AQ����c�T�������4���vendor/zendframework/zend-form/Zend/Form/Factory.php,!��AQ,!����h��������=���vendor/zendframework/zend-form/Zend/Form/ElementInterface.phpj��AQj���%�&gt;�������I���vendor/zendframework/zend-form/Zend/Form/ElementPrepareAwareInterface.php|���AQ|���0Z&lt;o�������6���vendor/zendframework/zend-text/Zend/Text/MultiByte.php���AQ���&gt;OVQ�������:���vendor/zendframework/zend-text/Zend/Text/Figlet/Figlet.php�A��AQ�A���ɥW�������V���vendor/zendframework/zend-text/Zend/Text/Figlet/Exception/InvalidArgumentException.php����AQ�������R�������V���vendor/zendframework/zend-text/Zend/Text/Figlet/Exception/UnexpectedValueException.php����AQ������
�������P���vendor/zendframework/zend-text/Zend/Text/Figlet/Exception/ExceptionInterface.php����AQ�����yf�������N���vendor/zendframework/zend-text/Zend/Text/Figlet/Exception/RuntimeException.php����AQ����\����������K���vendor/zendframework/zend-text/Zend/Text/Exception/OutOfBoundsException.php����AQ�����1lɶ������O���vendor/zendframework/zend-text/Zend/Text/Exception/InvalidArgumentException.php����AQ������
�������H���vendor/zendframework/zend-text/Zend/Text/Exception/OverflowException.php����AQ����b���������O���vendor/zendframework/zend-text/Zend/Text/Exception/UnexpectedValueException.php����AQ����j=���������I���vendor/zendframework/zend-text/Zend/Text/Exception/ExceptionInterface.phpF���AQF����g��������G���vendor/zendframework/zend-text/Zend/Text/Exception/RuntimeException.phpx���AQx���a͕�������Q���vendor/zendframework/zend-text/Zend/Text/Table/Exception/OutOfBoundsException.php����AQ�����p�E�������U���vendor/zendframework/zend-text/Zend/Text/Table/Exception/InvalidArgumentException.php����AQ������bg�������N���vendor/zendframework/zend-text/Zend/Text/Table/Exception/OverflowException.php����AQ����A��̶������V���vendor/zendframework/zend-text/Zend/Text/Table/Exception/InvalidDecoratorException.php����AQ�����D�ڶ������U���vendor/zendframework/zend-text/Zend/Text/Table/Exception/UnexpectedValueException.php����AQ��������������O���vendor/zendframework/zend-text/Zend/Text/Table/Exception/ExceptionInterface.php����AQ����ʡ��������9���vendor/zendframework/zend-text/Zend/Text/Table/Column.phpy
��AQy
���Zb[�������C���vendor/zendframework/zend-text/Zend/Text/Table/DecoratorManager.php���AQ���Y�#a�������D���vendor/zendframework/zend-text/Zend/Text/Table/Decorator/Unicode.phpa��AQa��24�D�������O���vendor/zendframework/zend-text/Zend/Text/Table/Decorator/DecoratorInterface.php���AQ��������������B���vendor/zendframework/zend-text/Zend/Text/Table/Decorator/Ascii.php���AQ�����u��������B���vendor/zendframework/zend-text/Zend/Text/Table/Decorator/Blank.php���AQ���I\^��������8���vendor/zendframework/zend-text/Zend/Text/Table/Table.php#��AQ#��5�q϶������6���vendor/zendframework/zend-text/Zend/Text/Table/Row.php	��AQ	���pJ��������+���vendor/zendframework/zend-di/Zend/Di/Di.php�@��AQ�@���0��������/���vendor/zendframework/zend-di/Zend/Di/Config.php���AQ������������7���vendor/zendframework/zend-di/Zend/Di/ServiceLocator.php���AQ������d�������E���vendor/zendframework/zend-di/Zend/Di/DependencyInjectionInterface.php����AQ����d����������K���vendor/zendframework/zend-di/Zend/Di/Exception/MissingPropertyException.php����AQ����N���������K���vendor/zendframework/zend-di/Zend/Di/Exception/InvalidCallbackException.phph���AQh���sw���������L���vendor/zendframework/zend-di/Zend/Di/Exception/InvalidParamNameException.phpi���AQi���+d
h�������N���vendor/zendframework/zend-di/Zend/Di/Exception/CircularDependencyException.php����AQ����K|�{�������K���vendor/zendframework/zend-di/Zend/Di/Exception/InvalidArgumentException.php����AQ�����Cd�������N���vendor/zendframework/zend-di/Zend/Di/Exception/UndefinedReferenceException.php����AQ������=��������K���vendor/zendframework/zend-di/Zend/Di/Exception/InvalidPositionException.phph���AQh�����Aض������E���vendor/zendframework/zend-di/Zend/Di/Exception/ExceptionInterface.phpE���AQE����fa�������I���vendor/zendframework/zend-di/Zend/Di/Exception/ClassNotFoundException.php����AQ����iȳ��������C���vendor/zendframework/zend-di/Zend/Di/Exception/RuntimeException.phpw���AQw�����B�������I���vendor/zendframework/zend-di/Zend/Di/Definition/IntrospectionStrategy.phpF��AQF��
�)ض������F���vendor/zendframework/zend-di/Zend/Di/Definition/CompilerDefinition.php���AQ�����@��������A���vendor/zendframework/zend-di/Zend/Di/Definition/PartialMarker.phpA���AQA����I��������D���vendor/zendframework/zend-di/Zend/Di/Definition/Builder/PhpClass.php.��AQ.���
��������K���vendor/zendframework/zend-di/Zend/Di/Definition/Builder/InjectionMethod.php���AQ���LY���������C���vendor/zendframework/zend-di/Zend/Di/Definition/ArrayDefinition.php;��AQ;���t���������G���vendor/zendframework/zend-di/Zend/Di/Definition/DefinitionInterface.php���AQ�����
��������E���vendor/zendframework/zend-di/Zend/Di/Definition/Annotation/Inject.php����AQ�������v�������K���vendor/zendframework/zend-di/Zend/Di/Definition/Annotation/Instantiator.php����AQ������[�������E���vendor/zendframework/zend-di/Zend/Di/Definition/BuilderDefinition.php���AQ����VY�������E���vendor/zendframework/zend-di/Zend/Di/Definition/RuntimeDefinition.phpw��AQw���+�Z�������C���vendor/zendframework/zend-di/Zend/Di/Definition/ClassDefinition.php.
��AQ.
������������@���vendor/zendframework/zend-di/Zend/Di/ServiceLocatorInterface.php���AQ����l&amp;��������7���vendor/zendframework/zend-di/Zend/Di/DefinitionList.php���AQ����l��������O���vendor/zendframework/zend-di/Zend/Di/ServiceLocator/DependencyInjectorProxy.php���AQ����ʟ϶������I���vendor/zendframework/zend-di/Zend/Di/ServiceLocator/GeneratorInstance.php���AQ���~`s4�������A���vendor/zendframework/zend-di/Zend/Di/ServiceLocator/Generator.php*��AQ*��i����������9���vendor/zendframework/zend-di/Zend/Di/LocatorInterface.phpn���AQn���U�֤�������8���vendor/zendframework/zend-di/Zend/Di/InstanceManager.php���AQ��������������8���vendor/zendframework/zend-di/Zend/Di/Display/Console.phpF
��AQF
��ל� �������H���vendor/zendframework/zend-console/Zend/Console/Charset/AsciiExtended.php~��AQ~���6ц�������D���vendor/zendframework/zend-console/Zend/Console/Charset/Utf8Heavy.php��AQ�����&amp;�������@���vendor/zendframework/zend-console/Zend/Console/Charset/DECSG.php���AQ����8�y�������K���vendor/zendframework/zend-console/Zend/Console/Charset/CharsetInterface.phpF���AQF���I�u�������?���vendor/zendframework/zend-console/Zend/Console/Charset/Utf8.php\��AQ\��n#.��������@���vendor/zendframework/zend-console/Zend/Console/Charset/Ascii.php+��AQ+����-7�������U���vendor/zendframework/zend-console/Zend/Console/Exception/InvalidArgumentException.php����AQ�����i�S�������O���vendor/zendframework/zend-console/Zend/Console/Exception/ExceptionInterface.phpJ���AQJ���Y�Y�������M���vendor/zendframework/zend-console/Zend/Console/Exception/RuntimeException.php;��AQ;����]ڶ������S���vendor/zendframework/zend-console/Zend/Console/Exception/BadMethodCallException.php����AQ�������������H���vendor/zendframework/zend-console/Zend/Console/Prompt/AbstractPrompt.php���AQ���&lt;��b�������&gt;���vendor/zendframework/zend-console/Zend/Console/Prompt/Char.php
��AQ
���]:v�������A���vendor/zendframework/zend-console/Zend/Console/Prompt/Confirm.php���AQ���!g�Q�������I���vendor/zendframework/zend-console/Zend/Console/Prompt/PromptInterface.php��AQ���2;O�������&gt;���vendor/zendframework/zend-console/Zend/Console/Prompt/Line.php^��AQ^��6l�[�������@���vendor/zendframework/zend-console/Zend/Console/Prompt/Select.php���AQ���ӑ�6�������@���vendor/zendframework/zend-console/Zend/Console/Prompt/Number.php	��AQ	���R�Զ������;���vendor/zendframework/zend-console/Zend/Console/Response.php���AQ����t0�������I���vendor/zendframework/zend-console/Zend/Console/Adapter/WindowsAnsicon.php�
��AQ�
��"�~�������K���vendor/zendframework/zend-console/Zend/Console/Adapter/AdapterInterface.phpq��AQq���9��������B���vendor/zendframework/zend-console/Zend/Console/Adapter/Virtual.php���AQ����F�h�������@���vendor/zendframework/zend-console/Zend/Console/Adapter/Posix.php|��AQ|��n,��������J���vendor/zendframework/zend-console/Zend/Console/Adapter/AbstractAdapter.php���AQ����ڀo�������B���vendor/zendframework/zend-console/Zend/Console/Adapter/Windows.php���AQ����V�H�������A���vendor/zendframework/zend-console/Zend/Console/ColorInterface.php���AQ���|:��������9���vendor/zendframework/zend-console/Zend/Console/Getopt.phpp5��AQp5��&gt;�U�������A���vendor/zendframework/zend-console/Zend/Console/Color/Xterm256.php��AQ���B�
�������:���vendor/zendframework/zend-console/Zend/Console/Console.php�	��AQ�	���乶������:���vendor/zendframework/zend-console/Zend/Console/Request.phpG��AQG���T�s�������O���vendor/zendframework/zend-eventmanager/Zend/EventManager/ResponseCollection.php��AQ��~�T�������_���vendor/zendframework/zend-eventmanager/Zend/EventManager/Exception/InvalidCallbackException.php����AQ����@֏¶������V���vendor/zendframework/zend-eventmanager/Zend/EventManager/Exception/DomainException.php���AQ���ų1��������_���vendor/zendframework/zend-eventmanager/Zend/EventManager/Exception/InvalidArgumentException.php����AQ�����xh�������Y���vendor/zendframework/zend-eventmanager/Zend/EventManager/Exception/ExceptionInterface.phpO���AQO����q�!�������S���vendor/zendframework/zend-eventmanager/Zend/EventManager/Filter/FilterInterface.php~��AQ~���8E��������R���vendor/zendframework/zend-eventmanager/Zend/EventManager/Filter/FilterIterator.php���AQ���Gӓo�������]���vendor/zendframework/zend-eventmanager/Zend/EventManager/SharedEventManagerAwareInterface.php����AQ����W�Ԧ�������W���vendor/zendframework/zend-eventmanager/Zend/EventManager/EventManagerAwareInterface.php����AQ����w϶������B���vendor/zendframework/zend-eventmanager/Zend/EventManager/Event.php���AQ���MRH�������S���vendor/zendframework/zend-eventmanager/Zend/EventManager/EventsCapableInterface.phpl���AQl��������������X���vendor/zendframework/zend-eventmanager/Zend/EventManager/SharedEventManagerInterface.php���AQ���p�ܢ�������O���vendor/zendframework/zend-eventmanager/Zend/EventManager/StaticEventManager.phpd��AQd��T��j�������O���vendor/zendframework/zend-eventmanager/Zend/EventManager/SharedEventManager.php���AQ���#Q*)�������S���vendor/zendframework/zend-eventmanager/Zend/EventManager/EventManagerAwareTrait.php����AQ��������������I���vendor/zendframework/zend-eventmanager/Zend/EventManager/EventManager.php:��AQ:��'M"�������R���vendor/zendframework/zend-eventmanager/Zend/EventManager/EventManagerInterface.phpY��AQY�����϶������_���vendor/zendframework/zend-eventmanager/Zend/EventManager/SharedEventAggregateAwareInterface.php���AQ�����	�������H���vendor/zendframework/zend-eventmanager/Zend/EventManager/FilterChain.php%��AQ%��|�H�������K���vendor/zendframework/zend-eventmanager/Zend/EventManager/ProvidesEvents.php&amp;��AQ&amp;��֮i�������O���vendor/zendframework/zend-eventmanager/Zend/EventManager/GlobalEventManager.php��AQ��p�f�������K���vendor/zendframework/zend-eventmanager/Zend/EventManager/EventInterface.php���AQ���FF�2�������]���vendor/zendframework/zend-eventmanager/Zend/EventManager/SharedListenerAggregateInterface.php����AQ����pG0ɶ������W���vendor/zendframework/zend-eventmanager/Zend/EventManager/ListenerAggregateInterface.php����AQ�����P���������7���vendor/zendframework/zend-config/Zend/Config/Config.phpQ
��AQQ
���s?
�������S���vendor/zendframework/zend-config/Zend/Config/Exception/InvalidArgumentException.php����AQ����7c`�������M���vendor/zendframework/zend-config/Zend/Config/Exception/ExceptionInterface.phpH���AQH������������K���vendor/zendframework/zend-config/Zend/Config/Exception/RuntimeException.phpz���AQz������B�������F���vendor/zendframework/zend-config/Zend/Config/Writer/AbstractWriter.phpd��AQd���e�N�������&lt;���vendor/zendframework/zend-config/Zend/Config/Writer/Yaml.php���AQ���,DF��������&lt;���vendor/zendframework/zend-config/Zend/Config/Writer/Json.php����AQ������`�������;���vendor/zendframework/zend-config/Zend/Config/Writer/Xml.php���AQ���
A���������G���vendor/zendframework/zend-config/Zend/Config/Writer/WriterInterface.php����AQ�������&gt;�������@���vendor/zendframework/zend-config/Zend/Config/Writer/PhpArray.php����AQ����9��4�������;���vendor/zendframework/zend-config/Zend/Config/Writer/Ini.php���AQ���S J��������&lt;���vendor/zendframework/zend-config/Zend/Config/Reader/Yaml.php0��AQ0��y�
�������&lt;���vendor/zendframework/zend-config/Zend/Config/Reader/Json.php���AQ����ꪶ������;���vendor/zendframework/zend-config/Zend/Config/Reader/Xml.php&lt;
��AQ&lt;
���Q���������G���vendor/zendframework/zend-config/Zend/Config/Reader/ReaderInterface.php����AQ�����򎮶������;���vendor/zendframework/zend-config/Zend/Config/Reader/Ini.php���AQ���Å
8�������D���vendor/zendframework/zend-config/Zend/Config/ReaderPluginManager.phpx��AQx��*66�������@���vendor/zendframework/zend-config/Zend/Config/Processor/Token.php�	��AQ�	��^�'K�������C���vendor/zendframework/zend-config/Zend/Config/Processor/Constant.php��AQ���?Mض������@���vendor/zendframework/zend-config/Zend/Config/Processor/Queue.php!��AQ!��ZZȸ�������M���vendor/zendframework/zend-config/Zend/Config/Processor/ProcessorInterface.php����AQ����J�,��������E���vendor/zendframework/zend-config/Zend/Config/Processor/Translator.php���AQ�����4�������A���vendor/zendframework/zend-config/Zend/Config/Processor/Filter.phpE��AQE����N{�������8���vendor/zendframework/zend-config/Zend/Config/Factory.php���AQ����O�$�������D���vendor/zendframework/zend-config/Zend/Config/WriterPluginManager.php���AQ���G/�|�������1���vendor/zendframework/zend-uri/Zend/Uri/Mailto.phpq��AQq����� �������L���vendor/zendframework/zend-uri/Zend/Uri/Exception/InvalidUriPartException.phpv��AQv���R�������M���vendor/zendframework/zend-uri/Zend/Uri/Exception/InvalidArgumentException.php����AQ������iK�������H���vendor/zendframework/zend-uri/Zend/Uri/Exception/InvalidUriException.php����AQ��������������G���vendor/zendframework/zend-uri/Zend/Uri/Exception/ExceptionInterface.phpE���AQE���.`��������.���vendor/zendframework/zend-uri/Zend/Uri/Uri.php�;��AQ�;�������������/���vendor/zendframework/zend-uri/Zend/Uri/Http.php���AQ���^~���������/���vendor/zendframework/zend-uri/Zend/Uri/File.php���AQ������b�������7���vendor/zendframework/zend-uri/Zend/Uri/UriInterface.php9��AQ9��$^0��������5���vendor/zendframework/zend-uri/Zend/Uri/UriFactory.phpx��AQx��
�"�������;���vendor/zendframework/zend-validator/Zend/Validator/Isbn.php=��AQ=����+��������?���vendor/zendframework/zend-validator/Zend/Validator/NotEmpty.phpF��AQF����C�������^���vendor/zendframework/zend-validator/Zend/Validator/Exception/InvalidMagicMimeFileException.phps���AQs����?�1�������Y���vendor/zendframework/zend-validator/Zend/Validator/Exception/InvalidArgumentException.php����AQ����f�+��������S���vendor/zendframework/zend-validator/Zend/Validator/Exception/ExceptionInterface.phpK���AQK����Ȏb�������Q���vendor/zendframework/zend-validator/Zend/Validator/Exception/RuntimeException.php}���AQ}�����햶������W���vendor/zendframework/zend-validator/Zend/Validator/Exception/BadMethodCallException.php����AQ������t
�������\���vendor/zendframework/zend-validator/Zend/Validator/Exception/ExtensionNotLoadedException.phpi���AQi������������9���vendor/zendframework/zend-validator/Zend/Validator/Ip.php���AQ����ɜ�������;���vendor/zendframework/zend-validator/Zend/Validator/Csrf.php���AQ����v��������&gt;���vendor/zendframework/zend-validator/Zend/Validator/InArray.php
��AQ
�����3�������?���vendor/zendframework/zend-validator/Zend/Validator/Callback.php���AQ���wt"��������&gt;���vendor/zendframework/zend-validator/Zend/Validator/Between.phpd��AQd��4�N#�������G���vendor/zendframework/zend-validator/Zend/Validator/Sitemap/Priority.php���AQ����Ÿ��������I���vendor/zendframework/zend-validator/Zend/Validator/Sitemap/Changefreq.php���AQ���ߋ&gt;ֶ������B���vendor/zendframework/zend-validator/Zend/Validator/Sitemap/Loc.phpr��AQr��j^E;�������F���vendor/zendframework/zend-validator/Zend/Validator/Sitemap/Lastmod.phpi��AQi���@?Զ������;���vendor/zendframework/zend-validator/Zend/Validator/Step.phpe��AQe��T��=�������:���vendor/zendframework/zend-validator/Zend/Validator/Uri.php�
��AQ�
���s\�������E���vendor/zendframework/zend-validator/Zend/Validator/ValidatorChain.php[
��AQ[
��)�ً�������?���vendor/zendframework/zend-validator/Zend/Validator/Hostname.php�P��AQ�P���Q���������;���vendor/zendframework/zend-validator/Zend/Validator/Date.php,��AQ,����	��������I���vendor/zendframework/zend-validator/Zend/Validator/ValidatorInterface.php����AQ���������������C���vendor/zendframework/zend-validator/Zend/Validator/StringLength.php�
��AQ�
�����ƶ������:���vendor/zendframework/zend-validator/Zend/Validator/Hex.php��AQ���(}�������@���vendor/zendframework/zend-validator/Zend/Validator/Identical.php���AQ������9�������&gt;���vendor/zendframework/zend-validator/Zend/Validator/Barcode.php��AQ���G-��������F���vendor/zendframework/zend-validator/Zend/Validator/StaticValidator.php���AQ���	'W�������&lt;���vendor/zendframework/zend-validator/Zend/Validator/Regex.php���AQ������̶������;���vendor/zendframework/zend-validator/Zend/Validator/Iban.phpd��AQd����F��������&gt;���vendor/zendframework/zend-validator/Zend/Validator/Explode.php���AQ����+1X�������?���vendor/zendframework/zend-validator/Zend/Validator/DateStep.phpt��AQt����� �������?���vendor/zendframework/zend-validator/Zend/Validator/LessThan.phpR��AQR��p����������A���vendor/zendframework/zend-validator/Zend/Validator/File/Crc32.phpZ��AQZ��tA&amp;��������K���vendor/zendframework/zend-validator/Zend/Validator/File/ExcludeMimeType.php'��AQ'��}%W��������E���vendor/zendframework/zend-validator/Zend/Validator/File/Extension.php}��AQ}������������A���vendor/zendframework/zend-validator/Zend/Validator/File/Count.php���AQ���C;e��������B���vendor/zendframework/zend-validator/Zend/Validator/File/Upload.php���AQ����}y�������D���vendor/zendframework/zend-validator/Zend/Validator/File/MimeType.php���AQ���:0���������?���vendor/zendframework/zend-validator/Zend/Validator/File/Md5.phpE��AQE��sr*�������C���vendor/zendframework/zend-validator/Zend/Validator/File/IsImage.phpE��AQE��c[,��������B���vendor/zendframework/zend-validator/Zend/Validator/File/Exists.php�
��AQ�
��G&lt;!a�������E���vendor/zendframework/zend-validator/Zend/Validator/File/FilesSize.phpx
��AQx
��PX郶������H���vendor/zendframework/zend-validator/Zend/Validator/File/IsCompressed.php��AQ��Ω��������@���vendor/zendframework/zend-validator/Zend/Validator/File/Sha1.phpO��AQO����{�������E���vendor/zendframework/zend-validator/Zend/Validator/File/ImageSize.php���AQ����hӓ�������@���vendor/zendframework/zend-validator/Zend/Validator/File/Hash.php
��AQ
�������������F���vendor/zendframework/zend-validator/Zend/Validator/File/UploadFile.php�	��AQ�	��Jk��������E���vendor/zendframework/zend-validator/Zend/Validator/File/WordCount.php��AQ����:Ҷ������E���vendor/zendframework/zend-validator/Zend/Validator/File/NotExists.php���AQ�����&gt;M�������L���vendor/zendframework/zend-validator/Zend/Validator/File/ExcludeExtension.phpJ��AQJ�������������@���vendor/zendframework/zend-validator/Zend/Validator/File/Size.php���AQ����{���������C���vendor/zendframework/zend-validator/Zend/Validator/Hostname/Com.phpG0��AQG0��K��D�������B���vendor/zendframework/zend-validator/Zend/Validator/Hostname/Jp.php/���AQ/���RƏS�������B���vendor/zendframework/zend-validator/Zend/Validator/Hostname/Cn.php���AQ����KI�������C���vendor/zendframework/zend-validator/Zend/Validator/Hostname/Biz.php�c�AQ�c�qR|��������A���vendor/zendframework/zend-validator/Zend/Validator/CreditCard.phpv��AQv���˅'�������B���vendor/zendframework/zend-validator/Zend/Validator/GreaterThan.phps��AQs������������D���vendor/zendframework/zend-validator/Zend/Validator/Db/AbstractDb.php���AQ����S�m�������H���vendor/zendframework/zend-validator/Zend/Validator/Db/NoRecordExists.php���AQ��������������F���vendor/zendframework/zend-validator/Zend/Validator/Db/RecordExists.php���AQ���e�ϝ�������C���vendor/zendframework/zend-validator/Zend/Validator/IsInstanceOf.php6��AQ6���Dl��������C���vendor/zendframework/zend-validator/Zend/Validator/EmailAddress.php���AQ���/!�X�������=���vendor/zendframework/zend-validator/Zend/Validator/Digits.php���AQ���Fk�������M���vendor/zendframework/zend-validator/Zend/Validator/ValidatorPluginManager.php&amp;��AQ&amp;��H�w��������E���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Gtin14.php����AQ������CH�������C���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Upce.php���AQ�����I��������E���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Code25.php����AQ������Z�������H���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Code39ext.php����AQ����4�F�������E���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Code39.php	��AQ	����[��������E���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Planet.php����AQ�����K�������O���vendor/zendframework/zend-validator/Zend/Validator/Barcode/AdapterInterface.phpO��AQO��T�4��������C���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Ean2.php����AQ�����΍�������F���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Postnet.php����AQ����h2�x�������C���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Issn.php���AQ���p����������D���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Itf14.php����AQ������6\�������C���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Upca.php����AQ����g/���������F���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Code128.php�!��AQ�!��sE��������C���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Sscc.php����AQ���������������H���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Royalmail.php���AQ�������������P���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Code25interleaved.php����AQ������4�������C���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Ean5.php����AQ����؀�a�������D���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Ean13.php����AQ����;����������D���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Ean18.php����AQ������&amp;��������N���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Intelligentmail.php����AQ����W��!�������D���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Ean14.php����AQ������F�������E���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Gtin13.php����AQ����P
V��������H���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Identcode.php3��AQ3����]]�������E���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Gtin12.php����AQ������,��������E���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Code93.php���AQ���`����������D���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Ean12.php����AQ�����F���������N���vendor/zendframework/zend-validator/Zend/Validator/Barcode/AbstractAdapter.php�
��AQ�
���;¶������G���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Leitcode.php����AQ����ZQ�E�������H���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Code93ext.php����AQ�����[���������C���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Ean8.php~��AQ~��50[&lt;�������F���vendor/zendframework/zend-validator/Zend/Validator/Barcode/Codabar.phpX��AQX��Z�AO�������H���vendor/zendframework/zend-validator/Zend/Validator/AbstractValidator.php���AQ���GA\{�������4���vendor/zendframework/zend-http/Zend/Http/Headers.php*��AQ*�����m�������O���vendor/zendframework/zend-http/Zend/Http/Exception/InvalidArgumentException.php����AQ������?��������I���vendor/zendframework/zend-http/Zend/Http/Exception/ExceptionInterface.phpG���AQG����d��������G���vendor/zendframework/zend-http/Zend/Http/Exception/RuntimeException.phpy���AQy��������������J���vendor/zendframework/zend-http/Zend/Http/Exception/OutOfRangeException.php~���AQ~���T`/�������&lt;���vendor/zendframework/zend-http/Zend/Http/AbstractMessage.php���AQ��������������3���vendor/zendframework/zend-http/Zend/Http/Client.php5P��AQ5P���
���������9���vendor/zendframework/zend-http/Zend/Http/ClientStatic.php���AQ����I~϶������5���vendor/zendframework/zend-http/Zend/Http/Response.php���AQ�������������9���vendor/zendframework/zend-http/Zend/Http/HeaderLoader.phpv
��AQv
���,��������4���vendor/zendframework/zend-http/Zend/Http/Cookies.php��AQ������������&lt;���vendor/zendframework/zend-http/Zend/Http/Response/Stream.php���AQ���	Au�������V���vendor/zendframework/zend-http/Zend/Http/Client/Exception/InvalidArgumentException.php����AQ����`ԕ-�������P���vendor/zendframework/zend-http/Zend/Http/Client/Exception/ExceptionInterface.php����AQ����^Z�������N���vendor/zendframework/zend-http/Zend/Http/Client/Exception/RuntimeException.php����AQ�����6A�������Q���vendor/zendframework/zend-http/Zend/Http/Client/Exception/OutOfRangeException.php����AQ����x��������]���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Exception/InitializationException.phpo���AQo�����|
�������V���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Exception/TimeoutException.php����AQ�����j,ݶ������^���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Exception/InvalidArgumentException.php����AQ����Wf;��������X���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Exception/ExceptionInterface.php����AQ����zw&lt;�������V���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Exception/RuntimeException.php����AQ����}��Ƕ������Y���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Exception/OutOfRangeException.php����AQ����o
��������B���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Socket.php.*��AQ.*���(�{�������A���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Proxy.php���AQ���ۈKn�������L���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/AdapterInterface.php@��AQ@���1��������@���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Curl.phpC!��AQC!��e��6�������@���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/Test.php���AQ�����-��������K���vendor/zendframework/zend-http/Zend/Http/Client/Adapter/StreamInterface.phps���AQs����5I/�������;���vendor/zendframework/zend-http/Zend/Http/Client/Cookies.php���AQ����f&amp;��������I���vendor/zendframework/zend-http/Zend/Http/PhpEnvironment/RemoteAddress.phpR��AQR���(�G�������D���vendor/zendframework/zend-http/Zend/Http/PhpEnvironment/Response.php���AQ����t���������C���vendor/zendframework/zend-http/Zend/Http/PhpEnvironment/Request.php���AQ���η\R�������4���vendor/zendframework/zend-http/Zend/Http/Request.php���AQ���`Cƶ������;���vendor/zendframework/zend-http/Zend/Http/Header/Referer.php��AQ��;0��������&gt;���vendor/zendframework/zend-http/Zend/Http/Header/ContentMD5.phpX��AQX���ux��������;���vendor/zendframework/zend-http/Zend/Http/Header/Upgrade.phpE��AQE���̀�������^���vendor/zendframework/zend-http/Zend/Http/Header/Accept/FieldValuePart/AcceptFieldValuePart.phpb��AQb��+��b�������_���vendor/zendframework/zend-http/Zend/Http/Header/Accept/FieldValuePart/CharsetFieldValuePart.php����AQ�������߶������`���vendor/zendframework/zend-http/Zend/Http/Header/Accept/FieldValuePart/EncodingFieldValuePart.php����AQ�������]�������`���vendor/zendframework/zend-http/Zend/Http/Header/Accept/FieldValuePart/LanguageFieldValuePart.phpc��AQc����n׶������`���vendor/zendframework/zend-http/Zend/Http/Header/Accept/FieldValuePart/AbstractFieldValuePart.php���AQ��������������@���vendor/zendframework/zend-http/Zend/Http/Header/CacheControl.phpN
��AQN
����Q�������;���vendor/zendframework/zend-http/Zend/Http/Header/Warning.phpE��AQE���3��������8���vendor/zendframework/zend-http/Zend/Http/Header/Host.php6��AQ6���rLd�������C���vendor/zendframework/zend-http/Zend/Http/Header/ContentEncoding.phpq��AQq���v���������V���vendor/zendframework/zend-http/Zend/Http/Header/Exception/InvalidArgumentException.php����AQ����Z�~
�������P���vendor/zendframework/zend-http/Zend/Http/Header/Exception/ExceptionInterface.php����AQ����)��.�������N���vendor/zendframework/zend-http/Zend/Http/Header/Exception/RuntimeException.php����AQ�����$��������D���vendor/zendframework/zend-http/Zend/Http/Header/TransferEncoding.phpv��AQv���n�)�������@���vendor/zendframework/zend-http/Zend/Http/Header/AcceptRanges.php��AQ������������;���vendor/zendframework/zend-http/Zend/Http/Header/Trailer.phpE��AQE�������������:���vendor/zendframework/zend-http/Zend/Http/Header/Cookie.php���AQ���s�Ŝ�������D���vendor/zendframework/zend-http/Zend/Http/Header/AbstractLocation.php��AQ����
��������&gt;���vendor/zendframework/zend-http/Zend/Http/Header/RetryAfter.php���AQ������L�������?���vendor/zendframework/zend-http/Zend/Http/Header/ContentType.php]��AQ]�����������B���vendor/zendframework/zend-http/Zend/Http/Header/AcceptEncoding.php���AQ����윔�������A���vendor/zendframework/zend-http/Zend/Http/Header/ContentLength.phpg��AQg���N��������C���vendor/zendframework/zend-http/Zend/Http/Header/WWWAuthenticate.php���AQ�����S��������C���vendor/zendframework/zend-http/Zend/Http/Header/IfModifiedSince.php����AQ�����TBN�������K���vendor/zendframework/zend-http/Zend/Http/Header/ContentTransferEncoding.php���AQ����Y�F�������8���vendor/zendframework/zend-http/Zend/Http/Header/Date.phpy���AQy���N�赶������9���vendor/zendframework/zend-http/Zend/Http/Header/Allow.php���AQ�����߶������A���vendor/zendframework/zend-http/Zend/Http/Header/Authorization.phpc��AQc����q��������=���vendor/zendframework/zend-http/Zend/Http/Header/KeepAlive.phpS��AQS���@�U�������=���vendor/zendframework/zend-http/Zend/Http/Header/SetCookie.php)��AQ)��x�D�������C���vendor/zendframework/zend-http/Zend/Http/Header/ContentLanguage.phpq��AQq��
1��������=���vendor/zendframework/zend-http/Zend/Http/Header/UserAgent.php{��AQ{�������������F���vendor/zendframework/zend-http/Zend/Http/Header/AuthenticationInfo.php���AQ�������������@���vendor/zendframework/zend-http/Zend/Http/Header/LastModified.php����AQ������������B���vendor/zendframework/zend-http/Zend/Http/Header/AbstractAccept.php��AQ����¶������@���vendor/zendframework/zend-http/Zend/Http/Header/AbstractDate.php|
��AQ|
����5$�������&lt;���vendor/zendframework/zend-http/Zend/Http/Header/Location.php����AQ������$$�������;���vendor/zendframework/zend-http/Zend/Http/Header/IfMatch.phpI��AQI���YI��������:���vendor/zendframework/zend-http/Zend/Http/Header/Accept.php+��AQ+���~���������9���vendor/zendframework/zend-http/Zend/Http/Header/Range.php;��AQ;������������C���vendor/zendframework/zend-http/Zend/Http/Header/ContentLocation.php����AQ�������$�������:���vendor/zendframework/zend-http/Zend/Http/Header/Expect.php@��AQ@��H���������F���vendor/zendframework/zend-http/Zend/Http/Header/ProxyAuthorization.php���AQ�����(�������;���vendor/zendframework/zend-http/Zend/Http/Header/IfRange.phpI��AQI��x���������&gt;���vendor/zendframework/zend-http/Zend/Http/Header/Connection.php&lt;��AQ&lt;��~M�p�������F���vendor/zendframework/zend-http/Zend/Http/Header/ContentDisposition.php���AQ��������������7���vendor/zendframework/zend-http/Zend/Http/Header/Via.php1��AQ1���D&lt;�������;���vendor/zendframework/zend-http/Zend/Http/Header/Refresh.phpE��AQE����y��������8���vendor/zendframework/zend-http/Zend/Http/Header/From.php6��AQ6����&amp;�������:���vendor/zendframework/zend-http/Zend/Http/Header/Server.php@��AQ@���EԶ������?���vendor/zendframework/zend-http/Zend/Http/Header/IfNoneMatch.phpa��AQa���=��������E���vendor/zendframework/zend-http/Zend/Http/Header/ProxyAuthenticate.php��AQ��b#8/�������K���vendor/zendframework/zend-http/Zend/Http/Header/MultipleHeaderInterface.php����AQ����/{H�������:���vendor/zendframework/zend-http/Zend/Http/Header/Pragma.php@��AQ@��JG���������F���vendor/zendframework/zend-http/Zend/Http/Header/GenericMultiHeader.php���AQ���ʜxH�������;���vendor/zendframework/zend-http/Zend/Http/Header/Expires.php���AQ����cm�������6���vendor/zendframework/zend-http/Zend/Http/Header/TE.php,��AQ,��Ac��������B���vendor/zendframework/zend-http/Zend/Http/Header/AcceptLanguage.php���AQ������I�������E���vendor/zendframework/zend-http/Zend/Http/Header/IfUnmodifiedSince.php����AQ����;�ȭ�������?���vendor/zendframework/zend-http/Zend/Http/Header/MaxForwards.php]��AQ]��[`� �������8���vendor/zendframework/zend-http/Zend/Http/Header/Etag.php6��AQ6��6PC��������A���vendor/zendframework/zend-http/Zend/Http/Header/AcceptCharset.php���AQ���9*�F�������8���vendor/zendframework/zend-http/Zend/Http/Header/Vary.php6��AQ6��u�z��������C���vendor/zendframework/zend-http/Zend/Http/Header/HeaderInterface.php����AQ���������������A���vendor/zendframework/zend-http/Zend/Http/Header/GenericHeader.php���AQ������"�������7���vendor/zendframework/zend-http/Zend/Http/Header/Age.php?��AQ?��#�-}�������@���vendor/zendframework/zend-http/Zend/Http/Header/ContentRange.phpb��AQb��T�ﱶ������&lt;���vendor/zendframework/zend-code/Zend/Code/NameInformation.php���AQ�����sl�������O���vendor/zendframework/zend-code/Zend/Code/Exception/InvalidArgumentException.php����AQ������pU�������I���vendor/zendframework/zend-code/Zend/Code/Exception/ExceptionInterface.phpF���AQF���
�:�������G���vendor/zendframework/zend-code/Zend/Code/Exception/RuntimeException.phpx���AQx���ĩ���������M���vendor/zendframework/zend-code/Zend/Code/Exception/BadMethodCallException.php����AQ����Y��϶������K���vendor/zendframework/zend-code/Zend/Code/Annotation/AnnotationInterface.phpo���AQo�������������N���vendor/zendframework/zend-code/Zend/Code/Annotation/Parser/ParserInterface.php
��AQ
���Τ=�������V���vendor/zendframework/zend-code/Zend/Code/Annotation/Parser/GenericAnnotationParser.php���AQ���2�T�������W���vendor/zendframework/zend-code/Zend/Code/Annotation/Parser/DoctrineAnnotationParser.phpZ��AQZ���̪`�������I���vendor/zendframework/zend-code/Zend/Code/Annotation/AnnotationManager.phpJ��AQJ���2勶������L���vendor/zendframework/zend-code/Zend/Code/Annotation/AnnotationCollection.php����AQ����辛�������H���vendor/zendframework/zend-code/Zend/Code/Generator/DocBlockGenerator.php
��AQ
��h���������M���vendor/zendframework/zend-code/Zend/Code/Generator/DocBlock/Tag/ReturnTag.php���AQ����ߡ��������L���vendor/zendframework/zend-code/Zend/Code/Generator/DocBlock/Tag/ParamTag.php_��AQ_��)���������N���vendor/zendframework/zend-code/Zend/Code/Generator/DocBlock/Tag/LicenseTag.php���AQ���o��������M���vendor/zendframework/zend-code/Zend/Code/Generator/DocBlock/Tag/AuthorTag.phpx��AQx��W�NX�������C���vendor/zendframework/zend-code/Zend/Code/Generator/DocBlock/Tag.php���AQ���7��������D���vendor/zendframework/zend-code/Zend/Code/Generator/FileGenerator.php�"��AQ�"��1��5�������Y���vendor/zendframework/zend-code/Zend/Code/Generator/Exception/InvalidArgumentException.php����AQ��������������S���vendor/zendframework/zend-code/Zend/Code/Generator/Exception/ExceptionInterface.php����AQ�����&gt;!)�������Q���vendor/zendframework/zend-code/Zend/Code/Generator/Exception/RuntimeException.php����AQ������~��������E���vendor/zendframework/zend-code/Zend/Code/Generator/ValueGenerator.php���AQ�����`q�������F���vendor/zendframework/zend-code/Zend/Code/Generator/MethodGenerator.phpE��AQE��h0xy�������H���vendor/zendframework/zend-code/Zend/Code/Generator/AbstractGenerator.phpS��AQS���a�������D���vendor/zendframework/zend-code/Zend/Code/Generator/BodyGenerator.phpA��AQA��j撂�������N���vendor/zendframework/zend-code/Zend/Code/Generator/AbstractMemberGenerator.php"��AQ"��l��ض������I���vendor/zendframework/zend-code/Zend/Code/Generator/ParameterGenerator.php[��AQ[���pB�������I���vendor/zendframework/zend-code/Zend/Code/Generator/GeneratorInterface.phpc���AQc���-H,Ƕ������M���vendor/zendframework/zend-code/Zend/Code/Generator/PropertyValueGenerator.php����AQ��������������H���vendor/zendframework/zend-code/Zend/Code/Generator/PropertyGenerator.php��AQ��(w࠶������E���vendor/zendframework/zend-code/Zend/Code/Generator/ClassGenerator.php�'��AQ�'��ߞ��������L���vendor/zendframework/zend-code/Zend/Code/Generator/FileGeneratorRegistry.php4��AQ4������������H���vendor/zendframework/zend-code/Zend/Code/Scanner/DerivedClassScanner.php0��AQ0��5���������D���vendor/zendframework/zend-code/Zend/Code/Scanner/PropertyScanner.php���AQ����p	�������E���vendor/zendframework/zend-code/Zend/Code/Scanner/DirectoryScanner.phpP��AQP��ʼ|E�������A���vendor/zendframework/zend-code/Zend/Code/Scanner/ClassScanner.phpP-��AQP-���A��������D���vendor/zendframework/zend-code/Zend/Code/Scanner/DocBlockScanner.php1��AQ1�������������F���vendor/zendframework/zend-code/Zend/Code/Scanner/AnnotationScanner.php���AQ���ZT�ö������A���vendor/zendframework/zend-code/Zend/Code/Scanner/ValueScanner.php;���AQ;�����S�������D���vendor/zendframework/zend-code/Zend/Code/Scanner/FunctionScanner.php&gt;���AQ&gt;����6�������E���vendor/zendframework/zend-code/Zend/Code/Scanner/ParameterScanner.phpU��AQU���x&lt;��������G���vendor/zendframework/zend-code/Zend/Code/Scanner/CachingFileScanner.phpa��AQa��I�GѶ������N���vendor/zendframework/zend-code/Zend/Code/Scanner/AggregateDirectoryScanner.php���AQ���B�X1�������F���vendor/zendframework/zend-code/Zend/Code/Scanner/TokenArrayScanner.php*(��AQ*(��+/Γ�������9���vendor/zendframework/zend-code/Zend/Code/Scanner/Util.php=��AQ=���~��������@���vendor/zendframework/zend-code/Zend/Code/Scanner/FileScanner.php.��AQ.�����������B���vendor/zendframework/zend-code/Zend/Code/Scanner/MethodScanner.php��AQ��[4
a�������E���vendor/zendframework/zend-code/Zend/Code/Scanner/ScannerInterface.phpC���AQC����84I�������N���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/ReturnTag.php���AQ���$���������P���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/PropertyTag.php���AQ�����+��������M���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/ParamTag.php���AQ�����e�������Q���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/TagInterface.php����AQ����k�e��������O���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/LicenseTag.php���AQ�����W��������N���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/ThrowsTag.phpn��AQn�������������O���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/GenericTag.php���AQ���+�_�������\���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/PhpDocTypedTagInterface.phpv���AQv����];ܶ������N���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/MethodTag.phpO��AQO�����8�������N���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/Tag/AuthorTag.php���AQ���e 
��������K���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlock/TagManager.php���AQ���8Y�+�������K���vendor/zendframework/zend-code/Zend/Code/Reflection/ParameterReflection.php��AQ�����������Z���vendor/zendframework/zend-code/Zend/Code/Reflection/Exception/InvalidArgumentException.php����AQ������:,�������T���vendor/zendframework/zend-code/Zend/Code/Reflection/Exception/ExceptionInterface.php����AQ�����5��������R���vendor/zendframework/zend-code/Zend/Code/Reflection/Exception/RuntimeException.php����AQ����:&lt;�\�������X���vendor/zendframework/zend-code/Zend/Code/Reflection/Exception/BadMethodCallException.php����AQ����4��Ѷ������K���vendor/zendframework/zend-code/Zend/Code/Reflection/ReflectionInterface.php����AQ������=�������J���vendor/zendframework/zend-code/Zend/Code/Reflection/FunctionReflection.php���AQ����@&gt;��������J���vendor/zendframework/zend-code/Zend/Code/Reflection/DocBlockReflection.php��AQ����%�������F���vendor/zendframework/zend-code/Zend/Code/Reflection/FileReflection.php���AQ���
 ��������J���vendor/zendframework/zend-code/Zend/Code/Reflection/PropertyReflection.phpL��AQL��'&gt;&lt;׶������H���vendor/zendframework/zend-code/Zend/Code/Reflection/MethodReflection.phpn
��AQn
���N�z�������G���vendor/zendframework/zend-code/Zend/Code/Reflection/ClassReflection.phpX
��AQX
���+"�������O���vendor/zendframework/zend-file/Zend/File/Exception/InvalidArgumentException.php����AQ����C�'�������I���vendor/zendframework/zend-file/Zend/File/Exception/ExceptionInterface.phpG���AQG���D��Ͷ������G���vendor/zendframework/zend-file/Zend/File/Exception/RuntimeException.phpx���AQx�����&gt;�������M���vendor/zendframework/zend-file/Zend/File/Exception/BadMethodCallException.php����AQ��������������9���vendor/zendframework/zend-file/Zend/File/PhpClassFile.php����AQ�����nBV�������=���vendor/zendframework/zend-file/Zend/File/ClassFileLocator.phpt	��AQt	����hԶ������&gt;���vendor/zendframework/zend-file/Zend/File/Transfer/Transfer.phpn��AQn��j���������W���vendor/zendframework/zend-file/Zend/File/Transfer/Exception/PhpEnvironmentException.phpi���AQi���X?��������X���vendor/zendframework/zend-file/Zend/File/Transfer/Exception/InvalidArgumentException.php����AQ����@��|�������R���vendor/zendframework/zend-file/Zend/File/Transfer/Exception/ExceptionInterface.php����AQ����-?G�������P���vendor/zendframework/zend-file/Zend/File/Transfer/Exception/RuntimeException.php����AQ�����K��������V���vendor/zendframework/zend-file/Zend/File/Transfer/Exception/BadMethodCallException.php����AQ����)P�_�������Q���vendor/zendframework/zend-file/Zend/File/Transfer/Adapter/FilterPluginManager.php?��AQ?�������������B���vendor/zendframework/zend-file/Zend/File/Transfer/Adapter/Http.php��AQ���C3��������T���vendor/zendframework/zend-file/Zend/File/Transfer/Adapter/ValidatorPluginManager.php���AQ���&amp;��������M���vendor/zendframework/zend-file/Zend/File/Transfer/Adapter/AbstractAdapter.php�R��AQ�R���L�������i���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Exception/MissingDependencyModuleException.php����AQ�����.�������a���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Exception/InvalidArgumentException.php����AQ����ך0��������[���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Exception/ExceptionInterface.phpP���AQP���y��x�������Y���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Exception/RuntimeException.php����AQ������Zy�������]���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/RouteProviderInterface.phpt���AQt���%�;��������b���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ControllerProviderInterface.php~���AQ~�����"�������c���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/FormElementProviderInterface.php����AQ������`K�������^���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ConfigProviderInterface.phpp���AQp������ �������_���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ServiceProviderInterface.phpx���AQx������W�������c���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/DependencyIndicatorInterface.php����AQ����s1ж������\���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/InitProviderInterface.php����AQ��������������b���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/SerializerProviderInterface.php~���AQ~���8�V�������d���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ConsoleUsageProviderInterface.php����AQ����`o�������a���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/BootstrapListenerInterface.php����AQ������G�������b���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ViewHelperProviderInterface.php~���AQ~���=�r��������h���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ControllerPluginProviderInterface.php����AQ������E�������a���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ValidatorProviderInterface.php|���AQ|���}����������a���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/LocatorRegisteredInterface.phpV���AQV�����N
�������e���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/ConsoleBannerProviderInterface.php����AQ�������������b���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/AutoloaderProviderInterface.php~���AQ~����k��������^���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Feature/FilterProviderInterface.phpv���AQv����5Q̶������S���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/InitTrigger.php~��AQ~��[P��������[���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/OnBootstrapListener.phps��AQs����^�������j���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/Exception/InvalidArgumentException.php����AQ����ֽ�Ƕ������d���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/Exception/ExceptionInterface.php����AQ����&lt;�G��������b���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/Exception/RuntimeException.php����AQ�������r�������^���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ModuleResolverListener.phpQ��AQQ��pF3Ͷ������`���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ServiceListenerInterface.php`��AQ`���S���������\���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ModuleLoaderListener.php���AQ����:��������V���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ConfigListener.php���AQ����Љi�������W���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ListenerOptions.php!��AQ!��+���������Z���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/AutoloaderListener.php��AQ�����������X���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/AbstractListener.phpV��AQV���Hd��������]���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ConfigMergerInterface.php����AQ����GG��������c���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/LocatorRegistrationListener.php���AQ���B
�9�������g���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ModuleDependencyCheckerListener.php"��AQ"�������������W���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/ServiceListener.php���AQ���&amp;��)�������`���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/Listener/DefaultListenerAggregate.php4��AQ4���ηM�������J���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/ModuleEvent.php���AQ�����mǶ������L���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/ModuleManager.php���AQ����=D�������U���vendor/zendframework/zend-modulemanager/Zend/ModuleManager/ModuleManagerInterface.php[��AQ[��EZ|Ķ������:���vendor/zendframework/zend-version/Zend/Version/Version.php0��AQ0���sxu�������K���vendor/zendframework/zend-i18n/Zend/I18n/Translator/LoaderPluginManager.php���AQ����E��������L���vendor/zendframework/zend-i18n/Zend/I18n/Translator/TranslatorAwareTrait.php���AQ���?ev�������R���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Loader/FileLoaderInterface.phpz���AQz���2ş�������G���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Loader/PhpArray.phpX��AQX��3��׶������T���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Loader/RemoteLoaderInterface.php~���AQ~���Ė���������B���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Loader/Ini.php���AQ���
&gt;v��������F���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Loader/Gettext.phpD
��AQD
�������������P���vendor/zendframework/zend-i18n/Zend/I18n/Translator/TranslatorAwareInterface.php���AQ����	_�������B���vendor/zendframework/zend-i18n/Zend/I18n/Translator/TextDomain.php���AQ����HE�������B���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Translator.phpd#��AQd#���g���������P���vendor/zendframework/zend-i18n/Zend/I18n/Translator/TranslatorServiceFactory.php���AQ����uQ�������E���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Plural/Parser.php9��AQ9��E:�`�������C���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Plural/Rule.php���AQ���Q��������E���vendor/zendframework/zend-i18n/Zend/I18n/Translator/Plural/Symbol.phpy��AQy���)o�������&lt;���vendor/zendframework/zend-i18n/Zend/I18n/Validator/Alpha.php���AQ���B iʶ������&lt;���vendor/zendframework/zend-i18n/Zend/I18n/Validator/Alnum.php)��AQ)�����׶������?���vendor/zendframework/zend-i18n/Zend/I18n/Validator/PostCode.php���AQ����q'1�������:���vendor/zendframework/zend-i18n/Zend/I18n/Validator/Int.phpk��AQk����϶������&lt;���vendor/zendframework/zend-i18n/Zend/I18n/Validator/Float.phpK��AQK��&gt;F�׶������K���vendor/zendframework/zend-i18n/Zend/I18n/Exception/OutOfBoundsException.php����AQ������.�������E���vendor/zendframework/zend-i18n/Zend/I18n/Exception/ParseException.phpu���AQu����͙�������E���vendor/zendframework/zend-i18n/Zend/I18n/Exception/RangeException.phpt���AQt�����6�������O���vendor/zendframework/zend-i18n/Zend/I18n/Exception/InvalidArgumentException.php����AQ��������������I���vendor/zendframework/zend-i18n/Zend/I18n/Exception/ExceptionInterface.phpF���AQF����x�u�������G���vendor/zendframework/zend-i18n/Zend/I18n/Exception/RuntimeException.phpx���AQx���1�n��������9���vendor/zendframework/zend-i18n/Zend/I18n/Filter/Alpha.php#��AQ#���f��������B���vendor/zendframework/zend-i18n/Zend/I18n/Filter/AbstractLocale.php���AQ���&amp;w���������9���vendor/zendframework/zend-i18n/Zend/I18n/Filter/Alnum.php���AQ�����p�������@���vendor/zendframework/zend-i18n/Zend/I18n/Filter/NumberFormat.php_��AQ_����'��������C���vendor/zendframework/zend-i18n/Zend/I18n/View/Helper/DateFormat.php���AQ������������G���vendor/zendframework/zend-i18n/Zend/I18n/View/Helper/CurrencyFormat.phpD��AQD���q27�������H���vendor/zendframework/zend-i18n/Zend/I18n/View/Helper/TranslatePlural.php��AQ�������������B���vendor/zendframework/zend-i18n/Zend/I18n/View/Helper/Translate.php���AQ�����
�������Q���vendor/zendframework/zend-i18n/Zend/I18n/View/Helper/AbstractTranslatorHelper.php���AQ����
�T�������?���vendor/zendframework/zend-i18n/Zend/I18n/View/Helper/Plural.php���AQ���DUZ��������E���vendor/zendframework/zend-i18n/Zend/I18n/View/Helper/NumberFormat.php���AQ�������������&gt;���vendor/zendframework/zend-i18n/Zend/I18n/View/HelperConfig.php���AQ���ష��������:���vendor/zendframework/zend-escaper/Zend/Escaper/Escaper.phpj��AQj����_i�������U���vendor/zendframework/zend-escaper/Zend/Escaper/Exception/InvalidArgumentException.php����AQ����b�}��������O���vendor/zendframework/zend-escaper/Zend/Escaper/Exception/ExceptionInterface.phpI���AQI����Qh��������M���vendor/zendframework/zend-escaper/Zend/Escaper/Exception/RuntimeException.php|���AQ|����Q������������config/module.config.phpc��AQc����c��������*���src/ZFTool/Controller/ModuleController.php���AQ���@����������,���src/ZFTool/Controller/ClassmapController.php��AQ��pZ���������*���src/ZFTool/Controller/CreateController.phpS��AQS����=ζ������+���src/ZFTool/Controller/InstallController.php���AQ���'�ʶ������(���src/ZFTool/Controller/InfoController.php��AQ���zy�����������src/ZFTool/Model/Zf.php���AQ������@����������src/ZFTool/Model/Utility.php���AQ���h������������src/ZFTool/Model/Skeleton.php�	��AQ�	��I�!����������src/ZFTool/Module.php
��AQ
����������&lt;?php
 error_reporting(E_ALL); ini_set("display_errors", 1); $basePath = __DIR__; if (file_exists("$basePath/vendor/autoload.php")) { require_once "$basePath/vendor/autoload.php"; } else { $basePath = dirname(dirname($basePath)); chdir($basePath); if (file_exists("init_autoloader.php")) { require_once "init_autoloader.php"; } elseif (file_exists("vendor/autoload.php")) { require_once "vendor/autoload.php"; } else { echo 'Error: I cannot find the autoloader of the application.' . PHP_EOL; echo "Check if $basePath contains a valid ZF2 application." . PHP_EOL; exit(2); } } if (file_exists("$basePath/config/application.config.php")) { $appConfig = require "$basePath/config/application.config.php"; if (!isset($appConfig['modules']['ZFTool'])) { $appConfig['modules'][] = 'ZFTool'; } } else { $appConfig = array( 'modules' =&gt; array( 'ZFTool', ), 'module_listener_options' =&gt; array( 'config_glob_paths' =&gt; array( 'config/autoload/{,*.}{global,local}.php', ), 'module_paths' =&gt; array( '.', './vendor', ), ), ); } Zend\Mvc\Application::init($appConfig)-&gt;run(); &lt;?php
 class ComposerAutoloaderInit8c035fcf566dbe8cbf73bfe02e17acf3 { private static $loader; public static function loadClassLoader($class) { if ('Composer\Autoload\ClassLoader' === $class) { require __DIR__ . '/ClassLoader.php'; } } public static function getLoader() { if (null !== self::$loader) { return self::$loader; } spl_autoload_register(array('ComposerAutoloaderInit8c035fcf566dbe8cbf73bfe02e17acf3', 'loadClassLoader')); self::$loader = $loader = new \Composer\Autoload\ClassLoader(); spl_autoload_unregister(array('ComposerAutoloaderInit8c035fcf566dbe8cbf73bfe02e17acf3', 'loadClassLoader')); $vendorDir = dirname(__DIR__); $baseDir = dirname($vendorDir); $map = require __DIR__ . '/autoload_namespaces.php'; foreach ($map as $namespace =&gt; $path) { $loader-&gt;add($namespace, $path); } $classMap = require __DIR__ . '/autoload_classmap.php'; if ($classMap) { $loader-&gt;addClassMap($classMap); } $loader-&gt;register(true); require $vendorDir . '/zendframework/zend-stdlib/Zend/Stdlib/compatibility/autoload.php'; return $loader; } } &lt;?php
 $vendorDir = dirname(__DIR__); $baseDir = dirname($vendorDir); return array( ); &lt;?php
 namespace Composer\Autoload; class ClassLoader { private $prefixes = array(); private $fallbackDirs = array(); private $useIncludePath = false; private $classMap = array(); public function getPrefixes() { return $this-&gt;prefixes; } public function getFallbackDirs() { return $this-&gt;fallbackDirs; } public function getClassMap() { return $this-&gt;classMap; } public function addClassMap(array $classMap) { if ($this-&gt;classMap) { $this-&gt;classMap = array_merge($this-&gt;classMap, $classMap); } else { $this-&gt;classMap = $classMap; } } public function add($prefix, $paths) { if (!$prefix) { foreach ((array) $paths as $path) { $this-&gt;fallbackDirs[] = $path; } return; } if (isset($this-&gt;prefixes[$prefix])) { $this-&gt;prefixes[$prefix] = array_merge( $this-&gt;prefixes[$prefix], (array) $paths ); } else { $this-&gt;prefixes[$prefix] = (array) $paths; } } public function setUseIncludePath($useIncludePath) { $this-&gt;useIncludePath = $useIncludePath; } public function getUseIncludePath() { return $this-&gt;useIncludePath; } public function register($prepend = false) { spl_autoload_register(array($this, 'loadClass'), true, $prepend); } public function unregister() { spl_autoload_unregister(array($this, 'loadClass')); } public function loadClass($class) { if ($file = $this-&gt;findFile($class)) { include $file; return true; } } public function findFile($class) { if ('\\' == $class[0]) { $class = substr($class, 1); } if (isset($this-&gt;classMap[$class])) { return $this-&gt;classMap[$class]; } if (false !== $pos = strrpos($class, '\\')) { $classPath = str_replace('\\', DIRECTORY_SEPARATOR, substr($class, 0, $pos)) . DIRECTORY_SEPARATOR; $className = substr($class, $pos + 1); } else { $classPath = null; $className = $class; } $classPath .= str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php'; foreach ($this-&gt;prefixes as $prefix =&gt; $dirs) { if (0 === strpos($class, $prefix)) { foreach ($dirs as $dir) { if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) { return $dir . DIRECTORY_SEPARATOR . $classPath; } } } } foreach ($this-&gt;fallbackDirs as $dir) { if (file_exists($dir . DIRECTORY_SEPARATOR . $classPath)) { return $dir . DIRECTORY_SEPARATOR . $classPath; } } if ($this-&gt;useIncludePath &amp;&amp; $file = stream_resolve_include_path($classPath)) { return $file; } return $this-&gt;classMap[$class] = false; } } &lt;?php
 $vendorDir = dirname(__DIR__); $baseDir = dirname($vendorDir); return array( 'Zend\\View\\' =&gt; $vendorDir . '/zendframework/zend-view/', 'Zend\\Version\\' =&gt; $vendorDir . '/zendframework/zend-version/', 'Zend\\Validator\\' =&gt; $vendorDir . '/zendframework/zend-validator/', 'Zend\\Uri\\' =&gt; $vendorDir . '/zendframework/zend-uri/', 'Zend\\Text\\' =&gt; $vendorDir . '/zendframework/zend-text/', 'Zend\\Stdlib\\' =&gt; $vendorDir . '/zendframework/zend-stdlib/', 'Zend\\ServiceManager\\' =&gt; $vendorDir . '/zendframework/zend-servicemanager/', 'Zend\\Mvc\\' =&gt; $vendorDir . '/zendframework/zend-mvc/', 'Zend\\ModuleManager\\' =&gt; $vendorDir . '/zendframework/zend-modulemanager/', 'Zend\\Loader\\' =&gt; $vendorDir . '/zendframework/zend-loader/', 'Zend\\InputFilter\\' =&gt; $vendorDir . '/zendframework/zend-inputfilter/', 'Zend\\I18n\\' =&gt; $vendorDir . '/zendframework/zend-i18n/', 'Zend\\Http\\' =&gt; $vendorDir . '/zendframework/zend-http/', 'Zend\\Form\\' =&gt; $vendorDir . '/zendframework/zend-form/', 'Zend\\Filter\\' =&gt; $vendorDir . '/zendframework/zend-filter/', 'Zend\\File\\' =&gt; $vendorDir . '/zendframework/zend-file/', 'Zend\\EventManager\\' =&gt; $vendorDir . '/zendframework/zend-eventmanager/', 'Zend\\Escaper\\' =&gt; $vendorDir . '/zendframework/zend-escaper/', 'Zend\\Di\\' =&gt; $vendorDir . '/zendframework/zend-di/', 'Zend\\Console\\' =&gt; $vendorDir . '/zendframework/zend-console/', 'Zend\\Config\\' =&gt; $vendorDir . '/zendframework/zend-config/', 'Zend\\Code\\' =&gt; $vendorDir . '/zendframework/zend-code/', 'ZFTool\\' =&gt; $baseDir . '/src/', ); &lt;?php
 require_once __DIR__ . '/composer' . '/autoload_real.php'; return ComposerAutoloaderInit8c035fcf566dbe8cbf73bfe02e17acf3::getLoader(); &lt;?php
 namespace Zend\Mvc; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; use Zend\ServiceManager\ServiceManager; use Zend\Stdlib\ResponseInterface; class Application implements ApplicationInterface, EventManagerAwareInterface { const ERROR_CONTROLLER_CANNOT_DISPATCH = 'error-controller-cannot-dispatch'; const ERROR_CONTROLLER_NOT_FOUND = 'error-controller-not-found'; const ERROR_CONTROLLER_INVALID = 'error-controller-invalid'; const ERROR_EXCEPTION = 'error-exception'; const ERROR_ROUTER_NO_MATCH = 'error-router-no-match'; protected $configuration = null; protected $event; protected $events; protected $request; protected $response; protected $serviceManager = null; public function __construct($configuration, ServiceManager $serviceManager) { $this-&gt;configuration = $configuration; $this-&gt;serviceManager = $serviceManager; $this-&gt;setEventManager($serviceManager-&gt;get('EventManager')); $this-&gt;request = $serviceManager-&gt;get('Request'); $this-&gt;response = $serviceManager-&gt;get('Response'); } public function getConfig() { return $this-&gt;serviceManager-&gt;get('Config'); } public function bootstrap() { $serviceManager = $this-&gt;serviceManager; $events = $this-&gt;getEventManager(); $events-&gt;attach($serviceManager-&gt;get('RouteListener')); $events-&gt;attach($serviceManager-&gt;get('DispatchListener')); $events-&gt;attach($serviceManager-&gt;get('ViewManager')); $events-&gt;attach($serviceManager-&gt;get('SendResponseListener')); $this-&gt;event = $event = new MvcEvent(); $event-&gt;setTarget($this); $event-&gt;setApplication($this) -&gt;setRequest($this-&gt;getRequest()) -&gt;setResponse($this-&gt;getResponse()) -&gt;setRouter($serviceManager-&gt;get('Router')); $events-&gt;trigger(MvcEvent::EVENT_BOOTSTRAP, $event); return $this; } public function getServiceManager() { return $this-&gt;serviceManager; } public function getRequest() { return $this-&gt;request; } public function getResponse() { return $this-&gt;response; } public function getMvcEvent() { return $this-&gt;event; } public function setEventManager(EventManagerInterface $eventManager) { $eventManager-&gt;setIdentifiers(array( __CLASS__, get_called_class(), )); $this-&gt;events = $eventManager; return $this; } public function getEventManager() { return $this-&gt;events; } public static function init($configuration = array()) { $smConfig = isset($configuration['service_manager']) ? $configuration['service_manager'] : array(); $serviceManager = new ServiceManager(new Service\ServiceManagerConfig($smConfig)); $serviceManager-&gt;setService('ApplicationConfig', $configuration); $serviceManager-&gt;get('ModuleManager')-&gt;loadModules(); return $serviceManager-&gt;get('Application')-&gt;bootstrap(); } public function run() { $events = $this-&gt;getEventManager(); $event = $this-&gt;getMvcEvent(); $shortCircuit = function ($r) use ($event) { if ($r instanceof ResponseInterface) { return true; } if ($event-&gt;getError()) { return true; } return false; }; $result = $events-&gt;trigger(MvcEvent::EVENT_ROUTE, $event, $shortCircuit); if ($result-&gt;stopped()) { $response = $result-&gt;last(); if ($response instanceof ResponseInterface) { $event-&gt;setTarget($this); $event-&gt;setResponse($response); $events-&gt;trigger(MvcEvent::EVENT_FINISH, $event); return $response; } if ($event-&gt;getError()) { return $this-&gt;completeRequest($event); } return $event-&gt;getResponse(); } if ($event-&gt;getError()) { return $this-&gt;completeRequest($event); } $result = $events-&gt;trigger(MvcEvent::EVENT_DISPATCH, $event, $shortCircuit); $response = $result-&gt;last(); if ($response instanceof ResponseInterface) { $event-&gt;setTarget($this); $event-&gt;setResponse($response); $events-&gt;trigger(MvcEvent::EVENT_FINISH, $event); return $response; } $response = $this-&gt;getResponse(); $event-&gt;setResponse($response); $this-&gt;completeRequest($event); return $this; } public function send() { } protected function completeRequest(MvcEvent $event) { $events = $this-&gt;getEventManager(); $event-&gt;setTarget($this); $events-&gt;trigger(MvcEvent::EVENT_RENDER, $event); $events-&gt;trigger(MvcEvent::EVENT_FINISH, $event); return $this; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Scheme implements RouteInterface { protected $scheme; protected $defaults; public function __construct($scheme, array $defaults = array()) { $this-&gt;scheme = $scheme; $this-&gt;defaults = $defaults; } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['scheme'])) { throw new Exception\InvalidArgumentException('Missing "scheme" in options array'); } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['scheme'], $options['defaults']); } public function match(Request $request) { if (!method_exists($request, 'getUri')) { return null; } $uri = $request-&gt;getUri(); $scheme = $uri-&gt;getScheme(); if ($scheme !== $this-&gt;scheme) { return null; } return new RouteMatch($this-&gt;defaults); } public function assemble(array $params = array(), array $options = array()) { if (isset($options['uri'])) { $options['uri']-&gt;setScheme($this-&gt;scheme); } return ''; } public function getAssembledParams() { return array(); } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Hostname implements RouteInterface { protected $parts; protected $regex; protected $paramMap = array(); protected $defaults; protected $assembledParams = array(); public function __construct($route, array $constraints = array(), array $defaults = array()) { $this-&gt;defaults = $defaults; $this-&gt;parts = $this-&gt;parseRouteDefinition($route); $this-&gt;regex = $this-&gt;buildRegex($this-&gt;parts, $constraints); } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['route'])) { throw new Exception\InvalidArgumentException('Missing "route" in options array'); } if (!isset($options['constraints'])) { $options['constraints'] = array(); } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['route'], $options['constraints'], $options['defaults']); } protected function parseRouteDefinition($def) { $currentPos = 0; $length = strlen($def); $parts = array(); $levelParts = array(&amp;$parts); $level = 0; while ($currentPos &lt; $length) { preg_match('(\G(?P&lt;literal&gt;[a-z0-9-.]*)(?P&lt;token&gt;[:{\[\]]|$))', $def, $matches, 0, $currentPos); $currentPos += strlen($matches[0]); if (!empty($matches['literal'])) { $levelParts[$level][] = array('literal', $matches['literal']); } if ($matches['token'] === ':') { if (!preg_match('(\G(?P&lt;name&gt;[^:.{\[\]]+)(?:{(?P&lt;delimiters&gt;[^}]+)})?:?)', $def, $matches, 0, $currentPos)) { throw new Exception\RuntimeException('Found empty parameter name'); } $levelParts[$level][] = array('parameter', $matches['name'], isset($matches['delimiters']) ? $matches['delimiters'] : null); $currentPos += strlen($matches[0]); } elseif ($matches['token'] === '[') { $levelParts[$level][] = array('optional', array()); $levelParts[$level + 1] = &amp;$levelParts[$level][count($levelParts[$level]) - 1][1]; $level++; } elseif ($matches['token'] === ']') { unset($levelParts[$level]); $level--; if ($level &lt; 0) { throw new Exception\RuntimeException('Found closing bracket without matching opening bracket'); } } else { break; } } if ($level &gt; 0) { throw new Exception\RuntimeException('Found unbalanced brackets'); } return $parts; } protected function buildRegex(array $parts, array $constraints, &amp;$groupIndex = 1) { $regex = ''; foreach ($parts as $part) { switch ($part[0]) { case 'literal': $regex .= preg_quote($part[1]); break; case 'parameter': $groupName = '?P&lt;param' . $groupIndex . '&gt;'; if (isset($constraints[$part[1]])) { $regex .= '(' . $groupName . $constraints[$part[1]] . ')'; } elseif ($part[2] === null) { $regex .= '(' . $groupName . '[^.]+)'; } else { $regex .= '(' . $groupName . '[^' . $part[2] . ']+)'; } $this-&gt;paramMap['param' . $groupIndex++] = $part[1]; break; case 'optional': $regex .= '(?:' . $this-&gt;buildRegex($part[1], $constraints, $groupIndex) . ')?'; break; } } return $regex; } protected function buildHost(array $parts, array $mergedParams, $isOptional) { $host = ''; $skip = true; $skippable = false; foreach ($parts as $part) { switch ($part[0]) { case 'literal': $host .= $part[1]; break; case 'parameter': $skippable = true; if (!isset($mergedParams[$part[1]])) { if (!$isOptional) { throw new Exception\InvalidArgumentException(sprintf('Missing parameter "%s"', $part[1])); } return ''; } elseif (!$isOptional || !isset($this-&gt;defaults[$part[1]]) || $this-&gt;defaults[$part[1]] !== $mergedParams[$part[1]]) { $skip = false; } $host .= $mergedParams[$part[1]]; $this-&gt;assembledParams[] = $part[1]; break; case 'optional': $skippable = true; $optionalPart = $this-&gt;buildHost($part[1], $mergedParams, true); if ($optionalPart !== '') { $host .= $optionalPart; $skip = false; } break; } } if ($isOptional &amp;&amp; $skippable &amp;&amp; $skip) { return ''; } return $host; } public function match(Request $request) { if (!method_exists($request, 'getUri')) { return null; } $uri = $request-&gt;getUri(); $host = $uri-&gt;getHost(); $result = preg_match('(^' . $this-&gt;regex . '$)', $host, $matches); if (!$result) { return null; } $params = array(); foreach ($this-&gt;paramMap as $index =&gt; $name) { if (isset($matches[$index]) &amp;&amp; $matches[$index] !== '') { $params[$name] = $matches[$index]; } } return new RouteMatch(array_merge($this-&gt;defaults, $params)); } public function assemble(array $params = array(), array $options = array()) { $this-&gt;assembledParams = array(); if (isset($options['uri'])) { $host = $this-&gt;buildHost( $this-&gt;parts, array_merge($this-&gt;defaults, $params), false ); $options['uri']-&gt;setHost($host); } return ''; } public function getAssembledParams() { return $this-&gt;assembledParams; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Mvc\Router\SimpleRouteStack; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; use Zend\Uri\Http as HttpUri; class TreeRouteStack extends SimpleRouteStack { protected $baseUrl; protected $requestUri; protected function init() { $routes = $this-&gt;routePluginManager; foreach (array( 'hostname' =&gt; __NAMESPACE__ . '\Hostname', 'literal' =&gt; __NAMESPACE__ . '\Literal', 'part' =&gt; __NAMESPACE__ . '\Part', 'regex' =&gt; __NAMESPACE__ . '\Regex', 'scheme' =&gt; __NAMESPACE__ . '\Scheme', 'segment' =&gt; __NAMESPACE__ . '\Segment', 'wildcard' =&gt; __NAMESPACE__ . '\Wildcard', 'query' =&gt; __NAMESPACE__ . '\Query', 'method' =&gt; __NAMESPACE__ . '\Method', ) as $name =&gt; $class ) { $routes-&gt;setInvokableClass($name, $class); }; } public function addRoute($name, $route, $priority = null) { if (!$route instanceof RouteInterface) { $route = $this-&gt;routeFromArray($route); } return parent::addRoute($name, $route, $priority); } protected function routeFromArray($specs) { if ($specs instanceof Traversable) { $specs = ArrayUtils::iteratorToArray($specs); } elseif (!is_array($specs)) { throw new Exception\InvalidArgumentException('Route definition must be an array or Traversable object'); } $route = parent::routeFromArray($specs); if (!$route instanceof RouteInterface) { throw new Exception\RuntimeException('Given route does not implement HTTP route interface'); } if (isset($specs['child_routes'])) { $options = array( 'route' =&gt; $route, 'may_terminate' =&gt; (isset($specs['may_terminate']) &amp;&amp; $specs['may_terminate']), 'child_routes' =&gt; $specs['child_routes'], 'route_plugins' =&gt; $this-&gt;routePluginManager, ); $priority = (isset($route-&gt;priority) ? $route-&gt;priority : null); $route = $this-&gt;routePluginManager-&gt;get('part', $options); $route-&gt;priority = $priority; } return $route; } public function match(Request $request) { if (!method_exists($request, 'getUri')) { return null; } if ($this-&gt;baseUrl === null &amp;&amp; method_exists($request, 'getBaseUrl')) { $this-&gt;setBaseUrl($request-&gt;getBaseUrl()); } $uri = $request-&gt;getUri(); $baseUrlLength = strlen($this-&gt;baseUrl) ?: null; if ($this-&gt;requestUri === null) { $this-&gt;setRequestUri($uri); } if ($baseUrlLength !== null) { $pathLength = strlen($uri-&gt;getPath()) - $baseUrlLength; foreach ($this-&gt;routes as $name =&gt; $route) { if (($match = $route-&gt;match($request, $baseUrlLength)) instanceof RouteMatch &amp;&amp; $match-&gt;getLength() === $pathLength) { $match-&gt;setMatchedRouteName($name); foreach ($this-&gt;defaultParams as $paramName =&gt; $value) { if ($match-&gt;getParam($paramName) === null) { $match-&gt;setParam($paramName, $value); } } return $match; } } } else { return parent::match($request); } return null; } public function assemble(array $params = array(), array $options = array()) { if (!isset($options['name'])) { throw new Exception\InvalidArgumentException('Missing "name" option'); } $names = explode('/', $options['name'], 2); $route = $this-&gt;routes-&gt;get($names[0]); if (!$route) { throw new Exception\RuntimeException(sprintf('Route with name "%s" not found', $names[0])); } if (isset($names[1])) { $options['name'] = $names[1]; } else { unset($options['name']); } if (isset($options['only_return_path']) &amp;&amp; $options['only_return_path']) { return $this-&gt;baseUrl . $route-&gt;assemble(array_merge($this-&gt;defaultParams, $params), $options); } if (!isset($options['uri'])) { $uri = new HttpUri(); if (isset($options['force_canonical']) &amp;&amp; $options['force_canonical']) { if ($this-&gt;requestUri === null) { throw new Exception\RuntimeException('Request URI has not been set'); } $uri-&gt;setScheme($this-&gt;requestUri-&gt;getScheme()) -&gt;setHost($this-&gt;requestUri-&gt;getHost()) -&gt;setPort($this-&gt;requestUri-&gt;getPort()); } $options['uri'] = $uri; } else { $uri = $options['uri']; } $path = $this-&gt;baseUrl . $route-&gt;assemble(array_merge($this-&gt;defaultParams, $params), $options); if (isset($options['query'])) { $uri-&gt;setQuery($options['query']); } if (isset($options['fragment'])) { $uri-&gt;setFragment($options['fragment']); } if ((isset($options['force_canonical']) &amp;&amp; $options['force_canonical']) || $uri-&gt;getHost() !== null) { if ($uri-&gt;getScheme() === null) { if ($this-&gt;requestUri === null) { throw new Exception\RuntimeException('Request URI has not been set'); } $uri-&gt;setScheme($this-&gt;requestUri-&gt;getScheme()); } return $uri-&gt;setPath($path)-&gt;normalize()-&gt;toString(); } elseif (!$uri-&gt;isAbsolute() &amp;&amp; $uri-&gt;isValidRelative()) { return $uri-&gt;setPath($path)-&gt;normalize()-&gt;toString(); } return $path; } public function setBaseUrl($baseUrl) { $this-&gt;baseUrl = rtrim($baseUrl, '/'); return $this; } public function getBaseUrl() { return $this-&gt;baseUrl; } public function setRequestUri(HttpUri $uri) { $this-&gt;requestUri = $uri; return $this; } public function getRequestUri() { return $this-&gt;requestUri; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Mvc\Router\Http\RouteMatch; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Query implements RouteInterface { protected $defaults; protected $assembledParams = array(); public function __construct(array $defaults = array()) { $this-&gt;defaults = $defaults; } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['defaults']); } public function match(Request $request, $pathOffset = null) { if (!method_exists($request, 'getQuery')) { return null; } $matches = $this-&gt;recursiveUrldecode($request-&gt;getQuery()-&gt;toArray()); return new RouteMatch(array_merge($this-&gt;defaults, $matches)); } protected function recursiveUrldecode(array $array) { $matches = array(); foreach ($array as $key =&gt; $value) { if (is_array($value)) { $matches[urldecode($key)] = $this-&gt;recursiveUrldecode($value); } else { $matches[urldecode($key)] = urldecode($value); } } return $matches; } public function assemble(array $params = array(), array $options = array()) { $mergedParams = array_merge($this-&gt;defaults, $params); $this-&gt;assembledParams = array(); if (isset($options['uri']) &amp;&amp; count($mergedParams)) { foreach ($mergedParams as $key =&gt; $value) { $this-&gt;assembledParams[] = $key; } $options['uri']-&gt;setQuery($mergedParams); } return ''; } public function getAssembledParams() { return $this-&gt;assembledParams; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Regex implements RouteInterface { protected $regex; protected $defaults; protected $spec; protected $assembledParams = array(); public function __construct($regex, $spec, array $defaults = array()) { $this-&gt;regex = $regex; $this-&gt;spec = $spec; $this-&gt;defaults = $defaults; } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['regex'])) { throw new Exception\InvalidArgumentException('Missing "regex" in options array'); } if (!isset($options['spec'])) { throw new Exception\InvalidArgumentException('Missing "spec" in options array'); } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['regex'], $options['spec'], $options['defaults']); } public function match(Request $request, $pathOffset = null) { if (!method_exists($request, 'getUri')) { return null; } $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if ($pathOffset !== null) { $result = preg_match('(\G' . $this-&gt;regex . ')', $path, $matches, null, $pathOffset); } else { $result = preg_match('(^' . $this-&gt;regex . '$)', $path, $matches); } if (!$result) { return null; } $matchedLength = strlen($matches[0]); foreach ($matches as $key =&gt; $value) { if (is_numeric($key) || is_int($key) || $value === '') { unset($matches[$key]); } else { $matches[$key] = rawurldecode($value); } } return new RouteMatch(array_merge($this-&gt;defaults, $matches), $matchedLength); } public function assemble(array $params = array(), array $options = array()) { $url = $this-&gt;spec; $mergedParams = array_merge($this-&gt;defaults, $params); $this-&gt;assembledParams = array(); foreach ($mergedParams as $key =&gt; $value) { $spec = '%' . $key . '%'; if (strpos($url, $spec) !== false) { $url = str_replace($spec, rawurlencode($value), $url); $this-&gt;assembledParams[] = $key; } } return $url; } public function getAssembledParams() { return $this-&gt;assembledParams; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Segment implements RouteInterface { protected static $cacheEncode = array(); protected static $urlencodeCorrectionMap = array( '%21' =&gt; "!", '%24' =&gt; "$", '%26' =&gt; "&amp;", '%27' =&gt; "'", '%28' =&gt; "(", '%29' =&gt; ")", '%2A' =&gt; "*", '%2B' =&gt; "+", '%2C' =&gt; ",", '%3A' =&gt; ":", '%3B' =&gt; ";", '%3D' =&gt; "=", '%40' =&gt; "@", ); protected $parts; protected $regex; protected $paramMap = array(); protected $defaults; protected $assembledParams = array(); public function __construct($route, array $constraints = array(), array $defaults = array()) { $this-&gt;defaults = $defaults; $this-&gt;parts = $this-&gt;parseRouteDefinition($route); $this-&gt;regex = $this-&gt;buildRegex($this-&gt;parts, $constraints); } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['route'])) { throw new Exception\InvalidArgumentException('Missing "route" in options array'); } if (!isset($options['constraints'])) { $options['constraints'] = array(); } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['route'], $options['constraints'], $options['defaults']); } protected function parseRouteDefinition($def) { $currentPos = 0; $length = strlen($def); $parts = array(); $levelParts = array(&amp;$parts); $level = 0; while ($currentPos &lt; $length) { preg_match('(\G(?P&lt;literal&gt;[^:{\[\]]*)(?P&lt;token&gt;[:{\[\]]|$))', $def, $matches, 0, $currentPos); $currentPos += strlen($matches[0]); if (!empty($matches['literal'])) { $levelParts[$level][] = array('literal', $matches['literal']); } if ($matches['token'] === ':') { if (isset($def[$currentPos]) &amp;&amp; $def[$currentPos] === '{') { if (!preg_match('(\G\{(?P&lt;name&gt;[^}]+)\}:?)', $def, $matches, 0, $currentPos)) { throw new Exception\RuntimeException('Translated parameter missing closing bracket'); } $levelParts[$level][] = array('translated-parameter', $matches['name']); } else { if (!preg_match('(\G(?P&lt;name&gt;[^:/{\[\]]+)(?:{(?P&lt;delimiters&gt;[^}]+)})?:?)', $def, $matches, 0, $currentPos)) { throw new Exception\RuntimeException('Found empty parameter name'); } $levelParts[$level][] = array('parameter', $matches['name'], isset($matches['delimiters']) ? $matches['delimiters'] : null); } $currentPos += strlen($matches[0]); } elseif ($matches['token'] === '{') { if (!preg_match('(\G(?P&lt;literal&gt;[^}]+)\})', $def, $matches, 0, $currentPos)) { throw new Exception\RuntimeException('Translated literal missing closing bracket'); } $currentPos += strlen($matches[0]); $levelParts[$level][] = array('translated-literal', $matches['literal']); } elseif ($matches['token'] === '[') { $levelParts[$level][] = array('optional', array()); $levelParts[$level + 1] = &amp;$levelParts[$level][count($levelParts[$level]) - 1][1]; $level++; } elseif ($matches['token'] === ']') { unset($levelParts[$level]); $level--; if ($level &lt; 0) { throw new Exception\RuntimeException('Found closing bracket without matching opening bracket'); } } else { break; } } if ($level &gt; 0) { throw new Exception\RuntimeException('Found unbalanced brackets'); } return $parts; } protected function buildRegex(array $parts, array $constraints, &amp;$groupIndex = 1) { $regex = ''; foreach ($parts as $part) { switch ($part[0]) { case 'literal': $regex .= preg_quote($part[1]); break; case 'parameter': $groupName = '?P&lt;param' . $groupIndex . '&gt;'; if (isset($constraints[$part[1]])) { $regex .= '(' . $groupName . $constraints[$part[1]] . ')'; } elseif ($part[2] === null) { $regex .= '(' . $groupName . '[^/]+)'; } else { $regex .= '(' . $groupName . '[^' . $part[2] . ']+)'; } $this-&gt;paramMap['param' . $groupIndex++] = $part[1]; break; case 'optional': $regex .= '(?:' . $this-&gt;buildRegex($part[1], $constraints, $groupIndex) . ')?'; break; case 'translated-literal': throw new Exception\RuntimeException('Translated literals are not implemented yet'); break; case 'translated-parameter': throw new Exception\RuntimeException('Translated parameters are not implemented yet'); break; } } return $regex; } protected function buildPath(array $parts, array $mergedParams, $isOptional, $hasChild) { $path = ''; $skip = true; $skippable = false; foreach ($parts as $part) { switch ($part[0]) { case 'literal': $path .= $part[1]; break; case 'parameter': $skippable = true; if (!isset($mergedParams[$part[1]])) { if (!$isOptional || $hasChild) { throw new Exception\InvalidArgumentException(sprintf('Missing parameter "%s"', $part[1])); } return ''; } elseif (!$isOptional || $hasChild || !isset($this-&gt;defaults[$part[1]]) || $this-&gt;defaults[$part[1]] !== $mergedParams[$part[1]]) { $skip = false; } $path .= $this-&gt;encode($mergedParams[$part[1]]); $this-&gt;assembledParams[] = $part[1]; break; case 'optional': $skippable = true; $optionalPart = $this-&gt;buildPath($part[1], $mergedParams, true, $hasChild); if ($optionalPart !== '') { $path .= $optionalPart; $skip = false; } break; case 'translated-literal': throw new Exception\RuntimeException('Translated literals are not implemented yet'); break; case 'translated-parameter': throw new Exception\RuntimeException('Translated parameters are not implemented yet'); break; } } if ($isOptional &amp;&amp; $skippable &amp;&amp; $skip) { return ''; } return $path; } public function match(Request $request, $pathOffset = null) { if (!method_exists($request, 'getUri')) { return null; } $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if ($pathOffset !== null) { $result = preg_match('(\G' . $this-&gt;regex . ')', $path, $matches, null, $pathOffset); } else { $result = preg_match('(^' . $this-&gt;regex . '$)', $path, $matches); } if (!$result) { return null; } $matchedLength = strlen($matches[0]); $params = array(); foreach ($this-&gt;paramMap as $index =&gt; $name) { if (isset($matches[$index]) &amp;&amp; $matches[$index] !== '') { $params[$name] = $this-&gt;decode($matches[$index]); } } return new RouteMatch(array_merge($this-&gt;defaults, $params), $matchedLength); } public function assemble(array $params = array(), array $options = array()) { $this-&gt;assembledParams = array(); return $this-&gt;buildPath( $this-&gt;parts, array_merge($this-&gt;defaults, $params), false, (isset($options['has_child']) ? $options['has_child'] : false) ); } public function getAssembledParams() { return $this-&gt;assembledParams; } protected function encode($value) { if (!isset(static::$cacheEncode[$value])) { static::$cacheEncode[$value] = rawurlencode($value); static::$cacheEncode[$value] = strtr(static::$cacheEncode[$value], static::$urlencodeCorrectionMap); } return static::$cacheEncode[$value]; } protected function decode($value) { return rawurldecode($value); } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Mvc\Router\PriorityList; use Zend\Mvc\Router\RoutePluginManager; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Part extends TreeRouteStack implements RouteInterface { protected $route; protected $mayTerminate; protected $childRoutes; public function __construct($route, $mayTerminate, RoutePluginManager $routePlugins, array $childRoutes = null) { $this-&gt;routePluginManager = $routePlugins; if (!$route instanceof RouteInterface) { $route = $this-&gt;routeFromArray($route); } if ($route instanceof self) { throw new Exception\InvalidArgumentException('Base route may not be a part route'); } $this-&gt;route = $route; $this-&gt;mayTerminate = $mayTerminate; $this-&gt;childRoutes = $childRoutes; $this-&gt;routes = new PriorityList(); } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['route'])) { throw new Exception\InvalidArgumentException('Missing "route" in options array'); } if (!isset($options['route_plugins'])) { throw new Exception\InvalidArgumentException('Missing "route_plugins" in options array'); } if (!isset($options['may_terminate'])) { $options['may_terminate'] = false; } if (!isset($options['child_routes']) || !$options['child_routes']) { $options['child_routes'] = null; } if ($options['child_routes'] instanceof Traversable) { $options['child_routes'] = ArrayUtils::iteratorToArray($options['child_routes']); } return new static($options['route'], $options['may_terminate'], $options['route_plugins'], $options['child_routes']); } public function match(Request $request, $pathOffset = null) { if ($pathOffset === null) { $pathOffset = 0; } $match = $this-&gt;route-&gt;match($request, $pathOffset); if ($match !== null &amp;&amp; method_exists($request, 'getUri')) { if ($this-&gt;childRoutes !== null) { $this-&gt;addRoutes($this-&gt;childRoutes); $this-&gt;childRoutes = null; } $nextOffset = $pathOffset + $match-&gt;getLength(); $uri = $request-&gt;getUri(); $pathLength = strlen($uri-&gt;getPath()); if ($this-&gt;mayTerminate &amp;&amp; $nextOffset === $pathLength) { $query = $uri-&gt;getQuery(); if ('' == trim($query) || !$this-&gt;hasQueryChild()) { return $match; } } foreach ($this-&gt;routes as $name =&gt; $route) { if (($subMatch = $route-&gt;match($request, $nextOffset)) instanceof RouteMatch) { if ($match-&gt;getLength() + $subMatch-&gt;getLength() + $pathOffset === $pathLength) { return $match-&gt;merge($subMatch)-&gt;setMatchedRouteName($name); } } } } return null; } public function assemble(array $params = array(), array $options = array()) { if ($this-&gt;childRoutes !== null) { $this-&gt;addRoutes($this-&gt;childRoutes); $this-&gt;childRoutes = null; } $options['has_child'] = (isset($options['name'])); $path = $this-&gt;route-&gt;assemble($params, $options); $params = array_diff_key($params, array_flip($this-&gt;route-&gt;getAssembledParams())); if (!isset($options['name'])) { if (!$this-&gt;mayTerminate) { throw new Exception\RuntimeException('Part route may not terminate'); } else { return $path; } } unset($options['has_child']); $options['only_return_path'] = true; $path .= parent::assemble($params, $options); return $path; } public function getAssembledParams() { return array(); } protected function hasQueryChild() { foreach ($this-&gt;routes as $route) { if ($route instanceof Query) { return true; } } return false; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Wildcard implements RouteInterface { protected $keyValueDelimiter; protected $paramDelimiter; protected $defaults; protected $assembledParams = array(); public function __construct($keyValueDelimiter = '/', $paramDelimiter = '/', array $defaults = array()) { $this-&gt;keyValueDelimiter = $keyValueDelimiter; $this-&gt;paramDelimiter = $paramDelimiter; $this-&gt;defaults = $defaults; } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['key_value_delimiter'])) { $options['key_value_delimiter'] = '/'; } if (!isset($options['param_delimiter'])) { $options['param_delimiter'] = '/'; } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['key_value_delimiter'], $options['param_delimiter'], $options['defaults']); } public function match(Request $request, $pathOffset = null) { if (!method_exists($request, 'getUri')) { return null; } $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if ($path === '/') { $path = ''; } if ($pathOffset !== null) { $path = substr($path, $pathOffset); } $matches = array(); $params = explode($this-&gt;paramDelimiter, $path); if (count($params) &gt; 1 &amp;&amp; ($params[0] !== '' || end($params) === '')) { return null; } if ($this-&gt;keyValueDelimiter === $this-&gt;paramDelimiter) { $count = count($params); for ($i = 1; $i &lt; $count; $i += 2) { if (isset($params[$i + 1])) { $matches[rawurldecode($params[$i])] = rawurldecode($params[$i + 1]); } } } else { array_shift($params); foreach ($params as $param) { $param = explode($this-&gt;keyValueDelimiter, $param, 2); if (isset($param[1])) { $matches[rawurldecode($param[0])] = rawurldecode($param[1]); } } } return new RouteMatch(array_merge($this-&gt;defaults, $matches), strlen($path)); } public function assemble(array $params = array(), array $options = array()) { $elements = array(); $mergedParams = array_merge($this-&gt;defaults, $params); $this-&gt;assembledParams = array(); if ($mergedParams) { foreach ($mergedParams as $key =&gt; $value) { $elements[] = rawurlencode($key) . $this-&gt;keyValueDelimiter . rawurlencode($value); $this-&gt;assembledParams[] = $key; } return $this-&gt;paramDelimiter . implode($this-&gt;paramDelimiter, $elements); } return ''; } public function getAssembledParams() { return $this-&gt;assembledParams; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Method implements RouteInterface { protected $verb; protected $defaults; public function __construct($verb, array $defaults = array()) { $this-&gt;verb = $verb; $this-&gt;defaults = $defaults; } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['verb'])) { throw new Exception\InvalidArgumentException('Missing "verb" in options array'); } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['verb'], $options['defaults']); } public function match(Request $request) { if (!method_exists($request, 'getMethod')) { return null; } $requestVerb = strtoupper($request-&gt;getMethod()); $matchVerbs = explode(',', strtoupper($this-&gt;verb)); $matchVerbs = array_map('trim', $matchVerbs); if (in_array($requestVerb, $matchVerbs)) { return new RouteMatch($this-&gt;defaults); } return null; } public function assemble(array $params = array(), array $options = array()) { return ''; } public function getAssembledParams() { return array(); } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Zend\Mvc\Router\RouteInterface as BaseRoute; interface RouteInterface extends BaseRoute { public function getAssembledParams(); } &lt;?php
 namespace Zend\Mvc\Router\Http; use Zend\Mvc\Router\RouteMatch as BaseRouteMatch; class RouteMatch extends BaseRouteMatch { protected $length; public function __construct(array $params, $length = 0) { parent::__construct($params); $this-&gt;length = $length; } public function setMatchedRouteName($name) { if ($this-&gt;matchedRouteName === null) { $this-&gt;matchedRouteName = $name; } else { $this-&gt;matchedRouteName = $name . '/' . $this-&gt;matchedRouteName; } return $this; } public function merge(RouteMatch $match) { $this-&gt;params = array_merge($this-&gt;params, $match-&gt;getParams()); $this-&gt;length += $match-&gt;getLength(); $this-&gt;matchedRouteName = $match-&gt;getMatchedRouteName(); return $this; } public function getLength() { return $this-&gt;length; } } &lt;?php
 namespace Zend\Mvc\Router\Http; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class Literal implements RouteInterface { protected $route; protected $defaults; public function __construct($route, array $defaults = array()) { $this-&gt;route = $route; $this-&gt;defaults = $defaults; } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['route'])) { throw new Exception\InvalidArgumentException('Missing "route" in options array'); } if (!isset($options['defaults'])) { $options['defaults'] = array(); } return new static($options['route'], $options['defaults']); } public function match(Request $request, $pathOffset = null) { if (!method_exists($request, 'getUri')) { return null; } $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if ($pathOffset !== null) { if ($pathOffset &gt;= 0 &amp;&amp; strlen($path) &gt;= $pathOffset &amp;&amp; !empty($this-&gt;route)) { if (strpos($path, $this-&gt;route, $pathOffset) === $pathOffset) { return new RouteMatch($this-&gt;defaults, strlen($this-&gt;route)); } } return null; } if ($path === $this-&gt;route) { return new RouteMatch($this-&gt;defaults, strlen($this-&gt;route)); } return null; } public function assemble(array $params = array(), array $options = array()) { return $this-&gt;route; } public function getAssembledParams() { return array(); } } &lt;?php
 namespace Zend\Mvc\Router; interface RouteStackInterface extends RouteInterface { public function addRoute($name, $route, $priority = null); public function addRoutes($routes); public function removeRoute($name); public function setRoutes($routes); } &lt;?php
 namespace Zend\Mvc\Router\Exception; use Zend\Mvc\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Router\Exception; use Zend\Mvc\Exception\ExceptionInterface as Exception; interface ExceptionInterface extends Exception { } &lt;?php
 namespace Zend\Mvc\Router\Exception; use Zend\Mvc\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Router; use Countable; use Iterator; class PriorityList implements Iterator, Countable { protected $routes = array(); protected $serial = 0; protected $count = 0; protected $sorted = false; public function insert($name, RouteInterface $route, $priority) { $this-&gt;sorted = false; $this-&gt;count++; $this-&gt;routes[$name] = array( 'route' =&gt; $route, 'priority' =&gt; (int) $priority, 'serial' =&gt; $this-&gt;serial++, ); } public function remove($name) { if (!isset($this-&gt;routes[$name])) { return; } $this-&gt;count--; unset($this-&gt;routes[$name]); } public function clear() { $this-&gt;routes = array(); $this-&gt;serial = 0; $this-&gt;count = 0; $this-&gt;sorted = false; } public function get($name) { if (!isset($this-&gt;routes[$name])) { return null; } return $this-&gt;routes[$name]['route']; } protected function sort() { uasort($this-&gt;routes, array($this, 'compare')); $this-&gt;sorted = true; } protected function compare(array $route1, array $route2) { if ($route1['priority'] === $route2['priority']) { return ($route1['serial'] &gt; $route2['serial'] ? -1 : 1); } return ($route1['priority'] &gt; $route2['priority'] ? -1 : 1); } public function rewind() { if (!$this-&gt;sorted) { $this-&gt;sort(); } reset($this-&gt;routes); } public function current() { $node = current($this-&gt;routes); return ($node !== false ? $node['route'] : false); } public function key() { return key($this-&gt;routes); } public function next() { $node = next($this-&gt;routes); return ($node !== false ? $node['route'] : false); } public function valid() { return ($this-&gt;current() !== false); } public function count() { return $this-&gt;count; } } &lt;?php
 namespace Zend\Mvc\Router; use Zend\Stdlib\RequestInterface as Request; interface RouteInterface { public static function factory($options = array()); public function match(Request $request); public function assemble(array $params = array(), array $options = array()); } &lt;?php
 namespace Zend\Mvc\Router; use Zend\ServiceManager\AbstractPluginManager; class RoutePluginManager extends AbstractPluginManager { protected $shareByDefault = false; public function setInvokableClass($name, $invokableClass, $shared = null) { parent::setInvokableClass($name, $invokableClass, $shared); if ($name != $invokableClass) { $this-&gt;setAlias($invokableClass, $name); } return $this; } public function validatePlugin($plugin) { if ($plugin instanceof RouteInterface) { return; } throw new Exception\RuntimeException(sprintf( 'Plugin of type %s is invalid; must implement %s\RouteInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } protected function createFromInvokable($canonicalName, $requestedName) { $invokable = $this-&gt;invokableClasses[$canonicalName]; if (!class_exists($invokable)) { throw new Exception\RuntimeException(sprintf( '%s: failed retrieving "%s%s" via invokable class "%s"; class does not exist', __METHOD__, $canonicalName, ($requestedName ? '(alias: ' . $requestedName . ')' : ''), $invokable )); } if (!static::isSubclassOf($invokable, __NAMESPACE__ . '\RouteInterface')) { throw new Exception\RuntimeException(sprintf( '%s: failed retrieving "%s%s" via invokable class "%s"; class does not implement %s\RouteInterface', __METHOD__, $canonicalName, ($requestedName ? '(alias: ' . $requestedName . ')' : ''), $invokable, __NAMESPACE__ )); } return $invokable::factory($this-&gt;creationOptions); } } &lt;?php
 namespace Zend\Mvc\Router; class RouteMatch { protected $params = array(); protected $matchedRouteName; public function __construct(array $params) { $this-&gt;params = $params; } public function setMatchedRouteName($name) { $this-&gt;matchedRouteName = $name; return $this; } public function getMatchedRouteName() { return $this-&gt;matchedRouteName; } public function setParam($name, $value) { $this-&gt;params[$name] = $value; return $this; } public function getParams() { return $this-&gt;params; } public function getParam($name, $default = null) { if (array_key_exists($name, $this-&gt;params)) { return $this-&gt;params[$name]; } return $default; } } &lt;?php
 namespace Zend\Mvc\Router; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; class SimpleRouteStack implements RouteStackInterface { protected $routes; protected $routePluginManager; protected $defaultParams = array(); public function __construct(RoutePluginManager $routePluginManager = null) { $this-&gt;routes = new PriorityList(); if (null === $routePluginManager) { $routePluginManager = new RoutePluginManager(); } $this-&gt;routePluginManager = $routePluginManager; $this-&gt;init(); } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } $instance = new static(); if (isset($options['route_plugins'])) { $instance-&gt;setRoutePluginManager($options['route_plugins']); } if (isset($options['routes'])) { $instance-&gt;addRoutes($options['routes']); } if (isset($options['default_params'])) { $instance-&gt;setDefaultParams($options['default_params']); } return $instance; } protected function init() { } public function setRoutePluginManager(RoutePluginManager $routePlugins) { $this-&gt;routePluginManager = $routePlugins; return $this; } public function getRoutePluginManager() { return $this-&gt;routePluginManager; } public function addRoutes($routes) { if (!is_array($routes) &amp;&amp; !$routes instanceof Traversable) { throw new Exception\InvalidArgumentException('addRoutes expects an array or Traversable set of routes'); } foreach ($routes as $name =&gt; $route) { $this-&gt;addRoute($name, $route); } return $this; } public function addRoute($name, $route, $priority = null) { if (!$route instanceof RouteInterface) { $route = $this-&gt;routeFromArray($route); } if ($priority === null &amp;&amp; isset($route-&gt;priority)) { $priority = $route-&gt;priority; } $this-&gt;routes-&gt;insert($name, $route, $priority); return $this; } public function removeRoute($name) { $this-&gt;routes-&gt;remove($name); return $this; } public function setRoutes($routes) { $this-&gt;routes-&gt;clear(); $this-&gt;addRoutes($routes); return $this; } public function getRoutes() { return $this-&gt;routes; } public function hasRoute($name) { return $this-&gt;routes-&gt;get($name) !== null; } public function getRoute($name) { return $this-&gt;routes-&gt;get($name); } public function setDefaultParams(array $params) { $this-&gt;defaultParams = $params; return $this; } public function setDefaultParam($name, $value) { $this-&gt;defaultParams[$name] = $value; return $this; } protected function routeFromArray($specs) { if ($specs instanceof Traversable) { $specs = ArrayUtils::iteratorToArray($specs); } elseif (!is_array($specs)) { throw new Exception\InvalidArgumentException('Route definition must be an array or Traversable object'); } if (!isset($specs['type'])) { throw new Exception\InvalidArgumentException('Missing "type" option'); } elseif (!isset($specs['options'])) { $specs['options'] = array(); } $route = $this-&gt;getRoutePluginManager()-&gt;get($specs['type'], $specs['options']); if (isset($specs['priority'])) { $route-&gt;priority = $specs['priority']; } return $route; } public function match(Request $request) { foreach ($this-&gt;routes as $name =&gt; $route) { if (($match = $route-&gt;match($request)) instanceof RouteMatch) { $match-&gt;setMatchedRouteName($name); foreach ($this-&gt;defaultParams as $paramName =&gt; $value) { if ($match-&gt;getParam($paramName) === null) { $match-&gt;setParam($paramName, $value); } } return $match; } } return null; } public function assemble(array $params = array(), array $options = array()) { if (!isset($options['name'])) { throw new Exception\InvalidArgumentException('Missing "name" option'); } $route = $this-&gt;routes-&gt;get($options['name']); if (!$route) { throw new Exception\RuntimeException(sprintf('Route with name "%s" not found', $options['name'])); } unset($options['name']); return $route-&gt;assemble(array_merge($this-&gt;defaultParams, $params), $options); } } &lt;?php
 namespace Zend\Mvc\Router\Console; use Traversable; use Zend\Stdlib\RequestInterface as Request; use Zend\Mvc\Router\Exception; use Zend\Console\Request as ConsoleRequest; use Zend\Filter\FilterChain; use Zend\Validator\ValidatorChain; class Catchall implements RouteInterface { protected $parts; protected $defaults; protected $aliases; protected $assembledParams = array(); protected $validators; protected $filters; public function __construct(array $defaults = array()) { $this-&gt;defaults = $defaults; } public static function factory($options = array()) { return new static($options['defaults']); } public function match(Request $request) { if (!$request instanceof ConsoleRequest) { return null; } return new RouteMatch($this-&gt;defaults); } public function assemble(array $params = array(), array $options = array()) { $this-&gt;assembledParams = array(); } public function getAssembledParams() { return $this-&gt;assembledParams; } } &lt;?php
 namespace Zend\Mvc\Router\Console; use Zend\Mvc\Router\RouteInterface as BaseRoute; interface RouteInterface extends BaseRoute { public function getAssembledParams(); } &lt;?php
 namespace Zend\Mvc\Router\Console; use Zend\Mvc\Router\RouteMatch as BaseRouteMatch; class RouteMatch extends BaseRouteMatch { protected $length; public function __construct(array $params, $length = 0) { parent::__construct($params); $this-&gt;length = $length; } public function setMatchedRouteName($name) { if ($this-&gt;matchedRouteName === null) { $this-&gt;matchedRouteName = $name; } else { $this-&gt;matchedRouteName = $name . '/' . $this-&gt;matchedRouteName; } return $this; } public function merge(RouteMatch $match) { $this-&gt;params = array_merge($this-&gt;params, $match-&gt;getParams()); $this-&gt;length += $match-&gt;getLength(); $this-&gt;matchedRouteName = $match-&gt;getMatchedRouteName(); return $this; } public function getLength() { return $this-&gt;length; } } &lt;?php
 namespace Zend\Mvc\Router\Console; use Traversable; use Zend\Mvc\Router\Exception; use Zend\Mvc\Router\SimpleRouteStack as BaseSimpleRouteStack; use Zend\Stdlib\ArrayUtils; class SimpleRouteStack extends BaseSimpleRouteStack { protected function init() { $routes = $this-&gt;routePluginManager; foreach (array( 'catchall' =&gt; __NAMESPACE__ . '\Catchall', 'simple' =&gt; __NAMESPACE__ . '\Simple', ) as $name =&gt; $class ) { $routes-&gt;setInvokableClass($name, $class); }; } public function addRoute($name, $route, $priority = null) { if (!$route instanceof RouteInterface) { $route = $this-&gt;routeFromArray($route); } return parent::addRoute($name, $route, $priority); } protected function routeFromArray($specs) { if ($specs instanceof Traversable) { $specs = ArrayUtils::iteratorToArray($specs); } elseif (!is_array($specs)) { throw new Exception\InvalidArgumentException('Route definition must be an array or Traversable object'); } if (!isset($specs['type'])) $specs['type'] = 'simple'; $route = parent::routeFromArray($specs); if (!$route instanceof RouteInterface) { throw new Exception\RuntimeException('Given route does not implement Console route interface'); } return $route; } } &lt;?php
 namespace Zend\Mvc\Router\Console; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\RequestInterface as Request; use Zend\Mvc\Router\Exception; use Zend\Console\Request as ConsoleRequest; use Zend\Filter\FilterChain; use Zend\Validator\ValidatorChain; use Zend\Mvc\Exception\InvalidArgumentException; class Simple implements RouteInterface { protected $parts; protected $defaults; protected $aliases; protected $assembledParams = array(); protected $validators; protected $filters; public function __construct( $route, array $constraints = array(), array $defaults = array(), array $aliases = array(), $filters = null, $validators = null ) { $this-&gt;defaults = $defaults; $this-&gt;constraints = $constraints; $this-&gt;aliases = $aliases; if ($filters !== null) { if ($filters instanceof FilterChain) { $this-&gt;filters = $filters; } elseif ($filters instanceof Traversable) { $this-&gt;filters = new FilterChain(array( 'filters' =&gt; ArrayUtils::iteratorToArray($filters, false) )); } elseif (is_array($filters)) { $this-&gt;filters = new FilterChain(array( 'filters' =&gt; $filters )); } else { throw new InvalidArgumentException('Cannot use ' . gettype($filters) . ' as filters for ' . __CLASS__); } } if ($validators !== null) { if ($validators instanceof ValidatorChain) { $this-&gt;validators = $validators; } elseif ($validators instanceof Traversable || is_array($validators)) { $this-&gt;validators = new ValidatorChain(); foreach ($validators as $v) { $this-&gt;validators-&gt;attach($v); } } else { throw new InvalidArgumentException('Cannot use ' . gettype($validators) . ' as validators for ' . __CLASS__); } } $this-&gt;parts = $this-&gt;parseRouteDefinition($route); } public static function factory($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable set of options'); } if (!isset($options['route'])) { throw new Exception\InvalidArgumentException('Missing "route" in options array'); } foreach (array( 'constraints', 'defaults', 'aliases', ) as $opt) { if (!isset($options[$opt])) { $options[$opt] = array(); } } if (!isset($options['validators'])) { $options['validators'] = null; } if (!isset($options['filters'])) { $options['filters'] = null; } return new static( $options['route'], $options['constraints'], $options['defaults'], $options['aliases'], $options['filters'], $options['validators'] ); } protected function parseRouteDefinition($def) { $def = trim($def); $pos = 0; $length = strlen($def); $parts = array(); $unnamedGroupCounter = 1; while ($pos &lt; $length) { if (preg_match('/\G--(?&lt;name&gt;[a-zA-Z0-9][a-zA-Z0-9\_\-]+)(?&lt;hasValue&gt;=\S*?)?(?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; $m['name'], 'short' =&gt; false, 'literal' =&gt; false, 'required' =&gt; true, 'positional' =&gt; false, 'hasValue' =&gt; !empty($m['hasValue']), ); } elseif (preg_match( '/\G\[ *?--(?&lt;name&gt;[a-zA-Z0-9][a-zA-Z0-9\_\-]+) *?\](?: +|$)/s', $def, $m, 0, $pos )) { $item = array( 'name' =&gt; $m['name'], 'short' =&gt; false, 'literal' =&gt; false, 'required' =&gt; false, 'positional' =&gt; false, 'hasValue' =&gt; false, ); } elseif (preg_match( '/\G\[ *?--(?&lt;name&gt;[a-zA-Z0-9][a-zA-Z0-9\_\-]+)(?&lt;hasValue&gt;=\S*?)? *?\](?: +|$)/s', $def, $m, 0, $pos )) { $item = array( 'name' =&gt; $m['name'], 'short' =&gt; false, 'literal' =&gt; false, 'required' =&gt; false, 'positional' =&gt; false, 'hasValue' =&gt; !empty($m['hasValue']), ); } elseif (preg_match('/\G-(?&lt;name&gt;[a-zA-Z0-9])(?:=(?&lt;type&gt;[ns]))?(?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; $m['name'], 'short' =&gt; true, 'literal' =&gt; false, 'required' =&gt; true, 'positional' =&gt; false, 'hasValue' =&gt; !empty($m['type']) ? $m['type'] : null, ); } elseif (preg_match('/\G\[ *?-(?&lt;name&gt;[a-zA-Z0-9])(?:=(?&lt;type&gt;[ns]))? *?\](?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; $m['name'], 'short' =&gt; true, 'literal' =&gt; false, 'required' =&gt; false, 'positional' =&gt; false, 'hasValue' =&gt; !empty($m['type']) ? $m['type'] : null, ); } elseif (preg_match('/
                \G
                \[
                    (?&lt;options&gt;
                        (?:
                            \ *?
                            (?&lt;name&gt;[a-z0-9][a-zA-Z0-9_]*?)
                            \ *?
                            (?:\||(?=\]))
                            \ *?
                        )+
                    )
                \]
                (?:\:(?&lt;groupName&gt;[a-zA-Z0-9]+))?
                (?:\ +|$)
                /sx', $def, $m, 0, $pos ) ) { $options = preg_split('/ *\| */', trim($m['options']), 0, PREG_SPLIT_NO_EMPTY); array_unique($options); $item = array( 'name' =&gt; isset($m['groupName']) ? $m['groupName'] : 'unnamedGroup' . $unnamedGroupCounter++, 'literal' =&gt; true, 'required' =&gt; false, 'positional' =&gt; true, 'alternatives' =&gt; $options, 'hasValue' =&gt; false, ); } elseif (preg_match('/
                \G
                \(
                    (?&lt;options&gt;
                        (?:
                            \ *?
                            (?&lt;name&gt;[a-z0-9][a-zA-Z0-9_]+)
                            \ *?
                            (?:\||(?=\)))
                            \ *?
                        )+
                    )
                \)
                (?:\:(?&lt;groupName&gt;[a-zA-Z0-9]+))?
                (?:\ +|$)
                /sx', $def, $m, 0, $pos )) { $options = preg_split('/ *\| */', trim($m['options']), 0, PREG_SPLIT_NO_EMPTY); array_unique($options); $item = array( 'name' =&gt; isset($m['groupName']) ? $m['groupName']:'unnamedGroupAt' . $unnamedGroupCounter++, 'literal' =&gt; true, 'required' =&gt; true, 'positional' =&gt; true, 'alternatives' =&gt; $options, 'hasValue' =&gt; false, ); } elseif (preg_match('/
                \G
                \(
                    (?&lt;options&gt;
                        (?:
                            \ *?
                            \-+(?&lt;name&gt;[a-zA-Z0-9][a-zA-Z0-9_\-]*?)
                            \ *?
                            (?:\||(?=\)))
                            \ *?
                        )+
                    )
                \)
                (?:\:(?&lt;groupName&gt;[a-zA-Z0-9]+))?
                (?:\ +|$)
                /sx', $def, $m, 0, $pos )) { $options = preg_split('/ *\| */', trim($m['options']), 0, PREG_SPLIT_NO_EMPTY); array_unique($options); array_walk($options, function (&amp;$val, $key) { $val = ltrim($val, '-'); }); $item = array( 'name' =&gt; isset($m['groupName']) ? $m['groupName']:'unnamedGroupAt' . $unnamedGroupCounter++, 'literal' =&gt; false, 'required' =&gt; true, 'positional' =&gt; false, 'alternatives' =&gt; $options, 'hasValue' =&gt; false, ); } elseif (preg_match('/
                \G
                \[
                    (?&lt;options&gt;
                        (?:
                            \ *?
                            \-+(?&lt;name&gt;[a-zA-Z0-9][a-zA-Z0-9_\-]*?)
                            \ *?
                            (?:\||(?=\]))
                            \ *?
                        )+
                    )
                \]
                (?:\:(?&lt;groupName&gt;[a-zA-Z0-9]+))?
                (?:\ +|$)
                /sx', $def, $m, 0, $pos )) { $options = preg_split('/ *\| */', trim($m['options']), 0, PREG_SPLIT_NO_EMPTY); array_unique($options); array_walk($options, function (&amp;$val, $key) { $val = ltrim($val, '-'); }); $item = array( 'name' =&gt; isset($m['groupName']) ? $m['groupName']:'unnamedGroupAt' . $unnamedGroupCounter++, 'literal' =&gt; false, 'required' =&gt; false, 'positional' =&gt; false, 'alternatives' =&gt; $options, 'hasValue' =&gt; false, ); } elseif (preg_match('/\G\[ *?(?&lt;name&gt;[a-z0-9][a-zA-Z0-9\_]*?) *?\](?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; $m['name'], 'literal' =&gt; true, 'required' =&gt; false, 'positional' =&gt; true, 'hasValue' =&gt; false, ); } elseif (preg_match('/\G\[(?&lt;name&gt;[A-Z0-9\_]+)\](?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; strtolower( $m['name'] ), 'literal' =&gt; false, 'required' =&gt; false, 'positional' =&gt; true, 'hasValue' =&gt; true, ); } elseif (preg_match('/\G\[ *\&lt;(?&lt;name&gt;[a-zA-Z0-9\_]+)\&gt; *\](?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; strtolower( $m['name'] ), 'literal' =&gt; false, 'required' =&gt; false, 'positional' =&gt; true, 'hasValue' =&gt; true, ); } elseif (preg_match('/\G\&lt; *(?&lt;name&gt;[a-zA-Z0-9\_]+) *\&gt;(?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; $m['name'], 'literal' =&gt; false, 'required' =&gt; true, 'positional' =&gt; true, 'hasValue' =&gt; true, ); } elseif (preg_match('/\G(?&lt;name&gt;[A-Z0-9\_]*?)(?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; strtolower( $m['name'] ), 'literal' =&gt; false, 'required' =&gt; true, 'positional' =&gt; true, 'hasValue' =&gt; true, ); } elseif (preg_match('/\G(?&lt;name&gt;[a-z0-9][a-zA-Z0-9\_]*?)(?: +|$)/s', $def, $m, 0, $pos)) { $item = array( 'name' =&gt; $m['name'], 'literal' =&gt; true, 'required' =&gt; true, 'positional' =&gt; true, 'hasValue' =&gt; false, ); } else { throw new Exception\InvalidArgumentException( 'Cannot understand Console route at "' . substr( $def, $pos ) . '"' ); } $pos += strlen($m[0]); $parts[] = $item; } return $parts; } public function match(Request $request, $pathOffset = null) { if (!$request instanceof ConsoleRequest) { return null; } $params = $request-&gt;getParams()-&gt;toArray(); $matches = array(); $positional = $named = array(); foreach ($this-&gt;parts as &amp;$part) { if ($part['positional']) $positional[] = &amp;$part; else $named[] = &amp;$part; } foreach ($named as &amp;$part) { if (isset($part['alternatives'])) { $regex = '/^\-+(?&lt;name&gt;'; $regex .= join('|', $part['alternatives']); if ($part['hasValue']) { $regex .= ')(?:\=(?&lt;value&gt;.*?)$)?$/'; } else { $regex .= ')$/i'; } } else { if ($part['short'] === true) { if ($part['hasValue']) { $regex = '/^\-' . $part['name'] . '(?:\=(?&lt;value&gt;.*?)$)?$/i'; } else { $regex = '/^\-' . $part['name'] . '$/i'; } } elseif ($part['short'] === false) { if ($part['hasValue']) { $regex = '/^\-{2,}' . $part['name'] . '(?:\=(?&lt;value&gt;.*?)$)?$/i'; } else { $regex = '/^\-{2,}' . $part['name'] . '$/i'; } } } $value = $param = null; for ($x = 0, $count = count($params); $x &lt; $count; $x++) { if (preg_match($regex, $params[$x], $m)) { $param = $params[$x]; array_splice($params, $x, 1); if (isset($m['value'])) { $value = $m['value']; } if (isset($m['name'])) { $matchedName = $m['name']; } break; } } if (!$param) { if ($part['required']) { return null; } else { continue; } } if ($param &amp;&amp; !$part['hasValue']) { $value = true; } if (!$value &amp;&amp; $part['hasValue']) { if ($x &lt; count($params)+1) { $value = $params[$x]; array_splice($params, $x, 1); } else { return null; } } if ($part['hasValue'] &amp;&amp; isset($this-&gt;constraints[$part['name']])) { if ( !preg_match($this-&gt;constraints[$part['name']], $value) ) { return null; } } if ($part['hasValue']) { $matches[$part['name']] = $value; } else { $matches[$part['name']] = true; } if (isset($part['alternatives'])) { if ($part['hasValue']) { foreach ($part['alternatives'] as $alt) { if ($alt == $matchedName) { $matches[$alt] = $value; } else { $matches[$alt] = null; } } } else { foreach ($part['alternatives'] as $alt) { if ($alt == $matchedName) { $matches[$alt] = true; } else { $matches[$alt] = false; } } } } } foreach ($params as $param) { if (preg_match('#^\-+#', $param)) { return null; } } $argPos = 0; foreach ($positional as &amp;$part) { if (!isset($params[$argPos])) { if ($part['required']) { return null; } else { break; } } $value = $params[$argPos]; if ($part['literal']) { if ( (isset($part['alternatives']) &amp;&amp; !in_array($value, $part['alternatives'])) || (!isset($part['alternatives']) &amp;&amp; $value != $part['name']) ) { return null; } } if ($part['hasValue'] &amp;&amp; isset($this-&gt;constraints[$part['name']])) { if ( !preg_match($this-&gt;constraints[$part['name']], $value) ) { return null; } } if ($part['hasValue']) { $matches[$part['name']] = $value; } elseif (isset($part['alternatives'])) { foreach ($part['alternatives'] as $alt) { $matches[$alt] = $alt == $value; } $matches[$part['name']] = $value; } else { $matches[$part['name']] = true; } $argPos++; } if ($argPos &lt; count($params)) { return null; } return new RouteMatch(array_merge($this-&gt;defaults, $matches)); } public function assemble(array $params = array(), array $options = array()) { $this-&gt;assembledParams = array(); } public function getAssembledParams() { return $this-&gt;assembledParams; } } &lt;?php
 namespace Zend\Mvc; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; class ModuleRouteListener implements ListenerAggregateInterface { const MODULE_NAMESPACE = '__NAMESPACE__'; const ORIGINAL_CONTROLLER = '__CONTROLLER__'; protected $listeners = array(); public function attach(EventManagerInterface $events, $priority = 1) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_ROUTE, array($this, 'onRoute'), $priority); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function onRoute(MvcEvent $e) { $matches = $e-&gt;getRouteMatch(); if (!$matches instanceof Router\RouteMatch) { return; } $module = $matches-&gt;getParam(self::MODULE_NAMESPACE, false); if (!$module) { return; } $controller = $matches-&gt;getParam('controller', false); if (!$controller) { return; } if (0 === strpos($controller, $module)) { return; } $matches-&gt;setParam(self::ORIGINAL_CONTROLLER, $controller); $controller = $module . '\\' . str_replace(' ', '', ucwords(str_replace('-', ' ', $controller))); $matches-&gt;setParam('controller', $controller); } } &lt;?php
 namespace Zend\Mvc\Exception; class InvalidPluginException extends \Exception implements ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Exception; class DomainException extends \DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Exception; class InvalidControllerException extends \Exception implements ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\Mvc\Exception; class MissingLocatorException extends RuntimeException { } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Mvc\Application; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ApplicationFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { return new Application($serviceLocator-&gt;get('Config'), $serviceLocator); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\Di\DiAbstractServiceFactory; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class DiStrictAbstractServiceFactoryFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $diAbstractFactory = new DiStrictAbstractServiceFactory( $serviceLocator-&gt;get('Di'), DiStrictAbstractServiceFactory::USE_SL_BEFORE_DI ); $config = $serviceLocator-&gt;get('Config'); if (isset($config['di']['allowed_controllers'])) { $diAbstractFactory-&gt;setAllowedServiceNames($config['di']['allowed_controllers']); } return $diAbstractFactory; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\ConfigInterface; use Zend\ServiceManager\ServiceLocatorInterface; class FilterManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\Filter\FilterPluginManager'; public function createService(ServiceLocatorInterface $serviceLocator) { $plugins = parent::createService($serviceLocator); return $plugins; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\View\Resolver as ViewResolver; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ViewTemplateMapResolverFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $config = $serviceLocator-&gt;get('Config'); $map = array(); if (is_array($config) &amp;&amp; isset($config['view_manager'])) { $config = $config['view_manager']; if (is_array($config) &amp;&amp; isset($config['template_map'])) { $map = $config['template_map']; } } return new ViewResolver\TemplateMapResolver($map); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\ConfigInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ValidatorManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\Validator\ValidatorPluginManager'; public function createService(ServiceLocatorInterface $serviceLocator) { $plugins = parent::createService($serviceLocator); return $plugins; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\View\Resolver as ViewResolver; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ViewTemplatePathStackFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $config = $serviceLocator-&gt;get('Config'); $stack = array(); if (is_array($config) &amp;&amp; isset($config['view_manager'])) { $config = $config['view_manager']; if (is_array($config) &amp;&amp; isset($config['template_path_stack'])) { $stack = $config['template_path_stack']; } } $templatePathStack = new ViewResolver\TemplatePathStack(); $templatePathStack-&gt;addPaths($stack); return $templatePathStack; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\Di\DiServiceInitializer; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\ServiceManager\ServiceManager; class DiServiceInitializerFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { return new DiServiceInitializer($serviceLocator-&gt;get('Di'), $serviceLocator); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View\Renderer\FeedRenderer; class ViewFeedRendererFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $feedRenderer = new FeedRenderer(); return $feedRenderer; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Console\Console; use Zend\Mvc\Exception; use Zend\Mvc\Router\RouteMatch; use Zend\ServiceManager\ConfigInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View\Helper as ViewHelper; use Zend\View\Helper\HelperInterface as ViewHelperInterface; class ViewHelperManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\View\HelperPluginManager'; protected $defaultHelperMapClasses = array( 'Zend\Form\View\HelperConfig', 'Zend\I18n\View\HelperConfig', 'Zend\Navigation\View\HelperConfig' ); public function createService(ServiceLocatorInterface $serviceLocator) { $plugins = parent::createService($serviceLocator); foreach ($this-&gt;defaultHelperMapClasses as $configClass) { if (is_string($configClass) &amp;&amp; class_exists($configClass)) { $config = new $configClass; if (!$config instanceof ConfigInterface) { throw new Exception\RuntimeException(sprintf( 'Invalid service manager configuration class provided; received "%s", expected class implementing %s', $configClass, 'Zend\ServiceManager\ConfigInterface' )); } $config-&gt;configureServiceManager($plugins); } } $plugins-&gt;setFactory('url', function ($sm) use($serviceLocator) { $helper = new ViewHelper\Url; $router = Console::isConsole() ? 'HttpRouter' : 'Router'; $helper-&gt;setRouter($serviceLocator-&gt;get($router)); $match = $serviceLocator-&gt;get('application') -&gt;getMvcEvent() -&gt;getRouteMatch() ; if ($match instanceof RouteMatch) { $helper-&gt;setRouteMatch($match); } return $helper; }); $plugins-&gt;setFactory('basepath', function ($sm) use($serviceLocator) { $config = $serviceLocator-&gt;get('Config'); $basePathHelper = new ViewHelper\BasePath; if (isset($config['view_manager']) &amp;&amp; isset($config['view_manager']['base_path'])) { $basePath = $config['view_manager']['base_path']; } else { $basePath = $serviceLocator-&gt;get('Request')-&gt;getBasePath(); } $basePathHelper-&gt;setBasePath($basePath); return $basePathHelper; }); $plugins-&gt;setFactory('doctype', function ($sm) use($serviceLocator) { $config = $serviceLocator-&gt;get('Config'); $config = $config['view_manager']; $doctypeHelper = new ViewHelper\Doctype; if (isset($config['doctype'])) { $doctypeHelper-&gt;setDoctype($config['doctype']); } return $doctypeHelper; }); return $plugins; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Mvc\Controller\PluginManager; use Zend\ServiceManager\ServiceLocatorInterface; class ControllerPluginManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\Mvc\Controller\PluginManager'; public function createService(ServiceLocatorInterface $serviceLocator) { $plugins = parent::createService($serviceLocator); return $plugins; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\ServiceLocatorInterface; class SerializerAdapterPluginManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\Serializer\AdapterPluginManager'; public function createService(ServiceLocatorInterface $serviceLocator) { $serviceListener = $serviceLocator-&gt;get('ServiceListener'); $serviceListener-&gt;addServiceManager( $serviceLocator, 'serializers', 'Zend\ModuleManager\Feature\SerializerProviderInterface', 'getSerializerConfig' ); return parent::createService($serviceLocator); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Mvc\Router\Http\TreeRouteStack as HttpRouter; use Zend\Mvc\Router\Console\SimpleRouteStack as ConsoleRouter; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\Console\Console; class RouterFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator, $cName = null, $rName = null) { $config = $serviceLocator-&gt;get('Config'); $routePluginManager = $serviceLocator-&gt;get('RoutePluginManager'); if ( $rName === 'ConsoleRouter' || ($cName === 'router' &amp;&amp; Console::isConsole()) ) { if (isset($config['console']) &amp;&amp; isset($config['console']['router'])) { $routerConfig = $config['console']['router']; } else { $routerConfig = array(); } $router = new ConsoleRouter($routePluginManager); } else { $router = new HttpRouter($routePluginManager); $routerConfig = isset($config['router']) ? $config['router'] : array(); } if (isset($routerConfig['route_plugins'])) { $router-&gt;setRoutePluginManager($routerConfig['route_plugins']); } if (isset($routerConfig['routes'])) { $router-&gt;addRoutes($routerConfig['routes']); } if (isset($routerConfig['default_params'])) { $router-&gt;setDefaultParams($routerConfig['default_params']); } return $router; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Mvc\Exception\RuntimeException; use Zend\Mvc\Exception\InvalidArgumentException; use Zend\ModuleManager\Listener\ServiceListener; use Zend\ModuleManager\Listener\ServiceListenerInterface; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ServiceListenerFactory implements FactoryInterface { const MISSING_KEY_ERROR = 'Invalid service listener options detected, %s array must contain %s key.'; const VALUE_TYPE_ERROR = 'Invalid service listener options detected, %s must be a string, %s given.'; protected $defaultServiceConfig = array( 'invokables' =&gt; array( 'DispatchListener' =&gt; 'Zend\Mvc\DispatchListener', 'RouteListener' =&gt; 'Zend\Mvc\RouteListener', 'SendResponseListener' =&gt; 'Zend\Mvc\SendResponseListener' ), 'factories' =&gt; array( 'Application' =&gt; 'Zend\Mvc\Service\ApplicationFactory', 'Config' =&gt; 'Zend\Mvc\Service\ConfigFactory', 'ControllerLoader' =&gt; 'Zend\Mvc\Service\ControllerLoaderFactory', 'ControllerPluginManager' =&gt; 'Zend\Mvc\Service\ControllerPluginManagerFactory', 'ConsoleAdapter' =&gt; 'Zend\Mvc\Service\ConsoleAdapterFactory', 'ConsoleRouter' =&gt; 'Zend\Mvc\Service\RouterFactory', 'DependencyInjector' =&gt; 'Zend\Mvc\Service\DiFactory', 'DiAbstractServiceFactory' =&gt; 'Zend\Mvc\Service\DiAbstractServiceFactoryFactory', 'DiServiceInitializer' =&gt; 'Zend\Mvc\Service\DiServiceInitializerFactory', 'DiStrictAbstractServiceFactory' =&gt; 'Zend\Mvc\Service\DiStrictAbstractServiceFactoryFactory', 'FilterManager' =&gt; 'Zend\Mvc\Service\FilterManagerFactory', 'FormElementManager' =&gt; 'Zend\Mvc\Service\FormElementManagerFactory', 'HttpRouter' =&gt; 'Zend\Mvc\Service\RouterFactory', 'PaginatorPluginManager' =&gt; 'Zend\Mvc\Service\PaginatorPluginManagerFactory', 'Request' =&gt; 'Zend\Mvc\Service\RequestFactory', 'Response' =&gt; 'Zend\Mvc\Service\ResponseFactory', 'Router' =&gt; 'Zend\Mvc\Service\RouterFactory', 'RoutePluginManager' =&gt; 'Zend\Mvc\Service\RoutePluginManagerFactory', 'ValidatorManager' =&gt; 'Zend\Mvc\Service\ValidatorManagerFactory', 'ViewHelperManager' =&gt; 'Zend\Mvc\Service\ViewHelperManagerFactory', 'ViewFeedRenderer' =&gt; 'Zend\Mvc\Service\ViewFeedRendererFactory', 'ViewFeedStrategy' =&gt; 'Zend\Mvc\Service\ViewFeedStrategyFactory', 'ViewJsonRenderer' =&gt; 'Zend\Mvc\Service\ViewJsonRendererFactory', 'ViewJsonStrategy' =&gt; 'Zend\Mvc\Service\ViewJsonStrategyFactory', 'ViewManager' =&gt; 'Zend\Mvc\Service\ViewManagerFactory', 'ViewResolver' =&gt; 'Zend\Mvc\Service\ViewResolverFactory', 'ViewTemplateMapResolver' =&gt; 'Zend\Mvc\Service\ViewTemplateMapResolverFactory', 'ViewTemplatePathStack' =&gt; 'Zend\Mvc\Service\ViewTemplatePathStackFactory', ), 'aliases' =&gt; array( 'Configuration' =&gt; 'Config', 'Console' =&gt; 'ConsoleAdapter', 'Di' =&gt; 'DependencyInjector', 'Zend\Di\LocatorInterface' =&gt; 'DependencyInjector', 'Zend\Mvc\Controller\PluginManager' =&gt; 'ControllerPluginManager', 'Zend\View\Resolver\TemplateMapResolver' =&gt; 'ViewTemplateMapResolver', 'Zend\View\Resolver\TemplatePathStack' =&gt; 'ViewTemplatePathStack', 'Zend\View\Resolver\AggregateResolver' =&gt; 'ViewResolver', 'Zend\View\Resolver\ResolverInterface' =&gt; 'ViewResolver', ), ); public function createService(ServiceLocatorInterface $serviceLocator) { $configuration = $serviceLocator-&gt;get('ApplicationConfig'); if ($serviceLocator-&gt;has('ServiceListenerInterface')) { $serviceListener = $serviceLocator-&gt;get('ServiceListenerInterface'); if (!$serviceListener instanceof ServiceListenerInterface) { throw new RuntimeException( 'The service named ServiceListenerInterface must implement ' . 'Zend\ModuleManager\Listener\ServiceListenerInterface' ); } $serviceListener-&gt;setDefaultServiceConfig($this-&gt;defaultServiceConfig); } else { $serviceListener = new ServiceListener($serviceLocator, $this-&gt;defaultServiceConfig); } if (isset($configuration['service_listener_options'])) { if (!is_array($configuration['service_listener_options'])) { throw new InvalidArgumentException(sprintf( 'The value of service_listener_options must be an array, %s given.', gettype($configuration['service_listener_options']) )); } foreach ($configuration['service_listener_options'] as $key =&gt; $newServiceManager) { if (!isset($newServiceManager['service_manager'])) { throw new InvalidArgumentException(sprintf(self::MISSING_KEY_ERROR, $key, 'service_manager')); } elseif (!is_string($newServiceManager['service_manager'])) { throw new InvalidArgumentException(sprintf( self::VALUE_TYPE_ERROR, 'service_manager', gettype($newServiceManager['service_manager']) )); } if (!isset($newServiceManager['config_key'])) { throw new InvalidArgumentException(sprintf(self::MISSING_KEY_ERROR, $key, 'config_key')); } elseif (!is_string($newServiceManager['config_key'])) { throw new InvalidArgumentException(sprintf( self::VALUE_TYPE_ERROR, 'config_key', gettype($newServiceManager['config_key']) )); } if (!isset($newServiceManager['interface'])) { throw new InvalidArgumentException(sprintf(self::MISSING_KEY_ERROR, $key, 'interface')); } elseif (!is_string($newServiceManager['interface'])) { throw new InvalidArgumentException(sprintf( self::VALUE_TYPE_ERROR, 'interface', gettype($newServiceManager['interface']) )); } if (!isset($newServiceManager['method'])) { throw new InvalidArgumentException(sprintf(self::MISSING_KEY_ERROR, $key, 'method')); } elseif (!is_string($newServiceManager['method'])) { throw new InvalidArgumentException(sprintf( self::VALUE_TYPE_ERROR, 'method', gettype($newServiceManager['method']) )); } $serviceListener-&gt;addServiceManager( $newServiceManager['service_manager'], $newServiceManager['config_key'], $newServiceManager['interface'], $newServiceManager['method'] ); } } return $serviceListener; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Mvc\Controller\ControllerManager; use Zend\Mvc\Service\DiStrictAbstractServiceFactory; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ControllerLoaderFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $controllerLoader = new ControllerManager(); $controllerLoader-&gt;setServiceLocator($serviceLocator); $controllerLoader-&gt;addPeeringServiceManager($serviceLocator); $config = $serviceLocator-&gt;get('Config'); if (isset($config['di']) &amp;&amp; isset($config['di']['allowed_controllers']) &amp;&amp; $serviceLocator-&gt;has('Di')) { $controllerLoader-&gt;addAbstractFactory($serviceLocator-&gt;get('DiStrictAbstractServiceFactory')); } return $controllerLoader; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Http\PhpEnvironment\Request as HttpRequest; use Zend\Console\Request as ConsoleRequest; use Zend\Console\Console; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class RequestFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { if (Console::isConsole()) { return new ConsoleRequest(); } return new HttpRequest(); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\EventManager\EventManager; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class EventManagerFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $em = new EventManager(); $em-&gt;setSharedManager($serviceLocator-&gt;get('SharedEventManager')); return $em; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\View\Resolver as ViewResolver; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ViewResolverFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $resolver = new ViewResolver\AggregateResolver(); $resolver-&gt;attach($serviceLocator-&gt;get('ViewTemplateMapResolver')); $resolver-&gt;attach($serviceLocator-&gt;get('ViewTemplatePathStack')); return $resolver; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\ServiceManager\AbstractFactoryInterface; use Zend\ServiceManager\AbstractPluginManager; use Zend\ServiceManager\Exception; use Zend\Di\Di; use Zend\Di\Exception\ClassNotFoundException; use Zend\Mvc\Exception\DomainException; class DiStrictAbstractServiceFactory extends Di implements AbstractFactoryInterface { const USE_SL_BEFORE_DI = 'before'; const USE_SL_AFTER_DI = 'after'; const USE_SL_NONE = 'none'; protected $di = null; protected $useServiceLocator = self::USE_SL_AFTER_DI; protected $serviceLocator = null; protected $allowedServiceNames = array(); public function __construct(Di $di, $useServiceLocator = self::USE_SL_NONE) { $this-&gt;useServiceLocator = $useServiceLocator; $this-&gt;di = $di; $this-&gt;definitions = $this-&gt;di-&gt;definitions; $this-&gt;instanceManager = $this-&gt;di-&gt;instanceManager; } public function setAllowedServiceNames(array $allowedServiceNames) { $this-&gt;allowedServiceNames = array_flip(array_values($allowedServiceNames)); } public function getAllowedServiceNames() { return array_keys($this-&gt;allowedServiceNames); } public function createServiceWithName(ServiceLocatorInterface $serviceLocator, $serviceName, $requestedName) { if (!isset($this-&gt;allowedServiceNames[$requestedName])) { throw new Exception\InvalidServiceNameException('Service "' . $requestedName . '" is not whitelisted'); } if ($serviceLocator instanceof AbstractPluginManager) { $this-&gt;serviceLocator = $serviceLocator-&gt;getServiceLocator(); } else { $this-&gt;serviceLocator = $serviceLocator; } return parent::get($requestedName); } public function get($name, array $params = array()) { if (null === $this-&gt;serviceLocator) { throw new DomainException('No ServiceLocator defined, use `createServiceWithName` instead of `get`'); } if (self::USE_SL_BEFORE_DI === $this-&gt;useServiceLocator &amp;&amp; $this-&gt;serviceLocator-&gt;has($name)) { return $this-&gt;serviceLocator-&gt;get($name); } try { return parent::get($name, $params); } catch (ClassNotFoundException $e) { if (self::USE_SL_AFTER_DI === $this-&gt;useServiceLocator &amp;&amp; $this-&gt;serviceLocator-&gt;has($name)) { return $this-&gt;serviceLocator-&gt;get($name); } throw new Exception\ServiceNotFoundException( sprintf('Service %s was not found in this DI instance', $name), null, $e ); } } public function canCreateServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName) { return isset($this-&gt;allowedServiceNames[$requestedName]); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Console\Console; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\Mvc\View\Console\ViewManager as ConsoleViewManager; use Zend\Mvc\View\Http\ViewManager as HttpViewManager; class ViewManagerFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { if (Console::isConsole()) { return new ConsoleViewManager(); } return new HttpViewManager(); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ModuleManager\Listener\DefaultListenerAggregate; use Zend\ModuleManager\Listener\ListenerOptions; use Zend\ModuleManager\ModuleEvent; use Zend\ModuleManager\ModuleManager; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ModuleManagerFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { if (!$serviceLocator-&gt;has('ServiceListener')) { $serviceLocator-&gt;setFactory('ServiceListener', 'Zend\Mvc\Service\ServiceListenerFactory'); } $configuration = $serviceLocator-&gt;get('ApplicationConfig'); $listenerOptions = new ListenerOptions($configuration['module_listener_options']); $defaultListeners = new DefaultListenerAggregate($listenerOptions); $serviceListener = $serviceLocator-&gt;get('ServiceListener'); $serviceListener-&gt;addServiceManager( $serviceLocator, 'service_manager', 'Zend\ModuleManager\Feature\ServiceProviderInterface', 'getServiceConfig' ); $serviceListener-&gt;addServiceManager( 'ControllerLoader', 'controllers', 'Zend\ModuleManager\Feature\ControllerProviderInterface', 'getControllerConfig' ); $serviceListener-&gt;addServiceManager( 'ControllerPluginManager', 'controller_plugins', 'Zend\ModuleManager\Feature\ControllerPluginProviderInterface', 'getControllerPluginConfig' ); $serviceListener-&gt;addServiceManager( 'ViewHelperManager', 'view_helpers', 'Zend\ModuleManager\Feature\ViewHelperProviderInterface', 'getViewHelperConfig' ); $serviceListener-&gt;addServiceManager( 'ValidatorManager', 'validators', 'Zend\ModuleManager\Feature\ValidatorProviderInterface', 'getValidatorConfig' ); $serviceListener-&gt;addServiceManager( 'FilterManager', 'filters', 'Zend\ModuleManager\Feature\FilterProviderInterface', 'getFilterConfig' ); $serviceListener-&gt;addServiceManager( 'FormElementManager', 'form_elements', 'Zend\ModuleManager\Feature\FormElementProviderInterface', 'getFormElementConfig' ); $serviceListener-&gt;addServiceManager( 'RoutePluginManager', 'route_manager', 'Zend\ModuleManager\Feature\RouteProviderInterface', 'getRouteConfig' ); $events = $serviceLocator-&gt;get('EventManager'); $events-&gt;attach($defaultListeners); $events-&gt;attach($serviceListener); $moduleEvent = new ModuleEvent; $moduleEvent-&gt;setParam('ServiceManager', $serviceLocator); $moduleManager = new ModuleManager($configuration['modules'], $events); $moduleManager-&gt;setEvent($moduleEvent); return $moduleManager; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Di\Config; use Zend\Di\Di; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class DiFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $di = new Di(); $config = $serviceLocator-&gt;get('Config'); if (isset($config['di'])) { $config = new Config($config['di']); $config-&gt;configure($di); } return $di; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; use Zend\ServiceManager\ConfigInterface; use Zend\ServiceManager\ServiceLocatorAwareInterface; use Zend\ServiceManager\ServiceManager; use Zend\ServiceManager\ServiceManagerAwareInterface; class ServiceManagerConfig implements ConfigInterface { protected $invokables = array( 'SharedEventManager' =&gt; 'Zend\EventManager\SharedEventManager', ); protected $factories = array( 'EventManager' =&gt; 'Zend\Mvc\Service\EventManagerFactory', 'ModuleManager' =&gt; 'Zend\Mvc\Service\ModuleManagerFactory', ); protected $abstractFactories = array(); protected $aliases = array( 'Zend\EventManager\EventManagerInterface' =&gt; 'EventManager', ); protected $shared = array( 'EventManager' =&gt; false, ); public function __construct(array $configuration = array()) { if (isset($configuration['invokables'])) { $this-&gt;invokables = array_merge($this-&gt;invokables, $configuration['invokables']); } if (isset($configuration['factories'])) { $this-&gt;factories = array_merge($this-&gt;factories, $configuration['factories']); } if (isset($configuration['abstract_factories'])) { $this-&gt;abstractFactories = array_merge($this-&gt;abstractFactories, $configuration['abstract_factories']); } if (isset($configuration['aliases'])) { $this-&gt;aliases = array_merge($this-&gt;aliases, $configuration['aliases']); } if (isset($configuration['shared'])) { $this-&gt;shared = array_merge($this-&gt;shared, $configuration['shared']); } } public function configureServiceManager(ServiceManager $serviceManager) { foreach ($this-&gt;invokables as $name =&gt; $class) { $serviceManager-&gt;setInvokableClass($name, $class); } foreach ($this-&gt;factories as $name =&gt; $factoryClass) { $serviceManager-&gt;setFactory($name, $factoryClass); } foreach ($this-&gt;abstractFactories as $factoryClass) { $serviceManager-&gt;addAbstractFactory($factoryClass); } foreach ($this-&gt;aliases as $name =&gt; $service) { $serviceManager-&gt;setAlias($name, $service); } foreach ($this-&gt;shared as $name =&gt; $value) { $serviceManager-&gt;setShared($name, $value); } $serviceManager-&gt;addInitializer(function ($instance) use ($serviceManager) { if ($instance instanceof EventManagerAwareInterface) { if ($instance-&gt;getEventManager() instanceof EventManagerInterface) { $instance-&gt;getEventManager()-&gt;setSharedManager( $serviceManager-&gt;get('SharedEventManager') ); } else { $instance-&gt;setEventManager($serviceManager-&gt;get('EventManager')); } } }); $serviceManager-&gt;addInitializer(function ($instance) use ($serviceManager) { if ($instance instanceof ServiceManagerAwareInterface) { $instance-&gt;setServiceManager($serviceManager); } }); $serviceManager-&gt;addInitializer(function ($instance) use ($serviceManager) { if ($instance instanceof ServiceLocatorAwareInterface) { $instance-&gt;setServiceLocator($serviceManager); } }); $serviceManager-&gt;setService('ServiceManager', $serviceManager); $serviceManager-&gt;setAlias('Zend\ServiceManager\ServiceLocatorInterface', 'ServiceManager'); $serviceManager-&gt;setAlias('Zend\ServiceManager\ServiceManager', 'ServiceManager'); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View\Strategy\JsonStrategy; class ViewJsonStrategyFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $jsonRenderer = $serviceLocator-&gt;get('ViewJsonRenderer'); $jsonStrategy = new JsonStrategy($jsonRenderer); return $jsonStrategy; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View\Renderer\JsonRenderer; class ViewJsonRendererFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $jsonRenderer = new JsonRenderer(); return $jsonRenderer; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\ServiceLocatorInterface; class PaginatorPluginManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\Paginator\AdapterPluginManager'; public function createService(ServiceLocatorInterface $serviceLocator) { $plugins = parent::createService($serviceLocator); return $plugins; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\Di\DiAbstractServiceFactory; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\ServiceManager\ServiceManager; class DiAbstractServiceFactoryFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $factory = new DiAbstractServiceFactory($serviceLocator-&gt;get('Di'), DiAbstractServiceFactory::USE_SL_BEFORE_DI); if ($serviceLocator instanceof ServiceManager) { $serviceLocator-&gt;addAbstractFactory($factory); } return $factory; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Form\FormElementManager; use Zend\ServiceManager\ServiceLocatorInterface; class FormElementManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\Form\FormElementManager'; public function createService(ServiceLocatorInterface $serviceLocator) { $plugins = parent::createService($serviceLocator); return $plugins; } } &lt;?php
 namespace Zend\Mvc\Service; use stdClass; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\Console\Console; use Zend\Console\Adapter\AdapterInterface; class ConsoleAdapterFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { if (!Console::isConsole()) { return new stdClass(); } $config = $serviceLocator-&gt;get('Config'); if (!empty($config['console']) &amp;&amp; !empty($config['console']['adapter'])) { $adapter = $serviceLocator-&gt;get($config['console']['adapter']); } else { $adapter = Console::detectBestAdapter(); $adapter = new $adapter(); } if (!$adapter instanceof AdapterInterface) { return new stdClass(); } if (!empty($config['console']) &amp;&amp; !empty($config['console']['charset'])) { $charset = $serviceLocator-&gt;get($config['console']['charset']); $adapter-&gt;setCharset($charset); } return $adapter; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\Http\PhpEnvironment\Response as HttpResponse; use Zend\Console\Response as ConsoleResponse; use Zend\Console\Console; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ResponseFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { if (Console::isConsole()) { return new ConsoleResponse(); } return new HttpResponse(); } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View\Strategy\FeedStrategy; class ViewFeedStrategyFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $feedRenderer = $serviceLocator-&gt;get('ViewFeedRenderer'); $feedStrategy = new FeedStrategy($feedRenderer); return $feedStrategy; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class ConfigFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $mm = $serviceLocator-&gt;get('ModuleManager'); $mm-&gt;loadModules(); $moduleParams = $mm-&gt;getEvent()-&gt;getParams(); $config = $moduleParams['configListener']-&gt;getMergedConfig(false); return $config; } } &lt;?php
 namespace Zend\Mvc\Service; use Zend\ServiceManager\AbstractPluginManager; use Zend\ServiceManager\Di\DiAbstractServiceFactory; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; abstract class AbstractPluginManagerFactory implements FactoryInterface { const PLUGIN_MANAGER_CLASS = 'AbstractPluginManager'; public function createService(ServiceLocatorInterface $serviceLocator) { $pluginManagerClass = static::PLUGIN_MANAGER_CLASS; $plugins = new $pluginManagerClass; $plugins-&gt;setServiceLocator($serviceLocator); $configuration = $serviceLocator-&gt;get('Config'); if (isset($configuration['di']) &amp;&amp; $serviceLocator-&gt;has('Di')) { $plugins-&gt;addAbstractFactory($serviceLocator-&gt;get('DiAbstractServiceFactory')); } return $plugins; } } &lt;?php
 namespace Zend\Mvc\Service; class RoutePluginManagerFactory extends AbstractPluginManagerFactory { const PLUGIN_MANAGER_CLASS = 'Zend\Mvc\Router\RoutePluginManager'; } &lt;?php
 namespace Zend\Mvc\View\Http; use Zend\EventManager\EventManagerInterface as Events; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\MvcEvent; use Zend\Stdlib\ArrayUtils; use Zend\View\Model\ViewModel; class CreateViewModelListener implements ListenerAggregateInterface { protected $listeners = array(); public function attach(Events $events) { $this-&gt;listeners[] = $events-&gt;attach('dispatch', array($this, 'createViewModelFromArray'), -80); $this-&gt;listeners[] = $events-&gt;attach('dispatch', array($this, 'createViewModelFromNull'), -80); } public function detach(Events $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function createViewModelFromArray(MvcEvent $e) { $result = $e-&gt;getResult(); if (!ArrayUtils::hasStringKeys($result, true)) { return; } $model = new ViewModel($result); $e-&gt;setResult($model); } public function createViewModelFromNull(MvcEvent $e) { $result = $e-&gt;getResult(); if (null !== $result) { return; } $model = new ViewModel; $e-&gt;setResult($model); } } &lt;?php
 namespace Zend\Mvc\View\Http; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Http\Response as HttpResponse; use Zend\Mvc\Application; use Zend\Mvc\MvcEvent; use Zend\Stdlib\ResponseInterface as Response; use Zend\View\Model\ViewModel; class ExceptionStrategy implements ListenerAggregateInterface { protected $displayExceptions = false; protected $exceptionTemplate = 'error'; protected $listeners = array(); public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($this, 'prepareExceptionViewModel')); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_RENDER_ERROR, array($this, 'prepareExceptionViewModel')); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function setDisplayExceptions($displayExceptions) { $this-&gt;displayExceptions = (bool) $displayExceptions; return $this; } public function displayExceptions() { return $this-&gt;displayExceptions; } public function setExceptionTemplate($exceptionTemplate) { $this-&gt;exceptionTemplate = (string) $exceptionTemplate; return $this; } public function getExceptionTemplate() { return $this-&gt;exceptionTemplate; } public function prepareExceptionViewModel(MvcEvent $e) { $error = $e-&gt;getError(); if (empty($error)) { return; } $result = $e-&gt;getResult(); if ($result instanceof Response) { return; } switch ($error) { case Application::ERROR_CONTROLLER_NOT_FOUND: case Application::ERROR_CONTROLLER_INVALID: case Application::ERROR_ROUTER_NO_MATCH: return; case Application::ERROR_EXCEPTION: default: $model = new ViewModel(array( 'message' =&gt; 'An error occurred during execution; please try again later.', 'exception' =&gt; $e-&gt;getParam('exception'), 'display_exceptions' =&gt; $this-&gt;displayExceptions(), )); $model-&gt;setTemplate($this-&gt;getExceptionTemplate()); $e-&gt;setResult($model); $response = $e-&gt;getResponse(); if (!$response) { $response = new HttpResponse(); $response-&gt;setStatusCode(500); $e-&gt;setResponse($response); } else { $statusCode = $response-&gt;getStatusCode(); if ($statusCode === 200) { $response-&gt;setStatusCode(500); } } break; } } } &lt;?php
 namespace Zend\Mvc\View\Http; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Http\Request as HttpRequest; use Zend\Console\Request as ConsoleRequest; use Zend\Mvc\MvcEvent; class InjectRoutematchParamsListener implements ListenerAggregateInterface { protected $listeners = array(); protected $overwrite = true; public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach('dispatch', array($this, 'injectParams'), 90); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function injectParams(MvcEvent $e) { $routeMatchParams = $e-&gt;getRouteMatch()-&gt;getParams(); $request = $e-&gt;getRequest(); if ($request instanceof ConsoleRequest) { $params = $request-&gt;params(); } elseif ($request instanceof HttpRequest) { $params = $request-&gt;get(); } else { return; } if ($this-&gt;overwrite) { foreach ($routeMatchParams as $key =&gt; $val) { $params-&gt;$key = $val; } } else { foreach ($routeMatchParams as $key =&gt; $val) { if (!$params-&gt;offsetExists($key)) { $params-&gt;$key = $val; } } } } public function setOverwrite($overwrite) { $this-&gt;overwrite = $overwrite; } public function getOverwrite() { return $this-&gt;overwrite; } } &lt;?php
 namespace Zend\Mvc\View\Http; use Zend\EventManager\EventManagerInterface as Events; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\MvcEvent; use Zend\View\Model\ClearableModelInterface; use Zend\View\Model\ModelInterface as ViewModel; class InjectViewModelListener implements ListenerAggregateInterface { protected $inflector; protected $listeners = array(); public function attach(Events $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'injectViewModel'), -100); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($this, 'injectViewModel'), -100); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_RENDER_ERROR, array($this, 'injectViewModel'), -100); } public function detach(Events $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function injectViewModel(MvcEvent $e) { $result = $e-&gt;getResult(); if (!$result instanceof ViewModel) { return; } $model = $e-&gt;getViewModel(); if ($result-&gt;terminate()) { $e-&gt;setViewModel($result); return; } if ($e-&gt;getError() &amp;&amp; $model instanceof ClearableModelInterface) { $model-&gt;clearChildren(); } $model-&gt;addChild($result); } } &lt;?php
 namespace Zend\Mvc\View\Http; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Http\Response as HttpResponse; use Zend\Mvc\Application; use Zend\Mvc\MvcEvent; use Zend\Stdlib\ResponseInterface as Response; use Zend\View\Model\ViewModel; class RouteNotFoundStrategy implements ListenerAggregateInterface { protected $listeners = array(); protected $displayExceptions = false; protected $displayNotFoundReason = false; protected $notFoundTemplate = 'error'; protected $reason = false; public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'prepareNotFoundViewModel'), -90); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($this, 'detectNotFoundError')); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($this, 'prepareNotFoundViewModel')); } public function setDisplayExceptions($displayExceptions) { $this-&gt;displayExceptions = (bool) $displayExceptions; return $this; } public function displayExceptions() { return $this-&gt;displayExceptions; } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function setDisplayNotFoundReason($displayNotFoundReason) { $this-&gt;displayNotFoundReason = (bool) $displayNotFoundReason; return $this; } public function displayNotFoundReason() { return $this-&gt;displayNotFoundReason; } public function setNotFoundTemplate($notFoundTemplate) { $this-&gt;notFoundTemplate = (string) $notFoundTemplate; return $this; } public function getNotFoundTemplate() { return $this-&gt;notFoundTemplate; } public function detectNotFoundError(MvcEvent $e) { $error = $e-&gt;getError(); if (empty($error)) { return; } switch ($error) { case Application::ERROR_CONTROLLER_NOT_FOUND: case Application::ERROR_CONTROLLER_INVALID: case Application::ERROR_ROUTER_NO_MATCH: $this-&gt;reason = $error; $response = $e-&gt;getResponse(); if (!$response) { $response = new HttpResponse(); $e-&gt;setResponse($response); } $response-&gt;setStatusCode(404); break; default: return; } } public function prepareNotFoundViewModel(MvcEvent $e) { $vars = $e-&gt;getResult(); if ($vars instanceof Response) { return; } $response = $e-&gt;getResponse(); if ($response-&gt;getStatusCode() != 404) { return; } if (!$vars instanceof ViewModel) { $model = new ViewModel(); if (is_string($vars)) { $model-&gt;setVariable('message', $vars); } else { $model-&gt;setVariable('message', 'Page not found.'); } } else { $model = $vars; if ($model-&gt;getVariable('message') === null) { $model-&gt;setVariable('message', 'Page not found.'); } } $model-&gt;setTemplate($this-&gt;getNotFoundTemplate()); $this-&gt;injectNotFoundReason($model, $e); $this-&gt;injectException($model, $e); $this-&gt;injectController($model, $e); $e-&gt;setResult($model); } protected function injectNotFoundReason(ViewModel $model) { if (!$this-&gt;displayNotFoundReason()) { return; } if ($this-&gt;reason) { $model-&gt;setVariable('reason', $this-&gt;reason); return; } $model-&gt;setVariable('reason', Application::ERROR_CONTROLLER_CANNOT_DISPATCH); } protected function injectException($model, $e) { if (!$this-&gt;displayExceptions()) { return; } $model-&gt;setVariable('display_exceptions', true); $exception = $e-&gt;getParam('exception', false); if (!$exception instanceof \Exception) { return; } $model-&gt;setVariable('exception', $exception); } protected function injectController($model, $e) { if (!$this-&gt;displayExceptions() &amp;&amp; !$this-&gt;displayNotFoundReason()) { return; } $controller = $e-&gt;getController(); if (empty($controller)) { $routeMatch = $e-&gt;getRouteMatch(); if (empty($routeMatch)) { return; } $controller = $routeMatch-&gt;getParam('controller', false); if (!$controller) { return; } } $controllerClass = $e-&gt;getControllerClass(); $model-&gt;setVariable('controller', $controller); $model-&gt;setVariable('controller_class', $controllerClass); } } &lt;?php
 namespace Zend\Mvc\View\Http; use ArrayAccess; use Traversable; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\MvcEvent; use Zend\Mvc\View\SendResponseListener; use Zend\ServiceManager\ServiceManager; use Zend\View\HelperPluginManager as ViewHelperManager; use Zend\View\Renderer\PhpRenderer as ViewPhpRenderer; use Zend\View\Resolver as ViewResolver; use Zend\View\Strategy\PhpRendererStrategy; use Zend\View\View; class ViewManager implements ListenerAggregateInterface { protected $listeners = array(); protected $config; protected $event; protected $services; protected $exceptionStrategy; protected $helperManager; protected $mvcRenderingStrategy; protected $renderer; protected $rendererStrategy; protected $resolver; protected $routeNotFoundStrategy; protected $view; protected $viewModel; public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_BOOTSTRAP, array($this, 'onBootstrap'), 10000); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function onBootstrap($event) { $application = $event-&gt;getApplication(); $services = $application-&gt;getServiceManager(); $config = $services-&gt;get('Config'); $events = $application-&gt;getEventManager(); $sharedEvents = $events-&gt;getSharedManager(); $this-&gt;config = isset($config['view_manager']) &amp;&amp; (is_array($config['view_manager']) || $config['view_manager'] instanceof ArrayAccess) ? $config['view_manager'] : array(); $this-&gt;services = $services; $this-&gt;event = $event; $routeNotFoundStrategy = $this-&gt;getRouteNotFoundStrategy(); $exceptionStrategy = $this-&gt;getExceptionStrategy(); $mvcRenderingStrategy = $this-&gt;getMvcRenderingStrategy(); $createViewModelListener = new CreateViewModelListener(); $injectTemplateListener = new InjectTemplateListener(); $injectViewModelListener = new InjectViewModelListener(); $this-&gt;registerMvcRenderingStrategies($events); $this-&gt;registerViewStrategies(); $events-&gt;attach($routeNotFoundStrategy); $events-&gt;attach($exceptionStrategy); $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($injectViewModelListener, 'injectViewModel'), -100); $events-&gt;attach(MvcEvent::EVENT_RENDER_ERROR, array($injectViewModelListener, 'injectViewModel'), -100); $events-&gt;attach($mvcRenderingStrategy); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($createViewModelListener, 'createViewModelFromArray'), -80); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($routeNotFoundStrategy, 'prepareNotFoundViewModel'), -90); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($createViewModelListener, 'createViewModelFromNull'), -80); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($injectTemplateListener, 'injectTemplate'), -90); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($injectViewModelListener, 'injectViewModel'), -100); } public function getHelperManager() { if ($this-&gt;helperManager) { return $this-&gt;helperManager; } return $this-&gt;helperManager = $this-&gt;services-&gt;get('ViewHelperManager'); } public function getResolver() { if (null === $this-&gt;resolver) { $this-&gt;resolver = $this-&gt;services-&gt;get('ViewResolver'); } return $this-&gt;resolver; } public function getRenderer() { if ($this-&gt;renderer) { return $this-&gt;renderer; } $this-&gt;renderer = new ViewPhpRenderer; $this-&gt;renderer-&gt;setHelperPluginManager($this-&gt;getHelperManager()); $this-&gt;renderer-&gt;setResolver($this-&gt;getResolver()); $model = $this-&gt;getViewModel(); $modelHelper = $this-&gt;renderer-&gt;plugin('view_model'); $modelHelper-&gt;setRoot($model); $this-&gt;services-&gt;setService('ViewRenderer', $this-&gt;renderer); $this-&gt;services-&gt;setAlias('Zend\View\Renderer\PhpRenderer', 'ViewRenderer'); $this-&gt;services-&gt;setAlias('Zend\View\Renderer\RendererInterface', 'ViewRenderer'); return $this-&gt;renderer; } public function getRendererStrategy() { if ($this-&gt;rendererStrategy) { return $this-&gt;rendererStrategy; } $this-&gt;rendererStrategy = new PhpRendererStrategy( $this-&gt;getRenderer() ); $this-&gt;services-&gt;setService('ViewPhpRendererStrategy', $this-&gt;rendererStrategy); $this-&gt;services-&gt;setAlias('Zend\View\Strategy\PhpRendererStrategy', 'ViewPhpRendererStrategy'); return $this-&gt;rendererStrategy; } public function getView() { if ($this-&gt;view) { return $this-&gt;view; } $this-&gt;view = new View(); $this-&gt;view-&gt;setEventManager($this-&gt;services-&gt;get('EventManager')); $this-&gt;view-&gt;getEventManager()-&gt;attach($this-&gt;getRendererStrategy()); $this-&gt;services-&gt;setService('View', $this-&gt;view); $this-&gt;services-&gt;setAlias('Zend\View\View', 'View'); return $this-&gt;view; } public function getLayoutTemplate() { $layout = 'layout/layout'; if (isset($this-&gt;config['layout'])) { $layout = $this-&gt;config['layout']; } return $layout; } public function getMvcRenderingStrategy() { if ($this-&gt;mvcRenderingStrategy) { return $this-&gt;mvcRenderingStrategy; } $this-&gt;mvcRenderingStrategy = new DefaultRenderingStrategy($this-&gt;getView()); $this-&gt;mvcRenderingStrategy-&gt;setLayoutTemplate($this-&gt;getLayoutTemplate()); $this-&gt;services-&gt;setService('DefaultRenderingStrategy', $this-&gt;mvcRenderingStrategy); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\DefaultRenderingStrategy', 'DefaultRenderingStrategy'); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\Http\DefaultRenderingStrategy', 'DefaultRenderingStrategy'); return $this-&gt;mvcRenderingStrategy; } public function getExceptionStrategy() { if ($this-&gt;exceptionStrategy) { return $this-&gt;exceptionStrategy; } $this-&gt;exceptionStrategy = new ExceptionStrategy(); $displayExceptions = false; $exceptionTemplate = 'error'; if (isset($this-&gt;config['display_exceptions'])) { $displayExceptions = $this-&gt;config['display_exceptions']; } if (isset($this-&gt;config['exception_template'])) { $exceptionTemplate = $this-&gt;config['exception_template']; } $this-&gt;exceptionStrategy-&gt;setDisplayExceptions($displayExceptions); $this-&gt;exceptionStrategy-&gt;setExceptionTemplate($exceptionTemplate); $this-&gt;services-&gt;setService('ExceptionStrategy', $this-&gt;exceptionStrategy); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\ExceptionStrategy', 'ExceptionStrategy'); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\Http\ExceptionStrategy', 'ExceptionStrategy'); return $this-&gt;exceptionStrategy; } public function getRouteNotFoundStrategy() { if ($this-&gt;routeNotFoundStrategy) { return $this-&gt;routeNotFoundStrategy; } $this-&gt;routeNotFoundStrategy = new RouteNotFoundStrategy(); $displayExceptions = false; $displayNotFoundReason = false; $notFoundTemplate = '404'; if (isset($this-&gt;config['display_exceptions'])) { $displayExceptions = $this-&gt;config['display_exceptions']; } if (isset($this-&gt;config['display_not_found_reason'])) { $displayNotFoundReason = $this-&gt;config['display_not_found_reason']; } if (isset($this-&gt;config['not_found_template'])) { $notFoundTemplate = $this-&gt;config['not_found_template']; } $this-&gt;routeNotFoundStrategy-&gt;setDisplayExceptions($displayExceptions); $this-&gt;routeNotFoundStrategy-&gt;setDisplayNotFoundReason($displayNotFoundReason); $this-&gt;routeNotFoundStrategy-&gt;setNotFoundTemplate($notFoundTemplate); $this-&gt;services-&gt;setService('RouteNotFoundStrategy', $this-&gt;routeNotFoundStrategy); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\RouteNotFoundStrategy', 'RouteNotFoundStrategy'); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\Http\RouteNotFoundStrategy', 'RouteNotFoundStrategy'); $this-&gt;services-&gt;setAlias('404Strategy', 'RouteNotFoundStrategy'); return $this-&gt;routeNotFoundStrategy; } public function getViewModel() { if ($this-&gt;viewModel) { return $this-&gt;viewModel; } $this-&gt;viewModel = $model = $this-&gt;event-&gt;getViewModel(); $model-&gt;setTemplate($this-&gt;getLayoutTemplate()); return $this-&gt;viewModel; } protected function registerMvcRenderingStrategies(EventManagerInterface $events) { if (!isset($this-&gt;config['mvc_strategies'])) { return; } $mvcStrategies = $this-&gt;config['mvc_strategies']; if (is_string($mvcStrategies)) { $mvcStrategies = array($mvcStrategies); } if (!is_array($mvcStrategies) &amp;&amp; !$mvcStrategies instanceof Traversable) { return; } foreach ($mvcStrategies as $mvcStrategy) { if (!is_string($mvcStrategy)) { continue; } $listener = $this-&gt;services-&gt;get($mvcStrategy); if ($listener instanceof ListenerAggregateInterface) { $events-&gt;attach($listener, 100); } } } protected function registerViewStrategies() { if (!isset($this-&gt;config['strategies'])) { return; } $strategies = $this-&gt;config['strategies']; if (is_string($strategies)) { $strategies = array($strategies); } if (!is_array($strategies) &amp;&amp; !$strategies instanceof Traversable) { return; } $view = $this-&gt;getView(); foreach ($strategies as $strategy) { if (!is_string($strategy)) { continue; } $listener = $this-&gt;services-&gt;get($strategy); if ($listener instanceof ListenerAggregateInterface) { $view-&gt;getEventManager()-&gt;attach($listener, 100); } } } } &lt;?php
 namespace Zend\Mvc\View\Http; use Zend\EventManager\EventManagerInterface as Events; use Zend\EventManager\ListenerAggregateInterface; use Zend\Filter\Word\CamelCaseToDash as CamelCaseToDashFilter; use Zend\Mvc\MvcEvent; use Zend\Mvc\ModuleRouteListener; use Zend\View\Model\ModelInterface as ViewModel; class InjectTemplateListener implements ListenerAggregateInterface { protected $inflector; protected $listeners = array(); public function attach(Events $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'injectTemplate'), -90); } public function detach(Events $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function injectTemplate(MvcEvent $e) { $model = $e-&gt;getResult(); if (!$model instanceof ViewModel) { return; } $template = $model-&gt;getTemplate(); if (!empty($template)) { return; } $routeMatch = $e-&gt;getRouteMatch(); $controller = $e-&gt;getTarget(); if (is_object($controller)) { $controller = get_class($controller); } if (!$controller) { $controller = $routeMatch-&gt;getParam('controller', ''); } $module = $this-&gt;deriveModuleNamespace($controller); if ($namespace = $routeMatch-&gt;getParam(ModuleRouteListener::MODULE_NAMESPACE)) { $controllerSubNs = $this-&gt;deriveControllerSubNamespace($namespace); if (!empty($controllerSubNs)) { if (!empty($module)) { $module .= '/' . $controllerSubNs; } else { $module = $controllerSubNs; } } } $controller = $this-&gt;deriveControllerClass($controller); $template = $this-&gt;inflectName($module); if (!empty($template)) { $template .= '/'; } $template .= $this-&gt;inflectName($controller); $action = $routeMatch-&gt;getParam('action'); if (null !== $action) { $template .= '/' . $this-&gt;inflectName($action); } $model-&gt;setTemplate($template); } protected function inflectName($name) { if (!$this-&gt;inflector) { $this-&gt;inflector = new CamelCaseToDashFilter(); } $name = $this-&gt;inflector-&gt;filter($name); return strtolower($name); } protected function deriveModuleNamespace($controller) { if (!strstr($controller, '\\')) { return ''; } $module = substr($controller, 0, strpos($controller, '\\')); return $module; } protected function deriveControllerSubNamespace($namespace) { if (!strstr($namespace, '\\')) { return ''; } $nsArray = explode('\\', $namespace); $subNsArray = array_slice($nsArray, 2); if (empty($subNsArray)) { return ''; } return implode('/', $subNsArray); } protected function deriveControllerClass($controller) { if (strstr($controller, '\\')) { $controller = substr($controller, strrpos($controller, '\\') + 1); } if ((10 &lt; strlen($controller)) &amp;&amp; ('Controller' == substr($controller, -10)) ) { $controller = substr($controller, 0, -10); } return $controller; } } &lt;?php
 namespace Zend\Mvc\View\Http; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\Application; use Zend\Mvc\MvcEvent; use Zend\Stdlib\ResponseInterface as Response; use Zend\View\Model\ModelInterface as ViewModel; use Zend\View\View; class DefaultRenderingStrategy implements ListenerAggregateInterface { protected $listeners = array(); protected $layoutTemplate = 'layout'; protected $view; public function __construct(View $view) { $this-&gt;view = $view; return $this; } public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_RENDER, array($this, 'render'), -10000); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_RENDER_ERROR, array($this, 'render'), -10000); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function setLayoutTemplate($layoutTemplate) { $this-&gt;layoutTemplate = (string) $layoutTemplate; return $this; } public function getLayoutTemplate() { return $this-&gt;layoutTemplate; } public function render(MvcEvent $e) { $result = $e-&gt;getResult(); if ($result instanceof Response) { return $result; } $request = $e-&gt;getRequest(); $response = $e-&gt;getResponse(); $viewModel = $e-&gt;getViewModel(); if (!$viewModel instanceof ViewModel) { return; } $view = $this-&gt;view; $view-&gt;setRequest($request); $view-&gt;setResponse($response); try { $view-&gt;render($viewModel); } catch(\Exception $ex) { if ($e-&gt;getName() === MvcEvent::EVENT_RENDER_ERROR) { throw $ex; } $application = $e-&gt;getApplication(); $events = $application-&gt;getEventManager(); $e-&gt;setError(Application::ERROR_EXCEPTION) -&gt;setParam('exception', $ex); $events-&gt;trigger(MvcEvent::EVENT_RENDER_ERROR, $e); } return $response; } } &lt;?php
 namespace Zend\Mvc\View; use Zend\Mvc\SendResponseListener as MvcSendResponseListener; class SendResponseListener extends MvcSendResponseListener { } &lt;?php
 namespace Zend\Mvc\View\Console; use Zend\EventManager\EventManagerInterface as Events; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\MvcEvent; use Zend\Stdlib\ArrayUtils; use Zend\View\Model\ConsoleModel; class CreateViewModelListener implements ListenerAggregateInterface { protected $listeners = array(); public function attach(Events $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'createViewModelFromString'), -80); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'createViewModelFromArray'), -80); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'createViewModelFromNull'), -80); } public function detach(Events $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function createViewModelFromString(MvcEvent $e) { $result = $e-&gt;getResult(); if (!is_string($result)) { return; } $model = new ConsoleModel; $model-&gt;setVariable(ConsoleModel::RESULT, $result); $e-&gt;setResult($model); } public function createViewModelFromArray(MvcEvent $e) { $result = $e-&gt;getResult(); if (!ArrayUtils::hasStringKeys($result, true)) { return; } $model = new ConsoleModel($result); $e-&gt;setResult($model); } public function createViewModelFromNull(MvcEvent $e) { $result = $e-&gt;getResult(); if (null !== $result) { return; } $model = new ConsoleModel; $e-&gt;setResult($model); } } &lt;?php
 namespace Zend\Mvc\View\Console; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\Application; use Zend\Mvc\MvcEvent; use Zend\Stdlib\ResponseInterface as Response; use Zend\View\Model\ConsoleModel; class ExceptionStrategy implements ListenerAggregateInterface { protected $displayExceptions = true; protected $message = &lt;&lt;&lt;EOT
======================================================================
   The application has thrown an exception!
======================================================================
 :className
 :message
----------------------------------------------------------------------
:file::line
:stack
======================================================================
   Previous Exception(s):
======================================================================
:previous

EOT;
protected $listeners = array(); public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($this, 'prepareExceptionViewModel')); $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_RENDER_ERROR, array($this, 'prepareExceptionViewModel')); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function setDisplayExceptions($displayExceptions) { $this-&gt;displayExceptions = (bool) $displayExceptions; return $this; } public function displayExceptions() { return $this-&gt;displayExceptions; } public function getMessage() { return $this-&gt;message; } public function setMessage($message) { $this-&gt;message = $message; return $this; } public function prepareExceptionViewModel(MvcEvent $e) { $error = $e-&gt;getError(); if (empty($error)) { return; } $result = $e-&gt;getResult(); if ($result instanceof Response) { return; } switch ($error) { case Application::ERROR_CONTROLLER_NOT_FOUND: case Application::ERROR_CONTROLLER_INVALID: case Application::ERROR_ROUTER_NO_MATCH: return; case Application::ERROR_EXCEPTION: default: $exception = $e-&gt;getParam('exception'); if (is_callable($this-&gt;message)) { $callback = $this-&gt;message; $message = (string) $callback($exception, $this-&gt;displayExceptions); } elseif ($this-&gt;displayExceptions &amp;&amp; $exception instanceof \Exception) { $message = str_replace( array( ':className', ':message', ':code', ':file', ':line', ':stack', ':previous', ),array( get_class($exception), $exception-&gt;getMessage(), $exception-&gt;getCode(), $exception-&gt;getFile(), $exception-&gt;getLine(), $exception-&gt;getTraceAsString(), $exception-&gt;getPrevious(), ), $this-&gt;message ); } else { $message = str_replace( array( ':className', ':message', ':code', ':file', ':line', ':stack', ':previous', ),array( '', '', '', '', '', '', '', ), $this-&gt;message ); } $model = new ConsoleModel(); $model-&gt;setResult($message); $model-&gt;setErrorLevel(1); $e-&gt;setResult($model); break; } } } &lt;?php
 namespace Zend\Mvc\View\Console; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\View\Http\InjectViewModelListener as HttpInjectViewModelListener; class InjectViewModelListener extends HttpInjectViewModelListener implements ListenerAggregateInterface {} &lt;?php
 namespace Zend\Mvc\View\Console; use Zend\Console\Adapter\AdapterInterface as ConsoleAdapter; use Zend\Console\ColorInterface; use Zend\Console\Response as ConsoleResponse; use Zend\Console\Request as ConsoleRequest; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\ModuleManager\ModuleManagerInterface; use Zend\ModuleManager\Feature\ConsoleBannerProviderInterface; use Zend\ModuleManager\Feature\ConsoleUsageProviderInterface; use Zend\Mvc\Application; use Zend\Mvc\Exception\RuntimeException; use Zend\Mvc\MvcEvent; use Zend\ServiceManager\Exception\ServiceNotFoundException; use Zend\ServiceManager\ServiceManager; use Zend\Stdlib\ResponseInterface as Response; use Zend\Stdlib\StringUtils; use Zend\Text\Table; use Zend\Version\Version; use Zend\View\Model\ConsoleModel; class RouteNotFoundStrategy implements ListenerAggregateInterface { protected $listeners = array(); protected $displayNotFoundReason = true; protected $reason = false; public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($this, 'handleRouteNotFoundError')); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function setDisplayNotFoundReason($displayNotFoundReason) { $this-&gt;displayNotFoundReason = (bool) $displayNotFoundReason; return $this; } public function displayNotFoundReason() { return $this-&gt;displayNotFoundReason; } public function handleRouteNotFoundError(MvcEvent $e) { $error = $e-&gt;getError(); if (empty($error)) { return; } $response = $e-&gt;getResponse(); $request = $e-&gt;getRequest(); switch ($error) { case Application::ERROR_CONTROLLER_NOT_FOUND: case Application::ERROR_CONTROLLER_INVALID: case Application::ERROR_ROUTER_NO_MATCH: $this-&gt;reason = $error; if (!$response) { $response = new ConsoleResponse(); $e-&gt;setResponse($response); } $response-&gt;setMetadata('error', $error); break; default: return; } $result = $e-&gt;getResult(); if ($result instanceof Response) { return; } $model = new ConsoleModel(); $model-&gt;setErrorLevel(1); $sm = $e-&gt;getApplication()-&gt;getServiceManager(); $mm = null; try{ $mm = $sm-&gt;get('ModuleManager'); } catch (ServiceNotFoundException $e) { } try{ $console = $sm-&gt;get('console'); if (!$console instanceof ConsoleAdapter) { throw new ServiceNotFoundException(); } } catch (ServiceNotFoundException $e) { throw new RuntimeException('Cannot access Console adapter - is it defined in ServiceManager?'); } $router = null; try{ $router = $sm-&gt;get('Router'); } catch (ServiceNotFoundException $e) { } $scriptName = ''; if ($request instanceof ConsoleRequest) { $scriptName = basename($request-&gt;getScriptName()); } $banner = $this-&gt;getConsoleBanner($console, $mm); $usage = $this-&gt;getConsoleUsage($console, $scriptName, $mm, $router); $result = $banner ? rtrim($banner, "\r\n") : ''; $result .= $usage ? "\n\n" . trim($usage, "\r\n") : ''; $result .= "\n"; $result .= $this-&gt;reportNotFoundReason($e); $model-&gt;setResult($result); $e-&gt;setResult($model); } protected function getConsoleBanner(ConsoleAdapter $console, ModuleManagerInterface $moduleManager = null) { $banners = array(); if ($moduleManager !== null) { foreach ($moduleManager-&gt;getLoadedModules(false) as $module) { if (!$module instanceof ConsoleBannerProviderInterface &amp;&amp; !method_exists($module, 'getConsoleBanner') ) { continue; } $banners[] = $module-&gt;getConsoleBanner($console); } } if (!count($banners)) { return sprintf("Zend Framework %s application\nUsage:\n", Version::VERSION); } return implode("\n", $banners); } protected function getConsoleUsage( ConsoleAdapter $console, $scriptName, ModuleManagerInterface $moduleManager = null ) { $usageInfo = array(); if ($moduleManager !== null) { foreach ($moduleManager-&gt;getLoadedModules(false) as $name =&gt; $module) { if (!$module instanceof ConsoleUsageProviderInterface &amp;&amp; !method_exists($module, 'getConsoleUsage') ) { continue; } $usage = $module-&gt;getConsoleUsage($console); if (is_array($usage)) { $usageInfo[$name] = $usage; } elseif (is_string($usage)) { $usageInfo[$name] = array($usage); } } } if (!count($usageInfo)) { return ''; } $result = ''; $table = false; $tableCols = 0; $tableType = 0; foreach ($usageInfo as $moduleName =&gt; $usage) { if (!is_string($usage) &amp;&amp; !is_array($usage)) { throw new RuntimeException(sprintf( 'Cannot understand usage info for module "%s"', $moduleName )); } if (is_string($usage)) { $result .= $usage . "\n"; continue; } foreach ($usage as $a =&gt; $b) { if (is_string($a) &amp;&amp; is_string($b)) { if (($tableCols !== 2 || $tableType != 1) &amp;&amp; $table !== false) { $result .= $this-&gt;renderTable($table, $tableCols, $console-&gt;getWidth()); $table = false; $result .= "\n"; } $a = $console-&gt;colorize($scriptName . ' ' . $a, ColorInterface::GREEN); $tableCols = 2; $tableType = 1; $table[] = array($a, $b); continue; } if (is_array($b)) { if ((count($b) != $tableCols || $tableType != 2) &amp;&amp; $table !== false) { $result .= $this-&gt;renderTable($table, $tableCols, $console-&gt;getWidth()); $table = false; $result .= "\n"; } $tableCols = count($b); $tableType = 2; $table[] = $b; continue; } if ($table !== false) { $result .= $this-&gt;renderTable($table, $tableCols, $console-&gt;getWidth()); $table = false; $result .= "\n"; } $tableType = 0; $result .= $b . "\n"; } } if ($table !== false) { $result .= $this-&gt;renderTable($table, $tableCols, $console-&gt;getWidth()); } return $result; } protected function renderTable($data, $cols, $consoleWidth) { $result = ''; $padding = 2; if ($cols == 1) { foreach ($data as $row) { $result .= $row[0] . "\n"; } return $result; } $strWrapper = StringUtils::getWrapper('UTF-8'); $maxW = array(); for ($x = 1; $x &lt;= $cols; $x += 1) { $maxW[$x] = 0; foreach ($data as $row) { $maxW[$x] = max($maxW[$x], $strWrapper-&gt;strlen($row[$x-1]) + $padding * 2); } } $width = 0; for ($x = 1; $x &lt; $cols; $x += 1) { $width += $maxW[$x]; } if ($width &gt;= $consoleWidth - 10) { foreach ($data as $row) { $result .= implode("    ", $row) . "\n"; } return $result; } $maxW[$cols] = $consoleWidth - $width -1; $table = new Table\Table(); $table-&gt;setColumnWidths($maxW); $table-&gt;setDecorator(new Table\Decorator\Blank()); $table-&gt;setPadding(2); foreach ($data as $row) { $table-&gt;appendRow($row); } return $table-&gt;render(); } protected function reportNotFoundReason($e) { if (!$this-&gt;displayNotFoundReason()) { return ''; } $exception = $e-&gt;getParam('exception', false); if (!$exception &amp;&amp; !$this-&gt;reason) { return ''; } $reason = (isset($this-&gt;reason) &amp;&amp; !empty($this-&gt;reason)) ? $this-&gt;reason : 'unknown'; $reasons = array( Application::ERROR_CONTROLLER_NOT_FOUND =&gt; 'Could not match to a controller', Application::ERROR_CONTROLLER_INVALID =&gt; 'Invalid controller specified', Application::ERROR_ROUTER_NO_MATCH =&gt; 'Invalid arguments or no arguments provided', 'unknown' =&gt; 'Unknown', ); $report = sprintf("\nReason for failure: %s\n", $reasons[$reason]); while ($exception instanceof \Exception) { $report .= sprintf("Exception: %s\nTrace:\n%s\n", $exception-&gt;getMessage(), $exception-&gt;getTraceAsString()); $exception = $exception-&gt;getPrevious(); } return $report; } } &lt;?php
 namespace Zend\Mvc\View\Console; use ArrayAccess; use Zend\Mvc\MvcEvent; use Zend\Mvc\View\Http\ViewManager as BaseViewManager; class ViewManager extends BaseViewManager { public function onBootstrap($event) { $application = $event-&gt;getApplication(); $services = $application-&gt;getServiceManager(); $config = $services-&gt;get('Config'); $events = $application-&gt;getEventManager(); $sharedEvents = $events-&gt;getSharedManager(); $this-&gt;config = isset($config['view_manager']) &amp;&amp; (is_array($config['view_manager']) || $config['view_manager'] instanceof ArrayAccess) ? $config['view_manager'] : array(); $this-&gt;services = $services; $this-&gt;event = $event; $routeNotFoundStrategy = $this-&gt;getRouteNotFoundStrategy(); $exceptionStrategy = $this-&gt;getExceptionStrategy(); $mvcRenderingStrategy = $this-&gt;getMvcRenderingStrategy(); $createViewModelListener = new CreateViewModelListener(); $injectViewModelListener = new InjectViewModelListener(); $injectParamsListener = new InjectNamedConsoleParamsListener(); $this-&gt;registerMvcRenderingStrategies($events); $this-&gt;registerViewStrategies(); $events-&gt;attach($routeNotFoundStrategy); $events-&gt;attach($exceptionStrategy); $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($injectViewModelListener, 'injectViewModel'), -100); $events-&gt;attach(MvcEvent::EVENT_RENDER_ERROR, array($injectViewModelListener, 'injectViewModel'), -100); $events-&gt;attach($mvcRenderingStrategy); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($injectParamsListener, 'injectNamedParams'), 1000); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($createViewModelListener, 'createViewModelFromArray'), -80); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($createViewModelListener, 'createViewModelFromString'), -80); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($createViewModelListener, 'createViewModelFromNull'), -80); $sharedEvents-&gt;attach('Zend\Stdlib\DispatchableInterface', MvcEvent::EVENT_DISPATCH, array($injectViewModelListener, 'injectViewModel'), -100); } public function getMvcRenderingStrategy() { if ($this-&gt;mvcRenderingStrategy) { return $this-&gt;mvcRenderingStrategy; } $this-&gt;mvcRenderingStrategy = new DefaultRenderingStrategy(); $this-&gt;services-&gt;setService('DefaultRenderingStrategy', $this-&gt;mvcRenderingStrategy); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\DefaultRenderingStrategy', 'DefaultRenderingStrategy'); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\Console\DefaultRenderingStrategy', 'DefaultRenderingStrategy'); return $this-&gt;mvcRenderingStrategy; } public function getExceptionStrategy() { if ($this-&gt;exceptionStrategy) { return $this-&gt;exceptionStrategy; } $this-&gt;exceptionStrategy = new ExceptionStrategy(); if (isset($this-&gt;config['display_exceptions'])) { $this-&gt;exceptionStrategy-&gt;setDisplayExceptions($this-&gt;config['display_exceptions']); } if (isset($this-&gt;config['exception_message'])) { $this-&gt;exceptionStrategy-&gt;setMessage($this-&gt;config['exception_message']); } $this-&gt;services-&gt;setService('ExceptionStrategy', $this-&gt;exceptionStrategy); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\ExceptionStrategy', 'ExceptionStrategy'); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\Console\ExceptionStrategy', 'ExceptionStrategy'); return $this-&gt;exceptionStrategy; } public function getRouteNotFoundStrategy() { if ($this-&gt;routeNotFoundStrategy) { return $this-&gt;routeNotFoundStrategy; } $this-&gt;routeNotFoundStrategy = new RouteNotFoundStrategy(); $displayNotFoundReason = true; if (array_key_exists('display_not_found_reason', $this-&gt;config)) { $displayNotFoundReason = $this-&gt;config['display_not_found_reason']; } $this-&gt;routeNotFoundStrategy-&gt;setDisplayNotFoundReason($displayNotFoundReason); $this-&gt;services-&gt;setService('RouteNotFoundStrategy', $this-&gt;routeNotFoundStrategy); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\RouteNotFoundStrategy', 'RouteNotFoundStrategy'); $this-&gt;services-&gt;setAlias('Zend\Mvc\View\Console\RouteNotFoundStrategy', 'RouteNotFoundStrategy'); $this-&gt;services-&gt;setAlias('404Strategy', 'RouteNotFoundStrategy'); return $this-&gt;routeNotFoundStrategy; } } &lt;?php
 namespace Zend\Mvc\View\Console; use Zend\EventManager\EventManagerInterface as Events; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\MvcEvent; use Zend\Console\Request as ConsoleRequest; class InjectNamedConsoleParamsListener implements ListenerAggregateInterface { protected $listeners = array(); public function attach(Events $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'injectNamedParams'), -80); } public function detach(Events $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function injectNamedParams(MvcEvent $e) { if (!$routeMatch = $e-&gt;getRouteMatch()) { return; } $request = $e-&gt;getRequest(); if (!$request instanceof ConsoleRequest) { return; } $params = array_merge( $request-&gt;getParams()-&gt;toArray(), $routeMatch-&gt;getParams() ); $request-&gt;getParams()-&gt;fromArray($params); } } &lt;?php
 namespace Zend\Mvc\View\Console; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\MvcEvent; use Zend\Stdlib\ResponseInterface as Response; use Zend\Console\Response as ConsoleResponse; use Zend\View\Model\ConsoleModel as ConsoleViewModel; use Zend\View\Model\ModelInterface as ViewModel; class DefaultRenderingStrategy implements ListenerAggregateInterface { protected $listeners = array(); public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_RENDER, array($this, 'render'), -10000); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function render(MvcEvent $e) { $result = $e-&gt;getResult(); if ($result instanceof Response) { return $result; } $response = $e-&gt;getResponse(); if (empty($result)) { return $response; } $responseText = ''; if ($result-&gt;hasChildren()) { foreach ($result-&gt;getChildren() as $child) { $responseText .= $child-&gt;getVariable(ConsoleViewModel::RESULT); } } if ($result instanceof ConsoleViewModel) { $responseText .= $result-&gt;getResult(); } else { $responseText .= $result-&gt;getVariable(ConsoleViewModel::RESULT); } $response-&gt;setContent( $response-&gt;getContent() . $responseText ); if ($response instanceof ConsoleResponse &amp;&amp; $result instanceof ConsoleViewModel ) { $errorLevel = $result-&gt;getErrorLevel(); $response-&gt;setErrorLevel($errorLevel); } return $response; } } &lt;?php
 namespace Zend\Mvc\Controller; use Zend\Mvc\Exception; use Zend\ServiceManager\AbstractPluginManager; use Zend\ServiceManager\ConfigInterface; use Zend\Stdlib\DispatchableInterface; class PluginManager extends AbstractPluginManager { protected $invokableClasses = array( 'acceptableviewmodelselector' =&gt; 'Zend\Mvc\Controller\Plugin\AcceptableViewModelSelector', 'filepostredirectget' =&gt; 'Zend\Mvc\Controller\Plugin\FilePostRedirectGet', 'flashmessenger' =&gt; 'Zend\Mvc\Controller\Plugin\FlashMessenger', 'forward' =&gt; 'Zend\Mvc\Controller\Plugin\Forward', 'layout' =&gt; 'Zend\Mvc\Controller\Plugin\Layout', 'params' =&gt; 'Zend\Mvc\Controller\Plugin\Params', 'postredirectget' =&gt; 'Zend\Mvc\Controller\Plugin\PostRedirectGet', 'redirect' =&gt; 'Zend\Mvc\Controller\Plugin\Redirect', 'url' =&gt; 'Zend\Mvc\Controller\Plugin\Url', ); protected $aliases = array( 'prg' =&gt; 'postredirectget', 'fileprg' =&gt; 'filepostredirectget', ); protected $controller; public function __construct(ConfigInterface $configuration = null) { parent::__construct($configuration); $this-&gt;setFactory('identity', function ($plugins) { $services = $plugins-&gt;getServiceLocator(); $plugin = new Plugin\Identity(); if (!$services-&gt;has('Zend\Authentication\AuthenticationService')) { return $plugin; } $plugin-&gt;setAuthenticationService($services-&gt;get('Zend\Authentication\AuthenticationService')); return $plugin; }); } public function get($name, $options = array(), $usePeeringServiceManagers = true) { $plugin = parent::get($name, $options, $usePeeringServiceManagers); $this-&gt;injectController($plugin); return $plugin; } public function setController(DispatchableInterface $controller) { $this-&gt;controller = $controller; return $this; } public function getController() { return $this-&gt;controller; } public function injectController($plugin) { if (!is_object($plugin)) { return; } if (!method_exists($plugin, 'setController')) { return; } $controller = $this-&gt;getController(); if (!$controller instanceof DispatchableInterface) { return; } $plugin-&gt;setController($controller); } public function validatePlugin($plugin) { if ($plugin instanceof Plugin\PluginInterface) { return; } throw new Exception\InvalidPluginException(sprintf( 'Plugin of type %s is invalid; must implement %s\Plugin\PluginInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\Mvc\Controller; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; use Zend\Mvc\Exception; use Zend\ServiceManager\AbstractPluginManager; use Zend\ServiceManager\ConfigInterface; use Zend\ServiceManager\ServiceLocatorAwareInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\Stdlib\DispatchableInterface; class ControllerManager extends AbstractPluginManager { protected $autoAddInvokableClass = false; public function __construct(ConfigInterface $configuration = null) { parent::__construct($configuration); $this-&gt;addInitializer(array($this, 'injectControllerDependencies'), false); } public function injectControllerDependencies($controller, ServiceLocatorInterface $serviceLocator) { if (!$controller instanceof DispatchableInterface) { return; } $parentLocator = $serviceLocator-&gt;getServiceLocator(); if ($controller instanceof ServiceLocatorAwareInterface) { $controller-&gt;setServiceLocator($parentLocator-&gt;get('Zend\ServiceManager\ServiceLocatorInterface')); } if ($controller instanceof EventManagerAwareInterface) { $events = $controller-&gt;getEventManager(); if (!$events instanceof EventManagerInterface) { $controller-&gt;setEventManager($parentLocator-&gt;get('EventManager')); } else { $events-&gt;setSharedManager($parentLocator-&gt;get('SharedEventManager')); } } if (method_exists($controller, 'setPluginManager')) { $controller-&gt;setPluginManager($parentLocator-&gt;get('ControllerPluginManager')); } } public function validatePlugin($plugin) { if ($plugin instanceof DispatchableInterface) { return; } throw new Exception\InvalidControllerException(sprintf( 'Controller of type %s is invalid; must implement Zend\Stdlib\DispatchableInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)) )); } public function get($name, $options = array(), $usePeeringServiceManagers = false) { return parent::get($name, $options, $usePeeringServiceManagers); } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\EventManager\SharedEventManagerInterface as SharedEvents; use Zend\Mvc\Exception; use Zend\Mvc\InjectApplicationEventInterface; use Zend\Mvc\MvcEvent; use Zend\Mvc\Router\RouteMatch; use Zend\ServiceManager\ServiceLocatorAwareInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\Stdlib\DispatchableInterface as Dispatchable; class Forward extends AbstractPlugin { protected $event; protected $locator; protected $maxNestedForwards = 10; protected $numNestedForwards = 0; protected $listenersToDetach = null; public function setMaxNestedForwards($maxNestedForwards) { $this-&gt;maxNestedForwards = (int) $maxNestedForwards; return $this; } public function getListenersToDetach() { if (null === $this-&gt;listenersToDetach) { $this-&gt;listenersToDetach = array(array( 'id' =&gt; 'Zend\Stdlib\DispatchableInterface', 'event' =&gt; MvcEvent::EVENT_DISPATCH, 'class' =&gt; 'Zend\Mvc\View\Http\InjectViewModelListener', )); } return $this-&gt;listenersToDetach; } public function setListenersToDetach($listeners) { $this-&gt;listenersToDetach = $listeners; } public function dispatch($name, array $params = null) { $event = clone($this-&gt;getEvent()); $locator = $this-&gt;getLocator(); $scoped = false; if ($locator-&gt;has('ControllerLoader')) { $locator = $locator-&gt;get('ControllerLoader'); $scoped = true; } $controller = $locator-&gt;get($name); if (!$controller instanceof Dispatchable) { throw new Exception\DomainException('Can only forward to DispatchableInterface classes; class of type ' . get_class($controller) . ' received'); } if ($controller instanceof InjectApplicationEventInterface) { $controller-&gt;setEvent($event); } if (!$scoped) { if ($controller instanceof ServiceLocatorAwareInterface) { $controller-&gt;setServiceLocator($locator); } } if ($params !== null) { $routeMatch = new RouteMatch($params); $routeMatch-&gt;setMatchedRouteName($event-&gt;getRouteMatch()-&gt;getMatchedRouteName()); $event-&gt;setRouteMatch($routeMatch); } if ($this-&gt;numNestedForwards &gt; $this-&gt;maxNestedForwards) { throw new Exception\DomainException("Circular forwarding detected: greater than $this-&gt;maxNestedForwards nested forwards"); } $this-&gt;numNestedForwards++; $sharedEvents = $event-&gt;getApplication()-&gt;getEventManager()-&gt;getSharedManager(); $listeners = $this-&gt;detachProblemListeners($sharedEvents); $return = $controller-&gt;dispatch($event-&gt;getRequest(), $event-&gt;getResponse()); $this-&gt;reattachProblemListeners($sharedEvents, $listeners); $this-&gt;numNestedForwards--; return $return; } protected function detachProblemListeners(SharedEvents $sharedEvents) { $formattedProblems = array(); foreach ($this-&gt;getListenersToDetach() as $current) { if (!isset($formattedProblems[$current['id']])) { $formattedProblems[$current['id']] = array(); } if (!isset($formattedProblems[$current['id']][$current['event']])) { $formattedProblems[$current['id']][$current['event']] = array(); } $formattedProblems[$current['id']][$current['event']][] = $current['class']; } $results = array(); foreach ($formattedProblems as $id =&gt; $eventArray) { $results[$id] = array(); foreach ($eventArray as $eventName =&gt; $classArray) { $results[$id][$eventName] = array(); $events = $sharedEvents-&gt;getListeners($id, $eventName); foreach ($events as $currentEvent) { $currentCallback = $currentEvent-&gt;getCallback(); if (!isset($currentCallback[0])) { continue; } foreach ($classArray as $class) { if (is_a($currentCallback[0], $class)) { $sharedEvents-&gt;detach($id, $currentEvent); $results[$id][$eventName][] = $currentEvent; } } } } } return $results; } protected function reattachProblemListeners(SharedEvents $sharedEvents, array $listeners) { foreach ($listeners as $id =&gt; $eventArray) { foreach ($eventArray as $eventName =&gt; $callbacks) { foreach ($callbacks as $current) { $sharedEvents-&gt;attach($id, $eventName, $current-&gt;getCallback(), $current-&gt;getMetadatum('priority')); } } } } protected function getLocator() { if ($this-&gt;locator) { return $this-&gt;locator; } $controller = $this-&gt;getController(); if (!$controller instanceof ServiceLocatorAwareInterface) { throw new Exception\DomainException('Forward plugin requires controller implements ServiceLocatorAwareInterface'); } $locator = $controller-&gt;getServiceLocator(); if (!$locator instanceof ServiceLocatorInterface) { throw new Exception\DomainException('Forward plugin requires controller composes Locator'); } $this-&gt;locator = $locator; return $this-&gt;locator; } protected function getEvent() { if ($this-&gt;event) { return $this-&gt;event; } $controller = $this-&gt;getController(); if (!$controller instanceof InjectApplicationEventInterface) { throw new Exception\DomainException('Forward plugin requires a controller that implements InjectApplicationEventInterface'); } $event = $controller-&gt;getEvent(); if (!$event instanceof MvcEvent) { $params = array(); if ($event) { $params = $event-&gt;getParams(); } $event = new MvcEvent(); $event-&gt;setParams($params); } $this-&gt;event = $event; return $this-&gt;event; } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Http\Request; use Zend\Http\Header\Accept\FieldValuePart\AbstractFieldValuePart; use Zend\Mvc\Controller\Plugin\AbstractPlugin; use Zend\View\Model\ModelInterface; use Zend\Mvc\InjectApplicationEventInterface; use Zend\Mvc\MvcEvent; use Zend\Mvc\Exception\InvalidArgumentException; use Zend\Mvc\Exception\DomainException; class AcceptableViewModelSelector extends AbstractPlugin { const INJECT_VIEWMODEL_NAME = '_internalViewModel'; protected $event; protected $request; protected $defaultMatchAgainst; protected $defaultViewModelName = 'Zend\View\Model\ViewModel'; public function __invoke( array $matchAgainst = null, $returnDefault = true, &amp; $resultReference = null ) { return $this-&gt;getViewModel($matchAgainst, $returnDefault, $resultReference); } public function getViewModel( array $matchAgainst = null, $returnDefault = true, &amp; $resultReference = null ) { $name = $this-&gt;getViewModelName($matchAgainst, $returnDefault, $resultReference); if (!$name) { return; } if (!class_exists($name)) { throw new InvalidArgumentException('The supplied View Model could not be found'); } return new $name(); } public function getViewModelName( array $matchAgainst = null, $returnDefault = true, &amp; $resultReference = null ) { $res = $this-&gt;match($matchAgainst); if ($res) { $resultReference = $res; return $this-&gt;extractViewModelName($res); } if ($returnDefault) { return $this-&gt;defaultViewModelName; } } public function match(array $matchAgainst = null) { $request = $this-&gt;getRequest(); $headers = $request-&gt;getHeaders(); if ((!$matchAgainst &amp;&amp; !$this-&gt;defaultMatchAgainst) || !$headers-&gt;has('accept')) { return null; } if (!$matchAgainst) { $matchAgainst = $this-&gt;defaultMatchAgainst; } $matchAgainstString = ''; foreach ($matchAgainst as $modelName =&gt; $modelStrings) { foreach ((array) $modelStrings as $modelString) { $matchAgainstString .= $this-&gt;injectViewModelName($modelString, $modelName); } } $accept = $headers-&gt;get('Accept'); if (($res = $accept-&gt;match($matchAgainstString)) === false) { return null; } return $res; } public function setDefaultViewModelName($defaultViewModelName) { $this-&gt;defaultViewModelName = (string) $defaultViewModelName; return $this; } public function getDefaultViewModelName() { return $this-&gt;defaultViewModelName; } public function setDefaultMatchAgainst(array $matchAgainst = null) { $this-&gt;defaultMatchAgainst = $matchAgainst; return $this; } public function getDefaultMatchAgainst() { return $this-&gt;defaultMatchAgainst; } protected function injectViewModelName($modelAcceptString, $modelName) { $modelName = str_replace('\\', '|', $modelName); return $modelAcceptString . '; ' . self::INJECT_VIEWMODEL_NAME . '="' . $modelName . '", '; } protected function extractViewModelName(AbstractFieldValuePart $res) { $modelName = $res-&gt;getMatchedAgainst()-&gt;params[self::INJECT_VIEWMODEL_NAME]; return str_replace('|', '\\', $modelName); } protected function getRequest() { if ($this-&gt;request) { return $this-&gt;request; } $event = $this-&gt;getEvent(); $request = $event-&gt;getRequest(); if (!$request instanceof Request) { throw new DomainException( 'The event used does not contain a valid Request, but must.' ); } $this-&gt;request = $request; return $request; } protected function getEvent() { if ($this-&gt;event) { return $this-&gt;event; } $controller = $this-&gt;getController(); if (!$controller instanceof InjectApplicationEventInterface) { throw new DomainException( 'A controller that implements InjectApplicationEventInterface ' . 'is required to use ' . __CLASS__ ); } $event = $controller-&gt;getEvent(); if (!$event instanceof MvcEvent) { $params = $event-&gt;getParams(); $event = new MvcEvent(); $event-&gt;setParams($params); } $this-&gt;event = $event; return $this-&gt;event; } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Stdlib\DispatchableInterface as Dispatchable; abstract class AbstractPlugin implements PluginInterface { protected $controller; public function setController(Dispatchable $controller) { $this-&gt;controller = $controller; } public function getController() { return $this-&gt;controller; } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Mvc\Exception; use Zend\Mvc\InjectApplicationEventInterface; use Zend\Mvc\MvcEvent; use Zend\View\Model\ModelInterface as Model; class Layout extends AbstractPlugin { protected $event; public function setTemplate($template) { $viewModel = $this-&gt;getViewModel(); $viewModel-&gt;setTemplate((string) $template); return $this; } public function __invoke($template = null) { if (null === $template) { return $this-&gt;getViewModel(); } return $this-&gt;setTemplate($template); } protected function getEvent() { if ($this-&gt;event) { return $this-&gt;event; } $controller = $this-&gt;getController(); if (!$controller instanceof InjectApplicationEventInterface) { throw new Exception\DomainException('Layout plugin requires a controller that implements InjectApplicationEventInterface'); } $event = $controller-&gt;getEvent(); if (!$event instanceof MvcEvent) { $params = $event-&gt;getParams(); $event = new MvcEvent(); $event-&gt;setParams($params); } $this-&gt;event = $event; return $this-&gt;event; } protected function getViewModel() { $event = $this-&gt;getEvent(); $viewModel = $event-&gt;getViewModel(); if (!$viewModel instanceof Model) { throw new Exception\DomainException('Layout plugin requires that event view model is populated'); } return $viewModel; } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\EventManager\EventInterface; use Zend\Mvc\Exception; use Zend\Mvc\InjectApplicationEventInterface; use Zend\Mvc\ModuleRouteListener; use Zend\Mvc\MvcEvent; use Zend\Mvc\Router\RouteStackInterface; class Url extends AbstractPlugin { public function fromRoute($route = null, array $params = array(), $options = array(), $reuseMatchedParams = false) { $controller = $this-&gt;getController(); if (!$controller instanceof InjectApplicationEventInterface) { throw new Exception\DomainException('Url plugin requires a controller that implements InjectApplicationEventInterface'); } $event = $controller-&gt;getEvent(); $router = null; $matches = null; if ($event instanceof MvcEvent) { $router = $event-&gt;getRouter(); $matches = $event-&gt;getRouteMatch(); } elseif ($event instanceof EventInterface) { $router = $event-&gt;getParam('router', false); $matches = $event-&gt;getParam('route-match', false); } if (!$router instanceof RouteStackInterface) { throw new Exception\DomainException('Url plugin requires that controller event compose a router; none found'); } if (3 == func_num_args() &amp;&amp; is_bool($options)) { $reuseMatchedParams = $options; $options = array(); } if ($route === null) { if (!$matches) { throw new Exception\RuntimeException('No RouteMatch instance present'); } $route = $matches-&gt;getMatchedRouteName(); if ($route === null) { throw new Exception\RuntimeException('RouteMatch does not contain a matched route name'); } } if ($reuseMatchedParams &amp;&amp; $matches) { $routeMatchParams = $matches-&gt;getParams(); if (isset($routeMatchParams[ModuleRouteListener::ORIGINAL_CONTROLLER])) { $routeMatchParams['controller'] = $routeMatchParams[ModuleRouteListener::ORIGINAL_CONTROLLER]; unset($routeMatchParams[ModuleRouteListener::ORIGINAL_CONTROLLER]); } if (isset($routeMatchParams[ModuleRouteListener::MODULE_NAMESPACE])) { unset($routeMatchParams[ModuleRouteListener::MODULE_NAMESPACE]); } $params = array_merge($routeMatchParams, $params); } $options['name'] = $route; return $router-&gt;assemble($params, $options); } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Http\Response; use Zend\Mvc\Exception; use Zend\Mvc\InjectApplicationEventInterface; use Zend\Mvc\MvcEvent; class Redirect extends AbstractPlugin { protected $event; protected $response; public function toRoute($route = null, array $params = array(), $options = array(), $reuseMatchedParams = false) { $controller = $this-&gt;getController(); if (!$controller || !method_exists($controller, 'plugin')) { throw new Exception\DomainException('Redirect plugin requires a controller that defines the plugin() method'); } $urlPlugin = $controller-&gt;plugin('url'); if (is_scalar($options)) { $url = $urlPlugin-&gt;fromRoute($route, $params, $options); } else { $url = $urlPlugin-&gt;fromRoute($route, $params, $options, $reuseMatchedParams); } return $this-&gt;toUrl($url); } public function toUrl($url) { $response = $this-&gt;getResponse(); $response-&gt;getHeaders()-&gt;addHeaderLine('Location', $url); $response-&gt;setStatusCode(302); return $response; } public function refresh() { return $this-&gt;toRoute(null, array(), array(), true); } protected function getResponse() { if ($this-&gt;response) { return $this-&gt;response; } $event = $this-&gt;getEvent(); $response = $event-&gt;getResponse(); if (!$response instanceof Response) { throw new Exception\DomainException('Redirect plugin requires event compose a response'); } $this-&gt;response = $response; return $this-&gt;response; } protected function getEvent() { if ($this-&gt;event) { return $this-&gt;event; } $controller = $this-&gt;getController(); if (!$controller instanceof InjectApplicationEventInterface) { throw new Exception\DomainException('Redirect plugin requires a controller that implements InjectApplicationEventInterface'); } $event = $controller-&gt;getEvent(); if (!$event instanceof MvcEvent) { $params = $event-&gt;getParams(); $event = new MvcEvent(); $event-&gt;setParams($params); } $this-&gt;event = $event; return $this-&gt;event; } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Mvc\Controller\Plugin\AbstractPlugin; use Zend\Mvc\Exception\RuntimeException; use Zend\Mvc\InjectApplicationEventInterface; class Params extends AbstractPlugin { public function __invoke($param = null, $default = null) { if ($param === null) { return $this; } return $this-&gt;fromRoute($param, $default); } public function fromFiles($name = null, $default = null) { if ($name === null) { return $this-&gt;getController()-&gt;getRequest()-&gt;getFiles($name, $default)-&gt;toArray(); } return $this-&gt;getController()-&gt;getRequest()-&gt;getFiles($name, $default); } public function fromHeader($header = null, $default = null) { if ($header === null) { return $this-&gt;getController()-&gt;getRequest()-&gt;getHeaders($header, $default)-&gt;toArray(); } return $this-&gt;getController()-&gt;getRequest()-&gt;getHeaders($header, $default); } public function fromPost($param = null, $default = null) { if ($param === null) { return $this-&gt;getController()-&gt;getRequest()-&gt;getPost($param, $default)-&gt;toArray(); } return $this-&gt;getController()-&gt;getRequest()-&gt;getPost($param, $default); } public function fromQuery($param = null, $default = null) { if ($param === null) { return $this-&gt;getController()-&gt;getRequest()-&gt;getQuery($param, $default)-&gt;toArray(); } return $this-&gt;getController()-&gt;getRequest()-&gt;getQuery($param, $default); } public function fromRoute($param = null, $default = null) { $controller = $this-&gt;getController(); if (!$controller instanceof InjectApplicationEventInterface) { throw new RuntimeException( 'Controllers must implement Zend\Mvc\InjectApplicationEventInterface to use this plugin.' ); } if ($param === null) { return $controller-&gt;getEvent()-&gt;getRouteMatch()-&gt;getParams(); } return $controller-&gt;getEvent()-&gt;getRouteMatch()-&gt;getParam($param, $default); } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Authentication\AuthenticationService; use Zend\Mvc\Exception; class Identity extends AbstractPlugin { protected $authenticationService; public function getAuthenticationService() { return $this-&gt;authenticationService; } public function setAuthenticationService(AuthenticationService $authenticationService) { $this-&gt;authenticationService = $authenticationService; } public function __invoke() { if (!$this-&gt;authenticationService instanceof AuthenticationService){ throw new Exception\RuntimeException('No AuthenticationService instance provided'); } if (!$this-&gt;authenticationService-&gt;hasIdentity()) { return null; } return $this-&gt;authenticationService-&gt;getIdentity(); } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use ArrayIterator; use Countable; use IteratorAggregate; use Zend\Session\Container; use Zend\Session\ManagerInterface as Manager; use Zend\Stdlib\SplQueue; class FlashMessenger extends AbstractPlugin implements IteratorAggregate, Countable { const NAMESPACE_DEFAULT = 'default'; const NAMESPACE_SUCCESS = 'success'; const NAMESPACE_ERROR = 'error'; const NAMESPACE_INFO = 'info'; protected $container; protected $messages = array(); protected $session; protected $messageAdded = false; protected $namespace = self::NAMESPACE_DEFAULT; public function setSessionManager(Manager $manager) { $this-&gt;session = $manager; return $this; } public function getSessionManager() { if (!$this-&gt;session instanceof Manager) { $this-&gt;setSessionManager(Container::getDefaultManager()); } return $this-&gt;session; } public function getContainer() { if ($this-&gt;container instanceof Container) { return $this-&gt;container; } $manager = $this-&gt;getSessionManager(); $this-&gt;container = new Container('FlashMessenger', $manager); return $this-&gt;container; } public function setNamespace($namespace = 'default') { $this-&gt;namespace = $namespace; return $this; } public function getNamespace() { return $this-&gt;namespace; } public function addMessage($message) { $container = $this-&gt;getContainer(); $namespace = $this-&gt;getNamespace(); if (!$this-&gt;messageAdded) { $this-&gt;getMessagesFromContainer(); $container-&gt;setExpirationHops(1, null, true); } if (!isset($container-&gt;{$namespace}) || !($container-&gt;{$namespace} instanceof SplQueue) ) { $container-&gt;{$namespace} = new SplQueue(); } $container-&gt;{$namespace}-&gt;push($message); $this-&gt;messageAdded = true; return $this; } public function addInfoMessage($message) { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_INFO); $this-&gt;addMessage($message); $this-&gt;setNamespace($namespace); return $this; } public function addSuccessMessage($message) { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_SUCCESS); $this-&gt;addMessage($message); $this-&gt;setNamespace($namespace); return $this; } public function addErrorMessage($message) { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_ERROR); $this-&gt;addMessage($message); $this-&gt;setNamespace($namespace); return $this; } public function hasMessages() { $this-&gt;getMessagesFromContainer(); return isset($this-&gt;messages[$this-&gt;getNamespace()]); } public function hasInfoMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_INFO); $hasMessages = $this-&gt;hasMessages(); $this-&gt;setNamespace($namespace); return $hasMessages; } public function hasSuccessMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_SUCCESS); $hasMessages = $this-&gt;hasMessages(); $this-&gt;setNamespace($namespace); return $hasMessages; } public function hasErrorMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_ERROR); $hasMessages = $this-&gt;hasMessages(); $this-&gt;setNamespace($namespace); return $hasMessages; } public function getMessages() { if ($this-&gt;hasMessages()) { return $this-&gt;messages[$this-&gt;getNamespace()]-&gt;toArray(); } return array(); } public function getInfoMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_INFO); $messages = $this-&gt;getMessages(); $this-&gt;setNamespace($namespace); return $messages; } public function getSuccessMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_SUCCESS); $messages = $this-&gt;getMessages(); $this-&gt;setNamespace($namespace); return $messages; } public function getErrorMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_ERROR); $messages = $this-&gt;getMessages(); $this-&gt;setNamespace($namespace); return $messages; } public function clearMessages() { if ($this-&gt;hasMessages()) { unset($this-&gt;messages[$this-&gt;getNamespace()]); return true; } return false; } public function clearMessagesFromNamespace($namespaceToClear) { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace($namespaceToClear); $cleared = $this-&gt;clearMessages(); $this-&gt;setNamespace($namespace); return $cleared; } public function clearMessagesFromContainer() { $this-&gt;getMessagesFromContainer(); if (empty($this-&gt;messages)) { return false; } unset($this-&gt;messages); $this-&gt;messages = array(); return true; } public function hasCurrentMessages() { $container = $this-&gt;getContainer(); $namespace = $this-&gt;getNamespace(); return isset($container-&gt;{$namespace}); } public function hasCurrentInfoMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_INFO); $hasMessages = $this-&gt;hasCurrentMessages(); $this-&gt;setNamespace($namespace); return $hasMessages; } public function hasCurrentSuccessMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_SUCCESS); $hasMessages = $this-&gt;hasCurrentMessages(); $this-&gt;setNamespace($namespace); return $hasMessages; } public function hasCurrentErrorMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_ERROR); $hasMessages = $this-&gt;hasCurrentMessages(); $this-&gt;setNamespace($namespace); return $hasMessages; } public function getCurrentMessages() { if ($this-&gt;hasCurrentMessages()) { $container = $this-&gt;getContainer(); $namespace = $this-&gt;getNamespace(); return $container-&gt;{$namespace}-&gt;toArray(); } return array(); } public function getCurrentInfoMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_INFO); $messages = $this-&gt;getCurrentMessages(); $this-&gt;setNamespace($namespace); return $messages; } public function getCurrentSuccessMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_SUCCESS); $messages = $this-&gt;getCurrentMessages(); $this-&gt;setNamespace($namespace); return $messages; } public function getCurrentErrorMessages() { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace(self::NAMESPACE_ERROR); $messages = $this-&gt;getCurrentMessages(); $this-&gt;setNamespace($namespace); return $messages; } public function getCurrentMessagesFromNamespace($namespaceToGet) { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace($namespaceToGet); $messages = $this-&gt;getCurrentMessages(); $this-&gt;setNamespace($namespace); return $messages; } public function clearCurrentMessages() { if ($this-&gt;hasCurrentMessages()) { $container = $this-&gt;getContainer(); $namespace = $this-&gt;getNamespace(); unset($container-&gt;{$namespace}); return true; } return false; } public function clearCurrentMessagesFromNamespace($namespaceToClear) { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace($namespaceToClear); $cleared = $this-&gt;clearCurrentMessages(); $this-&gt;setNamespace($namespace); return $cleared; } public function clearCurrentMessagesFromContainer() { $container = $this-&gt;getContainer(); $namespaces = array(); foreach ($container as $namespace =&gt; $messages) { $namespaces[] = $namespace; } if (empty($namespaces)) { return false; } foreach ($namespaces as $namespace) { unset($container-&gt;{$namespace}); } return true; } public function getIterator() { if ($this-&gt;hasMessages()) { return new ArrayIterator($this-&gt;getMessages()); } return new ArrayIterator(); } public function count() { if ($this-&gt;hasMessages()) { return count($this-&gt;getMessages()); } return 0; } public function getMessagesFromNamespace($namespaceToGet) { $namespace = $this-&gt;getNamespace(); $this-&gt;setNamespace($namespaceToGet); $messages = $this-&gt;getMessages(); $this-&gt;setNamespace($namespace); return $messages; } protected function getMessagesFromContainer() { if (!empty($this-&gt;messages) || $this-&gt;messageAdded) { return; } $container = $this-&gt;getContainer(); $namespaces = array(); foreach ($container as $namespace =&gt; $messages) { $this-&gt;messages[$namespace] = $messages; $namespaces[] = $namespace; } foreach ($namespaces as $namespace) { unset($container-&gt;{$namespace}); } } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Filter\FilterChain; use Zend\Form\FormInterface; use Zend\Http\Response; use Zend\InputFilter\FileInput; use Zend\InputFilter\InputFilterInterface; use Zend\Mvc\Exception\RuntimeException; use Zend\Session\Container; use Zend\Validator\ValidatorChain; class FilePostRedirectGet extends AbstractPlugin { protected $sessionContainer; public function __invoke(FormInterface $form, $redirect = null, $redirectToUrl = false) { $request = $this-&gt;getController()-&gt;getRequest(); if ($request-&gt;isPost()) { return $this-&gt;handlePostRequest($form, $redirect, $redirectToUrl); } else { return $this-&gt;handleGetRequest($form); } } protected function handlePostRequest(FormInterface $form, $redirect, $redirectToUrl) { $container = $this-&gt;getSessionContainer(); $request = $this-&gt;getController()-&gt;getRequest(); $inputFilter = $form-&gt;getInputFilter(); $previousFiles = ($container-&gt;files) ?: array(); $this-&gt;traverseInputs( $inputFilter, $previousFiles, function($input, $value) { if ($input instanceof FileInput) { $input-&gt;setRequired(false); } return $value; } ); $postFiles = $request-&gt;getFiles()-&gt;toArray(); $postOther = $request-&gt;getPost()-&gt;toArray(); $post = array_merge_recursive($postOther, $postFiles); $form-&gt;setData($post); $isValid = $form-&gt;isValid(); $data = $form-&gt;getData(FormInterface::VALUES_AS_ARRAY); $errors = (!$isValid) ? $form-&gt;getMessages() : null; $prevFileData = $this-&gt;getEmptyUploadData($inputFilter, $previousFiles); $newFileData = $this-&gt;getNonEmptyUploadData($inputFilter, $data); $postFiles = array_merge_recursive( $prevFileData ?: array(), $newFileData ?: array() ); $post = array_merge_recursive($postOther, $postFiles); $container-&gt;setExpirationHops(1, array('post', 'errors', 'isValid')); $container-&gt;post = $post; $container-&gt;errors = $errors; $container-&gt;isValid = $isValid; $container-&gt;files = $postFiles; return $this-&gt;redirect($redirect, $redirectToUrl); } protected function handleGetRequest(FormInterface $form) { $container = $this-&gt;getSessionContainer(); if (null === $container-&gt;post) { unset($container-&gt;files); return false; } $post = $container-&gt;post; $errors = $container-&gt;errors; $isValid = $container-&gt;isValid; $previousFiles = ($container-&gt;files) ?: array(); unset($container-&gt;post); unset($container-&gt;errors); unset($container-&gt;isValid); $inputFilter = $form-&gt;getInputFilter(); $this-&gt;traverseInputs( $inputFilter, $post, function($input, $value) { if ($input instanceof FileInput) { $input-&gt;setAutoPrependUploadValidator(false) -&gt;setValidatorChain(new ValidatorChain()) -&gt;setFilterChain(new FilterChain); } return $value; } ); $form-&gt;setData($post); $form-&gt;isValid(); if (null !== $errors) { $form-&gt;setMessages($errors); } $this-&gt;setProtectedFormProperty($form, 'isValid', $isValid); if ($isValid) { unset($container-&gt;files); } return $post; } public function getSessionContainer() { if (!isset($this-&gt;sessionContainer)) { $this-&gt;sessionContainer = new Container('file_prg_post1'); } return $this-&gt;sessionContainer; } public function setSessionContainer(Container $container) { $this-&gt;sessionContainer = $container; return $this; } protected function setProtectedFormProperty(FormInterface $form, $property, $value) { $formClass = new \ReflectionClass($form); $property = $formClass-&gt;getProperty($property); $property-&gt;setAccessible(true); $property-&gt;setValue($form, $value); return $this; } protected function traverseInputs(InputFilterInterface $inputFilter, $values, $callback) { $returnValues = null; foreach ($values as $name =&gt; $value) { if (!$inputFilter-&gt;has($name)) { continue; } $input = $inputFilter-&gt;get($name); if ($input instanceof InputFilterInterface &amp;&amp; is_array($value)) { $retVal = $this-&gt;traverseInputs($input, $value, $callback); if (null !== $retVal) { $returnValues[$name] = $retVal; } continue; } $retVal = $callback($input, $value); if (null !== $retVal) { $returnValues[$name] = $retVal; } } return $returnValues; } protected function getNonEmptyUploadData(InputFilterInterface $inputFilter, $data) { return $this-&gt;traverseInputs( $inputFilter, $data, function($input, $value) { $messages = $input-&gt;getMessages(); if (is_array($value) &amp;&amp; $input instanceof FileInput &amp;&amp; empty($messages)) { $rawValue = $input-&gt;getRawValue(); if ( (isset($rawValue['error']) &amp;&amp; $rawValue['error'] !== UPLOAD_ERR_NO_FILE) || (isset($rawValue[0]['error']) &amp;&amp; $rawValue[0]['error'] !== UPLOAD_ERR_NO_FILE) ) { return $value; } } return null; } ); } protected function getEmptyUploadData(InputFilterInterface $inputFilter, $data) { return $this-&gt;traverseInputs( $inputFilter, $data, function($input, $value) { $messages = $input-&gt;getMessages(); if (is_array($value) &amp;&amp; $input instanceof FileInput &amp;&amp; empty($messages)) { $rawValue = $input-&gt;getRawValue(); if ( (isset($rawValue['error']) &amp;&amp; $rawValue['error'] === UPLOAD_ERR_NO_FILE) || (isset($rawValue[0]['error']) &amp;&amp; $rawValue[0]['error'] === UPLOAD_ERR_NO_FILE) ) { return $value; } } return null; } ); } protected function redirect($redirect, $redirectToUrl) { $controller = $this-&gt;getController(); $params = array(); if (null === $redirect) { $routeMatch = $controller-&gt;getEvent()-&gt;getRouteMatch(); $redirect = $routeMatch-&gt;getMatchedRouteName(); $params = $routeMatch-&gt;getParams(); } if (method_exists($controller, 'getPluginManager')) { $redirector = $controller-&gt;getPluginManager()-&gt;get('Redirect'); } else { if ($redirectToUrl === false) { throw new RuntimeException('Could not redirect to a route without a router'); } $redirector = new Redirect(); } if ($redirectToUrl === false) { $response = $redirector-&gt;toRoute($redirect, $params); $response-&gt;setStatusCode(303); return $response; } $response = $redirector-&gt;toUrl($redirect); $response-&gt;setStatusCode(303); return $response; } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Mvc\Exception\RuntimeException; use Zend\Session\Container; class PostRedirectGet extends AbstractPlugin { protected $sessionContainer; public function __invoke($redirect = null, $redirectToUrl = false) { $controller = $this-&gt;getController(); $request = $controller-&gt;getRequest(); $container = $this-&gt;getSessionContainer(); if ($request-&gt;isPost()) { $container-&gt;setExpirationHops(1, 'post'); $container-&gt;post = $request-&gt;getPost()-&gt;toArray(); return $this-&gt;redirect($redirect, $redirectToUrl); } else { if ($container-&gt;post !== null) { $post = $container-&gt;post; unset($container-&gt;post); return $post; } return false; } } public function getSessionContainer() { if (!isset($this-&gt;sessionContainer)) { $this-&gt;sessionContainer = new Container('prg_post1'); } return $this-&gt;sessionContainer; } public function setSessionContainer(Container $container) { $this-&gt;sessionContainer = $container; return $this; } protected function redirect($redirect, $redirectToUrl) { $controller = $this-&gt;getController(); $params = array(); if (null === $redirect) { $routeMatch = $controller-&gt;getEvent()-&gt;getRouteMatch(); $redirect = $routeMatch-&gt;getMatchedRouteName(); $params = $routeMatch-&gt;getParams(); } if (method_exists($controller, 'getPluginManager')) { $redirector = $controller-&gt;getPluginManager()-&gt;get('Redirect'); } else { if ($redirectToUrl === false) { throw new RuntimeException('Could not redirect to a route without a router'); } $redirector = new Redirect(); } if ($redirectToUrl === false) { $response = $redirector-&gt;toRoute($redirect, $params); $response-&gt;setStatusCode(303); return $response; } $response = $redirector-&gt;toUrl($redirect); $response-&gt;setStatusCode(303); return $response; } } &lt;?php
 namespace Zend\Mvc\Controller\Plugin; use Zend\Stdlib\DispatchableInterface as Dispatchable; interface PluginInterface { public function setController(Dispatchable $controller); public function getController(); } &lt;?php
 namespace Zend\Mvc\Controller; use Zend\Http\Request as HttpRequest; use Zend\Json\Json; use Zend\Mvc\Exception; use Zend\Mvc\MvcEvent; use Zend\Stdlib\RequestInterface as Request; use Zend\Stdlib\ResponseInterface as Response; abstract class AbstractRestfulController extends AbstractController { const CONTENT_TYPE_JSON = 'json'; protected $eventIdentifier = __CLASS__; protected $contentTypes = array( self::CONTENT_TYPE_JSON =&gt; array( 'application/hal+json', 'application/json' ) ); protected $jsonDecodeType = Json::TYPE_ARRAY; protected $customHttpMethodsMap = array(); abstract public function create($data); abstract public function delete($id); public function deleteList() { throw new Exception\RuntimeException(sprintf( '%s is unimplemented', __METHOD__ )); } abstract public function get($id); abstract public function getList(); public function head($id = null) { throw new Exception\RuntimeException(sprintf( '%s is unimplemented', __METHOD__ )); } public function options() { throw new Exception\RuntimeException(sprintf( '%s is unimplemented', __METHOD__ )); } public function patch($id, $data) { throw new Exception\RuntimeException(sprintf( '%s is unimplemented', __METHOD__ )); } public function replaceList($data) { throw new Exception\RuntimeException(sprintf( '%s is unimplemented', __METHOD__ )); } abstract public function update($id, $data); public function notFoundAction() { $this-&gt;response-&gt;setStatusCode(404); return array( 'content' =&gt; 'Page not found' ); } public function dispatch(Request $request, Response $response = null) { if (! $request instanceof HttpRequest) { throw new Exception\InvalidArgumentException( 'Expected an HTTP request'); } return parent::dispatch($request, $response); } public function onDispatch(MvcEvent $e) { $routeMatch = $e-&gt;getRouteMatch(); if (! $routeMatch) { throw new Exception\DomainException( 'Missing route matches; unsure how to retrieve action'); } $request = $e-&gt;getRequest(); $action = $routeMatch-&gt;getParam('action', false); if ($action) { $method = static::getMethodFromAction($action); if (! method_exists($this, $method)) { $method = 'notFoundAction'; } $return = $this-&gt;$method(); $e-&gt;setResult($return); return $return; } $method = strtolower($request-&gt;getMethod()); switch ($method) { case (isset($this-&gt;customHttpMethodsMap[$method])): $callable = $this-&gt;customHttpMethodsMap[$method]; $action = $method; $return = call_user_func($callable, $e); break; case 'delete': $id = $this-&gt;getIdentifier($routeMatch, $request); if ($id !== false) { $action = 'delete'; $return = $this-&gt;delete($id); break; } $action = 'deleteList'; $return = $this-&gt;deleteList(); break; case 'get': $id = $this-&gt;getIdentifier($routeMatch, $request); if ($id !== false) { $action = 'get'; $return = $this-&gt;get($id); break; } $action = 'getList'; $return = $this-&gt;getList(); break; case 'head': $id = $this-&gt;getIdentifier($routeMatch, $request); if ($id === false) { $id = null; } $action = 'head'; $this-&gt;head($id); $response = $e-&gt;getResponse(); $response-&gt;setContent(''); $return = $response; break; case 'options': $action = 'options'; $this-&gt;options(); $return = $e-&gt;getResponse(); break; case 'patch': $id = $this-&gt;getIdentifier($routeMatch, $request); if ($id === false) { $response = $e-&gt;getResponse(); $response-&gt;setStatusCode(405); return $response; } $data = $this-&gt;processBodyContent($request); $action = 'patch'; $return = $this-&gt;patch($id, $data); break; case 'post': $action = 'create'; $return = $this-&gt;processPostData($request); break; case 'put': $id = $this-&gt;getIdentifier($routeMatch, $request); $data = $this-&gt;processBodyContent($request); if ($id !== false) { $action = 'update'; $return = $this-&gt;update($id, $data); break; } $action = 'replaceList'; $return = $this-&gt;replaceList($data); break; default: $response = $e-&gt;getResponse(); $response-&gt;setStatusCode(405); return $response; } $routeMatch-&gt;setParam('action', $action); $e-&gt;setResult($return); return $return; } public function processPostData(Request $request) { if ($this-&gt;requestHasContentType($request, self::CONTENT_TYPE_JSON)) { $data = Json::decode($request-&gt;getContent(), $this-&gt;jsonDecodeType); } else { $data = $request-&gt;getPost()-&gt;toArray(); } return $this-&gt;create($data); } public function requestHasContentType(Request $request, $contentType = '') { $headerContentType = $request-&gt;getHeaders()-&gt;get('content-type'); if (!$headerContentType) { return false; } $requestedContentType = $headerContentType-&gt;getFieldValue(); if (strstr($requestedContentType, ';')) { $headerData = explode(';', $requestedContentType); $requestedContentType = array_shift($headerData); } $requestedContentType = trim($requestedContentType); if (array_key_exists($contentType, $this-&gt;contentTypes)) { foreach ($this-&gt;contentTypes[$contentType] as $contentTypeValue) { if (stripos($contentTypeValue, $requestedContentType) === 0) { return true; } } } return false; } public function addHttpMethodHandler($method, $handler) { if (!is_callable($handler)) { throw new Exception\InvalidArgumentException(sprintf( 'Invalid HTTP method handler: must be a callable; received "%s"', (is_object($handler) ? get_class($handler) : gettype($handler)) )); } $method = strtolower($method); $this-&gt;customHttpMethodsMap[$method] = $handler; return $this; } protected function getIdentifier($routeMatch, $request) { $id = $routeMatch-&gt;getParam('id', false); if ($id) { return $id; } $id = $request-&gt;getQuery()-&gt;get('id', false); if ($id) { return $id; } return false; } protected function processBodyContent($request) { $content = $request-&gt;getContent(); if ($this-&gt;requestHasContentType($request, self::CONTENT_TYPE_JSON)) { return Json::decode($content, $this-&gt;jsonDecodeType); } parse_str($content, $parsedParams); if (!is_array($parsedParams) || (1 == count($parsedParams) &amp;&amp; isset($parsedParams[0])) ) { return $content; } return $parsedParams; } } &lt;?php
 namespace Zend\Mvc\Controller; use Zend\EventManager\EventInterface as Event; use Zend\EventManager\EventManager; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; use Zend\Http\PhpEnvironment\Response as HttpResponse; use Zend\Http\Request as HttpRequest; use Zend\Mvc\InjectApplicationEventInterface; use Zend\Mvc\MvcEvent; use Zend\ServiceManager\ServiceLocatorAwareInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\Stdlib\DispatchableInterface as Dispatchable; use Zend\Stdlib\RequestInterface as Request; use Zend\Stdlib\ResponseInterface as Response; abstract class AbstractController implements Dispatchable, EventManagerAwareInterface, InjectApplicationEventInterface, ServiceLocatorAwareInterface { protected $plugins; protected $request; protected $response; protected $event; protected $events; protected $serviceLocator; protected $eventIdentifier; abstract public function onDispatch(MvcEvent $e); public function dispatch(Request $request, Response $response = null) { $this-&gt;request = $request; if (!$response) { $response = new HttpResponse(); } $this-&gt;response = $response; $e = $this-&gt;getEvent(); $e-&gt;setRequest($request) -&gt;setResponse($response) -&gt;setTarget($this); $result = $this-&gt;getEventManager()-&gt;trigger(MvcEvent::EVENT_DISPATCH, $e, function ($test) { return ($test instanceof Response); }); if ($result-&gt;stopped()) { return $result-&gt;last(); } return $e-&gt;getResult(); } public function getRequest() { if (!$this-&gt;request) { $this-&gt;request = new HttpRequest(); } return $this-&gt;request; } public function getResponse() { if (!$this-&gt;response) { $this-&gt;response = new HttpResponse(); } return $this-&gt;response; } public function setEventManager(EventManagerInterface $events) { $events-&gt;setIdentifiers(array( 'Zend\Stdlib\DispatchableInterface', __CLASS__, get_called_class(), $this-&gt;eventIdentifier, substr(get_called_class(), 0, strpos(get_called_class(), '\\')) )); $this-&gt;events = $events; $this-&gt;attachDefaultListeners(); return $this; } public function getEventManager() { if (!$this-&gt;events) { $this-&gt;setEventManager(new EventManager()); } return $this-&gt;events; } public function setEvent(Event $e) { if ($e instanceof Event &amp;&amp; !$e instanceof MvcEvent) { $eventParams = $e-&gt;getParams(); $e = new MvcEvent(); $e-&gt;setParams($eventParams); unset($eventParams); } $this-&gt;event = $e; } public function getEvent() { if (!$this-&gt;event) { $this-&gt;setEvent(new MvcEvent()); } return $this-&gt;event; } public function setServiceLocator(ServiceLocatorInterface $serviceLocator) { $this-&gt;serviceLocator = $serviceLocator; } public function getServiceLocator() { return $this-&gt;serviceLocator; } public function getPluginManager() { if (!$this-&gt;plugins) { $this-&gt;setPluginManager(new PluginManager()); } $this-&gt;plugins-&gt;setController($this); return $this-&gt;plugins; } public function setPluginManager(PluginManager $plugins) { $this-&gt;plugins = $plugins; $this-&gt;plugins-&gt;setController($this); return $this; } public function plugin($name, array $options = null) { return $this-&gt;getPluginManager()-&gt;get($name, $options); } public function __call($method, $params) { $plugin = $this-&gt;plugin($method); if (is_callable($plugin)) { return call_user_func_array($plugin, $params); } return $plugin; } protected function attachDefaultListeners() { $events = $this-&gt;getEventManager(); $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'onDispatch')); } public static function getMethodFromAction($action) { $method = str_replace(array('.', '-', '_'), ' ', $action); $method = ucwords($method); $method = str_replace(' ', '', $method); $method = lcfirst($method); $method .= 'Action'; return $method; } } &lt;?php
 namespace Zend\Mvc\Controller; use Zend\Http\Response as HttpResponse; use Zend\Mvc\Exception; use Zend\Mvc\MvcEvent; use Zend\View\Model\ConsoleModel; use Zend\View\Model\ViewModel; abstract class AbstractActionController extends AbstractController { protected $eventIdentifier = __CLASS__; public function indexAction() { return new ViewModel(array( 'content' =&gt; 'Placeholder page' )); } public function notFoundAction() { $response = $this-&gt;response; $event = $this-&gt;getEvent(); $routeMatch = $event-&gt;getRouteMatch(); $routeMatch-&gt;setParam('action', 'not-found'); if ($response instanceof HttpResponse) { return $this-&gt;createHttpNotFoundModel($response); } return $this-&gt;createConsoleNotFoundModel($response); } public function onDispatch(MvcEvent $e) { $routeMatch = $e-&gt;getRouteMatch(); if (!$routeMatch) { throw new Exception\DomainException('Missing route matches; unsure how to retrieve action'); } $action = $routeMatch-&gt;getParam('action', 'not-found'); $method = static::getMethodFromAction($action); if (!method_exists($this, $method)) { $method = 'notFoundAction'; } $actionResponse = $this-&gt;$method(); $e-&gt;setResult($actionResponse); return $actionResponse; } protected function createHttpNotFoundModel(HttpResponse $response) { $response-&gt;setStatusCode(404); return new ViewModel(array( 'content' =&gt; 'Page not found', )); } protected function createConsoleNotFoundModel($response) { $viewModel = new ConsoleModel(); $viewModel-&gt;setErrorLevel(1); $viewModel-&gt;setResult('Page not found'); return $viewModel; } } &lt;?php
 namespace Zend\Mvc; use Zend\EventManager\EventInterface as Event; interface InjectApplicationEventInterface { public function setEvent(Event $event); public function getEvent(); } &lt;?php
 namespace Zend\Mvc; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\Application; class RouteListener implements ListenerAggregateInterface { protected $listeners = array(); public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_ROUTE, array($this, 'onRoute')); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function onRoute($e) { $target = $e-&gt;getTarget(); $request = $e-&gt;getRequest(); $router = $e-&gt;getRouter(); $routeMatch = $router-&gt;match($request); if (!$routeMatch instanceof Router\RouteMatch) { $e-&gt;setError(Application::ERROR_ROUTER_NO_MATCH); $results = $target-&gt;getEventManager()-&gt;trigger(MvcEvent::EVENT_DISPATCH_ERROR, $e); if (count($results)) { $return = $results-&gt;last(); } else { $return = $e-&gt;getParams(); } return $return; } $e-&gt;setRouteMatch($routeMatch); return $routeMatch; } } &lt;?php
 namespace Zend\Mvc; use Zend\EventManager\EventManager; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\MvcEvent; use Zend\Mvc\ResponseSender\ConsoleResponseSender; use Zend\Mvc\ResponseSender\PhpEnvironmentResponseSender; use Zend\Mvc\ResponseSender\SimpleStreamResponseSender; use Zend\Mvc\ResponseSender\SendResponseEvent; use Zend\Stdlib\ResponseInterface as Response; class SendResponseListener implements EventManagerAwareInterface, ListenerAggregateInterface { protected $listeners = array(); protected $event; protected $eventManager; public function setEventManager(EventManagerInterface $eventManager) { $eventManager-&gt;setIdentifiers(array( __CLASS__, get_called_class(), )); $this-&gt;eventManager = $eventManager; $this-&gt;attachDefaultListeners(); return $this; } public function getEventManager() { if (!$this-&gt;eventManager instanceof EventManagerInterface) { $this-&gt;setEventManager(new EventManager()); } return $this-&gt;eventManager; } public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_FINISH, array($this, 'sendResponse'), -10000); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function sendResponse(MvcEvent $e) { $response = $e-&gt;getResponse(); if (!$response instanceof Response) { return; } $event = $this-&gt;getEvent(); $event-&gt;setResponse($response); $event-&gt;setTarget($this); $this-&gt;getEventManager()-&gt;trigger($event); } public function getEvent() { if (!$this-&gt;event instanceof SendResponseEvent) { $this-&gt;event = new SendResponseEvent(); } return $this-&gt;event; } public function setEvent(SendResponseEvent $e) { $this-&gt;event = $e; return $this; } protected function attachDefaultListeners() { $events = $this-&gt;getEventManager(); $events-&gt;attach(SendResponseEvent::EVENT_SEND_RESPONSE, new PhpEnvironmentResponseSender(), -1000); $events-&gt;attach(SendResponseEvent::EVENT_SEND_RESPONSE, new ConsoleResponseSender(), -2000); $events-&gt;attach(SendResponseEvent::EVENT_SEND_RESPONSE, new SimpleStreamResponseSender(), -3000); } } &lt;?php
 namespace Zend\Mvc; use ArrayObject; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Mvc\Exception\InvalidControllerException; use Zend\Stdlib\ArrayUtils; class DispatchListener implements ListenerAggregateInterface { protected $listeners = array(); public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH, array($this, 'onDispatch')); if (function_exists('zend_monitor_custom_event_ex')) { $this-&gt;listeners[] = $events-&gt;attach(MvcEvent::EVENT_DISPATCH_ERROR, array($this, 'reportMonitorEvent')); } } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function onDispatch(MvcEvent $e) { $routeMatch = $e-&gt;getRouteMatch(); $controllerName = $routeMatch-&gt;getParam('controller', 'not-found'); $application = $e-&gt;getApplication(); $events = $application-&gt;getEventManager(); $controllerLoader = $application-&gt;getServiceManager()-&gt;get('ControllerLoader'); if (!$controllerLoader-&gt;has($controllerName)) { $return = $this-&gt;marshallControllerNotFoundEvent($application::ERROR_CONTROLLER_NOT_FOUND, $controllerName, $e, $application); return $this-&gt;complete($return, $e); } try { $controller = $controllerLoader-&gt;get($controllerName); } catch (InvalidControllerException $exception) { $return = $this-&gt;marshallControllerNotFoundEvent($application::ERROR_CONTROLLER_INVALID, $controllerName, $e, $application, $exception); return $this-&gt;complete($return, $e); } catch (\Exception $exception) { $return = $this-&gt;marshallBadControllerEvent($controllerName, $e, $application, $exception); return $this-&gt;complete($return, $e); } $request = $e-&gt;getRequest(); $response = $application-&gt;getResponse(); if ($controller instanceof InjectApplicationEventInterface) { $controller-&gt;setEvent($e); } try { $return = $controller-&gt;dispatch($request, $response); } catch (\Exception $ex) { $e-&gt;setError($application::ERROR_EXCEPTION) -&gt;setController($controllerName) -&gt;setControllerClass(get_class($controller)) -&gt;setParam('exception', $ex); $results = $events-&gt;trigger(MvcEvent::EVENT_DISPATCH_ERROR, $e); $return = $results-&gt;last(); if (! $return) { $return = $e-&gt;getResult(); } } return $this-&gt;complete($return, $e); } public function reportMonitorEvent(MvcEvent $e) { $error = $e-&gt;getError(); $exception = $e-&gt;getParam('exception'); if ($exception instanceof \Exception) { zend_monitor_custom_event_ex($error, $exception-&gt;getMessage(), 'Zend Framework Exception', array('code' =&gt; $exception-&gt;getCode(), 'trace' =&gt; $exception-&gt;getTraceAsString())); } } protected function complete($return, MvcEvent $event) { if (!is_object($return)) { if (ArrayUtils::hasStringKeys($return)) { $return = new ArrayObject($return, ArrayObject::ARRAY_AS_PROPS); } } $event-&gt;setResult($return); return $return; } protected function marshallControllerNotFoundEvent( $type, $controllerName, MvcEvent $event, Application $application, \Exception $exception = null ) { $event-&gt;setError($type) -&gt;setController($controllerName) -&gt;setControllerClass('invalid controller class or alias: ' . $controllerName); if ($exception !== null) { $event-&gt;setParam('exception', $exception); } $events = $application-&gt;getEventManager(); $results = $events-&gt;trigger(MvcEvent::EVENT_DISPATCH_ERROR, $event); $return = $results-&gt;last(); if (! $return) { $return = $event-&gt;getResult(); } return $return; } protected function marshallBadControllerEvent( $controllerName, MvcEvent $event, Application $application, \Exception $exception ) { $event-&gt;setError($application::ERROR_EXCEPTION) -&gt;setController($controllerName) -&gt;setParam('exception', $exception); $events = $application-&gt;getEventManager(); $results = $events-&gt;trigger(MvcEvent::EVENT_DISPATCH_ERROR, $event); $return = $results-&gt;last(); if (! $return) { $return = $event-&gt;getResult(); } return $return; } } &lt;?php
 namespace Zend\Mvc; use Zend\EventManager\EventsCapableInterface; use Zend\Http\Request; use Zend\Http\Response; interface ApplicationInterface extends EventsCapableInterface { public function getServiceManager(); public function getRequest(); public function getResponse(); public function run(); } &lt;?php
 namespace Zend\Mvc; use Zend\EventManager\Event; use Zend\Stdlib\RequestInterface as Request; use Zend\Stdlib\ResponseInterface as Response; use Zend\View\Model\ModelInterface as Model; use Zend\View\Model\ViewModel; class MvcEvent extends Event { const EVENT_BOOTSTRAP = 'bootstrap'; const EVENT_DISPATCH = 'dispatch'; const EVENT_DISPATCH_ERROR = 'dispatch.error'; const EVENT_FINISH = 'finish'; const EVENT_RENDER = 'render'; const EVENT_RENDER_ERROR = 'render.error'; const EVENT_ROUTE = 'route'; protected $application; protected $request; protected $response; protected $result; protected $router; protected $routeMatch; protected $viewModel; public function setApplication(ApplicationInterface $application) { $this-&gt;setParam('application', $application); $this-&gt;application = $application; return $this; } public function getApplication() { return $this-&gt;application; } public function getRouter() { return $this-&gt;router; } public function setRouter(Router\RouteStackInterface $router) { $this-&gt;setParam('router', $router); $this-&gt;router = $router; return $this; } public function getRouteMatch() { return $this-&gt;routeMatch; } public function setRouteMatch(Router\RouteMatch $matches) { $this-&gt;setParam('route-match', $matches); $this-&gt;routeMatch = $matches; return $this; } public function getRequest() { return $this-&gt;request; } public function setRequest(Request $request) { $this-&gt;setParam('request', $request); $this-&gt;request = $request; return $this; } public function getResponse() { return $this-&gt;response; } public function setResponse(Response $response) { $this-&gt;setParam('response', $response); $this-&gt;response = $response; return $this; } public function setViewModel(Model $viewModel) { $this-&gt;viewModel = $viewModel; return $this; } public function getViewModel() { if (null === $this-&gt;viewModel) { $this-&gt;setViewModel(new ViewModel()); } return $this-&gt;viewModel; } public function getResult() { return $this-&gt;result; } public function setResult($result) { $this-&gt;setParam('__RESULT__', $result); $this-&gt;result = $result; return $this; } public function isError() { return (bool) $this-&gt;getParam('error', false); } public function setError($message) { $this-&gt;setParam('error', $message); return $this; } public function getError() { return $this-&gt;getParam('error', ''); } public function getController() { return $this-&gt;getParam('controller'); } public function setController($name) { $this-&gt;setParam('controller', $name); return $this; } public function getControllerClass() { return $this-&gt;getParam('controller-class'); } public function setControllerClass($class) { $this-&gt;setParam('controller-class', $class); return $this; } } &lt;?php
 namespace Zend\Mvc\ResponseSender; use Zend\Console\Response; class ConsoleResponseSender implements ResponseSenderInterface { public function sendContent(SendResponseEvent $event) { if ($event-&gt;contentSent()) { return $this; } $response = $event-&gt;getResponse(); echo $response-&gt;getContent(); $event-&gt;setContentSent(); return $this; } public function __invoke(SendResponseEvent $event) { $response = $event-&gt;getResponse(); if (!$response instanceof Response) { return; } $this-&gt;sendContent($event); $errorLevel = (int) $response-&gt;getMetadata('errorLevel',0); $event-&gt;stopPropagation(true); exit($errorLevel); } } &lt;?php
 namespace Zend\Mvc\ResponseSender; use Zend\Http\Header\MultipleHeaderInterface; abstract class AbstractResponseSender implements ResponseSenderInterface { public function sendHeaders(SendResponseEvent $event) { if (headers_sent() || $event-&gt;headersSent()) { return $this; } $response = $event-&gt;getResponse(); foreach ($response-&gt;getHeaders() as $header) { if ($header instanceof MultipleHeaderInterface) { header($header-&gt;toString(), false); continue; } header($header-&gt;toString()); } $status = $response-&gt;renderStatusLine(); header($status); $event-&gt;setHeadersSent(); return $this; } } &lt;?php
 namespace Zend\Mvc\ResponseSender; use Zend\Mvc\ResponseSender\SendResponseEvent; interface ResponseSenderInterface { public function __invoke(SendResponseEvent $event); } &lt;?php
 namespace Zend\Mvc\ResponseSender; use Zend\EventManager\Event; use Zend\Stdlib\ResponseInterface; class SendResponseEvent extends Event { const EVENT_SEND_RESPONSE = 'sendResponse'; protected $name = 'sendResponse'; protected $response; protected $headersSent = array(); protected $contentSent = array(); public function setResponse(ResponseInterface $response) { $this-&gt;setParam('response', $response); $this-&gt;response = $response; return $this; } public function getResponse() { return $this-&gt;response; } public function setContentSent() { $response = $this-&gt;getResponse(); $contentSent = $this-&gt;getParam('contentSent', array()); $contentSent[spl_object_hash($response)] = true; $this-&gt;setParam('contentSent', $contentSent); $this-&gt;contentSent[spl_object_hash($response)] = true; return $this; } public function contentSent() { $response = $this-&gt;getResponse(); if (isset($this-&gt;contentSent[spl_object_hash($response)])) { return true; } return false; } public function setHeadersSent() { $response = $this-&gt;getResponse(); $headersSent = $this-&gt;getParam('headersSent', array()); $headersSent[spl_object_hash($response)] = true; $this-&gt;setParam('headersSent', $headersSent); $this-&gt;headersSent[spl_object_hash($response)] = true; return $this; } public function headersSent() { $response = $this-&gt;getResponse(); if (isset($this-&gt;headersSent[spl_object_hash($response)])) { return true; } return false; } } &lt;?php
 namespace Zend\Mvc\ResponseSender; use Zend\Http\Header\MultipleHeaderInterface; use Zend\Http\Response\Stream; class SimpleStreamResponseSender extends AbstractResponseSender { public function sendStream(SendResponseEvent $event) { if ($event-&gt;contentSent()) { return $this; } $response = $event-&gt;getResponse(); $stream = $response-&gt;getStream(); fpassthru($stream); $event-&gt;setContentSent(); } public function __invoke(SendResponseEvent $event) { $response = $event-&gt;getResponse(); if (!$response instanceof Stream) { return $this; } $this-&gt;sendHeaders($event); $this-&gt;sendStream($event); $event-&gt;stopPropagation(true); return $this; } } &lt;?php
 namespace Zend\Mvc\ResponseSender; use Zend\Mvc\ResponseSender\SendResponseEvent; use Zend\Http\Header\MultipleHeaderInterface; use Zend\Http\PhpEnvironment\Response; class PhpEnvironmentResponseSender extends AbstractResponseSender { public function sendContent(SendResponseEvent $event) { if ($event-&gt;contentSent()) { return $this; } $response = $event-&gt;getResponse(); echo $response-&gt;getContent(); $event-&gt;setContentSent(); return $this; } public function __invoke(SendResponseEvent $event) { $response = $event-&gt;getResponse(); if (!$response instanceof Response) { return $this; } $this-&gt;sendHeaders($event) -&gt;sendContent($event); $event-&gt;stopPropagation(true); return $this; } } &lt;?php
 namespace Zend\InputFilter; use Countable; use Traversable; interface InputFilterInterface extends Countable { const VALIDATE_ALL = 'INPUT_FILTER_ALL'; public function add($input, $name = null); public function get($name); public function has($name); public function remove($name); public function setData($data); public function isValid(); public function setValidationGroup($name); public function getInvalidInput(); public function getValidInput(); public function getValue($name); public function getValues(); public function getRawValue($name); public function getRawValues(); public function getMessages(); } &lt;?php
 namespace Zend\InputFilter; use Zend\InputFilter\InputFilterInterface; trait InputFilterAwareTrait { protected $inputFilter = null; public function setInputFilter(InputFilterInterface $inputFilter) { $this-&gt;inputFilter = $inputFilter; return $this; } public function getInputFilter() { return $this-&gt;inputFilter; } } &lt;?php
 namespace Zend\InputFilter\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\InputFilter\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\InputFilter\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\InputFilter; use Zend\Filter\FilterChain; use Zend\Validator\ValidatorChain; use Zend\Validator\NotEmpty; class Input implements InputInterface { protected $allowEmpty = false; protected $breakOnFailure = false; protected $errorMessage; protected $filterChain; protected $name; protected $notEmptyValidator = false; protected $required = true; protected $validatorChain; protected $value; protected $fallbackValue; public function __construct($name = null) { $this-&gt;name = $name; } public function setAllowEmpty($allowEmpty) { $this-&gt;allowEmpty = (bool) $allowEmpty; return $this; } public function setBreakOnFailure($breakOnFailure) { $this-&gt;breakOnFailure = (bool) $breakOnFailure; return $this; } public function setErrorMessage($errorMessage) { $this-&gt;errorMessage = (null === $errorMessage) ? null : (string) $errorMessage; return $this; } public function setFilterChain(FilterChain $filterChain) { $this-&gt;filterChain = $filterChain; return $this; } public function setName($name) { $this-&gt;name = (string) $name; return $this; } public function setRequired($required) { $this-&gt;required = (bool) $required; return $this; } public function setValidatorChain(ValidatorChain $validatorChain) { $this-&gt;validatorChain = $validatorChain; return $this; } public function setValue($value) { $this-&gt;value = $value; return $this; } public function setFallbackValue($value) { $this-&gt;fallbackValue = $value; return $this; } public function allowEmpty() { return $this-&gt;allowEmpty; } public function breakOnFailure() { return $this-&gt;breakOnFailure; } public function getErrorMessage() { return $this-&gt;errorMessage; } public function getFilterChain() { if (!$this-&gt;filterChain) { $this-&gt;setFilterChain(new FilterChain()); } return $this-&gt;filterChain; } public function getName() { return $this-&gt;name; } public function getRawValue() { return $this-&gt;value; } public function isRequired() { return $this-&gt;required; } public function getValidatorChain() { if (!$this-&gt;validatorChain) { $this-&gt;setValidatorChain(new ValidatorChain()); } return $this-&gt;validatorChain; } public function getValue() { $filter = $this-&gt;getFilterChain(); return $filter-&gt;filter($this-&gt;value); } public function getFallbackValue() { return $this-&gt;fallbackValue; } public function merge(InputInterface $input) { $this-&gt;setAllowEmpty($input-&gt;allowEmpty()); $this-&gt;setBreakOnFailure($input-&gt;breakOnFailure()); $this-&gt;setErrorMessage($input-&gt;getErrorMessage()); $this-&gt;setName($input-&gt;getName()); $this-&gt;setRequired($input-&gt;isRequired()); $this-&gt;setValue($input-&gt;getRawValue()); $filterChain = $input-&gt;getFilterChain(); $this-&gt;getFilterChain()-&gt;merge($filterChain); $validatorChain = $input-&gt;getValidatorChain(); $this-&gt;getValidatorChain()-&gt;merge($validatorChain); return $this; } public function isValid($context = null) { $this-&gt;injectNotEmptyValidator(); $validator = $this-&gt;getValidatorChain(); $value = $this-&gt;getValue(); $result = $validator-&gt;isValid($value, $context); if (!$result &amp;&amp; $fallbackValue = $this-&gt;getFallbackValue()) { $this-&gt;setValue($fallbackValue); $result = true; } return $result; } public function getMessages() { if (null !== $this-&gt;errorMessage) { return (array) $this-&gt;errorMessage; } if ($this-&gt;getFallbackValue()) { return array(); } $validator = $this-&gt;getValidatorChain(); return $validator-&gt;getMessages(); } protected function injectNotEmptyValidator() { if ((!$this-&gt;isRequired() &amp;&amp; $this-&gt;allowEmpty()) || $this-&gt;notEmptyValidator) { return; } $chain = $this-&gt;getValidatorChain(); $validators = $chain-&gt;getValidators(); foreach ($validators as $validator) { if ($validator['instance'] instanceof NotEmpty) { $this-&gt;notEmptyValidator = true; return; } } $chain-&gt;prependByName('NotEmpty', array(), true); $this-&gt;notEmptyValidator = true; } } &lt;?php
 namespace Zend\InputFilter; interface InputFilterAwareInterface { public function setInputFilter(InputFilterInterface $inputFilter); public function getInputFilter(); } &lt;?php
 namespace Zend\InputFilter; interface InputFilterProviderInterface { public function getInputFilterSpecification(); } &lt;?php
 namespace Zend\InputFilter; use Traversable; class InputFilter extends BaseInputFilter { protected $factory; public function setFactory(Factory $factory) { $this-&gt;factory = $factory; return $this; } public function getFactory() { if (null === $this-&gt;factory) { $this-&gt;setFactory(new Factory()); } return $this-&gt;factory; } public function add($input, $name = null) { if (is_array($input) || ($input instanceof Traversable &amp;&amp; !$input instanceof InputFilterInterface) ) { $factory = $this-&gt;getFactory(); $input = $factory-&gt;createInput($input); } return parent::add($input, $name); } } &lt;?php
 namespace Zend\InputFilter; interface UnknownInputsCapableInterface { public function hasUnknown(); public function getUnknown(); } &lt;?php
 namespace Zend\InputFilter; use Zend\Validator\File\UploadFile as UploadValidator; class FileInput extends Input { protected $isValid = false; protected $autoPrependUploadValidator = true; public function setAutoPrependUploadValidator($value) { $this-&gt;autoPrependUploadValidator = $value; return $this; } public function getAutoPrependUploadValidator() { return $this-&gt;autoPrependUploadValidator; } public function getValue() { $value = $this-&gt;value; if ($this-&gt;isValid &amp;&amp; is_array($value)) { $filter = $this-&gt;getFilterChain(); if (isset($value['tmp_name'])) { $value = $filter-&gt;filter($value); } else { $newValue = array(); foreach ($value as $fileData) { if (is_array($fileData) &amp;&amp; isset($fileData['tmp_name'])) { $newValue[] = $filter-&gt;filter($fileData); } } $value = $newValue; } } return $value; } public function isValid($context = null) { $this-&gt;injectUploadValidator(); $validator = $this-&gt;getValidatorChain(); $rawValue = $this-&gt;getRawValue(); if (!is_array($rawValue)) { $rawValue = array( 'tmp_name' =&gt; $rawValue, 'name' =&gt; $rawValue, 'size' =&gt; 0, 'type' =&gt; '', 'error' =&gt; UPLOAD_ERR_NO_FILE, ); } if (is_array($rawValue) &amp;&amp; isset($rawValue['tmp_name'])) { $this-&gt;isValid = $validator-&gt;isValid($rawValue, $context); } elseif (is_array($rawValue) &amp;&amp; !empty($rawValue) &amp;&amp; isset($rawValue[0]['tmp_name'])) { $this-&gt;isValid = true; foreach ($rawValue as $value) { if (!$validator-&gt;isValid($value, $context)) { $this-&gt;isValid = false; break; } } } return $this-&gt;isValid; } protected function injectUploadValidator() { if (!$this-&gt;autoPrependUploadValidator) { return; } $chain = $this-&gt;getValidatorChain(); $validators = $chain-&gt;getValidators(); if (isset($validators[0]['instance']) &amp;&amp; $validators[0]['instance'] instanceof UploadValidator ) { $this-&gt;autoPrependUploadValidator = false; return; } $chain-&gt;prependByName('fileuploadfile', array(), true); $this-&gt;autoPrependUploadValidator = false; } protected function injectNotEmptyValidator() { $this-&gt;notEmptyValidator = true; } public function merge(InputInterface $input) { parent::merge($input); if ($input instanceof FileInput) { $this-&gt;setAutoPrependUploadValidator($input-&gt;getAutoPrependUploadValidator()); } return $this; } } &lt;?php
 namespace Zend\InputFilter; use ArrayAccess; use Traversable; use Zend\Stdlib\ArrayUtils; class BaseInputFilter implements InputFilterInterface, UnknownInputsCapableInterface { protected $data; protected $inputs = array(); protected $invalidInputs; protected $validationGroup; protected $validInputs; public function count() { return count($this-&gt;inputs); } public function add($input, $name = null) { if (!$input instanceof InputInterface &amp;&amp; !$input instanceof InputFilterInterface) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an instance of %s or %s as its first argument; received "%s"', __METHOD__, 'Zend\InputFilter\InputInterface', 'Zend\InputFilter\InputFilterInterface', (is_object($input) ? get_class($input) : gettype($input)) )); } if ($input instanceof InputInterface &amp;&amp; (empty($name) || is_int($name))) { $name = $input-&gt;getName(); } if (isset($this-&gt;inputs[$name]) &amp;&amp; $this-&gt;inputs[$name] instanceof InputInterface) { $input-&gt;merge($this-&gt;inputs[$name]); } $this-&gt;inputs[$name] = $input; return $this; } public function get($name) { if (!array_key_exists($name, $this-&gt;inputs)) { throw new Exception\InvalidArgumentException(sprintf( '%s: no input found matching "%s"', __METHOD__, $name )); } return $this-&gt;inputs[$name]; } public function has($name) { return (array_key_exists($name, $this-&gt;inputs)); } public function remove($name) { unset($this-&gt;inputs[$name]); return $this; } public function setData($data) { if (!is_array($data) &amp;&amp; !$data instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable argument; received %s', __METHOD__, (is_object($data) ? get_class($data) : gettype($data)) )); } if (is_object($data) &amp;&amp; !$data instanceof ArrayAccess) { $data = ArrayUtils::iteratorToArray($data); } $this-&gt;data = $data; $this-&gt;populate(); return $this; } public function isValid() { if (null === $this-&gt;data) { throw new Exception\RuntimeException(sprintf( '%s: no data present to validate!', __METHOD__ )); } $this-&gt;validInputs = array(); $this-&gt;invalidInputs = array(); $valid = true; $inputs = $this-&gt;validationGroup ?: array_keys($this-&gt;inputs); foreach ($inputs as $name) { $input = $this-&gt;inputs[$name]; if (!array_key_exists($name, $this-&gt;data) || (null === $this-&gt;data[$name]) || (is_string($this-&gt;data[$name]) &amp;&amp; strlen($this-&gt;data[$name]) === 0) || (is_array($this-&gt;data[$name]) &amp;&amp; isset($this-&gt;data[$name]['error']) &amp;&amp; $this-&gt;data[$name]['error'] === UPLOAD_ERR_NO_FILE) || (is_array($this-&gt;data[$name]) &amp;&amp; count($this-&gt;data[$name]) === 1 &amp;&amp; isset($this-&gt;data[$name][0]) &amp;&amp; is_array($this-&gt;data[$name][0]) &amp;&amp; isset($this-&gt;data[$name][0]['error']) &amp;&amp; $this-&gt;data[$name][0]['error'] === UPLOAD_ERR_NO_FILE) ) { if ($input instanceof InputInterface) { if (!$input-&gt;isRequired()) { $this-&gt;validInputs[$name] = $input; continue; } if ($input-&gt;allowEmpty()) { $this-&gt;validInputs[$name] = $input; continue; } } $this-&gt;data[$name] = ''; } if ($input instanceof InputFilterInterface) { if (!$input-&gt;isValid()) { $this-&gt;invalidInputs[$name] = $input; $valid = false; continue; } $this-&gt;validInputs[$name] = $input; continue; } if ($input instanceof InputInterface) { if (!$input-&gt;isValid($this-&gt;data)) { $this-&gt;invalidInputs[$name] = $input; $valid = false; if ($input-&gt;breakOnFailure()) { return false; } continue; } $this-&gt;validInputs[$name] = $input; continue; } } return $valid; } public function setValidationGroup($name) { if ($name === self::VALIDATE_ALL) { $this-&gt;validationGroup = null; return $this; } if (is_array($name)) { $inputs = array(); foreach ($name as $key =&gt; $value) { if (!$this-&gt;has($key)) { $inputs[] = $value; } else { $inputs[] = $key; $this-&gt;inputs[$key]-&gt;setValidationGroup($value); } } if (!empty($inputs)) { $this-&gt;validateValidationGroup($inputs); $this-&gt;validationGroup = $inputs; } return $this; } $inputs = func_get_args(); $this-&gt;validateValidationGroup($inputs); $this-&gt;validationGroup = $inputs; return $this; } public function getInvalidInput() { return (is_array($this-&gt;invalidInputs) ? $this-&gt;invalidInputs : array()); } public function getValidInput() { return (is_array($this-&gt;validInputs) ? $this-&gt;validInputs : array()); } public function getValue($name) { if (!array_key_exists($name, $this-&gt;inputs)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a valid input name; "%s" was not found in the filter', __METHOD__, $name )); } $input = $this-&gt;inputs[$name]; return $input-&gt;getValue(); } public function getValues() { $inputs = $this-&gt;validationGroup ?: array_keys($this-&gt;inputs); $values = array(); foreach ($inputs as $name) { $input = $this-&gt;inputs[$name]; if ($input instanceof InputFilterInterface) { $values[$name] = $input-&gt;getValues(); continue; } $values[$name] = $input-&gt;getValue(); } return $values; } public function getRawValue($name) { if (!array_key_exists($name, $this-&gt;inputs)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a valid input name; "%s" was not found in the filter', __METHOD__, $name )); } $input = $this-&gt;inputs[$name]; return $input-&gt;getRawValue(); } public function getRawValues() { $values = array(); foreach ($this-&gt;inputs as $name =&gt; $input) { if ($input instanceof InputFilterInterface) { $values[$name] = $input-&gt;getRawValues(); continue; } $values[$name] = $input-&gt;getRawValue(); } return $values; } public function getMessages() { $messages = array(); foreach ($this-&gt;getInvalidInput() as $name =&gt; $input) { $messages[$name] = $input-&gt;getMessages(); } return $messages; } protected function validateValidationGroup(array $inputs) { foreach ($inputs as $name) { if (!array_key_exists($name, $this-&gt;inputs)) { throw new Exception\InvalidArgumentException(sprintf( 'setValidationGroup() expects a list of valid input names; "%s" was not found', $name )); } } } protected function populate() { foreach (array_keys($this-&gt;inputs) as $name) { $input = $this-&gt;inputs[$name]; if (!isset($this-&gt;data[$name])) { if ($input instanceof InputFilterInterface) { $input-&gt;setData(array()); continue; } $input-&gt;setValue(null); continue; } $value = $this-&gt;data[$name]; if ($input instanceof InputFilterInterface) { $input-&gt;setData($value); continue; } $input-&gt;setValue($value); } } public function hasUnknown() { if (null === $this-&gt;data) { throw new Exception\RuntimeException(sprintf( '%s: no data present!', __METHOD__ )); } $data = array_keys($this-&gt;data); $inputs = array_keys($this-&gt;inputs); $diff = array_diff($data, $inputs); if (!empty($diff)) { return count(array_intersect($diff, $inputs)) == 0; } return false; } public function getUnknown() { if (null === $this-&gt;data) { throw new Exception\RuntimeException(sprintf( '%s: no data present!', __METHOD__ )); } $data = array_keys($this-&gt;data); $inputs = array_keys($this-&gt;inputs); $diff = array_diff($data, $inputs); $unknownInputs = array(); $intersect = array_intersect($diff, $data); if (!empty($intersect)) { foreach ($intersect as $key) { $unknownInputs[$key] = $this-&gt;data[$key]; } } return $unknownInputs; } } &lt;?php
 namespace Zend\InputFilter; interface InputProviderInterface { public function getInputSpecification(); } &lt;?php
 namespace Zend\InputFilter; use Traversable; use Zend\Filter\FilterChain; use Zend\Stdlib\ArrayUtils; use Zend\Validator\ValidatorChain; use Zend\Validator\ValidatorInterface; class Factory { protected $defaultFilterChain; protected $defaultValidatorChain; public function setDefaultFilterChain(FilterChain $filterChain) { $this-&gt;defaultFilterChain = $filterChain; return $this; } public function getDefaultFilterChain() { return $this-&gt;defaultFilterChain; } public function clearDefaultFilterChain() { $this-&gt;defaultFilterChain = null; } public function setDefaultValidatorChain(ValidatorChain $validatorChain) { $this-&gt;defaultValidatorChain = $validatorChain; return $this; } public function getDefaultValidatorChain() { return $this-&gt;defaultValidatorChain; } public function clearDefaultValidatorChain() { $this-&gt;defaultValidatorChain = null; } public function createInput($inputSpecification) { if (!is_array($inputSpecification) &amp;&amp; !$inputSpecification instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable; received "%s"', __METHOD__, (is_object($inputSpecification) ? get_class($inputSpecification) : gettype($inputSpecification)) )); } if ($inputSpecification instanceof Traversable) { $inputSpecification = ArrayUtils::iteratorToArray($inputSpecification); } $class = 'Zend\InputFilter\Input'; if (isset($inputSpecification['type'])) { $class = $inputSpecification['type']; if (!class_exists($class)) { throw new Exception\RuntimeException(sprintf( 'Input factory expects the "type" to be a valid class; received "%s"', $class )); } } $input = new $class(); if ($input instanceof InputFilterInterface) { return $this-&gt;createInputFilter($inputSpecification); } if (!$input instanceof InputInterface) { throw new Exception\RuntimeException(sprintf( 'Input factory expects the "type" to be a class implementing %s; received "%s"', 'Zend\InputFilter\InputInterface', $class )); } if ($this-&gt;defaultFilterChain) { $input-&gt;setFilterChain(clone $this-&gt;defaultFilterChain); } if ($this-&gt;defaultValidatorChain) { $input-&gt;setValidatorChain(clone $this-&gt;defaultValidatorChain); } foreach ($inputSpecification as $key =&gt; $value) { switch ($key) { case 'name': $input-&gt;setName($value); break; case 'required': $input-&gt;setRequired($value); if (!isset($inputSpecification['allow_empty'])) { $input-&gt;setAllowEmpty(!$value); } break; case 'allow_empty': $input-&gt;setAllowEmpty($value); if (!isset($inputSpecification['required'])) { $input-&gt;setRequired(!$value); } break; case 'fallback_value': $input-&gt;setFallbackValue($value); break; case 'filters': if ($value instanceof FilterChain) { $input-&gt;setFilterChain($value); break; } if (!is_array($value) &amp;&amp; !$value instanceof Traversable) { throw new Exception\RuntimeException(sprintf( '%s expects the value associated with "filters" to be an array/Traversable of filters or filter specifications, or a FilterChain; received "%s"', __METHOD__, (is_object($value) ? get_class($value) : gettype($value)) )); } $this-&gt;populateFilters($input-&gt;getFilterChain(), $value); break; case 'validators': if ($value instanceof ValidatorChain) { $input-&gt;setValidatorChain($value); break; } if (!is_array($value) &amp;&amp; !$value instanceof Traversable) { throw new Exception\RuntimeException(sprintf( '%s expects the value associated with "validators" to be an array/Traversable of validators or validator specifications, or a ValidatorChain; received "%s"', __METHOD__, (is_object($value) ? get_class($value) : gettype($value)) )); } $this-&gt;populateValidators($input-&gt;getValidatorChain(), $value); break; default: break; } } return $input; } public function createInputFilter($inputFilterSpecification) { if (!is_array($inputFilterSpecification) &amp;&amp; !$inputFilterSpecification instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable; received "%s"', __METHOD__, (is_object($inputFilterSpecification) ? get_class($inputFilterSpecification) : gettype($inputFilterSpecification)) )); } if ($inputFilterSpecification instanceof Traversable) { $inputFilterSpecification = ArrayUtils::iteratorToArray($inputFilterSpecification); } $class = 'Zend\InputFilter\InputFilter'; if (isset($inputFilterSpecification['type']) &amp;&amp; is_string($inputFilterSpecification['type'])) { $class = $inputFilterSpecification['type']; if (!class_exists($class)) { throw new Exception\RuntimeException(sprintf( 'Input factory expects the "type" to be a valid class; received "%s"', $class )); } unset($inputFilterSpecification['type']); } $inputFilter = new $class(); if (!$inputFilter instanceof InputFilterInterface) { throw new Exception\RuntimeException(sprintf( 'InputFilter factory expects the "type" to be a class implementing %s; received "%s"', 'Zend\InputFilter\InputFilterInterface', $class)); } foreach ($inputFilterSpecification as $key =&gt; $value) { if (($value instanceof InputInterface) || ($value instanceof InputFilterInterface) ) { $input = $value; } else { $input = $this-&gt;createInput($value); } $inputFilter-&gt;add($input, $key); } return $inputFilter; } protected function populateFilters(FilterChain $chain, $filters) { foreach ($filters as $filter) { if (is_object($filter) || is_callable($filter)) { $chain-&gt;attach($filter); continue; } if (is_array($filter)) { if (!isset($filter['name'])) { throw new Exception\RuntimeException( 'Invalid filter specification provided; does not include "name" key' ); } $name = $filter['name']; $options = array(); if (isset($filter['options'])) { $options = $filter['options']; } $chain-&gt;attachByName($name, $options); continue; } throw new Exception\RuntimeException( 'Invalid filter specification provided; was neither a filter instance nor an array specification' ); } } protected function populateValidators(ValidatorChain $chain, $validators) { foreach ($validators as $validator) { if ($validator instanceof ValidatorInterface) { $chain-&gt;attach($validator); continue; } if (is_array($validator)) { if (!isset($validator['name'])) { throw new Exception\RuntimeException( 'Invalid validator specification provided; does not include "name" key' ); } $name = $validator['name']; $options = array(); if (isset($validator['options'])) { $options = $validator['options']; } $breakChainOnFailure = false; if (isset($validator['break_chain_on_failure'])) { $breakChainOnFailure = $validator['break_chain_on_failure']; } $chain-&gt;attachByName($name, $options, $breakChainOnFailure); continue; } throw new Exception\RuntimeException( 'Invalid validator specification provided; was neither a validator instance nor an array specification' ); } } } &lt;?php
 namespace Zend\InputFilter; use Zend\Filter\FilterChain; use Zend\Validator\ValidatorChain; interface InputInterface { public function setAllowEmpty($allowEmpty); public function setBreakOnFailure($breakOnFailure); public function setErrorMessage($errorMessage); public function setFilterChain(FilterChain $filterChain); public function setName($name); public function setRequired($required); public function setValidatorChain(ValidatorChain $validatorChain); public function setValue($value); public function merge(InputInterface $input); public function allowEmpty(); public function breakOnFailure(); public function getErrorMessage(); public function getFilterChain(); public function getName(); public function getRawValue(); public function isRequired(); public function getValidatorChain(); public function getValue(); public function isValid(); public function getMessages(); } &lt;?php
 namespace Zend\Loader; require_once __DIR__ . '/SplAutoloader.php'; class StandardAutoloader implements SplAutoloader { const NS_SEPARATOR = '\\'; const PREFIX_SEPARATOR = '_'; const LOAD_NS = 'namespaces'; const LOAD_PREFIX = 'prefixes'; const ACT_AS_FALLBACK = 'fallback_autoloader'; const AUTOREGISTER_ZF = 'autoregister_zf'; protected $namespaces = array(); protected $prefixes = array(); protected $fallbackAutoloaderFlag = false; public function __construct($options = null) { if (null !== $options) { $this-&gt;setOptions($options); } } public function setOptions($options) { if (!is_array($options) &amp;&amp; !($options instanceof \Traversable)) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException('Options must be either an array or Traversable'); } foreach ($options as $type =&gt; $pairs) { switch ($type) { case self::AUTOREGISTER_ZF: if ($pairs) { $this-&gt;registerNamespace('Zend', dirname(__DIR__)); } break; case self::LOAD_NS: if (is_array($pairs) || $pairs instanceof \Traversable) { $this-&gt;registerNamespaces($pairs); } break; case self::LOAD_PREFIX: if (is_array($pairs) || $pairs instanceof \Traversable) { $this-&gt;registerPrefixes($pairs); } break; case self::ACT_AS_FALLBACK: $this-&gt;setFallbackAutoloader($pairs); break; default: } } return $this; } public function setFallbackAutoloader($flag) { $this-&gt;fallbackAutoloaderFlag = (bool) $flag; return $this; } public function isFallbackAutoloader() { return $this-&gt;fallbackAutoloaderFlag; } public function registerNamespace($namespace, $directory) { $namespace = rtrim($namespace, self::NS_SEPARATOR) . self::NS_SEPARATOR; $this-&gt;namespaces[$namespace] = $this-&gt;normalizeDirectory($directory); return $this; } public function registerNamespaces($namespaces) { if (!is_array($namespaces) &amp;&amp; !$namespaces instanceof \Traversable) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException('Namespace pairs must be either an array or Traversable'); } foreach ($namespaces as $namespace =&gt; $directory) { $this-&gt;registerNamespace($namespace, $directory); } return $this; } public function registerPrefix($prefix, $directory) { $prefix = rtrim($prefix, self::PREFIX_SEPARATOR). self::PREFIX_SEPARATOR; $this-&gt;prefixes[$prefix] = $this-&gt;normalizeDirectory($directory); return $this; } public function registerPrefixes($prefixes) { if (!is_array($prefixes) &amp;&amp; !$prefixes instanceof \Traversable) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException('Prefix pairs must be either an array or Traversable'); } foreach ($prefixes as $prefix =&gt; $directory) { $this-&gt;registerPrefix($prefix, $directory); } return $this; } public function autoload($class) { $isFallback = $this-&gt;isFallbackAutoloader(); if (false !== strpos($class, self::NS_SEPARATOR)) { if ($this-&gt;loadClass($class, self::LOAD_NS)) { return $class; } elseif ($isFallback) { return $this-&gt;loadClass($class, self::ACT_AS_FALLBACK); } return false; } if (false !== strpos($class, self::PREFIX_SEPARATOR)) { if ($this-&gt;loadClass($class, self::LOAD_PREFIX)) { return $class; } elseif ($isFallback) { return $this-&gt;loadClass($class, self::ACT_AS_FALLBACK); } return false; } if ($isFallback) { return $this-&gt;loadClass($class, self::ACT_AS_FALLBACK); } return false; } public function register() { spl_autoload_register(array($this, 'autoload')); } protected function transformClassNameToFilename($class, $directory) { $matches = array(); preg_match('/(?P&lt;namespace&gt;.+\\\)?(?P&lt;class&gt;[^\\\]+$)/', $class, $matches); $class = (isset($matches['class'])) ? $matches['class'] : ''; $namespace = (isset($matches['namespace'])) ? $matches['namespace'] : ''; return $directory . str_replace(self::NS_SEPARATOR, '/', $namespace) . str_replace(self::PREFIX_SEPARATOR, '/', $class) . '.php'; } protected function loadClass($class, $type) { if (!in_array($type, array(self::LOAD_NS, self::LOAD_PREFIX, self::ACT_AS_FALLBACK))) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException(); } if ($type === self::ACT_AS_FALLBACK) { $filename = $this-&gt;transformClassNameToFilename($class, ''); $resolvedName = stream_resolve_include_path($filename); if ($resolvedName !== false) { return include $resolvedName; } return false; } foreach ($this-&gt;$type as $leader =&gt; $path) { if (0 === strpos($class, $leader)) { $trimmedClass = substr($class, strlen($leader)); $filename = $this-&gt;transformClassNameToFilename($trimmedClass, $path); if (file_exists($filename)) { return include $filename; } return false; } } return false; } protected function normalizeDirectory($directory) { $last = $directory[strlen($directory) - 1]; if (in_array($last, array('/', '\\'))) { $directory[strlen($directory) - 1] = DIRECTORY_SEPARATOR; return $directory; } $directory .= DIRECTORY_SEPARATOR; return $directory; } } &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/DomainException.php'; class PluginLoaderException extends DomainException { } &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/ExceptionInterface.php'; class InvalidPathException extends \Exception implements ExceptionInterface {} &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/ExceptionInterface.php'; class MissingResourceNamespaceException extends \Exception implements ExceptionInterface {} &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/ExceptionInterface.php'; class DomainException extends \DomainException implements ExceptionInterface {} &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/ExceptionInterface.php'; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/DomainException.php'; class SecurityException extends DomainException {} &lt;?php
 namespace Zend\Loader\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/ExceptionInterface.php'; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Loader\Exception; require_once __DIR__ . '/ExceptionInterface.php'; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface { } &lt;?php
 namespace Zend\Loader; use Traversable; require_once __DIR__ . '/SplAutoloader.php'; class ClassMapAutoloader implements SplAutoloader { protected $mapsLoaded = array(); protected $map = array(); public function __construct($options = null) { if (null !== $options) { $this-&gt;setOptions($options); } } public function setOptions($options) { $this-&gt;registerAutoloadMaps($options); return $this; } public function registerAutoloadMap($map) { if (is_string($map)) { $location = $map; if ($this === ($map = $this-&gt;loadMapFromFile($location))) { return $this; } } if (!is_array($map)) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException(sprintf( 'Map file provided does not return a map. Map file: "%s"', (isset($location) &amp;&amp; is_string($location) ? $location : 'unexpected type: ' . gettype($map)) )); } $this-&gt;map = array_merge($this-&gt;map, $map); if (isset($location)) { $this-&gt;mapsLoaded[] = $location; } return $this; } public function registerAutoloadMaps($locations) { if (!is_array($locations) &amp;&amp; !($locations instanceof Traversable)) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException('Map list must be an array or implement Traversable'); } foreach ($locations as $location) { $this-&gt;registerAutoloadMap($location); } return $this; } public function getAutoloadMap() { return $this-&gt;map; } public function autoload($class) { if (isset($this-&gt;map[$class])) { require_once $this-&gt;map[$class]; return $class; } return false; } public function register() { spl_autoload_register(array($this, 'autoload'), true, true); } protected function loadMapFromFile($location) { if (!file_exists($location)) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException(sprintf( 'Map file provided does not exist. Map file: "%s"', (is_string($location) ? $location : 'unexpected type: ' . gettype($location)) )); } if (!$path = static::realPharPath($location)) { $path = realpath($location); } if (in_array($path, $this-&gt;mapsLoaded)) { return $this; } $map = include $path; return $map; } public static function realPharPath($path) { if (strpos($path, 'phar:///') !== 0) { return; } $parts = explode('/', str_replace(array('/','\\'), '/', substr($path, 8))); $parts = array_values(array_filter($parts, function ($p) { return ($p !== '' &amp;&amp; $p !== '.'); })); array_walk($parts, function ($value, $key) use(&amp;$parts) { if ($value === '..') { unset($parts[$key], $parts[$key-1]); $parts = array_values($parts); } }); if (file_exists($realPath = 'phar:///' . implode('/', $parts))) { return $realPath; } } } &lt;?php
 namespace Zend\Loader; use Traversable; if (interface_exists('Zend\Loader\SplAutoloader')) return; interface SplAutoloader { public function __construct($options = null); public function setOptions($options); public function autoload($class); public function register(); } &lt;?php
 namespace Zend\Loader; require_once __DIR__ . '/SplAutoloader.php'; use GlobIterator; use SplFileInfo; use Traversable; class ModuleAutoloader implements SplAutoloader { protected $paths = array(); protected $explicitPaths = array(); protected $namespacedPaths = array(); protected $pharExtensions = array(); protected $moduleClassMap = array(); public function __construct($options = null) { if (extension_loaded('phar')) { $this-&gt;pharExtensions = array( 'phar', 'phar.tar', 'tar', ); if (extension_loaded('zlib')) { $this-&gt;pharExtensions[] = 'phar.gz'; $this-&gt;pharExtensions[] = 'phar.tar.gz'; $this-&gt;pharExtensions[] = 'tar.gz'; $this-&gt;pharExtensions[] = 'phar.zip'; $this-&gt;pharExtensions[] = 'zip'; } if (extension_loaded('bzip2')) { $this-&gt;pharExtensions[] = 'phar.bz2'; $this-&gt;pharExtensions[] = 'phar.tar.bz2'; $this-&gt;pharExtensions[] = 'tar.bz2'; } } if (null !== $options) { $this-&gt;setOptions($options); } } public function setOptions($options) { $this-&gt;registerPaths($options); return $this; } public function getModuleClassMap() { return $this-&gt;moduleClassMap; } public function setModuleClassMap(array $classmap) { $this-&gt;moduleClassMap = $classmap; return $this; } public function autoload($class) { if (substr($class, -7) !== '\Module') { return false; } if (isset($this-&gt;moduleClassMap[$class])) { require_once $this-&gt;moduleClassMap[$class]; return $class; } $moduleName = substr($class, 0, -7); if (isset($this-&gt;explicitPaths[$moduleName])) { $classLoaded = $this-&gt;loadModuleFromDir($this-&gt;explicitPaths[$moduleName], $class); if ($classLoaded) { return $classLoaded; } $classLoaded = $this-&gt;loadModuleFromPhar($this-&gt;explicitPaths[$moduleName], $class); if ($classLoaded) { return $classLoaded; } } if (count($this-&gt;namespacedPaths) &gt;= 1 ) { foreach ( $this-&gt;namespacedPaths as $namespace=&gt;$path ) { if ( false === strpos($moduleName,$namespace) ) { continue; } $moduleNameBuffer = str_replace($namespace . "\\", "", $moduleName ); $path .= DIRECTORY_SEPARATOR . $moduleNameBuffer . DIRECTORY_SEPARATOR; $classLoaded = $this-&gt;loadModuleFromDir($path, $class); if ($classLoaded) { return $classLoaded; } $classLoaded = $this-&gt;loadModuleFromPhar($path, $class); if ($classLoaded) { return $classLoaded; } } } $moduleClassPath = str_replace('\\', DIRECTORY_SEPARATOR, $moduleName); $pharSuffixPattern = null; if ($this-&gt;pharExtensions) { $pharSuffixPattern = '(' . implode('|', array_map('preg_quote', $this-&gt;pharExtensions)) . ')'; } foreach ($this-&gt;paths as $path) { $path = $path . $moduleClassPath; $classLoaded = $this-&gt;loadModuleFromDir($path, $class); if ($classLoaded) { return $classLoaded; } if ($pharSuffixPattern) { foreach (new GlobIterator($path . '.*') as $entry) { if ($entry-&gt;isDir()) { continue; } if (!preg_match('#.+\.' . $pharSuffixPattern . '$#', $entry-&gt;getPathname())) { continue; } $classLoaded = $this-&gt;loadModuleFromPhar($entry-&gt;getPathname(), $class); if ($classLoaded) { return $classLoaded; } } } } return false; } protected function loadModuleFromDir($dirPath, $class) { $file = new SplFileInfo($dirPath . '/Module.php'); if ($file-&gt;isReadable() &amp;&amp; $file-&gt;isFile()) { require_once $file-&gt;getRealPath(); if (class_exists($class)) { $this-&gt;moduleClassMap[$class] = $file-&gt;getRealPath(); return $class; } } return false; } protected function loadModuleFromPhar($pharPath, $class) { $pharPath = static::normalizePath($pharPath, false); $file = new SplFileInfo($pharPath); if (!$file-&gt;isReadable() || !$file-&gt;isFile()) { return false; } $fileRealPath = $file-&gt;getRealPath(); if (strpos($fileRealPath, '.phar') !== false) { require_once $fileRealPath; if (class_exists($class)) { $this-&gt;moduleClassMap[$class] = $fileRealPath; return $class; } } $moduleClassFile = 'phar://' . $fileRealPath . '/Module.php'; $moduleFile = new SplFileInfo($moduleClassFile); if ($moduleFile-&gt;isReadable() &amp;&amp; $moduleFile-&gt;isFile()) { require_once $moduleClassFile; if (class_exists($class)) { $this-&gt;moduleClassMap[$class] = $moduleClassFile; return $class; } } $pharBaseName = $this-&gt;pharFileToModuleName($fileRealPath); $moduleClassFile = 'phar://' . $fileRealPath . '/' . $pharBaseName . '/Module.php'; $moduleFile = new SplFileInfo($moduleClassFile); if ($moduleFile-&gt;isReadable() &amp;&amp; $moduleFile-&gt;isFile()) { require_once $moduleClassFile; if (class_exists($class)) { $this-&gt;moduleClassMap[$class] = $moduleClassFile; return $class; } } return false; } public function register() { spl_autoload_register(array($this, 'autoload')); } public function unregister() { spl_autoload_unregister(array($this, 'autoload')); } public function registerPaths($paths) { if (!is_array($paths) &amp;&amp; !$paths instanceof Traversable) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException( 'Parameter to \\Zend\\Loader\\ModuleAutoloader\'s ' . 'registerPaths method must be an array or ' . 'implement the Traversable interface' ); } foreach ($paths as $module =&gt; $path) { if (is_string($module)) { $this-&gt;registerPath($path, $module); } else { $this-&gt;registerPath($path); } } return $this; } public function registerPath($path, $moduleName = false) { if (!is_string($path)) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException(sprintf( 'Invalid path provided; must be a string, received %s', gettype($path) )); } if ($moduleName) { if (in_array( substr($moduleName, -2 ), array('\\*','\\%') ) ) { $this-&gt;namespacedPaths[ substr($moduleName, 0, -2 ) ] = static::normalizePath($path); } else { $this-&gt;explicitPaths[$moduleName] = static::normalizePath($path); } } else { $this-&gt;paths[] = static::normalizePath($path); } return $this; } public function getPaths() { return $this-&gt;paths; } protected function pharFileToModuleName($pharPath) { do { $pathinfo = pathinfo($pharPath); $pharPath = $pathinfo['filename']; } while (isset($pathinfo['extension'])); return $pathinfo['filename']; } public static function normalizePath($path, $trailingSlash = true) { $path = rtrim($path, '/'); $path = rtrim($path, '\\'); if ($trailingSlash) { $path .= DIRECTORY_SEPARATOR; } return $path; } } &lt;?php
 namespace Zend\Loader; use Traversable; interface PluginClassLocator extends ShortNameLocator, \IteratorAggregate { public function registerPlugin($shortName, $className); public function unregisterPlugin($shortName); public function getRegisteredPlugins(); } &lt;?php
 namespace Zend\Loader; use ArrayIterator; use IteratorAggregate; use Traversable; class PluginClassLoader implements PluginClassLocator { protected $plugins = array(); protected static $staticMap = array(); public function __construct($map = null) { if (!empty(static::$staticMap)) { $this-&gt;registerPlugins(static::$staticMap); } if ($map !== null) { $this-&gt;registerPlugins($map); } } public static function addStaticMap($map) { if (null === $map) { static::$staticMap = array(); return; } if (!is_array($map) &amp;&amp; !$map instanceof Traversable) { throw new Exception\InvalidArgumentException('Expects an array or Traversable object'); } foreach ($map as $key =&gt; $value) { static::$staticMap[$key] = $value; } } public function registerPlugin($shortName, $className) { $this-&gt;plugins[strtolower($shortName)] = $className; return $this; } public function registerPlugins($map) { if (is_string($map)) { if (!class_exists($map)) { throw new Exception\InvalidArgumentException('Map class provided is invalid'); } $map = new $map; } if (is_array($map)) { $map = new ArrayIterator($map); } if (!$map instanceof Traversable) { throw new Exception\InvalidArgumentException('Map provided is invalid; must be traversable'); } if ($map instanceof IteratorAggregate) { $map = $map-&gt;getIterator(); } foreach ($map as $name =&gt; $class) { if (is_int($name) || is_numeric($name)) { if (!is_object($class) &amp;&amp; class_exists($class)) { $class = new $class(); } if ($class instanceof Traversable) { $this-&gt;registerPlugins($class); continue; } } $this-&gt;registerPlugin($name, $class); } return $this; } public function unregisterPlugin($shortName) { $lookup = strtolower($shortName); if (array_key_exists($lookup, $this-&gt;plugins)) { unset($this-&gt;plugins[$lookup]); } return $this; } public function getRegisteredPlugins() { return $this-&gt;plugins; } public function isLoaded($name) { $lookup = strtolower($name); return isset($this-&gt;plugins[$lookup]); } public function getClassName($name) { return $this-&gt;load($name); } public function load($name) { if (!$this-&gt;isLoaded($name)) { return false; } return $this-&gt;plugins[strtolower($name)]; } public function getIterator() { return new ArrayIterator($this-&gt;plugins); } } &lt;?php
 namespace Zend\Loader; interface ShortNameLocator { public function isLoaded($name); public function getClassName($name); public function load($name); } &lt;?php
 namespace Zend\Loader; use ReflectionClass; use Traversable; require_once __DIR__ . '/SplAutoloader.php'; if (class_exists('Zend\Loader\AutoloaderFactory')) { return; } abstract class AutoloaderFactory { const STANDARD_AUTOLOADER = 'Zend\Loader\StandardAutoloader'; protected static $loaders = array(); protected static $standardAutoloader; public static function factory($options = null) { if (null === $options) { if (!isset(static::$loaders[static::STANDARD_AUTOLOADER])) { $autoloader = static::getStandardAutoloader(); $autoloader-&gt;register(); static::$loaders[static::STANDARD_AUTOLOADER] = $autoloader; } return; } if (!is_array($options) &amp;&amp; !($options instanceof Traversable)) { require_once __DIR__ . '/Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException( 'Options provided must be an array or Traversable' ); } foreach ($options as $class =&gt; $autoloaderOptions) { if (!isset(static::$loaders[$class])) { $autoloader = static::getStandardAutoloader(); if (!class_exists($class) &amp;&amp; !$autoloader-&gt;autoload($class)) { require_once 'Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException( sprintf('Autoloader class "%s" not loaded', $class) ); } if (!static::isSubclassOf($class, 'Zend\Loader\SplAutoloader')) { require_once 'Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException( sprintf('Autoloader class %s must implement Zend\\Loader\\SplAutoloader', $class) ); } if ($class === static::STANDARD_AUTOLOADER) { $autoloader-&gt;setOptions($autoloaderOptions); } else { $autoloader = new $class($autoloaderOptions); } $autoloader-&gt;register(); static::$loaders[$class] = $autoloader; } else { static::$loaders[$class]-&gt;setOptions($autoloaderOptions); } } } public static function getRegisteredAutoloaders() { return static::$loaders; } public static function getRegisteredAutoloader($class) { if (!isset(static::$loaders[$class])) { require_once 'Exception/InvalidArgumentException.php'; throw new Exception\InvalidArgumentException(sprintf('Autoloader class "%s" not loaded', $class)); } return static::$loaders[$class]; } public static function unregisterAutoloaders() { foreach (static::getRegisteredAutoloaders() as $class =&gt; $autoloader) { spl_autoload_unregister(array($autoloader, 'autoload')); unset(static::$loaders[$class]); } } public static function unregisterAutoloader($autoloaderClass) { if (!isset(static::$loaders[$autoloaderClass])) { return false; } $autoloader = static::$loaders[$autoloaderClass]; spl_autoload_unregister(array($autoloader, 'autoload')); unset(static::$loaders[$autoloaderClass]); return true; } protected static function getStandardAutoloader() { if (null !== static::$standardAutoloader) { return static::$standardAutoloader; } if (!class_exists(static::STANDARD_AUTOLOADER)) { $stdAutoloader = substr(strrchr(static::STANDARD_AUTOLOADER, '\\'), 1); require_once __DIR__ . "/$stdAutoloader.php"; } $loader = new StandardAutoloader(); static::$standardAutoloader = $loader; return static::$standardAutoloader; } protected static function isSubclassOf($className, $type) { if (is_subclass_of($className, $type)) { return true; } if (version_compare(PHP_VERSION, '5.3.7', '&gt;=')) { return false; } if (!interface_exists($type)) { return false; } $r = new ReflectionClass($className); return $r-&gt;implementsInterface($type); } } &lt;?php
 namespace Zend\View\Exception; class InvalidHelperException extends \Exception implements ExceptionInterface { } &lt;?php
 namespace Zend\View\Exception; class DomainException extends \DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\View\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\View\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\View\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\View\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface { } &lt;?php
 namespace Zend\View\Helper; use Zend\Paginator; use Zend\View; use Zend\View\Exception; class PaginationControl extends AbstractHelper { protected static $defaultViewPartial = null; protected static $defaultScrollingStyle = 'sliding'; public static function setDefaultViewPartial($partial) { static::$defaultViewPartial = $partial; } public static function getDefaultViewPartial() { return static::$defaultViewPartial; } public static function getDefaultScrollingStyle() { return static::$defaultScrollingStyle; } public static function setDefaultScrollingStyle($style) { static::$defaultScrollingStyle = $style; } public function __invoke(Paginator\Paginator $paginator = null, $scrollingStyle = null, $partial = null, $params = null) { if ($paginator === null) { if (isset($this-&gt;view-&gt;paginator) and $this-&gt;view-&gt;paginator !== null and $this-&gt;view-&gt;paginator instanceof Paginator\Paginator) { $paginator = $this-&gt;view-&gt;paginator; } else { throw new Exception\RuntimeException('No paginator instance provided or incorrect type'); } } if ($partial === null) { if (static::$defaultViewPartial === null) { throw new Exception\RuntimeException('No view partial provided and no default set'); } $partial = static::$defaultViewPartial; } if ($scrollingStyle === null) { $scrollingStyle = static::$defaultScrollingStyle; } $pages = get_object_vars($paginator-&gt;getPages($scrollingStyle)); if ($params !== null) { $pages = array_merge($pages, (array) $params); } if (is_array($partial)) { if (count($partial) != 2) { throw new Exception\InvalidArgumentException( 'A view partial supplied as an array must contain two values: the filename and its module' ); } if ($partial[1] !== null) { $partialHelper = $this-&gt;view-&gt;plugin('partial'); return $partialHelper($partial[0], $pages); } $partial = $partial[0]; } $partialHelper = $this-&gt;view-&gt;plugin('partial'); return $partialHelper($partial, $pages); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Exception; class BasePath extends AbstractHelper { protected $basePath; public function __invoke($file = null) { if (null === $this-&gt;basePath) { throw new Exception\RuntimeException('No base path provided'); } if (null !== $file) { $file = '/' . ltrim($file, '/'); } return $this-&gt;basePath . $file; } public function setBasePath($basePath) { $this-&gt;basePath = rtrim($basePath, '/'); return $this; } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Exception; use Zend\View\Model\ModelInterface; class Partial extends AbstractHelper { protected $objectKey; public function __invoke($name = null, $values = null) { if (0 == func_num_args()) { return $this; } if ($name instanceof ModelInterface) { return $this-&gt;getView()-&gt;render($name); } if (is_scalar($values)) { $values = array(); } elseif ($values instanceof ModelInterface) { $values = $values-&gt;getVariables(); } elseif (is_object($values)) { if (null !== ($objectKey = $this-&gt;getObjectKey())) { $values = array($objectKey =&gt; $values); } elseif (method_exists($values, 'toArray')) { $values = $values-&gt;toArray(); } else { $values = get_object_vars($values); } } return $this-&gt;getView()-&gt;render($name, $values); } public function setObjectKey($key) { if (null === $key) { $this-&gt;objectKey = null; return $this; } $this-&gt;objectKey = (string) $key; return $this; } public function getObjectKey() { return $this-&gt;objectKey; } } &lt;?php
 namespace Zend\View\Helper; use Zend\I18n\Translator\Translator; use Zend\I18n\Translator\TranslatorAwareInterface; use Zend\View\Exception; class HeadTitle extends Placeholder\Container\AbstractStandalone implements TranslatorAwareInterface { protected $regKey = 'Zend_View_Helper_HeadTitle'; protected $defaultAttachOrder = null; protected $translator; protected $translatorTextDomain = 'default'; protected $translatorEnabled = true; public function __invoke($title = null, $setType = null) { if (null === $setType) { $setType = (null === $this-&gt;getDefaultAttachOrder()) ? Placeholder\Container\AbstractContainer::APPEND : $this-&gt;getDefaultAttachOrder(); } $title = (string) $title; if ($title !== '') { if ($setType == Placeholder\Container\AbstractContainer::SET) { $this-&gt;set($title); } elseif ($setType == Placeholder\Container\AbstractContainer::PREPEND) { $this-&gt;prepend($title); } else { $this-&gt;append($title); } } return $this; } public function setDefaultAttachOrder($setType) { if (!in_array($setType, array( Placeholder\Container\AbstractContainer::APPEND, Placeholder\Container\AbstractContainer::SET, Placeholder\Container\AbstractContainer::PREPEND ))) { throw new Exception\DomainException( "You must use a valid attach order: 'PREPEND', 'APPEND' or 'SET'" ); } $this-&gt;defaultAttachOrder = $setType; return $this; } public function getDefaultAttachOrder() { return $this-&gt;defaultAttachOrder; } public function toString($indent = null) { $indent = (null !== $indent) ? $this-&gt;getWhitespace($indent) : $this-&gt;getIndent(); $items = array(); if (null !== ($translator = $this-&gt;getTranslator())) { foreach ($this as $item) { $items[] = $translator-&gt;translate( $item, $this-&gt;getTranslatorTextDomain() ); } } else { foreach ($this as $item) { $items[] = $item; } } $separator = $this-&gt;getSeparator(); $output = ''; $prefix = $this-&gt;getPrefix(); if ($prefix) { $output .= $prefix; } $output .= implode($separator, $items); $postfix = $this-&gt;getPostfix(); if ($postfix) { $output .= $postfix; } $output = ($this-&gt;autoEscape) ? $this-&gt;escape($output) : $output; return $indent . '&lt;title&gt;' . $output . '&lt;/title&gt;'; } public function setTranslator(Translator $translator = null, $textDomain = null) { $this-&gt;translator = $translator; if (null !== $textDomain) { $this-&gt;setTranslatorTextDomain($textDomain); } return $this; } public function getTranslator() { if (! $this-&gt;isTranslatorEnabled()) { return null; } return $this-&gt;translator; } public function hasTranslator() { return (bool) $this-&gt;getTranslator(); } public function setTranslatorEnabled($enabled = true) { $this-&gt;translatorEnabled = (bool) $enabled; return $this; } public function isTranslatorEnabled() { return $this-&gt;translatorEnabled; } public function setTranslatorTextDomain($textDomain = 'default') { $this-&gt;translatorTextDomain = $textDomain; return $this; } public function getTranslatorTextDomain() { return $this-&gt;translatorTextDomain; } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Exception; use Zend\View\Model\ModelInterface as Model; class Layout extends AbstractHelper { protected $viewModelHelper; public function getLayout() { $model = $this-&gt;getRoot(); return $model-&gt;getTemplate(); } public function setTemplate($template) { $model = $this-&gt;getRoot(); $model-&gt;setTemplate((string) $template); return $this; } public function __invoke($template = null) { if (null === $template) { return $this-&gt;getRoot(); } return $this-&gt;setTemplate($template); } protected function getRoot() { $helper = $this-&gt;getViewModelHelper(); if (!$helper-&gt;hasRoot()) { throw new Exception\RuntimeException(sprintf( '%s: no view model currently registered as root in renderer', __METHOD__ )); } return $helper-&gt;getRoot(); } protected function getViewModelHelper() { if ($this-&gt;viewModelHelper) { return $this-&gt;viewModelHelper; } $view = $this-&gt;getView(); $this-&gt;viewModelHelper = $view-&gt;plugin('view_model'); return $this-&gt;viewModelHelper; } } &lt;?php
 namespace Zend\View\Helper; use stdClass; use Zend\View; use Zend\View\Exception; class HeadScript extends Placeholder\Container\AbstractStandalone { const FILE = 'FILE'; const SCRIPT = 'SCRIPT'; protected $regKey = 'Zend_View_Helper_HeadScript'; protected $arbitraryAttributes = false; protected $captureLock; protected $captureScriptType = null; protected $captureScriptAttrs = null; protected $captureType; protected $optionalAttributes = array( 'charset', 'defer', 'language', 'src' ); protected $requiredAttributes = array('type'); public $useCdata = false; public function __construct() { parent::__construct(); $this-&gt;setSeparator(PHP_EOL); } public function __invoke($mode = HeadScript::FILE, $spec = null, $placement = 'APPEND', array $attrs = array(), $type = 'text/javascript') { if ((null !== $spec) &amp;&amp; is_string($spec)) { $action = ucfirst(strtolower($mode)); $placement = strtolower($placement); switch ($placement) { case 'set': case 'prepend': case 'append': $action = $placement . $action; break; default: $action = 'append' . $action; break; } $this-&gt;$action($spec, $type, $attrs); } return $this; } public function captureStart($captureType = Placeholder\Container\AbstractContainer::APPEND, $type = 'text/javascript', $attrs = array()) { if ($this-&gt;captureLock) { throw new Exception\RuntimeException('Cannot nest headScript captures'); } $this-&gt;captureLock = true; $this-&gt;captureType = $captureType; $this-&gt;captureScriptType = $type; $this-&gt;captureScriptAttrs = $attrs; ob_start(); } public function captureEnd() { $content = ob_get_clean(); $type = $this-&gt;captureScriptType; $attrs = $this-&gt;captureScriptAttrs; $this-&gt;captureScriptType = null; $this-&gt;captureScriptAttrs = null; $this-&gt;captureLock = false; switch ($this-&gt;captureType) { case Placeholder\Container\AbstractContainer::SET: case Placeholder\Container\AbstractContainer::PREPEND: case Placeholder\Container\AbstractContainer::APPEND: $action = strtolower($this-&gt;captureType) . 'Script'; break; default: $action = 'appendScript'; break; } $this-&gt;$action($content, $type, $attrs); } public function __call($method, $args) { if (preg_match('/^(?P&lt;action&gt;set|(ap|pre)pend|offsetSet)(?P&lt;mode&gt;File|Script)$/', $method, $matches)) { if (1 &gt; count($args)) { throw new Exception\BadMethodCallException(sprintf( 'Method "%s" requires at least one argument', $method )); } $action = $matches['action']; $mode = strtolower($matches['mode']); $type = 'text/javascript'; $attrs = array(); if ('offsetSet' == $action) { $index = array_shift($args); if (1 &gt; count($args)) { throw new Exception\BadMethodCallException(sprintf( 'Method "%s" requires at least two arguments, an index and source', $method )); } } $content = $args[0]; if (isset($args[1])) { $type = (string) $args[1]; } if (isset($args[2])) { $attrs = (array) $args[2]; } switch ($mode) { case 'script': $item = $this-&gt;createData($type, $attrs, $content); if ('offsetSet' == $action) { $this-&gt;offsetSet($index, $item); } else { $this-&gt;$action($item); } break; case 'file': default: if (!$this-&gt;isDuplicate($content)) { $attrs['src'] = $content; $item = $this-&gt;createData($type, $attrs); if ('offsetSet' == $action) { $this-&gt;offsetSet($index, $item); } else { $this-&gt;$action($item); } } break; } return $this; } return parent::__call($method, $args); } protected function isDuplicate($file) { foreach ($this-&gt;getContainer() as $item) { if (($item-&gt;source === null) &amp;&amp; array_key_exists('src', $item-&gt;attributes) &amp;&amp; ($file == $item-&gt;attributes['src'])) { return true; } } return false; } protected function isValid($value) { if ((!$value instanceof stdClass) || !isset($value-&gt;type) || (!isset($value-&gt;source) &amp;&amp; !isset($value-&gt;attributes))) { return false; } return true; } public function append($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid argument passed to append(); please use one of the helper methods, appendScript() or appendFile()' ); } return $this-&gt;getContainer()-&gt;append($value); } public function prepend($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid argument passed to prepend(); please use one of the helper methods, prependScript() or prependFile()' ); } return $this-&gt;getContainer()-&gt;prepend($value); } public function set($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid argument passed to set(); please use one of the helper methods, setScript() or setFile()' ); } return $this-&gt;getContainer()-&gt;set($value); } public function offsetSet($index, $value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid argument passed to offsetSet(); please use one of the helper methods, offsetSetScript() or offsetSetFile()' ); } return $this-&gt;getContainer()-&gt;offsetSet($index, $value); } public function setAllowArbitraryAttributes($flag) { $this-&gt;arbitraryAttributes = (bool) $flag; return $this; } public function arbitraryAttributesAllowed() { return $this-&gt;arbitraryAttributes; } public function itemToString($item, $indent, $escapeStart, $escapeEnd) { $attrString = ''; if (!empty($item-&gt;attributes)) { foreach ($item-&gt;attributes as $key =&gt; $value) { if ((!$this-&gt;arbitraryAttributesAllowed() &amp;&amp; !in_array($key, $this-&gt;optionalAttributes)) || in_array($key, array('conditional', 'noescape'))) { continue; } if ('defer' == $key) { $value = 'defer'; } $attrString .= sprintf(' %s="%s"', $key, ($this-&gt;autoEscape) ? $this-&gt;escape($value) : $value); } } $addScriptEscape = !(isset($item-&gt;attributes['noescape']) &amp;&amp; filter_var($item-&gt;attributes['noescape'], FILTER_VALIDATE_BOOLEAN)); $type = ($this-&gt;autoEscape) ? $this-&gt;escape($item-&gt;type) : $item-&gt;type; $html = '&lt;script type="' . $type . '"' . $attrString . '&gt;'; if (!empty($item-&gt;source)) { $html .= PHP_EOL; if ($addScriptEscape) { $html .= $indent . '    ' . $escapeStart . PHP_EOL; } $html .= $indent . '    ' . $item-&gt;source; if ($addScriptEscape) { $html .= PHP_EOL . $indent . '    ' . $escapeEnd; } $html .= PHP_EOL . $indent; } $html .= '&lt;/script&gt;'; if (isset($item-&gt;attributes['conditional']) &amp;&amp; !empty($item-&gt;attributes['conditional']) &amp;&amp; is_string($item-&gt;attributes['conditional'])) { $html = $indent . '&lt;!--[if ' . $item-&gt;attributes['conditional'] . ']&gt;' . $html . '&lt;![endif]--&gt;'; } else { $html = $indent . $html; } return $html; } public function toString($indent = null) { $indent = (null !== $indent) ? $this-&gt;getWhitespace($indent) : $this-&gt;getIndent(); if ($this-&gt;view) { $useCdata = $this-&gt;view-&gt;plugin('doctype')-&gt;isXhtml() ? true : false; } else { $useCdata = $this-&gt;useCdata ? true : false; } $escapeStart = ($useCdata) ? '//&lt;![CDATA[' : '//&lt;!--'; $escapeEnd = ($useCdata) ? '//]]&gt;' : '//--&gt;'; $items = array(); $this-&gt;getContainer()-&gt;ksort(); foreach ($this as $item) { if (!$this-&gt;isValid($item)) { continue; } $items[] = $this-&gt;itemToString($item, $indent, $escapeStart, $escapeEnd); } $return = implode($this-&gt;getSeparator(), $items); return $return; } public function createData($type, array $attributes, $content = null) { $data = new stdClass(); $data-&gt;type = $type; $data-&gt;attributes = $attributes; $data-&gt;source = $content; return $data; } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Helper\Escaper; class EscapeHtml extends Escaper\AbstractHelper { protected function escape($value) { return $this-&gt;getEscaper()-&gt;escapeHtml($value); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Model\ModelInterface as Model; class ViewModel extends AbstractHelper { protected $current; protected $root; public function getRoot() { return $this-&gt;root; } public function hasRoot() { return ($this-&gt;root instanceof Model); } public function getCurrent() { return $this-&gt;current; } public function hasCurrent() { return ($this-&gt;current instanceof Model); } public function setRoot(Model $model) { $this-&gt;root = $model; return $this; } public function setCurrent(Model $model) { $this-&gt;current = $model; return $this; } } &lt;?php
 namespace Zend\View\Helper\Service; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View\Helper\FlashMessenger; class FlashMessengerFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $serviceLocator = $serviceLocator-&gt;getServiceLocator(); $helper = new FlashMessenger(); $controllerPluginManager = $serviceLocator-&gt;get('ControllerPluginManager'); $flashMessenger = $controllerPluginManager-&gt;get('flashmessenger'); $helper-&gt;setPluginFlashMessenger($flashMessenger); $config = $serviceLocator-&gt;get('Config'); if (isset($config['view_helper_config']['flashmessenger'])) { $configHelper = $config['view_helper_config']['flashmessenger']; if (isset($configHelper['message_open_format'])) { $helper-&gt;setMessageOpenFormat($configHelper['message_open_format']); } if (isset($configHelper['message_separator_string'])) { $helper-&gt;setMessageSeparatorString($configHelper['message_separator_string']); } if (isset($configHelper['message_close_string'])) { $helper-&gt;setMessageCloseString($configHelper['message_close_string']); } } return $helper; } } &lt;?php
 namespace Zend\View\Helper; class HtmlList extends AbstractHtmlElement { public function __invoke(array $items, $ordered = false, $attribs = false, $escape = true) { $list = ''; foreach ($items as $item) { if (!is_array($item)) { if ($escape) { $escaper = $this-&gt;view-&gt;plugin('escapeHtml'); $item = $escaper($item); } $list .= '&lt;li&gt;' . $item . '&lt;/li&gt;' . self::EOL; } else { $itemLength = 5 + strlen(self::EOL); if ($itemLength &lt; strlen($list)) { $list = substr($list, 0, strlen($list) - $itemLength) . $this($item, $ordered, $attribs, $escape) . '&lt;/li&gt;' . self::EOL; } else { $list .= '&lt;li&gt;' . $this($item, $ordered, $attribs, $escape) . '&lt;/li&gt;' . self::EOL; } } } if ($attribs) { $attribs = $this-&gt;htmlAttribs($attribs); } else { $attribs = ''; } $tag = ($ordered) ? 'ol' : 'ul'; return '&lt;' . $tag . $attribs . '&gt;' . self::EOL . $list . '&lt;/' . $tag . '&gt;' . self::EOL; } } &lt;?php
 namespace Zend\View\Helper; use ArrayObject; use Zend\View\Exception; class Doctype extends AbstractHelper { const XHTML11 = 'XHTML11'; const XHTML1_STRICT = 'XHTML1_STRICT'; const XHTML1_TRANSITIONAL = 'XHTML1_TRANSITIONAL'; const XHTML1_FRAMESET = 'XHTML1_FRAMESET'; const XHTML1_RDFA = 'XHTML1_RDFA'; const XHTML1_RDFA11 = 'XHTML1_RDFA11'; const XHTML_BASIC1 = 'XHTML_BASIC1'; const XHTML5 = 'XHTML5'; const HTML4_STRICT = 'HTML4_STRICT'; const HTML4_LOOSE = 'HTML4_LOOSE'; const HTML4_FRAMESET = 'HTML4_FRAMESET'; const HTML5 = 'HTML5'; const CUSTOM_XHTML = 'CUSTOM_XHTML'; const CUSTOM = 'CUSTOM'; protected static $registeredDoctypes; protected $defaultDoctype = self::HTML4_LOOSE; protected $registry; protected static function registerDefaultDoctypes() { static::$registeredDoctypes = new ArrayObject(array( 'doctypes' =&gt; array( self::XHTML11 =&gt; '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;', self::XHTML1_STRICT =&gt; '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;', self::XHTML1_TRANSITIONAL =&gt; '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;', self::XHTML1_FRAMESET =&gt; '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;', self::XHTML1_RDFA =&gt; '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd"&gt;', self::XHTML1_RDFA11 =&gt; '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.1//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd"&gt;', self::XHTML_BASIC1 =&gt; '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd"&gt;', self::XHTML5 =&gt; '&lt;!DOCTYPE html&gt;', self::HTML4_STRICT =&gt; '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;', self::HTML4_LOOSE =&gt; '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;', self::HTML4_FRAMESET =&gt; '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"&gt;', self::HTML5 =&gt; '&lt;!DOCTYPE html&gt;', ), )); } public static function unsetDoctypeRegistry() { static::$registeredDoctypes = null; } public function __construct() { if (null === static::$registeredDoctypes) { static::registerDefaultDoctypes(); $this-&gt;setDoctype($this-&gt;defaultDoctype); } $this-&gt;registry = static::$registeredDoctypes; } public function __invoke($doctype = null) { if (null !== $doctype) { switch ($doctype) { case self::XHTML11: case self::XHTML1_STRICT: case self::XHTML1_TRANSITIONAL: case self::XHTML1_FRAMESET: case self::XHTML_BASIC1: case self::XHTML1_RDFA: case self::XHTML1_RDFA11: case self::XHTML5: case self::HTML4_STRICT: case self::HTML4_LOOSE: case self::HTML4_FRAMESET: case self::HTML5: $this-&gt;setDoctype($doctype); break; default: if (substr($doctype, 0, 9) != '&lt;!DOCTYPE') { throw new Exception\DomainException('The specified doctype is malformed'); } if (stristr($doctype, 'xhtml')) { $type = self::CUSTOM_XHTML; } else { $type = self::CUSTOM; } $this-&gt;setDoctype($type); $this-&gt;registry['doctypes'][$type] = $doctype; break; } } return $this; } public function setDoctype($doctype) { $this-&gt;registry['doctype'] = $doctype; return $this; } public function getDoctype() { if (!isset($this-&gt;registry['doctype'])) { $this-&gt;setDoctype($this-&gt;defaultDoctype); } return $this-&gt;registry['doctype']; } public function getDoctypes() { return $this-&gt;registry['doctypes']; } public function isXhtml() { return (stristr($this-&gt;getDoctype(), 'xhtml') ? true : false); } public function isHtml5() { return (stristr($this-&gt;__invoke(), '&lt;!DOCTYPE html&gt;') ? true : false); } public function isRdfa() { return ($this-&gt;isHtml5() || stristr($this-&gt;getDoctype(), 'rdfa') ? true : false); } public function __toString() { $doctypes = $this-&gt;getDoctypes(); return $doctypes[$this-&gt;getDoctype()]; } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Helper\Escaper; class EscapeUrl extends Escaper\AbstractHelper { protected function escape($value) { return $this-&gt;getEscaper()-&gt;escapeUrl($value); } } &lt;?php
 namespace Zend\View\Helper; use Zend\Mvc\ModuleRouteListener; use Zend\Mvc\Router\RouteMatch; use Zend\Mvc\Router\RouteStackInterface; use Zend\View\Exception; class Url extends AbstractHelper { protected $router; protected $routeMatch; public function setRouter(RouteStackInterface $router) { $this-&gt;router = $router; return $this; } public function setRouteMatch(RouteMatch $routeMatch) { $this-&gt;routeMatch = $routeMatch; return $this; } public function __invoke($name = null, array $params = array(), $options = array(), $reuseMatchedParams = false) { if (null === $this-&gt;router) { throw new Exception\RuntimeException('No RouteStackInterface instance provided'); } if (3 == func_num_args() &amp;&amp; is_bool($options)) { $reuseMatchedParams = $options; $options = array(); } if ($name === null) { if ($this-&gt;routeMatch === null) { throw new Exception\RuntimeException('No RouteMatch instance provided'); } $name = $this-&gt;routeMatch-&gt;getMatchedRouteName(); if ($name === null) { throw new Exception\RuntimeException('RouteMatch does not contain a matched route name'); } } if ($reuseMatchedParams &amp;&amp; $this-&gt;routeMatch !== null) { $routeMatchParams = $this-&gt;routeMatch-&gt;getParams(); if (isset($routeMatchParams[ModuleRouteListener::ORIGINAL_CONTROLLER])) { $routeMatchParams['controller'] = $routeMatchParams[ModuleRouteListener::ORIGINAL_CONTROLLER]; unset($routeMatchParams[ModuleRouteListener::ORIGINAL_CONTROLLER]); } if (isset($routeMatchParams[ModuleRouteListener::MODULE_NAMESPACE])) { unset($routeMatchParams[ModuleRouteListener::MODULE_NAMESPACE]); } $params = array_merge($routeMatchParams, $params); } $options['name'] = $name; return $this-&gt;router-&gt;assemble($params, $options); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Helper\Escaper; class EscapeCss extends Escaper\AbstractHelper { protected function escape($value) { return $this-&gt;getEscaper()-&gt;escapeCss($value); } } &lt;?php
 namespace Zend\View\Helper; class ServerUrl extends AbstractHelper { protected $port; protected $scheme; protected $host; protected $useProxy = false; public function __invoke($requestUri = null) { if ($requestUri === true) { $path = $_SERVER['REQUEST_URI']; } elseif (is_string($requestUri)) { $path = $requestUri; } else { $path = ''; } return $this-&gt;getScheme() . '://' . $this-&gt;getHost() . $path; } public function getHost() { if (null === $this-&gt;host) { $this-&gt;detectHost(); } return $this-&gt;host; } public function setHost($host) { $port = $this-&gt;getPort(); $scheme = $this-&gt;getScheme(); if (($scheme == 'http' &amp;&amp; (null === $port || $port == 80)) || ($scheme == 'https' &amp;&amp; (null === $port || $port == 443)) ) { $this-&gt;host = $host; return $this; } $this-&gt;host = $host . ':' . $port; return $this; } public function getScheme() { if (null === $this-&gt;scheme) { $this-&gt;detectScheme(); } return $this-&gt;scheme; } public function setScheme($scheme) { $this-&gt;scheme = $scheme; return $this; } public function getPort() { if (null === $this-&gt;port) { $this-&gt;detectPort(); } return $this-&gt;port; } public function setPort($port) { $this-&gt;port = (int) $port; return $this; } public function setUseProxy($useProxy = false) { $this-&gt;useProxy = (bool) $useProxy; return $this; } protected function detectHost() { if ($this-&gt;setHostFromProxy()) { return; } if (isset($_SERVER['HTTP_HOST']) &amp;&amp; !empty($_SERVER['HTTP_HOST'])) { if (isset($_SERVER['SERVER_PORT'])) { $portStr = ':' . $_SERVER['SERVER_PORT']; if (substr($_SERVER['HTTP_HOST'], 0-strlen($portStr), strlen($portStr)) == $portStr) { $this-&gt;setHost(substr($_SERVER['HTTP_HOST'], 0, 0-strlen($portStr))); return; } } $this-&gt;setHost($_SERVER['HTTP_HOST']); return; } if (!isset($_SERVER['SERVER_NAME']) || !isset($_SERVER['SERVER_PORT'])) { return; } $name = $_SERVER['SERVER_NAME']; $this-&gt;setHost($name); } protected function setHostFromProxy() { if (!$this-&gt;useProxy) { return false; } if (!isset($_SERVER['HTTP_X_FORWARDED_HOST']) || empty($_SERVER['HTTP_X_FORWARDED_HOST'])) { return false; } $host = $_SERVER['HTTP_X_FORWARDED_HOST']; if (strpos($host, ',') !== false) { $hosts = explode(',', $host); $host = trim(array_pop($hosts)); } if (empty($host)) { return false; } $this-&gt;setHost($host); return true; } protected function detectScheme() { if ($this-&gt;setSchemeFromProxy()) { return; } switch (true) { case (isset($_SERVER['HTTPS']) &amp;&amp; ($_SERVER['HTTPS'] == 'on' || $_SERVER['HTTPS'] === true)): case (isset($_SERVER['HTTP_SCHEME']) &amp;&amp; ($_SERVER['HTTP_SCHEME'] == 'https')): case (443 === $this-&gt;getPort()): $scheme = 'https'; break; default: $scheme = 'http'; break; } $this-&gt;setScheme($scheme); } protected function detectPort() { if ($this-&gt;setPortFromProxy()) { return; } if (isset($_SERVER['SERVER_PORT']) &amp;&amp; $_SERVER['SERVER_PORT']) { $this-&gt;setPort($_SERVER['SERVER_PORT']); return; } } protected function setSchemeFromProxy() { if (!$this-&gt;useProxy) { return false; } if (isset($_SERVER['SSL_HTTPS'])) { $sslHttps = strtolower($_SERVER['SSL_HTTPS']); if (in_array($sslHttps, array('on', 1))) { $this-&gt;setScheme('https'); return true; } } if (!isset($_SERVER['HTTP_X_FORWARDED_PROTO']) || empty($_SERVER['HTTP_X_FORWARDED_PROTO'])) { return false; } $scheme = trim(strtolower($_SERVER['HTTP_X_FORWARDED_PROTO'])); if (empty($scheme)) { return false; } $this-&gt;setScheme($scheme); return true; } protected function setPortFromProxy() { if (!$this-&gt;useProxy) { return false; } if (!isset($_SERVER['HTTP_X_FORWARDED_PORT']) || empty($_SERVER['HTTP_X_FORWARDED_PORT'])) { return false; } $port = $_SERVER['HTTP_X_FORWARDED_PORT']; $this-&gt;setPort($port); return true; } } &lt;?php
 namespace Zend\View\Helper; use Iterator; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\View\Exception; class PartialLoop extends Partial { protected $partialCounter = 0; public function __invoke($name = null, $values = null) { if (0 == func_num_args()) { return $this; } if (!is_array($values) &amp;&amp; (!$values instanceof Traversable) &amp;&amp; (is_object($values) &amp;&amp; !method_exists($values, 'toArray')) ) { throw new Exception\InvalidArgumentException('PartialLoop helper requires iterable data'); } if (is_object($values) &amp;&amp; (!$values instanceof Traversable) &amp;&amp; method_exists($values, 'toArray') ) { $values = $values-&gt;toArray(); } if ($values instanceof Iterator) { $values = ArrayUtils::iteratorToArray($values); } $this-&gt;partialCounter = 0; $content = ''; foreach ($values as $item) { $this-&gt;partialCounter++; $content .= parent::__invoke($name, $item); } return $content; } public function getPartialCounter() { return $this-&gt;partialCounter; } } &lt;?php
 namespace Zend\View\Helper; abstract class AbstractHtmlElement extends AbstractHelper { const EOL = PHP_EOL; protected $closingBracket = null; public function getClosingBracket() { if (!$this-&gt;closingBracket) { if ($this-&gt;isXhtml()) { $this-&gt;closingBracket = ' /&gt;'; } else { $this-&gt;closingBracket = '&gt;'; } } return $this-&gt;closingBracket; } protected function isXhtml() { $doctype = $this-&gt;view-&gt;plugin('doctype'); return $doctype-&gt;isXhtml(); } protected function htmlAttribs($attribs) { $xhtml = ''; $escaper = $this-&gt;view-&gt;plugin('escapehtml'); foreach ((array) $attribs as $key =&gt; $val) { $key = $escaper($key); if (('on' == substr($key, 0, 2)) || ('constraints' == $key)) { if (!is_scalar($val)) { $val = \Zend\Json\Json::encode($val); } $val = str_replace('\'', '&amp;#39;', $val); } else { if (is_array($val)) { $val = implode(' ', $val); } $val = $escaper($val); } if ('id' == $key) { $val = $this-&gt;normalizeId($val); } if (strpos($val, '"') !== false) { $xhtml .= " $key='$val'"; } else { $xhtml .= " $key=\"$val\""; } } return $xhtml; } protected function normalizeId($value) { if (strstr($value, '[')) { if ('[]' == substr($value, -2)) { $value = substr($value, 0, strlen($value) - 2); } $value = trim($value, ']'); $value = str_replace('][', '-', $value); $value = str_replace('[', '-', $value); } return $value; } } &lt;?php
 namespace Zend\View\Helper; use Zend\Http\Response; use Zend\Json\Json as JsonFormatter; class Json extends AbstractHelper { protected $response; public function setResponse(Response $response) { $this-&gt;response = $response; return $this; } public function __invoke($data, array $jsonOptions = array()) { $data = JsonFormatter::encode($data, null, $jsonOptions); if ($this-&gt;response instanceof Response) { $headers = $this-&gt;response-&gt;getHeaders(); $headers-&gt;addHeaderLine('Content-Type', 'application/json'); } return $data; } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Model\ModelInterface; class RenderToPlaceholder extends AbstractHelper { public function __invoke($script, $placeholder) { $placeholderHelper = $this-&gt;view-&gt;plugin('placeholder'); $placeholderHelper($placeholder)-&gt;captureStart(); echo $this-&gt;view-&gt;render($script); $placeholderHelper($placeholder)-&gt;captureEnd(); } } &lt;?php
 namespace Zend\View\Helper; use stdClass; use Zend\View; use Zend\View\Exception; class HeadMeta extends Placeholder\Container\AbstractStandalone { protected $typeKeys = array('name', 'http-equiv', 'charset', 'property'); protected $requiredKeys = array('content'); protected $modifierKeys = array('lang', 'scheme'); protected $regKey = 'Zend_View_Helper_HeadMeta'; public function __construct() { parent::__construct(); $this-&gt;setSeparator(PHP_EOL); } public function __invoke($content = null, $keyValue = null, $keyType = 'name', $modifiers = array(), $placement = Placeholder\Container\AbstractContainer::APPEND) { if ((null !== $content) &amp;&amp; (null !== $keyValue)) { $item = $this-&gt;createData($keyType, $keyValue, $content, $modifiers); $action = strtolower($placement); switch ($action) { case 'append': case 'prepend': case 'set': $this-&gt;$action($item); break; default: $this-&gt;append($item); break; } } return $this; } protected function normalizeType($type) { switch ($type) { case 'Name': return 'name'; case 'HttpEquiv': return 'http-equiv'; case 'Property': return 'property'; default: throw new Exception\DomainException(sprintf( 'Invalid type "%s" passed to normalizeType', $type )); } } public function __call($method, $args) { if (preg_match('/^(?P&lt;action&gt;set|(pre|ap)pend|offsetSet)(?P&lt;type&gt;Name|HttpEquiv|Property)$/', $method, $matches)) { $action = $matches['action']; $type = $this-&gt;normalizeType($matches['type']); $argc = count($args); $index = null; if ('offsetSet' == $action) { if (0 &lt; $argc) { $index = array_shift($args); --$argc; } } if (2 &gt; $argc) { throw new Exception\BadMethodCallException( 'Too few arguments provided; requires key value, and content' ); } if (3 &gt; $argc) { $args[] = array(); } $item = $this-&gt;createData($type, $args[0], $args[1], $args[2]); if ('offsetSet' == $action) { return $this-&gt;offsetSet($index, $item); } $this-&gt;$action($item); return $this; } return parent::__call($method, $args); } public function setCharset($charset) { $item = new stdClass; $item-&gt;type = 'charset'; $item-&gt;charset = $charset; $item-&gt;content = null; $item-&gt;modifiers = array(); $this-&gt;set($item); return $this; } protected function isValid($item) { if ((!$item instanceof stdClass) || !isset($item-&gt;type) || !isset($item-&gt;modifiers)) { return false; } if (!isset($item-&gt;content) &amp;&amp; (! $this-&gt;view-&gt;plugin('doctype')-&gt;isHtml5() || (! $this-&gt;view-&gt;plugin('doctype')-&gt;isHtml5() &amp;&amp; $item-&gt;type !== 'charset'))) { return false; } if (!$this-&gt;view-&gt;plugin('doctype')-&gt;isRdfa() &amp;&amp; $item-&gt;type === 'property') { return false; } return true; } public function append($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid value passed to append; please use appendMeta()' ); } return $this-&gt;getContainer()-&gt;append($value); } public function offsetSet($index, $value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid value passed to offsetSet; please use offsetSetName() or offsetSetHttpEquiv()' ); } return $this-&gt;getContainer()-&gt;offsetSet($index, $value); } public function offsetUnset($index) { if (!in_array($index, $this-&gt;getContainer()-&gt;getKeys())) { throw new Exception\InvalidArgumentException('Invalid index passed to offsetUnset()'); } return $this-&gt;getContainer()-&gt;offsetUnset($index); } public function prepend($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid value passed to prepend; please use prependMeta()' ); } return $this-&gt;getContainer()-&gt;prepend($value); } public function set($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException('Invalid value passed to set; please use setMeta()'); } $container = $this-&gt;getContainer(); foreach ($container-&gt;getArrayCopy() as $index =&gt; $item) { if ($item-&gt;type == $value-&gt;type &amp;&amp; $item-&gt;{$item-&gt;type} == $value-&gt;{$value-&gt;type}) { $this-&gt;offsetUnset($index); } } return $this-&gt;append($value); } public function itemToString(stdClass $item) { if (!in_array($item-&gt;type, $this-&gt;typeKeys)) { throw new Exception\InvalidArgumentException(sprintf( 'Invalid type "%s" provided for meta', $item-&gt;type )); } $type = $item-&gt;type; $modifiersString = ''; foreach ($item-&gt;modifiers as $key =&gt; $value) { if ($this-&gt;view-&gt;plugin('doctype')-&gt;isHtml5() &amp;&amp; $key == 'scheme' ) { throw new Exception\InvalidArgumentException( 'Invalid modifier "scheme" provided; not supported by HTML5' ); } if (!in_array($key, $this-&gt;modifierKeys)) { continue; } $modifiersString .= $key . '="' . $this-&gt;escape($value) . '" '; } $modifiersString = rtrim($modifiersString); if ('' != $modifiersString) { $modifiersString = ' ' . $modifiersString; } if (method_exists($this-&gt;view, 'plugin')) { if ($this-&gt;view-&gt;plugin('doctype')-&gt;isHtml5() &amp;&amp; $type == 'charset' ) { $tpl = ($this-&gt;view-&gt;plugin('doctype')-&gt;isXhtml()) ? '&lt;meta %s="%s"/&gt;' : '&lt;meta %s="%s"&gt;'; } elseif ($this-&gt;view-&gt;plugin('doctype')-&gt;isXhtml()) { $tpl = '&lt;meta %s="%s" content="%s"%s /&gt;'; } else { $tpl = '&lt;meta %s="%s" content="%s"%s&gt;'; } } else { $tpl = '&lt;meta %s="%s" content="%s"%s /&gt;'; } $meta = sprintf( $tpl, $type, $this-&gt;escape($item-&gt;$type), $this-&gt;escape($item-&gt;content), $modifiersString ); if (isset($item-&gt;modifiers['conditional']) &amp;&amp; !empty($item-&gt;modifiers['conditional']) &amp;&amp; is_string($item-&gt;modifiers['conditional'])) { $meta = '&lt;!--[if ' . $this-&gt;escape($item-&gt;modifiers['conditional']) . ']&gt;' . $meta . '&lt;![endif]--&gt;'; } return $meta; } public function toString($indent = null) { $indent = (null !== $indent) ? $this-&gt;getWhitespace($indent) : $this-&gt;getIndent(); $items = array(); $this-&gt;getContainer()-&gt;ksort(); try { foreach ($this as $item) { $items[] = $this-&gt;itemToString($item); } } catch (Exception\InvalidArgumentException $e) { trigger_error($e-&gt;getMessage(), E_USER_WARNING); return ''; } return $indent . implode($this-&gt;escape($this-&gt;getSeparator()) . $indent, $items); } public function createData($type, $typeValue, $content, array $modifiers) { $data = new stdClass; $data-&gt;type = $type; $data-&gt;$type = $typeValue; $data-&gt;content = $content; $data-&gt;modifiers = $modifiers; return $data; } } &lt;?php
 namespace Zend\View\Helper; use Zend\Authentication\AuthenticationService; use Zend\View\Exception; class Identity extends AbstractHelper { protected $authenticationService; public function getAuthenticationService() { return $this-&gt;authenticationService; } public function setAuthenticationService(AuthenticationService $authenticationService) { $this-&gt;authenticationService = $authenticationService; } public function __invoke() { if (!$this-&gt;authenticationService instanceof AuthenticationService){ throw new Exception\RuntimeException('No AuthenticationService instance provided'); } if (!$this-&gt;authenticationService-&gt;hasIdentity()) { return null; } return $this-&gt;authenticationService-&gt;getIdentity(); } } &lt;?php
 namespace Zend\View\Helper; class HtmlPage extends AbstractHtmlElement { const TYPE = 'text/html'; const ATTRIB_CLASSID = 'clsid:25336920-03F9-11CF-8FD0-00AA00686F13'; protected $attribs = array('classid' =&gt; self::ATTRIB_CLASSID); public function __invoke($data, array $attribs = array(), array $params = array(), $content = null) { $attribs = array_merge($this-&gt;attribs, $attribs); $params = array_merge(array('data' =&gt; $data), $params); $htmlObject = $this-&gt;getView()-&gt;plugin('htmlObject'); return $htmlObject($data, self::TYPE, $attribs, $params, $content); } } &lt;?php
 namespace Zend\View\Helper; use Zend\Mvc\Controller\Plugin\FlashMessenger as PluginFlashMessenger; use Zend\ServiceManager\ServiceLocatorAwareInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View\Helper\AbstractHelper; use Zend\View\Helper\EscapeHtml; use Zend\I18n\View\Helper\AbstractTranslatorHelper; class FlashMessenger extends AbstractTranslatorHelper implements ServiceLocatorAwareInterface { protected $serviceLocator; protected $messageCloseString = '&lt;/li&gt;&lt;/ul&gt;'; protected $messageOpenFormat = '&lt;ul%s&gt;&lt;li&gt;'; protected $messageSeparatorString = '&lt;/li&gt;&lt;li&gt;'; protected $escapeHtmlHelper; protected $pluginFlashMessenger; protected $classMessages = array( PluginFlashMessenger::NAMESPACE_INFO =&gt; 'info', PluginFlashMessenger::NAMESPACE_ERROR =&gt; 'error', PluginFlashMessenger::NAMESPACE_SUCCESS =&gt; 'success', PluginFlashMessenger::NAMESPACE_DEFAULT =&gt; 'default', ); public function __invoke($namespace = null) { if (null === $namespace) { return $this; } $flashMessenger = $this-&gt;getPluginFlashMessenger(); return $flashMessenger-&gt;getMessagesFromNamespace($namespace); } public function __call($method, $argv) { $flashMessenger = $this-&gt;getPluginFlashMessenger(); return call_user_func_array(array($flashMessenger, $method), $argv); } public function render($namespace = PluginFlashMessenger::NAMESPACE_DEFAULT, array $classes = array()) { $flashMessenger = $this-&gt;getPluginFlashMessenger(); $messages = $flashMessenger-&gt;getMessagesFromNamespace($namespace); if (empty($classes)) { $classes = isset($this-&gt;classMessages[$namespace]) ? $this-&gt;classMessages[$namespace] : $this-&gt;classMessages[PluginFlashMessenger::NAMESPACE_DEFAULT]; $classes = array($classes); } $escapeHtml = $this-&gt;getEscapeHtmlHelper(); $messagesToPrint = array(); $translator = $this-&gt;getTranslator(); $translatorTextDomain = $this-&gt;getTranslatorTextDomain(); array_walk_recursive($messages, function($item) use (&amp;$messagesToPrint, $escapeHtml, $translator, $translatorTextDomain) { if ($translator !== null) { $item = $translator-&gt;translate( $item, $translatorTextDomain ); } $messagesToPrint[] = $escapeHtml($item); }); if (empty($messagesToPrint)) { return ''; } $markup = sprintf($this-&gt;getMessageOpenFormat(), ' class="' . implode(' ', $classes) . '"'); $markup .= implode($this-&gt;getMessageSeparatorString(), $messagesToPrint); $markup .= $this-&gt;getMessageCloseString(); return $markup; } public function setMessageCloseString($messageCloseString) { $this-&gt;messageCloseString = (string) $messageCloseString; return $this; } public function getMessageCloseString() { return $this-&gt;messageCloseString; } public function setMessageOpenFormat($messageOpenFormat) { $this-&gt;messageOpenFormat = (string) $messageOpenFormat; return $this; } public function getMessageOpenFormat() { return $this-&gt;messageOpenFormat; } public function setMessageSeparatorString($messageSeparatorString) { $this-&gt;messageSeparatorString = (string) $messageSeparatorString; return $this; } public function getMessageSeparatorString() { return $this-&gt;messageSeparatorString; } protected function getEscapeHtmlHelper() { if ($this-&gt;escapeHtmlHelper) { return $this-&gt;escapeHtmlHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;escapeHtmlHelper = $this-&gt;view-&gt;plugin('escapehtml'); } if (!$this-&gt;escapeHtmlHelper instanceof EscapeHtml) { $this-&gt;escapeHtmlHelper = new EscapeHtml(); } return $this-&gt;escapeHtmlHelper; } public function getPluginFlashMessenger() { if (null === $this-&gt;pluginFlashMessenger) { $this-&gt;setPluginFlashMessenger(new PluginFlashMessenger()); } return $this-&gt;pluginFlashMessenger; } public function setPluginFlashMessenger(PluginFlashMessenger $pluginFlashMessenger) { $this-&gt;pluginFlashMessenger = $pluginFlashMessenger; return $this; } public function setServiceLocator(ServiceLocatorInterface $serviceLocator) { $this-&gt;serviceLocator = $serviceLocator; return $this; } public function getServiceLocator() { return $this-&gt;serviceLocator; } } &lt;?php
 namespace Zend\View\Helper; class HtmlFlash extends AbstractHtmlElement { const TYPE = 'application/x-shockwave-flash'; public function __invoke($data, array $attribs = array(), array $params = array(), $content = null) { $params = array_merge(array('movie' =&gt; $data, 'quality' =&gt; 'high'), $params); $htmlObject = $this-&gt;getView()-&gt;plugin('htmlObject'); return $htmlObject($data, self::TYPE, $attribs, $params, $content); } } &lt;?php
 namespace Zend\View\Helper; class Cycle extends AbstractHelper implements \Iterator { const DEFAULT_NAME = 'default'; protected $pointers = array(self::DEFAULT_NAME =&gt;-1); protected $data = array(self::DEFAULT_NAME=&gt;array()); protected $name = self::DEFAULT_NAME; public function __invoke(array $data = array(), $name = self::DEFAULT_NAME) { if (!empty($data)) $this-&gt;data[$name] = $data; $this-&gt;setName($name); return $this; } public function assign(Array $data , $name = self::DEFAULT_NAME) { $this-&gt;setName($name); $this-&gt;data[$name] = $data; $this-&gt;rewind(); return $this; } public function setName($name = self::DEFAULT_NAME) { $this-&gt;name = $name; if (!isset($this-&gt;data[$this-&gt;name])) $this-&gt;data[$this-&gt;name] = array(); if (!isset($this-&gt;pointers[$this-&gt;name])) $this-&gt;rewind(); return $this; } public function getName() { return $this-&gt;name; } public function getAll() { return $this-&gt;data[$this-&gt;name]; } public function toString() { return (string) $this-&gt;data[$this-&gt;name][$this-&gt;key()]; } public function __toString() { return $this-&gt;toString(); } public function next() { $count = count($this-&gt;data[$this-&gt;name]); if ($this-&gt;pointers[$this-&gt;name] == ($count - 1)) $this-&gt;pointers[$this-&gt;name] = 0; else $this-&gt;pointers[$this-&gt;name] = ++$this-&gt;pointers[$this-&gt;name]; return $this; } public function prev() { $count = count($this-&gt;data[$this-&gt;name]); if ($this-&gt;pointers[$this-&gt;name] &lt;= 0) $this-&gt;pointers[$this-&gt;name] = $count - 1; else $this-&gt;pointers[$this-&gt;name] = --$this-&gt;pointers[$this-&gt;name]; return $this; } public function key() { if ($this-&gt;pointers[$this-&gt;name] &lt; 0) return 0; else return $this-&gt;pointers[$this-&gt;name]; } public function rewind() { $this-&gt;pointers[$this-&gt;name] = -1; return $this; } public function valid() { return isset($this-&gt;data[$this-&gt;name][$this-&gt;key()]); } public function current() { return $this-&gt;data[$this-&gt;name][$this-&gt;key()]; } } &lt;?php
 namespace Zend\View\Helper\Navigation; use RecursiveIteratorIterator; use Zend\Navigation\AbstractContainer; use Zend\Navigation\Page\AbstractPage; use Zend\View; use Zend\View\Exception; class Menu extends AbstractHelper { protected $ulClass = 'navigation'; protected $onlyActiveBranch = false; protected $escapeLabels = true; protected $renderParents = true; protected $partial = null; public function __invoke($container = null) { if (null !== $container) { $this-&gt;setContainer($container); } return $this; } public function setUlClass($ulClass) { if (is_string($ulClass)) { $this-&gt;ulClass = $ulClass; } return $this; } public function getUlClass() { return $this-&gt;ulClass; } public function setOnlyActiveBranch($flag = true) { $this-&gt;onlyActiveBranch = (bool) $flag; return $this; } public function getOnlyActiveBranch() { return $this-&gt;onlyActiveBranch; } public function escapeLabels($flag = true) { $this-&gt;escapeLabels = (bool) $flag; return $this; } public function setRenderParents($flag = true) { $this-&gt;renderParents = (bool) $flag; return $this; } public function getRenderParents() { return $this-&gt;renderParents; } public function setPartial($partial) { if (null === $partial || is_string($partial) || is_array($partial)) { $this-&gt;partial = $partial; } return $this; } public function getPartial() { return $this-&gt;partial; } public function htmlify(AbstractPage $page, $escapeLabel = true) { $label = $page-&gt;getLabel(); $title = $page-&gt;getTitle(); if (null !== ($translator = $this-&gt;getTranslator())) { $textDomain = $this-&gt;getTranslatorTextDomain(); if (is_string($label) &amp;&amp; !empty($label)) { $label = $translator-&gt;translate($label, $textDomain); } if (is_string($title) &amp;&amp; !empty($title)) { $title = $translator-&gt;translate($title, $textDomain); } } $attribs = array( 'id' =&gt; $page-&gt;getId(), 'title' =&gt; $title, 'class' =&gt; $page-&gt;getClass() ); $href = $page-&gt;getHref(); if ($href) { $element = 'a'; $attribs['href'] = $href; $attribs['target'] = $page-&gt;getTarget(); } else { $element = 'span'; } $html = '&lt;' . $element . $this-&gt;htmlAttribs($attribs) . '&gt;'; if ($escapeLabel === true) { $escaper = $this-&gt;view-&gt;plugin('escapeHtml'); $html .= $escaper($label); } else { $html .= $label; } $html .= '&lt;/' . $element . '&gt;'; return $html; } protected function normalizeOptions(array $options = array()) { if (isset($options['indent'])) { $options['indent'] = $this-&gt;getWhitespace($options['indent']); } else { $options['indent'] = $this-&gt;getIndent(); } if (isset($options['ulClass']) &amp;&amp; $options['ulClass'] !== null) { $options['ulClass'] = (string) $options['ulClass']; } else { $options['ulClass'] = $this-&gt;getUlClass(); } if (array_key_exists('minDepth', $options)) { if (null !== $options['minDepth']) { $options['minDepth'] = (int) $options['minDepth']; } } else { $options['minDepth'] = $this-&gt;getMinDepth(); } if ($options['minDepth'] &lt; 0 || $options['minDepth'] === null) { $options['minDepth'] = 0; } if (array_key_exists('maxDepth', $options)) { if (null !== $options['maxDepth']) { $options['maxDepth'] = (int) $options['maxDepth']; } } else { $options['maxDepth'] = $this-&gt;getMaxDepth(); } if (!isset($options['onlyActiveBranch'])) { $options['onlyActiveBranch'] = $this-&gt;getOnlyActiveBranch(); } if (!isset($options['escapeLabels'])) { $options['escapeLabels'] = $this-&gt;escapeLabels; } if (!isset($options['renderParents'])) { $options['renderParents'] = $this-&gt;getRenderParents(); } return $options; } protected function renderDeepestMenu(AbstractContainer $container, $ulClass, $indent, $minDepth, $maxDepth, $escapeLabels ) { if (!$active = $this-&gt;findActive($container, $minDepth - 1, $maxDepth)) { return ''; } if ($active['depth'] &lt; $minDepth) { if (!$active['page']-&gt;hasPages()) { return ''; } } elseif (!$active['page']-&gt;hasPages()) { $active['page'] = $active['page']-&gt;getParent(); } elseif (is_int($maxDepth) &amp;&amp; $active['depth'] +1 &gt; $maxDepth) { $active['page'] = $active['page']-&gt;getParent(); } $ulClass = $ulClass ? ' class="' . $ulClass . '"' : ''; $html = $indent . '&lt;ul' . $ulClass . '&gt;' . self::EOL; foreach ($active['page'] as $subPage) { if (!$this-&gt;accept($subPage)) { continue; } $liClass = $subPage-&gt;isActive(true) ? ' class="active"' : ''; $html .= $indent . '    &lt;li' . $liClass . '&gt;' . self::EOL; $html .= $indent . '        ' . $this-&gt;htmlify($subPage, $escapeLabels) . self::EOL; $html .= $indent . '    &lt;/li&gt;' . self::EOL; } $html .= $indent . '&lt;/ul&gt;'; return $html; } protected function renderNormalMenu(AbstractContainer $container, $ulClass, $indent, $minDepth, $maxDepth, $onlyActive, $escapeLabels ) { $html = ''; $found = $this-&gt;findActive($container, $minDepth, $maxDepth); if ($found) { $foundPage = $found['page']; $foundDepth = $found['depth']; } else { $foundPage = null; } $iterator = new RecursiveIteratorIterator($container, RecursiveIteratorIterator::SELF_FIRST); if (is_int($maxDepth)) { $iterator-&gt;setMaxDepth($maxDepth); } $prevDepth = -1; foreach ($iterator as $page) { $depth = $iterator-&gt;getDepth(); $isActive = $page-&gt;isActive(true); if ($depth &lt; $minDepth || !$this-&gt;accept($page)) { continue; } elseif ($onlyActive &amp;&amp; !$isActive) { $accept = false; if ($foundPage) { if ($foundPage-&gt;hasPage($page)) { $accept = true; } elseif ($foundPage-&gt;getParent()-&gt;hasPage($page)) { if (!$foundPage-&gt;hasPages() || is_int($maxDepth) &amp;&amp; $foundDepth + 1 &gt; $maxDepth) { $accept = true; } } } if (!$accept) { continue; } } $depth -= $minDepth; $myIndent = $indent . str_repeat('        ', $depth); if ($depth &gt; $prevDepth) { if ($ulClass &amp;&amp; $depth == 0) { $ulClass = ' class="' . $ulClass . '"'; } else { $ulClass = ''; } $html .= $myIndent . '&lt;ul' . $ulClass . '&gt;' . self::EOL; } elseif ($prevDepth &gt; $depth) { for ($i = $prevDepth; $i &gt; $depth; $i--) { $ind = $indent . str_repeat('        ', $i); $html .= $ind . '    &lt;/li&gt;' . self::EOL; $html .= $ind . '&lt;/ul&gt;' . self::EOL; } $html .= $myIndent . '    &lt;/li&gt;' . self::EOL; } else { $html .= $myIndent . '    &lt;/li&gt;' . self::EOL; } $liClass = $isActive ? ' class="active"' : ''; $html .= $myIndent . '    &lt;li' . $liClass . '&gt;' . self::EOL . $myIndent . '        ' . $this-&gt;htmlify($page, $escapeLabels) . self::EOL; $prevDepth = $depth; } if ($html) { for ($i = $prevDepth+1; $i &gt; 0; $i--) { $myIndent = $indent . str_repeat('        ', $i-1); $html .= $myIndent . '    &lt;/li&gt;' . self::EOL . $myIndent . '&lt;/ul&gt;' . self::EOL; } $html = rtrim($html, self::EOL); } return $html; } public function renderMenu($container = null, array $options = array()) { $this-&gt;parseContainer($container); if (null === $container) { $container = $this-&gt;getContainer(); } $options = $this-&gt;normalizeOptions($options); if ($options['onlyActiveBranch'] &amp;&amp; !$options['renderParents']) { $html = $this-&gt;renderDeepestMenu($container, $options['ulClass'], $options['indent'], $options['minDepth'], $options['maxDepth'], $options['escapeLabels']); } else { $html = $this-&gt;renderNormalMenu($container, $options['ulClass'], $options['indent'], $options['minDepth'], $options['maxDepth'], $options['onlyActiveBranch'], $options['escapeLabels']); } return $html; } public function renderSubMenu(AbstractContainer $container = null, $ulClass = null, $indent = null ) { return $this-&gt;renderMenu($container, array( 'indent' =&gt; $indent, 'ulClass' =&gt; $ulClass, 'minDepth' =&gt; null, 'maxDepth' =&gt; null, 'onlyActiveBranch' =&gt; true, 'renderParents' =&gt; false, 'escapeLabels' =&gt; true )); } public function renderPartial($container = null, $partial = null) { $this-&gt;parseContainer($container); if (null === $container) { $container = $this-&gt;getContainer(); } if (null === $partial) { $partial = $this-&gt;getPartial(); } if (empty($partial)) { throw new Exception\RuntimeException( 'Unable to render menu: No partial view script provided' ); } $model = array( 'container' =&gt; $container ); if (is_array($partial)) { if (count($partial) != 2) { throw new Exception\InvalidArgumentException( 'Unable to render menu: A view partial supplied as ' . 'an array must contain two values: partial view ' . 'script and module where script can be found' ); } $partialHelper = $this-&gt;view-&gt;plugin('partial'); return $partialHelper($partial[0], $model); } $partialHelper = $this-&gt;view-&gt;plugin('partial'); return $partialHelper($partial, $model); } public function render($container = null) { $partial = $this-&gt;getPartial(); if ($partial) { return $this-&gt;renderPartial($container, $partial); } return $this-&gt;renderMenu($container); } } &lt;?php
 namespace Zend\View\Helper\Navigation; use Zend\Navigation\AbstractContainer; use Zend\Navigation\Page\AbstractPage; use Zend\View; use Zend\View\Exception; class Breadcrumbs extends AbstractHelper { protected $separator = ' &amp;gt; '; protected $minDepth = 1; protected $linkLast = false; protected $partial; public function __invoke($container = null) { if (null !== $container) { $this-&gt;setContainer($container); } return $this; } public function setSeparator($separator) { if (is_string($separator)) { $this-&gt;separator = $separator; } return $this; } public function getSeparator() { return $this-&gt;separator; } public function setLinkLast($linkLast) { $this-&gt;linkLast = (bool) $linkLast; return $this; } public function getLinkLast() { return $this-&gt;linkLast; } public function setPartial($partial) { if (null === $partial || is_string($partial) || is_array($partial)) { $this-&gt;partial = $partial; } return $this; } public function getPartial() { return $this-&gt;partial; } public function renderStraight($container = null) { $this-&gt;parseContainer($container); if (null === $container) { $container = $this-&gt;getContainer(); } if (!$active = $this-&gt;findActive($container)) { return ''; } $active = $active['page']; if ($this-&gt;getLinkLast()) { $html = $this-&gt;htmlify($active); } else { $html = $active-&gt;getLabel(); if (null !== ($translator = $this-&gt;getTranslator())) { $html = $translator-&gt;translate($html, $this-&gt;getTranslatorTextDomain()); } $escaper = $this-&gt;view-&gt;plugin('escapeHtml'); $html = $escaper($html); } while ($parent = $active-&gt;getParent()) { if ($parent instanceof AbstractPage) { $html = $this-&gt;htmlify($parent) . $this-&gt;getSeparator() . $html; } if ($parent === $container) { break; } $active = $parent; } return strlen($html) ? $this-&gt;getIndent() . $html : ''; } public function renderPartial($container = null, $partial = null) { $this-&gt;parseContainer($container); if (null === $container) { $container = $this-&gt;getContainer(); } if (null === $partial) { $partial = $this-&gt;getPartial(); } if (empty($partial)) { throw new Exception\RuntimeException( 'Unable to render menu: No partial view script provided' ); } $model = array('pages' =&gt; array()); $active = $this-&gt;findActive($container); if ($active) { $active = $active['page']; $model['pages'][] = $active; while ($parent = $active-&gt;getParent()) { if ($parent instanceof AbstractPage) { $model['pages'][] = $parent; } else { break; } if ($parent === $container) { break; } $active = $parent; } $model['pages'] = array_reverse($model['pages']); } if (is_array($partial)) { if (count($partial) != 2) { throw new Exception\InvalidArgumentException( 'Unable to render menu: A view partial supplied as ' . 'an array must contain two values: partial view ' . 'script and module where script can be found' ); } $partialHelper = $this-&gt;view-&gt;plugin('partial'); return $partialHelper($partial[0], $model); } $partialHelper = $this-&gt;view-&gt;plugin('partial'); return $partialHelper($partial, $model); } public function render($container = null) { $partial = $this-&gt;getPartial(); if ($partial) { return $this-&gt;renderPartial($container, $partial); } return $this-&gt;renderStraight($container); } } &lt;?php
 namespace Zend\View\Helper\Navigation; use Zend\View\Exception; use Zend\View\HelperPluginManager; class PluginManager extends HelperPluginManager { protected $invokableClasses = array( 'breadcrumbs' =&gt; 'Zend\View\Helper\Navigation\Breadcrumbs', 'links' =&gt; 'Zend\View\Helper\Navigation\Links', 'menu' =&gt; 'Zend\View\Helper\Navigation\Menu', 'sitemap' =&gt; 'Zend\View\Helper\Navigation\Sitemap', ); public function validatePlugin($plugin) { if ($plugin instanceof AbstractHelper) { return; } throw new Exception\InvalidArgumentException(sprintf( 'Plugin of type %s is invalid; must implement %s\AbstractHelper', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\View\Helper\Navigation; use DOMDocument; use RecursiveIteratorIterator; use Zend\Navigation\AbstractContainer; use Zend\Navigation\Page\AbstractPage; use Zend\Stdlib\ErrorHandler; use Zend\Uri; use Zend\View; use Zend\View\Exception; class Sitemap extends AbstractHelper { const SITEMAP_NS = 'http://www.sitemaps.org/schemas/sitemap/0.9'; const SITEMAP_XSD = 'http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd'; protected $formatOutput = false; protected $useXmlDeclaration = true; protected $useSitemapValidators = true; protected $useSchemaValidation = false; protected $serverUrl; protected $urls = array(); public function __invoke($container = null) { if (null !== $container) { $this-&gt;setContainer($container); } return $this; } public function setFormatOutput($formatOutput = true) { $this-&gt;formatOutput = (bool) $formatOutput; return $this; } public function getFormatOutput() { return $this-&gt;formatOutput; } public function setUseXmlDeclaration($useXmlDecl) { $this-&gt;useXmlDeclaration = (bool) $useXmlDecl; return $this; } public function getUseXmlDeclaration() { return $this-&gt;useXmlDeclaration; } public function setUseSitemapValidators($useSitemapValidators) { $this-&gt;useSitemapValidators = (bool) $useSitemapValidators; return $this; } public function getUseSitemapValidators() { return $this-&gt;useSitemapValidators; } public function setUseSchemaValidation($schemaValidation) { $this-&gt;useSchemaValidation = (bool) $schemaValidation; return $this; } public function getUseSchemaValidation() { return $this-&gt;useSchemaValidation; } public function setServerUrl($serverUrl) { $uri = Uri\UriFactory::factory($serverUrl); $uri-&gt;setFragment(''); $uri-&gt;setPath(''); $uri-&gt;setQuery(''); if ($uri-&gt;isValid()) { $this-&gt;serverUrl = $uri-&gt;toString(); } else { throw new Exception\InvalidArgumentException(sprintf( 'Invalid server URL: "%s"', $serverUrl )); } return $this; } public function getServerUrl() { if (!isset($this-&gt;serverUrl)) { $serverUrlHelper = $this-&gt;getView()-&gt;plugin('serverUrl'); $this-&gt;serverUrl = $serverUrlHelper(); } return $this-&gt;serverUrl; } protected function xmlEscape($string) { $escaper = $this-&gt;view-&gt;plugin('escapeHtml'); return $escaper($string); } public function url(AbstractPage $page) { $href = $page-&gt;getHref(); if (!isset($href{0})) { return ''; } elseif ($href{0} == '/') { $url = $this-&gt;getServerUrl() . $href; } elseif (preg_match('/^[a-z]+:/im', (string) $href)) { $url = (string) $href; } else { $basePathHelper = $this-&gt;getView()-&gt;plugin('basepath'); $curDoc = $basePathHelper(); $curDoc = ('/' == $curDoc) ? '' : trim($curDoc, '/'); $url = rtrim($this-&gt;getServerUrl(), '/') . '/' . $curDoc . (empty($curDoc) ? '' : '/') . $href; } if (! in_array($url, $this-&gt;urls)) { $this-&gt;urls[] = $url; return $this-&gt;xmlEscape($url); } return null; } public function getDomSitemap(AbstractContainer $container = null) { $this-&gt;urls = array(); if (null === $container) { $container = $this-&gt;getContainer(); } if ($this-&gt;getUseSitemapValidators()) { $locValidator = new \Zend\Validator\Sitemap\Loc(); $lastmodValidator = new \Zend\Validator\Sitemap\Lastmod(); $changefreqValidator = new \Zend\Validator\Sitemap\Changefreq(); $priorityValidator = new \Zend\Validator\Sitemap\Priority(); } $dom = new DOMDocument('1.0', 'UTF-8'); $dom-&gt;formatOutput = $this-&gt;getFormatOutput(); $urlSet = $dom-&gt;createElementNS(self::SITEMAP_NS, 'urlset'); $dom-&gt;appendChild($urlSet); $iterator = new RecursiveIteratorIterator($container, RecursiveIteratorIterator::SELF_FIRST); $maxDepth = $this-&gt;getMaxDepth(); if (is_int($maxDepth)) { $iterator-&gt;setMaxDepth($maxDepth); } $minDepth = $this-&gt;getMinDepth(); if (!is_int($minDepth) || $minDepth &lt; 0) { $minDepth = 0; } foreach ($iterator as $page) { if ($iterator-&gt;getDepth() &lt; $minDepth || !$this-&gt;accept($page)) { continue; } if (!$url = $this-&gt;url($page)) { continue; } $urlNode = $dom-&gt;createElementNS(self::SITEMAP_NS, 'url'); $urlSet-&gt;appendChild($urlNode); if ($this-&gt;getUseSitemapValidators() &amp;&amp; !$locValidator-&gt;isValid($url) ) { throw new Exception\RuntimeException(sprintf( 'Encountered an invalid URL for Sitemap XML: "%s"', $url )); } $urlNode-&gt;appendChild($dom-&gt;createElementNS(self::SITEMAP_NS, 'loc', $url)); if (isset($page-&gt;lastmod)) { $lastmod = strtotime((string) $page-&gt;lastmod); if ($lastmod !== false) { $lastmod = date('c', $lastmod); } if (!$this-&gt;getUseSitemapValidators() || $lastmodValidator-&gt;isValid($lastmod)) { $urlNode-&gt;appendChild( $dom-&gt;createElementNS(self::SITEMAP_NS, 'lastmod', $lastmod) ); } } if (isset($page-&gt;changefreq)) { $changefreq = $page-&gt;changefreq; if (!$this-&gt;getUseSitemapValidators() || $changefreqValidator-&gt;isValid($changefreq)) { $urlNode-&gt;appendChild( $dom-&gt;createElementNS(self::SITEMAP_NS, 'changefreq', $changefreq) ); } } if (isset($page-&gt;priority)) { $priority = $page-&gt;priority; if (!$this-&gt;getUseSitemapValidators() || $priorityValidator-&gt;isValid($priority)) { $urlNode-&gt;appendChild( $dom-&gt;createElementNS(self::SITEMAP_NS, 'priority', $priority) ); } } } if ($this-&gt;getUseSchemaValidation()) { ErrorHandler::start(); $test = $dom-&gt;schemaValidate(self::SITEMAP_XSD); $error = ErrorHandler::stop(); if (!$test) { throw new Exception\RuntimeException(sprintf( 'Sitemap is invalid according to XML Schema at "%s"', self::SITEMAP_XSD ), 0, $error); } } return $dom; } public function render($container = null) { $dom = $this-&gt;getDomSitemap($container); $xml = $this-&gt;getUseXmlDeclaration() ? $dom-&gt;saveXML() : $dom-&gt;saveXML($dom-&gt;documentElement); return rtrim($xml, PHP_EOL); } } &lt;?php
 namespace Zend\View\Helper\Navigation; use RecursiveIteratorIterator; use Traversable; use Zend\Navigation\AbstractContainer; use Zend\Navigation\Page\AbstractPage; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\ErrorHandler; use Zend\View; use Zend\View\Exception; class Links extends AbstractHelper { const RENDER_ALTERNATE = 0x0001; const RENDER_STYLESHEET = 0x0002; const RENDER_START = 0x0004; const RENDER_NEXT = 0x0008; const RENDER_PREV = 0x0010; const RENDER_CONTENTS = 0x0020; const RENDER_INDEX = 0x0040; const RENDER_GLOSSARY = 0x0080; const RENDER_COPYRIGHT = 0x0100; const RENDER_CHAPTER = 0x0200; const RENDER_SECTION = 0x0400; const RENDER_SUBSECTION = 0x0800; const RENDER_APPENDIX = 0x1000; const RENDER_HELP = 0x2000; const RENDER_BOOKMARK = 0x4000; const RENDER_CUSTOM = 0x8000; const RENDER_ALL = 0xffff; protected static $RELATIONS = array( self::RENDER_ALTERNATE =&gt; 'alternate', self::RENDER_STYLESHEET =&gt; 'stylesheet', self::RENDER_START =&gt; 'start', self::RENDER_NEXT =&gt; 'next', self::RENDER_PREV =&gt; 'prev', self::RENDER_CONTENTS =&gt; 'contents', self::RENDER_INDEX =&gt; 'index', self::RENDER_GLOSSARY =&gt; 'glossary', self::RENDER_COPYRIGHT =&gt; 'copyright', self::RENDER_CHAPTER =&gt; 'chapter', self::RENDER_SECTION =&gt; 'section', self::RENDER_SUBSECTION =&gt; 'subsection', self::RENDER_APPENDIX =&gt; 'appendix', self::RENDER_HELP =&gt; 'help', self::RENDER_BOOKMARK =&gt; 'bookmark', ); protected $renderFlag = self::RENDER_ALL; protected $root; public function __invoke($container = null) { if (null !== $container) { $this-&gt;setContainer($container); } return $this; } public function __call($method, array $arguments = array()) { ErrorHandler::start(E_WARNING); $result = preg_match('/find(Rel|Rev)(.+)/', $method, $match); ErrorHandler::stop(); if ($result) { return $this-&gt;findRelation($arguments[0], strtolower($match[1]), strtolower($match[2])); } return parent::__call($method, $arguments); } public function setRenderFlag($renderFlag) { $this-&gt;renderFlag = (int) $renderFlag; return $this; } public function getRenderFlag() { return $this-&gt;renderFlag; } public function findAllRelations(AbstractPage $page, $flag = null) { if (!is_int($flag)) { $flag = self::RENDER_ALL; } $result = array('rel' =&gt; array(), 'rev' =&gt; array()); $native = array_values(static::$RELATIONS); foreach (array_keys($result) as $rel) { $meth = 'getDefined' . ucfirst($rel); $types = array_merge($native, array_diff($page-&gt;$meth(), $native)); foreach ($types as $type) { if (!$relFlag = array_search($type, static::$RELATIONS)) { $relFlag = self::RENDER_CUSTOM; } if (!($flag &amp; $relFlag)) { continue; } $found = $this-&gt;findRelation($page, $rel, $type); if ($found) { if (!is_array($found)) { $found = array($found); } $result[$rel][$type] = $found; } } } return $result; } public function findRelation(AbstractPage $page, $rel, $type) { if (!in_array($rel, array('rel', 'rev'))) { throw new Exception\DomainException(sprintf( 'Invalid argument: $rel must be "rel" or "rev"; "%s" given', $rel )); } if (!$result = $this-&gt;findFromProperty($page, $rel, $type)) { $result = $this-&gt;findFromSearch($page, $rel, $type); } return $result; } protected function findFromProperty(AbstractPage $page, $rel, $type) { $method = 'get' . ucfirst($rel); $result = $page-&gt;$method($type); if ($result) { $result = $this-&gt;convertToPages($result); if ($result) { if (!is_array($result)) { $result = array($result); } foreach ($result as $key =&gt; $page) { if (!$this-&gt;accept($page)) { unset($result[$key]); } } return count($result) == 1 ? $result[0] : $result; } } return null; } protected function findFromSearch(AbstractPage $page, $rel, $type) { $found = null; $method = 'search' . ucfirst($rel) . ucfirst($type); if (method_exists($this, $method)) { $found = $this-&gt;$method($page); } return $found; } public function searchRelStart(AbstractPage $page) { $found = $this-&gt;findRoot($page); if (!$found instanceof AbstractPage) { $found-&gt;rewind(); $found = $found-&gt;current(); } if ($found === $page || !$this-&gt;accept($found)) { $found = null; } return $found; } public function searchRelNext(AbstractPage $page) { $found = null; $break = false; $iterator = new RecursiveIteratorIterator($this-&gt;findRoot($page), RecursiveIteratorIterator::SELF_FIRST); foreach ($iterator as $intermediate) { if ($intermediate === $page) { $break = true; continue; } if ($break &amp;&amp; $this-&gt;accept($intermediate)) { $found = $intermediate; break; } } return $found; } public function searchRelPrev(AbstractPage $page) { $found = null; $prev = null; $iterator = new RecursiveIteratorIterator( $this-&gt;findRoot($page), RecursiveIteratorIterator::SELF_FIRST); foreach ($iterator as $intermediate) { if (!$this-&gt;accept($intermediate)) { continue; } if ($intermediate === $page) { $found = $prev; break; } $prev = $intermediate; } return $found; } public function searchRelChapter(AbstractPage $page) { $found = array(); $root = $this-&gt;findRoot($page); $start = $this-&gt;findRelation($page, 'rel', 'start'); if (!is_array($start)) { $start = array($start); } foreach ($root as $chapter) { if ($chapter !== $page &amp;&amp; !in_array($chapter, $start) &amp;&amp; $this-&gt;accept($chapter)) { $found[] = $chapter; } } switch (count($found)) { case 0: return null; case 1: return $found[0]; default: return $found; } } public function searchRelSection(AbstractPage $page) { $found = array(); if ($page-&gt;hasPages() &amp;&amp; $this-&gt;findRoot($page)-&gt;hasPage($page)) { foreach ($page as $section) { if ($this-&gt;accept($section)) { $found[] = $section; } } } switch (count($found)) { case 0: return null; case 1: return $found[0]; default: return $found; } } public function searchRelSubsection(AbstractPage $page) { $found = array(); if ($page-&gt;hasPages()) { foreach ($this-&gt;findRoot($page) as $chapter) { if ($chapter-&gt;hasPage($page)) { foreach ($page as $subsection) { if ($this-&gt;accept($subsection)) { $found[] = $subsection; } } } } } switch (count($found)) { case 0: return null; case 1: return $found[0]; default: return $found; } } public function searchRevSection(AbstractPage $page) { $found = null; $parent = $page-&gt;getParent(); if ($parent) { if ($parent instanceof AbstractPage &amp;&amp; $this-&gt;findRoot($page)-&gt;hasPage($parent)) { $found = $parent; } } return $found; } public function searchRevSubsection(AbstractPage $page) { $found = null; $parent = $page-&gt;getParent(); if ($parent) { if ($parent instanceof AbstractPage) { $root = $this-&gt;findRoot($page); foreach ($root as $chapter) { if ($chapter-&gt;hasPage($parent)) { $found = $parent; break; } } } } return $found; } protected function findRoot(AbstractPage $page) { if ($this-&gt;root) { return $this-&gt;root; } $root = $page; while ($parent = $page-&gt;getParent()) { $root = $parent; if ($parent instanceof AbstractPage) { $page = $parent; } else { break; } } return $root; } protected function convertToPages($mixed, $recursive = true) { if ($mixed instanceof AbstractPage) { return $mixed; } elseif ($mixed instanceof AbstractContainer) { $pages = array(); foreach ($mixed as $page) { $pages[] = $page; } return $pages; } elseif ($mixed instanceof Traversable) { $mixed = ArrayUtils::iteratorToArray($mixed); } elseif (is_string($mixed)) { return AbstractPage::factory(array( 'type' =&gt; 'uri', 'uri' =&gt; $mixed )); } if (is_array($mixed) &amp;&amp; !empty($mixed)) { if ($recursive &amp;&amp; is_numeric(key($mixed))) { $pages = array(); foreach ($mixed as $value) { $value = $this-&gt;convertToPages($value, false); if ($value) { $pages[] = $value; } } return $pages; } else { try { $page = AbstractPage::factory($mixed); return $page; } catch (\Exception $e) { } } } return null; } public function renderLink(AbstractPage $page, $attrib, $relation) { if (!in_array($attrib, array('rel', 'rev'))) { throw new Exception\DomainException(sprintf( 'Invalid relation attribute "%s", must be "rel" or "rev"', $attrib )); } if (!$href = $page-&gt;getHref()) { return ''; } $attribs = array( $attrib =&gt; $relation, 'href' =&gt; $href, 'title' =&gt; $page-&gt;getLabel() ); return '&lt;link' . $this-&gt;htmlAttribs($attribs) . $this-&gt;getClosingBracket(); } public function render($container = null) { $this-&gt;parseContainer($container); if (null === $container) { $container = $this-&gt;getContainer(); } $active = $this-&gt;findActive($container); if ($active) { $active = $active['page']; } else { return ''; } $output = ''; $indent = $this-&gt;getIndent(); $this-&gt;root = $container; $result = $this-&gt;findAllRelations($active, $this-&gt;getRenderFlag()); foreach ($result as $attrib =&gt; $types) { foreach ($types as $relation =&gt; $pages) { foreach ($pages as $page) { $r = $this-&gt;renderLink($page, $attrib, $relation); if ($r) { $output .= $indent . $r . self::EOL; } } } } $this-&gt;root = null; return strlen($output) ? rtrim($output, self::EOL) : ''; } } &lt;?php
 namespace Zend\View\Helper\Navigation; use Zend\Navigation; use Zend\Permissions\Acl; use Zend\View\Helper\HelperInterface as BaseHelperInterface; interface HelperInterface extends BaseHelperInterface { public function setContainer($container = null); public function getContainer(); public function setAcl(Acl\AclInterface $acl = null); public function getAcl(); public function setRole($role = null); public function getRole(); public function setUseAcl($useAcl = true); public function getUseAcl(); public function getRenderInvisible(); public function setRenderInvisible($renderInvisible = true); public function hasContainer(); public function hasAcl(); public function hasRole(); public function __toString(); public function render($container = null); } &lt;?php
 namespace Zend\View\Helper\Navigation; use RecursiveIteratorIterator; use Zend\I18n\Translator\Translator; use Zend\I18n\Translator\TranslatorAwareInterface; use Zend\Navigation; use Zend\Navigation\Page\AbstractPage; use Zend\Permissions\Acl; use Zend\ServiceManager\ServiceLocatorAwareInterface; use Zend\ServiceManager\ServiceLocatorInterface; use Zend\View; use Zend\View\Exception; abstract class AbstractHelper extends View\Helper\AbstractHtmlElement implements HelperInterface, ServiceLocatorAwareInterface, TranslatorAwareInterface { protected $serviceLocator; protected $container; protected $minDepth; protected $maxDepth; protected $indent = ''; protected $acl; protected $renderInvisible = false; protected $role; protected $useAcl = true; protected $translator; protected $translatorTextDomain = 'default'; protected $translatorEnabled = true; protected static $defaultAcl; protected static $defaultRole; public function setServiceLocator(ServiceLocatorInterface $serviceLocator) { $this-&gt;serviceLocator = $serviceLocator; return $this; } public function getServiceLocator() { return $this-&gt;serviceLocator; } public function setContainer($container = null) { $this-&gt;parseContainer($container); $this-&gt;container = $container; return $this; } public function getContainer() { if (null === $this-&gt;container) { $this-&gt;container = new Navigation\Navigation(); } return $this-&gt;container; } protected function parseContainer(&amp;$container = null) { if (null === $container) { return; } if (is_string($container)) { if (!$this-&gt;getServiceLocator()) { throw new Exception\InvalidArgumentException(sprintf( 'Attempted to set container with alias "%s" but no ServiceLocator was set', $container )); } $sl = $this-&gt;getServiceLocator(); if ($sl instanceof View\HelperPluginManager) { $sl = $sl-&gt;getServiceLocator(); } $container = $sl-&gt;get($container); return; } if (!$container instanceof Navigation\AbstractContainer) { throw new Exception\InvalidArgumentException( 'Container must be a string alias or an instance of ' . 'Zend\Navigation\AbstractContainer' ); } } public function setMinDepth($minDepth = null) { if (null === $minDepth || is_int($minDepth)) { $this-&gt;minDepth = $minDepth; } else { $this-&gt;minDepth = (int) $minDepth; } return $this; } public function getMinDepth() { if (!is_int($this-&gt;minDepth) || $this-&gt;minDepth &lt; 0) { return 0; } return $this-&gt;minDepth; } public function setMaxDepth($maxDepth = null) { if (null === $maxDepth || is_int($maxDepth)) { $this-&gt;maxDepth = $maxDepth; } else { $this-&gt;maxDepth = (int) $maxDepth; } return $this; } public function getMaxDepth() { return $this-&gt;maxDepth; } public function setIndent($indent) { $this-&gt;indent = $this-&gt;getWhitespace($indent); return $this; } public function getIndent() { return $this-&gt;indent; } public function setAcl(Acl\AclInterface $acl = null) { $this-&gt;acl = $acl; return $this; } public function getAcl() { if ($this-&gt;acl === null &amp;&amp; static::$defaultAcl !== null) { return static::$defaultAcl; } return $this-&gt;acl; } public function setRole($role = null) { if (null === $role || is_string($role) || $role instanceof Acl\Role\RoleInterface ) { $this-&gt;role = $role; } else { throw new Exception\InvalidArgumentException(sprintf( '$role must be a string, null, or an instance of ' . 'Zend\Permissions\Role\RoleInterface; %s given', (is_object($role) ? get_class($role) : gettype($role)) )); } return $this; } public function getRole() { if ($this-&gt;role === null &amp;&amp; static::$defaultRole !== null) { return static::$defaultRole; } return $this-&gt;role; } public function setUseAcl($useAcl = true) { $this-&gt;useAcl = (bool) $useAcl; return $this; } public function getUseAcl() { return $this-&gt;useAcl; } public function getRenderInvisible() { return $this-&gt;renderInvisible; } public function setRenderInvisible($renderInvisible = true) { $this-&gt;renderInvisible = (bool) $renderInvisible; return $this; } public function __call($method, array $arguments = array()) { return call_user_func_array( array($this-&gt;getContainer(), $method), $arguments); } public function __toString() { try { return $this-&gt;render(); } catch (\Exception $e) { $msg = get_class($e) . ': ' . $e-&gt;getMessage(); trigger_error($msg, E_USER_ERROR); return ''; } } public function findActive($container, $minDepth = null, $maxDepth = -1) { $this-&gt;parseContainer($container); if (!is_int($minDepth)) { $minDepth = $this-&gt;getMinDepth(); } if ((!is_int($maxDepth) || $maxDepth &lt; 0) &amp;&amp; null !== $maxDepth) { $maxDepth = $this-&gt;getMaxDepth(); } $found = null; $foundDepth = -1; $iterator = new RecursiveIteratorIterator($container, RecursiveIteratorIterator::CHILD_FIRST); foreach ($iterator as $page) { $currDepth = $iterator-&gt;getDepth(); if ($currDepth &lt; $minDepth || !$this-&gt;accept($page)) { continue; } if ($page-&gt;isActive(false) &amp;&amp; $currDepth &gt; $foundDepth) { $found = $page; $foundDepth = $currDepth; } } if (is_int($maxDepth) &amp;&amp; $foundDepth &gt; $maxDepth) { while ($foundDepth &gt; $maxDepth) { if (--$foundDepth &lt; $minDepth) { $found = null; break; } $found = $found-&gt;getParent(); if (!$found instanceof AbstractPage) { $found = null; break; } } } if ($found) { return array('page' =&gt; $found, 'depth' =&gt; $foundDepth); } return array(); } public function hasContainer() { return null !== $this-&gt;container; } public function hasAcl() { if ($this-&gt;acl instanceof Acl\Acl || static::$defaultAcl instanceof Acl\Acl ) { return true; } return false; } public function hasRole() { if ($this-&gt;role instanceof Acl\Role\RoleInterface || is_string($this-&gt;role) || static::$defaultRole instanceof Acl\Role\RoleInterface || is_string(static::$defaultRole) ) { return true; } return false; } public function htmlify(AbstractPage $page) { $label = $page-&gt;getLabel(); $title = $page-&gt;getTitle(); if (null !== ($translator = $this-&gt;getTranslator())) { $textDomain = $this-&gt;getTranslatorTextDomain(); if (is_string($label) &amp;&amp; !empty($label)) { $label = $translator-&gt;translate($label, $textDomain); } if (is_string($title) &amp;&amp; !empty($title)) { $title = $translator-&gt;translate($title, $textDomain); } } $attribs = array( 'id' =&gt; $page-&gt;getId(), 'title' =&gt; $title, 'class' =&gt; $page-&gt;getClass(), 'href' =&gt; $page-&gt;getHref(), 'target' =&gt; $page-&gt;getTarget() ); $escaper = $this-&gt;view-&gt;plugin('escapeHtml'); return '&lt;a' . $this-&gt;htmlAttribs($attribs) . '&gt;' . $escaper($label) . '&lt;/a&gt;'; } public function setTranslator(Translator $translator = null, $textDomain = null) { $this-&gt;translator = $translator; if (null !== $textDomain) { $this-&gt;setTranslatorTextDomain($textDomain); } return $this; } public function getTranslator() { if (! $this-&gt;isTranslatorEnabled()) { return null; } return $this-&gt;translator; } public function hasTranslator() { return (bool) $this-&gt;getTranslator(); } public function setTranslatorEnabled($enabled = true) { $this-&gt;translatorEnabled = (bool) $enabled; return $this; } public function isTranslatorEnabled() { return $this-&gt;translatorEnabled; } public function setTranslatorTextDomain($textDomain = 'default') { $this-&gt;translatorTextDomain = $textDomain; return $this; } public function getTranslatorTextDomain() { return $this-&gt;translatorTextDomain; } public function accept(AbstractPage $page, $recursive = true) { $accept = true; if (!$page-&gt;isVisible(false) &amp;&amp; !$this-&gt;getRenderInvisible()) { $accept = false; } elseif ($this-&gt;getUseAcl() &amp;&amp; !$this-&gt;acceptAcl($page)) { $accept = false; } if ($accept &amp;&amp; $recursive) { $parent = $page-&gt;getParent(); if ($parent instanceof AbstractPage) { $accept = $this-&gt;accept($parent, true); } } return $accept; } protected function acceptAcl(AbstractPage $page) { if (!$acl = $this-&gt;getAcl()) { return true; } $role = $this-&gt;getRole(); $resource = $page-&gt;getResource(); $privilege = $page-&gt;getPrivilege(); if ($resource || $privilege) { return $acl-&gt;hasResource($resource) &amp;&amp; $acl-&gt;isAllowed($role, $resource, $privilege); } return true; } protected function getWhitespace($indent) { if (is_int($indent)) { $indent = str_repeat(' ', $indent); } return (string) $indent; } protected function htmlAttribs($attribs) { foreach ($attribs as $key =&gt; $value) { if ($value === null || (is_string($value) &amp;&amp; !strlen($value))) { unset($attribs[$key]); } } return parent::htmlAttribs($attribs); } protected function normalizeId($value) { $prefix = get_class($this); $prefix = strtolower(trim(substr($prefix, strrpos($prefix, '\\')), '\\')); return $prefix . '-' . $value; } public static function setDefaultAcl(Acl\AclInterface $acl = null) { static::$defaultAcl = $acl; } public static function setDefaultRole($role = null) { if (null === $role || is_string($role) || $role instanceof Acl\Role\RoleInterface ) { static::$defaultRole = $role; } else { throw new Exception\InvalidArgumentException(sprintf( '$role must be null|string|Zend\Permissions\Role\RoleInterface; received "%s"', (is_object($role) ? get_class($role) : gettype($role)) )); } } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Helper\Escaper; class EscapeJs extends Escaper\AbstractHelper { protected function escape($value) { return $this-&gt;getEscaper()-&gt;escapeJs($value); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Exception\InvalidArgumentException; class Placeholder extends AbstractHelper { protected $items = array(); protected $registry; public function __construct() { $this-&gt;registry = Placeholder\Registry::getRegistry(); } public function __invoke($name = null) { if ($name == null) { throw new InvalidArgumentException('Placeholder: missing argument.  $name is required by placeholder($name)'); } $name = (string) $name; return $this-&gt;registry-&gt;getContainer($name); } public function getRegistry() { return $this-&gt;registry; } } &lt;?php
 namespace Zend\View\Helper; class DeclareVars extends AbstractHelper { public $view; public function __invoke() { $view = $this-&gt;getView(); $args = func_get_args(); foreach ($args as $key) { if (is_array($key)) { foreach ($key as $name =&gt; $value) { $this-&gt;declareVar($name, $value); } } elseif (!isset($view-&gt;vars()-&gt;$key)) { $this-&gt;declareVar($key); } } } protected function declareVar($key, $value = '') { $view = $this-&gt;getView(); $vars = $view-&gt;vars(); if (!isset($vars-&gt;$key)) { $vars-&gt;$key = $value; } } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Exception\InvalidArgumentException; class HtmlObject extends AbstractHtmlElement { public function __invoke($data = null, $type = null, array $attribs = array(), array $params = array(), $content = null) { if ($data == null || $type == null) { throw new InvalidArgumentException('HTMLObject: missing argument. $data and $type are required in htmlObject($data, $type, array $attribs = array(), array $params = array(), $content = null)'); } $attribs = array_merge(array('data' =&gt; $data, 'type' =&gt; $type), $attribs); $paramHtml = array(); $closingBracket = $this-&gt;getClosingBracket(); foreach ($params as $param =&gt; $options) { if (is_string($options)) { $options = array('value' =&gt; $options); } $options = array_merge(array('name' =&gt; $param), $options); $paramHtml[] = '&lt;param' . $this-&gt;htmlAttribs($options) . $closingBracket; } if (is_array($content)) { $content = implode(self::EOL, $content); } $xhtml = '&lt;object' . $this-&gt;htmlAttribs($attribs) . '&gt;' . self::EOL . implode(self::EOL, $paramHtml) . self::EOL . ($content ? $content . self::EOL : '') . '&lt;/object&gt;'; return $xhtml; } } &lt;?php
 namespace Zend\View\Helper; use Zend\Navigation\AbstractContainer; use Zend\ServiceManager\ServiceLocatorAwareInterface; use Zend\View\Exception; use Zend\View\Helper\Navigation\AbstractHelper as AbstractNavigationHelper; use Zend\View\Helper\Navigation\HelperInterface as NavigationHelper; class Navigation extends AbstractNavigationHelper { const NS = 'Zend\View\Helper\Navigation'; protected $plugins; protected $defaultProxy = 'menu'; protected $injected = array(); protected $injectContainer = true; protected $injectAcl = true; protected $injectTranslator = true; public function __invoke($container = null) { if (null !== $container) { $this-&gt;setContainer($container); } return $this; } public function __call($method, array $arguments = array()) { $helper = $this-&gt;findHelper($method, false); if ($helper) { if ($helper instanceof ServiceLocatorAwareInterface &amp;&amp; $this-&gt;getServiceLocator()) { $helper-&gt;setServiceLocator($this-&gt;getServiceLocator()); } return call_user_func_array($helper, $arguments); } return parent::__call($method, $arguments); } public function setPluginManager(Navigation\PluginManager $plugins) { $renderer = $this-&gt;getView(); if ($renderer) { $plugins-&gt;setRenderer($renderer); } $this-&gt;plugins = $plugins; return $this; } public function getPluginManager() { if (null === $this-&gt;plugins) { $this-&gt;setPluginManager(new Navigation\PluginManager()); } return $this-&gt;plugins; } public function findHelper($proxy, $strict = true) { $plugins = $this-&gt;getPluginManager(); if (!$plugins-&gt;has($proxy)) { if ($strict) { throw new Exception\RuntimeException(sprintf( 'Failed to find plugin for %s', $proxy )); } return false; } $helper = $plugins-&gt;get($proxy); $container = $this-&gt;getContainer(); $hash = spl_object_hash($container); if (!isset($this-&gt;injected[$hash])) { $helper-&gt;setContainer(); $this-&gt;inject($helper); $this-&gt;injected[$hash] = true; } return $helper; } protected function inject(NavigationHelper $helper) { if ($this-&gt;getInjectContainer() &amp;&amp; !$helper-&gt;hasContainer()) { $helper-&gt;setContainer($this-&gt;getContainer()); } if ($this-&gt;getInjectAcl()) { if (!$helper-&gt;hasAcl()) { $helper-&gt;setAcl($this-&gt;getAcl()); } if (!$helper-&gt;hasRole()) { $helper-&gt;setRole($this-&gt;getRole()); } } if ($this-&gt;getInjectTranslator() &amp;&amp; !$helper-&gt;hasTranslator()) { $helper-&gt;setTranslator( $this-&gt;getTranslator(), $this-&gt;getTranslatorTextDomain() ); } } public function setDefaultProxy($proxy) { $this-&gt;defaultProxy = (string) $proxy; return $this; } public function getDefaultProxy() { return $this-&gt;defaultProxy; } public function setInjectContainer($injectContainer = true) { $this-&gt;injectContainer = (bool) $injectContainer; return $this; } public function getInjectContainer() { return $this-&gt;injectContainer; } public function setInjectAcl($injectAcl = true) { $this-&gt;injectAcl = (bool) $injectAcl; return $this; } public function getInjectAcl() { return $this-&gt;injectAcl; } public function setInjectTranslator($injectTranslator = true) { $this-&gt;injectTranslator = (bool) $injectTranslator; return $this; } public function getInjectTranslator() { return $this-&gt;injectTranslator; } public function render($container = null) { $helper = $this-&gt;findHelper($this-&gt;getDefaultProxy()); return $helper-&gt;render($container); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Renderer\RendererInterface as Renderer; interface HelperInterface { public function setView(Renderer $view); public function getView(); } &lt;?php
 namespace Zend\View\Helper; class HtmlQuicktime extends AbstractHtmlElement { const TYPE = 'video/quicktime'; const ATTRIB_CLASSID = 'clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B'; const ATTRIB_CODEBASE = 'http://www.apple.com/qtactivex/qtplugin.cab'; protected $attribs = array('classid' =&gt; self::ATTRIB_CLASSID, 'codebase' =&gt; self::ATTRIB_CODEBASE); public function __invoke($data, array $attribs = array(), array $params = array(), $content = null) { $attribs = array_merge($this-&gt;attribs, $attribs); $params = array_merge(array('src' =&gt; $data), $params); $htmlObject = $this-&gt;getView()-&gt;plugin('htmlObject'); return $htmlObject($data, self::TYPE, $attribs, $params, $content); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Helper\HelperInterface; use Zend\View\Renderer\RendererInterface as Renderer; abstract class AbstractHelper implements HelperInterface { protected $view = null; public function setView(Renderer $view) { $this-&gt;view = $view; return $this; } public function getView() { return $this-&gt;view; } } &lt;?php
 namespace Zend\View\Helper; class InlineScript extends HeadScript { protected $regKey = 'Zend_View_Helper_InlineScript'; public function __invoke($mode = HeadScript::FILE, $spec = null, $placement = 'APPEND', array $attrs = array(), $type = 'text/javascript') { return parent::__invoke($mode, $spec, $placement, $attrs, $type); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Exception; use Zend\View\Model\ModelInterface as Model; class RenderChildModel extends AbstractHelper { protected $current; protected $viewModelHelper; public function __invoke($child) { return $this-&gt;render($child); } public function render($child) { $model = $this-&gt;findChild($child); if (!$model) { return ''; } $current = $this-&gt;current; $view = $this-&gt;getView(); $return = $view-&gt;render($model); $helper = $this-&gt;getViewModelHelper(); $helper-&gt;setCurrent($current); return $return; } protected function findChild($child) { $this-&gt;current = $model = $this-&gt;getCurrent(); foreach ($model-&gt;getChildren() as $childModel) { if ($childModel-&gt;captureTo() == $child) { return $childModel; } } return false; } protected function getCurrent() { $helper = $this-&gt;getViewModelHelper(); if (!$helper-&gt;hasCurrent()) { throw new Exception\RuntimeException(sprintf( '%s: no view model currently registered in renderer; cannot query for children', __METHOD__ )); } return $helper-&gt;getCurrent(); } protected function getViewModelHelper() { if ($this-&gt;viewModelHelper) { return $this-&gt;viewModelHelper; } $view = $this-&gt;getView(); $this-&gt;viewModelHelper = $view-&gt;plugin('view_model'); return $this-&gt;viewModelHelper; } } &lt;?php
 namespace Zend\View\Helper; use stdClass; use Zend\View; use Zend\View\Exception; class HeadLink extends Placeholder\Container\AbstractStandalone { protected $itemKeys = array('charset', 'href', 'hreflang', 'id', 'media', 'rel', 'rev', 'type', 'title', 'extras'); protected $regKey = 'Zend_View_Helper_HeadLink'; public function __construct() { parent::__construct(); $this-&gt;setSeparator(PHP_EOL); } public function __invoke(array $attributes = null, $placement = Placeholder\Container\AbstractContainer::APPEND) { if (null !== $attributes) { $item = $this-&gt;createData($attributes); switch ($placement) { case Placeholder\Container\AbstractContainer::SET: $this-&gt;set($item); break; case Placeholder\Container\AbstractContainer::PREPEND: $this-&gt;prepend($item); break; case Placeholder\Container\AbstractContainer::APPEND: default: $this-&gt;append($item); break; } } return $this; } public function __call($method, $args) { if (preg_match('/^(?P&lt;action&gt;set|(ap|pre)pend|offsetSet)(?P&lt;type&gt;Stylesheet|Alternate|Prev|Next)$/', $method, $matches)) { $argc = count($args); $action = $matches['action']; $type = $matches['type']; $index = null; if ('offsetSet' == $action) { if (0 &lt; $argc) { $index = array_shift($args); --$argc; } } if (1 &gt; $argc) { throw new Exception\BadMethodCallException(sprintf( '%s requires at least one argument', $method )); } if (is_array($args[0])) { $item = $this-&gt;createData($args[0]); } else { $dataMethod = 'createData' . $type; $item = $this-&gt;$dataMethod($args); } if ($item) { if ('offsetSet' == $action) { $this-&gt;offsetSet($index, $item); } else { $this-&gt;$action($item); } } return $this; } return parent::__call($method, $args); } protected function isValid($value) { if (!$value instanceof stdClass) { return false; } $vars = get_object_vars($value); $keys = array_keys($vars); $intersection = array_intersect($this-&gt;itemKeys, $keys); if (empty($intersection)) { return false; } return true; } public function append($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'append() expects a data token; please use one of the custom append*() methods' ); } return $this-&gt;getContainer()-&gt;append($value); } public function offsetSet($index, $value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'offsetSet() expects a data token; please use one of the custom offsetSet*() methods' ); } return $this-&gt;getContainer()-&gt;offsetSet($index, $value); } public function prepend($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'prepend() expects a data token; please use one of the custom prepend*() methods' ); } return $this-&gt;getContainer()-&gt;prepend($value); } public function set($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'set() expects a data token; please use one of the custom set*() methods' ); } return $this-&gt;getContainer()-&gt;set($value); } public function itemToString(stdClass $item) { $attributes = (array) $item; $link = '&lt;link'; foreach ($this-&gt;itemKeys as $itemKey) { if (isset($attributes[$itemKey])) { if (is_array($attributes[$itemKey])) { foreach ($attributes[$itemKey] as $key =&gt; $value) { $link .= sprintf(' %s="%s"', $key, ($this-&gt;autoEscape) ? $this-&gt;escape($value) : $value); } } else { $link .= sprintf(' %s="%s"', $itemKey, ($this-&gt;autoEscape) ? $this-&gt;escape($attributes[$itemKey]) : $attributes[$itemKey]); } } } if (method_exists($this-&gt;view, 'plugin')) { $link .= ($this-&gt;view-&gt;plugin('doctype')-&gt;isXhtml()) ? ' /&gt;' : '&gt;'; } else { $link .= ' /&gt;'; } if (($link == '&lt;link /&gt;') || ($link == '&lt;link&gt;')) { return ''; } if (isset($attributes['conditionalStylesheet']) &amp;&amp; !empty($attributes['conditionalStylesheet']) &amp;&amp; is_string($attributes['conditionalStylesheet'])) { $link = '&lt;!--[if ' . $attributes['conditionalStylesheet'] . ']&gt; ' . $link . '&lt;![endif]--&gt;'; } return $link; } public function toString($indent = null) { $indent = (null !== $indent) ? $this-&gt;getWhitespace($indent) : $this-&gt;getIndent(); $items = array(); $this-&gt;getContainer()-&gt;ksort(); foreach ($this as $item) { $items[] = $this-&gt;itemToString($item); } return $indent . implode($this-&gt;escape($this-&gt;getSeparator()) . $indent, $items); } public function createData(array $attributes) { $data = (object) $attributes; return $data; } public function createDataStylesheet(array $args) { $rel = 'stylesheet'; $type = 'text/css'; $media = 'screen'; $conditionalStylesheet = false; $href = array_shift($args); if ($this-&gt;isDuplicateStylesheet($href)) { return false; } if (0 &lt; count($args)) { $media = array_shift($args); if (is_array($media)) { $media = implode(',', $media); } else { $media = (string) $media; } } if (0 &lt; count($args)) { $conditionalStylesheet = array_shift($args); if (!empty($conditionalStylesheet) &amp;&amp; is_string($conditionalStylesheet)) { $conditionalStylesheet = (string) $conditionalStylesheet; } else { $conditionalStylesheet = null; } } if (0 &lt; count($args) &amp;&amp; is_array($args[0])) { $extras = array_shift($args); $extras = (array) $extras; } $attributes = compact('rel', 'type', 'href', 'media', 'conditionalStylesheet', 'extras'); return $this-&gt;createData($attributes); } protected function isDuplicateStylesheet($uri) { foreach ($this-&gt;getContainer() as $item) { if (($item-&gt;rel == 'stylesheet') &amp;&amp; ($item-&gt;href == $uri)) { return true; } } return false; } public function createDataAlternate(array $args) { if (3 &gt; count($args)) { throw new Exception\InvalidArgumentException(sprintf( 'Alternate tags require 3 arguments; %s provided', count($args) )); } $rel = 'alternate'; $href = array_shift($args); $type = array_shift($args); $title = array_shift($args); if (0 &lt; count($args) &amp;&amp; is_array($args[0])) { $extras = array_shift($args); $extras = (array) $extras; if (isset($extras['media']) &amp;&amp; is_array($extras['media'])) { $extras['media'] = implode(',', $extras['media']); } } $href = (string) $href; $type = (string) $type; $title = (string) $title; $attributes = compact('rel', 'href', 'type', 'title', 'extras'); return $this-&gt;createData($attributes); } public function createDataPrev(array $args) { $rel = 'prev'; $href = (string) array_shift($args); $attributes = compact('rel', 'href'); return $this-&gt;createData($attributes); } public function createDataNext(array $args) { $rel = 'next'; $href = (string) array_shift($args); $attributes = compact('rel', 'href'); return $this-&gt;createData($attributes); } } &lt;?php
 namespace Zend\View\Helper; use stdClass; use Zend\View; use Zend\View\Exception; class HeadStyle extends Placeholder\Container\AbstractStandalone { protected $regKey = 'Zend_View_Helper_HeadStyle'; protected $optionalAttributes = array('lang', 'title', 'media', 'dir'); protected $mediaTypes = array( 'all', 'aural', 'braille', 'handheld', 'print', 'projection', 'screen', 'tty', 'tv' ); protected $captureAttrs = null; protected $captureLock; protected $captureType; public function __construct() { parent::__construct(); $this-&gt;setSeparator(PHP_EOL); } public function __invoke($content = null, $placement = 'APPEND', $attributes = array()) { if ((null !== $content) &amp;&amp; is_string($content)) { switch (strtoupper($placement)) { case 'SET': $action = 'setStyle'; break; case 'PREPEND': $action = 'prependStyle'; break; case 'APPEND': default: $action = 'appendStyle'; break; } $this-&gt;$action($content, $attributes); } return $this; } public function __call($method, $args) { if (preg_match('/^(?P&lt;action&gt;set|(ap|pre)pend|offsetSet)(Style)$/', $method, $matches)) { $index = null; $argc = count($args); $action = $matches['action']; if ('offsetSet' == $action) { if (0 &lt; $argc) { $index = array_shift($args); --$argc; } } if (1 &gt; $argc) { throw new Exception\BadMethodCallException(sprintf( 'Method "%s" requires minimally content for the stylesheet', $method )); } $content = $args[0]; $attrs = array(); if (isset($args[1])) { $attrs = (array) $args[1]; } $item = $this-&gt;createData($content, $attrs); if ('offsetSet' == $action) { $this-&gt;offsetSet($index, $item); } else { $this-&gt;$action($item); } return $this; } return parent::__call($method, $args); } protected function isValid($value) { if ((!$value instanceof stdClass) || !isset($value-&gt;content) || !isset($value-&gt;attributes)) { return false; } return true; } public function append($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid value passed to append; please use appendStyle()' ); } return $this-&gt;getContainer()-&gt;append($value); } public function offsetSet($index, $value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid value passed to offsetSet; please use offsetSetStyle()' ); } return $this-&gt;getContainer()-&gt;offsetSet($index, $value); } public function prepend($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException( 'Invalid value passed to prepend; please use prependStyle()' ); } return $this-&gt;getContainer()-&gt;prepend($value); } public function set($value) { if (!$this-&gt;isValid($value)) { throw new Exception\InvalidArgumentException('Invalid value passed to set; please use setStyle()'); } return $this-&gt;getContainer()-&gt;set($value); } public function captureStart($type = Placeholder\Container\AbstractContainer::APPEND, $attrs = null) { if ($this-&gt;captureLock) { throw new Exception\RuntimeException('Cannot nest headStyle captures'); } $this-&gt;captureLock = true; $this-&gt;captureAttrs = $attrs; $this-&gt;captureType = $type; ob_start(); } public function captureEnd() { $content = ob_get_clean(); $attrs = $this-&gt;captureAttrs; $this-&gt;captureAttrs = null; $this-&gt;captureLock = false; switch ($this-&gt;captureType) { case Placeholder\Container\AbstractContainer::SET: $this-&gt;setStyle($content, $attrs); break; case Placeholder\Container\AbstractContainer::PREPEND: $this-&gt;prependStyle($content, $attrs); break; case Placeholder\Container\AbstractContainer::APPEND: default: $this-&gt;appendStyle($content, $attrs); break; } } public function itemToString(stdClass $item, $indent) { $attrString = ''; if (!empty($item-&gt;attributes)) { $enc = 'UTF-8'; if ($this-&gt;view instanceof View\Renderer\RendererInterface &amp;&amp; method_exists($this-&gt;view, 'getEncoding') ) { $enc = $this-&gt;view-&gt;getEncoding(); } $escaper = $this-&gt;getEscaper($enc); foreach ($item-&gt;attributes as $key =&gt; $value) { if (!in_array($key, $this-&gt;optionalAttributes)) { continue; } if ('media' == $key) { if (false === strpos($value, ',')) { if (!in_array($value, $this-&gt;mediaTypes)) { continue; } } else { $mediaTypes = explode(',', $value); $value = ''; foreach ($mediaTypes as $type) { $type = trim($type); if (!in_array($type, $this-&gt;mediaTypes)) { continue; } $value .= $type .','; } $value = substr($value, 0, -1); } } $attrString .= sprintf(' %s="%s"', $key, $escaper-&gt;escapeHtmlAttr($value)); } } $escapeStart = $indent . '&lt;!--' . PHP_EOL; $escapeEnd = $indent . '--&gt;' . PHP_EOL; if (isset($item-&gt;attributes['conditional']) &amp;&amp; !empty($item-&gt;attributes['conditional']) &amp;&amp; is_string($item-&gt;attributes['conditional']) ) { $escapeStart = null; $escapeEnd = null; } $html = '&lt;style type="text/css"' . $attrString . '&gt;' . PHP_EOL . $escapeStart . $indent . $item-&gt;content . PHP_EOL . $escapeEnd . '&lt;/style&gt;'; if (null == $escapeStart &amp;&amp; null == $escapeEnd) { $html = '&lt;!--[if ' . $item-&gt;attributes['conditional'] . ']&gt; ' . $html . '&lt;![endif]--&gt;'; } return $html; } public function toString($indent = null) { $indent = (null !== $indent) ? $this-&gt;getWhitespace($indent) : $this-&gt;getIndent(); $items = array(); $this-&gt;getContainer()-&gt;ksort(); foreach ($this as $item) { if (!$this-&gt;isValid($item)) { continue; } $items[] = $this-&gt;itemToString($item, $indent); } $return = $indent . implode($this-&gt;getSeparator() . $indent, $items); $return = preg_replace("/(\r\n?|\n)/", '$1' . $indent, $return); return $return; } public function createData($content, array $attributes) { if (!isset($attributes['media'])) { $attributes['media'] = 'screen'; } elseif (is_array($attributes['media'])) { $attributes['media'] = implode(',', $attributes['media']); } $data = new stdClass(); $data-&gt;content = $content; $data-&gt;attributes = $attributes; return $data; } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Exception; class Gravatar extends AbstractHtmlElement { const GRAVATAR_URL = 'http://www.gravatar.com/avatar'; const GRAVATAR_URL_SECURE = 'https://secure.gravatar.com/avatar'; const RATING_G = 'g'; const RATING_PG = 'pg'; const RATING_R = 'r'; const RATING_X = 'x'; const DEFAULT_404 = '404'; const DEFAULT_MM = 'mm'; const DEFAULT_IDENTICON = 'identicon'; const DEFAULT_MONSTERID = 'monsterid'; const DEFAULT_WAVATAR = 'wavatar'; protected $options = array( 'img_size' =&gt; 80, 'default_img' =&gt; self::DEFAULT_MM, 'rating' =&gt; self::RATING_G, 'secure' =&gt; null, ); protected $email; protected $attribs; public function __invoke($email = "", $options = array(), $attribs = array()) { if (!empty($email)) { $this-&gt;setEmail($email); } if (!empty($options)) { $this-&gt;setOptions($options); } if (!empty($attribs)) { $this-&gt;setAttribs($attribs); } return $this; } public function setOptions(array $options) { foreach ($options as $key =&gt; $value) { $method = 'set' . str_replace(' ', '', ucwords(str_replace('_', ' ', $key))); if (method_exists($this, $method)) { $this-&gt;{$method}($value); } } return $this; } public function getImgSize() { return $this-&gt;options['img_size']; } public function setImgSize($imgSize) { $this-&gt;options['img_size'] = (int) $imgSize; return $this; } public function getDefaultImg() { return $this-&gt;options['default_img']; } public function setDefaultImg($defaultImg) { $this-&gt;options['default_img'] = urlencode($defaultImg); return $this; } public function setRating($rating) { switch ($rating) { case self::RATING_G: case self::RATING_PG: case self::RATING_R: case self::RATING_X: $this-&gt;options['rating'] = $rating; break; default: throw new Exception\DomainException(sprintf( 'The rating value "%s" is not allowed', $rating )); } return $this; } public function getRating() { return $this-&gt;options['rating']; } public function setEmail( $email ) { $this-&gt;email = $email; return $this; } public function getEmail() { return $this-&gt;email; } public function setSecure($flag) { $this-&gt;options['secure'] = ($flag === null) ? null : (bool) $flag; return $this; } public function getSecure() { if ($this-&gt;options['secure'] === null) { return (isset($_SERVER['HTTPS']) &amp;&amp; $_SERVER['HTTPS'] !== 'off'); } return $this-&gt;options['secure']; } public function getAttribs() { return $this-&gt;attribs; } public function setAttribs(array $attribs) { $this-&gt;attribs = $attribs; return $this; } protected function getGravatarUrl() { return ($this-&gt;getSecure() === false) ? self::GRAVATAR_URL : self::GRAVATAR_URL_SECURE; } protected function getAvatarUrl() { $src = $this-&gt;getGravatarUrl() . '/' . md5($this-&gt;getEmail()) . '?s=' . $this-&gt;getImgSize() . '&amp;d=' . $this-&gt;getDefaultImg() . '&amp;r=' . $this-&gt;getRating(); return $src; } protected function setSrcAttribForImg() { $attribs = $this-&gt;getAttribs(); $attribs['src'] = $this-&gt;getAvatarUrl(); $this-&gt;setAttribs($attribs); } public function getImgTag() { $this-&gt;setSrcAttribForImg(); $html = '&lt;img' . $this-&gt;htmlAttribs($this-&gt;getAttribs()) . $this-&gt;getClosingBracket(); return $html; } public function __toString() { return $this-&gt;getImgTag(); } } &lt;?php
 namespace Zend\View\Helper; use Zend\View\Helper\Escaper; class EscapeHtmlAttr extends Escaper\AbstractHelper { protected function escape($value) { return $this-&gt;getEscaper()-&gt;escapeHtmlAttr($value); } } &lt;?php
 namespace Zend\View\Helper\Placeholder\Container; use Zend\View\Exception; abstract class AbstractContainer extends \ArrayObject { const SET = 'SET'; const APPEND = 'APPEND'; const PREPEND = 'PREPEND'; protected $prefix = ''; protected $postfix = ''; protected $separator = ''; protected $indent = ''; protected $captureLock = false; protected $captureType; protected $captureKey; public function __construct() { parent::__construct(array(), parent::ARRAY_AS_PROPS); } public function set($value) { $this-&gt;exchangeArray(array($value)); return $this; } public function prepend($value) { $values = $this-&gt;getArrayCopy(); array_unshift($values, $value); $this-&gt;exchangeArray($values); return $this; } public function getValue() { if (1 == count($this)) { $keys = $this-&gt;getKeys(); $key = array_shift($keys); return $this[$key]; } return $this-&gt;getArrayCopy(); } public function setPrefix($prefix) { $this-&gt;prefix = (string) $prefix; return $this; } public function getPrefix() { return $this-&gt;prefix; } public function setPostfix($postfix) { $this-&gt;postfix = (string) $postfix; return $this; } public function getPostfix() { return $this-&gt;postfix; } public function setSeparator($separator) { $this-&gt;separator = (string) $separator; return $this; } public function getSeparator() { return $this-&gt;separator; } public function setIndent($indent) { $this-&gt;indent = $this-&gt;getWhitespace($indent); return $this; } public function getIndent() { return $this-&gt;indent; } public function getWhitespace($indent) { if (is_int($indent)) { $indent = str_repeat(' ', $indent); } return (string) $indent; } public function captureStart($type = AbstractContainer::APPEND, $key = null) { if ($this-&gt;captureLock) { throw new Exception\RuntimeException( 'Cannot nest placeholder captures for the same placeholder' ); } $this-&gt;captureLock = true; $this-&gt;captureType = $type; if ((null !== $key) &amp;&amp; is_scalar($key)) { $this-&gt;captureKey = (string) $key; } ob_start(); } public function captureEnd() { $data = ob_get_clean(); $key = null; $this-&gt;captureLock = false; if (null !== $this-&gt;captureKey) { $key = $this-&gt;captureKey; } switch ($this-&gt;captureType) { case self::SET: if (null !== $key) { $this[$key] = $data; } else { $this-&gt;exchangeArray(array($data)); } break; case self::PREPEND: if (null !== $key) { $array = array($key =&gt; $data); $values = $this-&gt;getArrayCopy(); $final = $array + $values; $this-&gt;exchangeArray($final); } else { $this-&gt;prepend($data); } break; case self::APPEND: default: if (null !== $key) { if (empty($this[$key])) { $this[$key] = $data; } else { $this[$key] .= $data; } } else { $this[$this-&gt;nextIndex()] = $data; } break; } } public function getKeys() { $array = $this-&gt;getArrayCopy(); return array_keys($array); } public function nextIndex() { $keys = $this-&gt;getKeys(); if (0 == count($keys)) { return 0; } return $nextIndex = max($keys) + 1; } public function toString($indent = null) { $indent = ($indent !== null) ? $this-&gt;getWhitespace($indent) : $this-&gt;getIndent(); $items = $this-&gt;getArrayCopy(); $return = $indent . $this-&gt;getPrefix() . implode($this-&gt;getSeparator(), $items) . $this-&gt;getPostfix(); $return = preg_replace("/(\r\n?|\n)/", '$1' . $indent, $return); return $return; } public function __toString() { return $this-&gt;toString(); } } &lt;?php
 namespace Zend\View\Helper\Placeholder\Container; use Zend\Escaper\Escaper; use Zend\View\Exception; use Zend\View\Helper\Placeholder\Registry; use Zend\View\Renderer\RendererInterface; abstract class AbstractStandalone extends \Zend\View\Helper\AbstractHelper implements \IteratorAggregate, \Countable, \ArrayAccess { protected $container; protected $escapers = array(); protected $registry; protected $regKey; protected $autoEscape = true; public function __construct() { $this-&gt;setRegistry(Registry::getRegistry()); $this-&gt;setContainer($this-&gt;getRegistry()-&gt;getContainer($this-&gt;regKey)); } public function getRegistry() { return $this-&gt;registry; } public function setRegistry(Registry $registry) { $this-&gt;registry = $registry; return $this; } public function setEscaper(Escaper $escaper) { $encoding = $escaper-&gt;getEncoding(); $this-&gt;escapers[$encoding] = $escaper; return $this; } public function getEscaper($enc = 'UTF-8') { $enc = strtolower($enc); if (!isset($this-&gt;escapers[$enc])) { $this-&gt;setEscaper(new Escaper($enc)); } return $this-&gt;escapers[$enc]; } public function setAutoEscape($autoEscape = true) { $this-&gt;autoEscape = ($autoEscape) ? true : false; return $this; } public function getAutoEscape() { return $this-&gt;autoEscape; } protected function escape($string) { if ($this-&gt;view instanceof RendererInterface &amp;&amp; method_exists($this-&gt;view, 'getEncoding') ) { $enc = $this-&gt;view-&gt;getEncoding(); $escaper = $this-&gt;view-&gt;plugin('escapeHtml'); return $escaper((string) $string); } $escaper = $this-&gt;getEscaper(); return $escaper-&gt;escapeHtml((string) $string); } public function setContainer(AbstractContainer $container) { $this-&gt;container = $container; return $this; } public function getContainer() { return $this-&gt;container; } public function __set($key, $value) { $container = $this-&gt;getContainer(); $container[$key] = $value; } public function __get($key) { $container = $this-&gt;getContainer(); if (isset($container[$key])) { return $container[$key]; } return null; } public function __isset($key) { $container = $this-&gt;getContainer(); return isset($container[$key]); } public function __unset($key) { $container = $this-&gt;getContainer(); if (isset($container[$key])) { unset($container[$key]); } } public function __call($method, $args) { $container = $this-&gt;getContainer(); if (method_exists($container, $method)) { $return = call_user_func_array(array($container, $method), $args); if ($return === $container) { return $this; } return $return; } throw new Exception\BadMethodCallException('Method "' . $method . '" does not exist'); } public function toString() { return $this-&gt;getContainer()-&gt;toString(); } public function __toString() { return $this-&gt;toString(); } public function count() { $container = $this-&gt;getContainer(); return count($container); } public function offsetExists($offset) { return $this-&gt;getContainer()-&gt;offsetExists($offset); } public function offsetGet($offset) { return $this-&gt;getContainer()-&gt;offsetGet($offset); } public function offsetSet($offset, $value) { return $this-&gt;getContainer()-&gt;offsetSet($offset, $value); } public function offsetUnset($offset) { return $this-&gt;getContainer()-&gt;offsetUnset($offset); } public function getIterator() { return $this-&gt;getContainer()-&gt;getIterator(); } } &lt;?php
 namespace Zend\View\Helper\Placeholder; class Container extends Container\AbstractContainer { } &lt;?php
 namespace Zend\View\Helper\Placeholder; use Zend\View\Exception; class Registry { protected static $instance; protected $containerClass = 'Zend\View\Helper\Placeholder\Container'; protected $items = array(); public static function getRegistry() { if (null === static::$instance) { static::$instance = new static(); } return static::$instance; } public static function unsetRegistry() { static::$instance = null; } public function createContainer($key, array $value = array()) { $key = (string) $key; $this-&gt;items[$key] = new $this-&gt;containerClass($value); return $this-&gt;items[$key]; } public function getContainer($key) { $key = (string) $key; if (isset($this-&gt;items[$key])) { return $this-&gt;items[$key]; } $container = $this-&gt;createContainer($key); return $container; } public function containerExists($key) { $key = (string) $key; $return = array_key_exists($key, $this-&gt;items); return $return; } public function setContainer($key, Container\AbstractContainer $container) { $key = (string) $key; $this-&gt;items[$key] = $container; return $this; } public function deleteContainer($key) { $key = (string) $key; if (isset($this-&gt;items[$key])) { unset($this-&gt;items[$key]); return true; } return false; } public function setContainerClass($name) { if (!class_exists($name)) { throw new Exception\DomainException( sprintf('%s expects a valid registry class name; received "%s", which did not resolve', __METHOD__, $name )); } if (!in_array('Zend\View\Helper\Placeholder\Container\AbstractContainer', class_parents($name))) { throw new Exception\InvalidArgumentException('Invalid Container class specified'); } $this-&gt;containerClass = $name; return $this; } public function getContainerClass() { return $this-&gt;containerClass; } } &lt;?php
 namespace Zend\View\Helper\Escaper; use Zend\Escaper; use Zend\View\Exception; use Zend\View\Helper; abstract class AbstractHelper extends Helper\AbstractHelper { const RECURSE_NONE = 0x00; const RECURSE_ARRAY = 0x01; const RECURSE_OBJECT = 0x02; protected $escaper = null; protected $encoding = 'UTF-8'; public function setEscaper(Escaper\Escaper $escaper) { $this-&gt;escaper = $escaper; $this-&gt;encoding = $escaper-&gt;getEncoding(); return $this; } public function getEscaper() { if (null === $this-&gt;escaper) { $this-&gt;setEscaper(new Escaper\Escaper($this-&gt;getEncoding())); } return $this-&gt;escaper; } public function setEncoding($encoding) { if (null !== $this-&gt;escaper) { throw new Exception\InvalidArgumentException( 'Character encoding settings cannot be changed once the Helper has been used or ' . ' if a Zend\Escaper\Escaper object (with preset encoding option) is set.' ); } $this-&gt;encoding = $encoding; return $this; } public function getEncoding() { return $this-&gt;encoding; } public function __invoke($value, $recurse = self::RECURSE_NONE) { if (is_string($value)) { return $this-&gt;escape($value); } if (is_array($value)) { if (!(self::RECURSE_ARRAY &amp; $recurse)) { throw new Exception\InvalidArgumentException( 'Array provided to Escape helper, but flags do not allow recursion' ); } foreach ($value as $k =&gt; $v) { $value[$k] = $this-&gt;__invoke($v, $recurse); } return $value; } if (is_object($value)) { if (!(self::RECURSE_OBJECT &amp; $recurse)) { if (method_exists($value, '__toString')) { return $this-&gt;escape((string) $value); } throw new Exception\InvalidArgumentException( 'Object provided to Escape helper, but flags do not allow recursion' ); } if (method_exists($value, 'toArray')) { return $this-&gt;__invoke($value-&gt;toArray(), $recurse | self::RECURSE_ARRAY); } return $this-&gt;__invoke((array) $value, $recurse | self::RECURSE_ARRAY); } return $value; } abstract protected function escape($value); } &lt;?php
 namespace Zend\View; use ArrayAccess; use Zend\EventManager\Event; use Zend\Stdlib\RequestInterface as Request; use Zend\Stdlib\ResponseInterface as Response; use Zend\View\Model\ModelInterface as Model; use Zend\View\Renderer\RendererInterface as Renderer; class ViewEvent extends Event { const EVENT_RENDERER = 'renderer'; const EVENT_RENDERER_POST = 'renderer.post'; const EVENT_RESPONSE = 'response'; protected $model; protected $renderer; protected $request; protected $response; protected $result; public function setModel(Model $model) { $this-&gt;model = $model; return $this; } public function setRequest(Request $request) { $this-&gt;request = $request; return $this; } public function setResponse(Response $response) { $this-&gt;response = $response; return $this; } public function setResult($result) { $this-&gt;result = $result; return $this; } public function getModel() { return $this-&gt;model; } public function setRenderer(Renderer $renderer) { $this-&gt;renderer = $renderer; return $this; } public function getRenderer() { return $this-&gt;renderer; } public function getRequest() { return $this-&gt;request; } public function getResponse() { return $this-&gt;response; } public function getResult() { return $this-&gt;result; } public function getParam($name, $default = null) { switch ($name) { case 'model': return $this-&gt;getModel(); case 'renderer': return $this-&gt;getRenderer(); case 'request': return $this-&gt;getRequest(); case 'response': return $this-&gt;getResponse(); case 'result': return $this-&gt;getResult(); default: return parent::getParam($name, $default); } } public function getParams() { $params = parent::getParams(); $params['model'] = $this-&gt;getModel(); $params['renderer'] = $this-&gt;getRenderer(); $params['request'] = $this-&gt;getRequest(); $params['response'] = $this-&gt;getResponse(); $params['result'] = $this-&gt;getResult(); return $params; } public function setParams($params) { parent::setParams($params); if (!is_array($params) &amp;&amp; !$params instanceof ArrayAccess) { return $this; } foreach (array('model', 'renderer', 'request', 'response', 'result') as $param) { if (isset($params[$param])) { $method = 'set' . $param; $this-&gt;$method($params[$param]); } } return $this; } public function setParam($name, $value) { switch ($name) { case 'model': $this-&gt;setModel($value); break; case 'renderer': $this-&gt;setRenderer($value); break; case 'request': $this-&gt;setRequest($value); break; case 'response': $this-&gt;setResponse($value); break; case 'result': $this-&gt;setResult($value); break; default: parent::setParam($name, $value); break; } return $this; } } &lt;?php
 namespace Zend\View; use Zend\I18n\Translator\TranslatorAwareInterface; use Zend\ServiceManager\AbstractPluginManager; use Zend\ServiceManager\ConfigInterface; class HelperPluginManager extends AbstractPluginManager { protected $factories = array( 'flashmessenger' =&gt; 'Zend\View\Helper\Service\FlashMessengerFactory', ); protected $invokableClasses = array( 'doctype' =&gt; 'Zend\View\Helper\Doctype', 'basepath' =&gt; 'Zend\View\Helper\BasePath', 'url' =&gt; 'Zend\View\Helper\Url', 'cycle' =&gt; 'Zend\View\Helper\Cycle', 'declarevars' =&gt; 'Zend\View\Helper\DeclareVars', 'escapehtml' =&gt; 'Zend\View\Helper\EscapeHtml', 'escapehtmlattr' =&gt; 'Zend\View\Helper\EscapeHtmlAttr', 'escapejs' =&gt; 'Zend\View\Helper\EscapeJs', 'escapecss' =&gt; 'Zend\View\Helper\EscapeCss', 'escapeurl' =&gt; 'Zend\View\Helper\EscapeUrl', 'gravatar' =&gt; 'Zend\View\Helper\Gravatar', 'headlink' =&gt; 'Zend\View\Helper\HeadLink', 'headmeta' =&gt; 'Zend\View\Helper\HeadMeta', 'headscript' =&gt; 'Zend\View\Helper\HeadScript', 'headstyle' =&gt; 'Zend\View\Helper\HeadStyle', 'headtitle' =&gt; 'Zend\View\Helper\HeadTitle', 'htmlflash' =&gt; 'Zend\View\Helper\HtmlFlash', 'htmllist' =&gt; 'Zend\View\Helper\HtmlList', 'htmlobject' =&gt; 'Zend\View\Helper\HtmlObject', 'htmlpage' =&gt; 'Zend\View\Helper\HtmlPage', 'htmlquicktime' =&gt; 'Zend\View\Helper\HtmlQuicktime', 'inlinescript' =&gt; 'Zend\View\Helper\InlineScript', 'json' =&gt; 'Zend\View\Helper\Json', 'layout' =&gt; 'Zend\View\Helper\Layout', 'paginationcontrol' =&gt; 'Zend\View\Helper\PaginationControl', 'partialloop' =&gt; 'Zend\View\Helper\PartialLoop', 'partial' =&gt; 'Zend\View\Helper\Partial', 'placeholder' =&gt; 'Zend\View\Helper\Placeholder', 'renderchildmodel' =&gt; 'Zend\View\Helper\RenderChildModel', 'rendertoplaceholder' =&gt; 'Zend\View\Helper\RenderToPlaceholder', 'serverurl' =&gt; 'Zend\View\Helper\ServerUrl', 'viewmodel' =&gt; 'Zend\View\Helper\ViewModel', ); protected $renderer; public function __construct(ConfigInterface $configuration = null) { parent::__construct($configuration); $this-&gt;setFactory('identity', function ($helpers) { $services = $helpers-&gt;getServiceLocator(); $helper = new Helper\Identity(); if (!$services-&gt;has('Zend\Authentication\AuthenticationService')) { return $helper; } $helper-&gt;setAuthenticationService($services-&gt;get('Zend\Authentication\AuthenticationService')); return $helper; }); $this-&gt;addInitializer(array($this, 'injectRenderer')) -&gt;addInitializer(array($this, 'injectTranslator')); } public function setRenderer(Renderer\RendererInterface $renderer) { $this-&gt;renderer = $renderer; return $this; } public function getRenderer() { return $this-&gt;renderer; } public function injectRenderer($helper) { $renderer = $this-&gt;getRenderer(); if (null === $renderer) { return; } $helper-&gt;setView($renderer); } public function injectTranslator($helper) { if ($helper instanceof TranslatorAwareInterface) { $locator = $this-&gt;getServiceLocator(); if ($locator &amp;&amp; $locator-&gt;has('translator')) { $helper-&gt;setTranslator($locator-&gt;get('translator')); } } } public function validatePlugin($plugin) { if ($plugin instanceof Helper\HelperInterface) { return; } throw new Exception\InvalidHelperException(sprintf( 'Plugin of type %s is invalid; must implement %s\Helper\HelperInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\View\Model; use Traversable; use Zend\Json\Json; use Zend\Stdlib\ArrayUtils; class JsonModel extends ViewModel { protected $captureTo = null; protected $jsonpCallback = null; protected $terminate = true; public function setJsonpCallback($callback) { $this-&gt;jsonpCallback = $callback; return $this; } public function serialize() { $variables = $this-&gt;getVariables(); if ($variables instanceof Traversable) { $variables = ArrayUtils::iteratorToArray($variables); } if (null !== $this-&gt;jsonpCallback) { return $this-&gt;jsonpCallback.'('.Json::encode($variables).');'; } return Json::encode($variables); } } &lt;?php
 namespace Zend\View\Model; use Countable; use IteratorAggregate; interface ModelInterface extends Countable, IteratorAggregate { public function setOption($name, $value); public function setOptions($options); public function getOptions(); public function getVariable($name, $default = null); public function setVariable($name, $value); public function setVariables($variables); public function getVariables(); public function setTemplate($template); public function getTemplate(); public function addChild(ModelInterface $child, $captureTo = null, $append = false); public function getChildren(); public function hasChildren(); public function setCaptureTo($capture); public function captureTo(); public function setTerminal($terminate); public function terminate(); public function setAppend($append); public function isAppend(); } &lt;?php
 namespace Zend\View\Model; use Zend\Feed\Writer\Feed; use Zend\Feed\Writer\FeedFactory; class FeedModel extends ViewModel { protected $feed; protected $type = false; protected $terminate = true; public function getFeed() { if ($this-&gt;feed instanceof Feed) { return $this-&gt;feed; } if (!$this-&gt;type) { $options = $this-&gt;getOptions(); if (isset($options['feed_type'])) { $this-&gt;type = $options['feed_type']; } } $variables = $this-&gt;getVariables(); $feed = FeedFactory::factory($variables); $this-&gt;setFeed($feed); return $this-&gt;feed; } public function setFeed(Feed $feed) { $this-&gt;feed = $feed; return $this; } public function getFeedType() { if ($this-&gt;type) { return $this-&gt;type; } $options = $this-&gt;getOptions(); if (isset($options['feed_type'])) { $this-&gt;type = $options['feed_type']; } return $this-&gt;type; } } &lt;?php
 namespace Zend\View\Model; use ArrayAccess; use ArrayIterator; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\View\Exception; use Zend\View\Model; use Zend\View\Variables as ViewVariables; class ViewModel implements ModelInterface, ClearableModelInterface { protected $captureTo = 'content'; protected $children = array(); protected $options = array(); protected $template = ''; protected $terminate = false; protected $variables = array(); protected $append = false; public function __construct($variables = null, $options = null) { if (null === $variables) { $variables = new ViewVariables(); } $this-&gt;setVariables($variables, true); if (null !== $options) { $this-&gt;setOptions($options); } } public function __set($name, $value) { $this-&gt;setVariable($name, $value); } public function __get($name) { if (!$this-&gt;__isset($name)) { return null; } $variables = $this-&gt;getVariables(); return $variables[$name]; } public function __isset($name) { $variables = $this-&gt;getVariables(); return isset($variables[$name]); } public function __unset($name) { if (!$this-&gt;__isset($name)) { return null; } unset($this-&gt;variables[$name]); } public function setOption($name, $value) { $this-&gt;options[(string) $name] = $value; return $this; } public function getOption($name, $default = null) { $name = (string) $name; return array_key_exists($name, $this-&gt;options) ? $this-&gt;options[$name] : $default; } public function setOptions($options) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects an array, or Traversable argument; received "%s"', __METHOD__, (is_object($options) ? get_class($options) : gettype($options)) )); } $this-&gt;options = $options; return $this; } public function getOptions() { return $this-&gt;options; } public function clearOptions() { $this-&gt;options = array(); return $this; } public function getVariable($name, $default = null) { $name = (string) $name; if (array_key_exists($name, $this-&gt;variables)) { return $this-&gt;variables[$name]; } return $default; } public function setVariable($name, $value) { $this-&gt;variables[(string) $name] = $value; return $this; } public function setVariables($variables, $overwrite = false) { if (!is_array($variables) &amp;&amp; !$variables instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects an array, or Traversable argument; received "%s"', __METHOD__, (is_object($variables) ? get_class($variables) : gettype($variables)) )); } if ($overwrite) { if (is_object($variables) &amp;&amp; !$variables instanceof ArrayAccess) { $variables = ArrayUtils::iteratorToArray($variables); } $this-&gt;variables = $variables; return $this; } foreach ($variables as $key =&gt; $value) { $this-&gt;setVariable($key, $value); } return $this; } public function getVariables() { return $this-&gt;variables; } public function clearVariables() { $this-&gt;variables = new ViewVariables(); return $this; } public function setTemplate($template) { $this-&gt;template = (string) $template; return $this; } public function getTemplate() { return $this-&gt;template; } public function addChild(ModelInterface $child, $captureTo = null, $append = null) { $this-&gt;children[] = $child; if (null !== $captureTo) { $child-&gt;setCaptureTo($captureTo); } if (null !== $append) { $child-&gt;setAppend($append); } return $this; } public function getChildren() { return $this-&gt;children; } public function hasChildren() { return (0 &lt; count($this-&gt;children)); } public function clearChildren() { $this-&gt;children = array(); return $this; } public function setCaptureTo($capture) { $this-&gt;captureTo = (string) $capture; return $this; } public function captureTo() { return $this-&gt;captureTo; } public function setTerminal($terminate) { $this-&gt;terminate = (bool) $terminate; return $this; } public function terminate() { return $this-&gt;terminate; } public function setAppend($append) { $this-&gt;append = (bool) $append; return $this; } public function isAppend() { return $this-&gt;append; } public function count() { return count($this-&gt;children); } public function getIterator() { return new ArrayIterator($this-&gt;children); } } &lt;?php
 namespace Zend\View\Model; interface ClearableModelInterface { public function clearChildren(); public function clearOptions(); public function clearVariables(); } &lt;?php
 namespace Zend\View\Model; class ConsoleModel extends ViewModel { const RESULT = 'result'; protected $captureTo = null; protected $terminate = true; public function setErrorLevel($errorLevel) { $this-&gt;options['errorLevel'] = $errorLevel; } public function getErrorLevel() { if (array_key_exists('errorLevel', $this-&gt;options)) { return $this-&gt;options['errorLevel']; } } public function setResult($text) { $this-&gt;setVariable(self::RESULT, $text); return $this; } public function getResult() { return $this-&gt;getVariable(self::RESULT); } } &lt;?php
 namespace Zend\View\Strategy; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Http\Request as HttpRequest; use Zend\View\Model; use Zend\View\Renderer\JsonRenderer; use Zend\View\ViewEvent; class JsonStrategy implements ListenerAggregateInterface { protected $charset = 'utf-8'; protected $listeners = array(); protected $multibyteCharsets = array( 'UTF-16', 'UTF-32', ); protected $renderer; public function __construct(JsonRenderer $renderer) { $this-&gt;renderer = $renderer; } public function attach(EventManagerInterface $events, $priority = 1) { $this-&gt;listeners[] = $events-&gt;attach(ViewEvent::EVENT_RENDERER, array($this, 'selectRenderer'), $priority); $this-&gt;listeners[] = $events-&gt;attach(ViewEvent::EVENT_RESPONSE, array($this, 'injectResponse'), $priority); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function setCharset($charset) { $this-&gt;charset = (string) $charset; return $this; } public function getCharset() { return $this-&gt;charset; } public function selectRenderer(ViewEvent $e) { $model = $e-&gt;getModel(); if (!$model instanceof Model\JsonModel) { return; } return $this-&gt;renderer; } public function injectResponse(ViewEvent $e) { $renderer = $e-&gt;getRenderer(); if ($renderer !== $this-&gt;renderer) { return; } $result = $e-&gt;getResult(); if (!is_string($result)) { return; } $response = $e-&gt;getResponse(); $response-&gt;setContent($result); $headers = $response-&gt;getHeaders(); if ($this-&gt;renderer-&gt;hasJsonpCallback()) { $contentType = 'application/javascript'; } else { $contentType = 'application/json'; } $contentType .= '; charset=' . $this-&gt;charset; $headers-&gt;addHeaderLine('content-type', $contentType); if (in_array(strtoupper($this-&gt;charset), $this-&gt;multibyteCharsets)) { $headers-&gt;addHeaderLine('content-transfer-encoding', 'BINARY'); } } } &lt;?php
 namespace Zend\View\Strategy; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\Feed\Writer\Feed; use Zend\Http\Request as HttpRequest; use Zend\View\Model; use Zend\View\Renderer\FeedRenderer; use Zend\View\ViewEvent; class FeedStrategy implements ListenerAggregateInterface { protected $listeners = array(); protected $renderer; public function __construct(FeedRenderer $renderer) { $this-&gt;renderer = $renderer; } public function attach(EventManagerInterface $events, $priority = 1) { $this-&gt;listeners[] = $events-&gt;attach(ViewEvent::EVENT_RENDERER, array($this, 'selectRenderer'), $priority); $this-&gt;listeners[] = $events-&gt;attach(ViewEvent::EVENT_RESPONSE, array($this, 'injectResponse'), $priority); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function selectRenderer(ViewEvent $e) { $model = $e-&gt;getModel(); if (!$model instanceof Model\FeedModel) { return; } return $this-&gt;renderer; } public function injectResponse(ViewEvent $e) { $renderer = $e-&gt;getRenderer(); if ($renderer !== $this-&gt;renderer) { return; } $result = $e-&gt;getResult(); if (!is_string($result) &amp;&amp; !$result instanceof Feed) { return; } if ($result instanceof Feed) { $result = $result-&gt;export($renderer-&gt;getFeedType()); } $feedType = $renderer-&gt;getFeedType(); $feedType = ('rss' == $feedType) ? 'application/rss+xml' : 'application/atom+xml'; $model = $e-&gt;getModel(); $charset = ''; if ($model instanceof Model\FeedModel) { $feed = $model-&gt;getFeed(); $charset = '; charset=' . $feed-&gt;getEncoding() . ';'; } $response = $e-&gt;getResponse(); $response-&gt;setContent($result); $headers = $response-&gt;getHeaders(); $headers-&gt;addHeaderLine('content-type', $feedType . $charset); } } &lt;?php
 namespace Zend\View\Strategy; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\View\Renderer\PhpRenderer; use Zend\View\ViewEvent; class PhpRendererStrategy implements ListenerAggregateInterface { protected $listeners = array(); protected $contentPlaceholders = array('article', 'content'); protected $renderer; public function __construct(PhpRenderer $renderer) { $this-&gt;renderer = $renderer; } public function getRenderer() { return $this-&gt;renderer; } public function setContentPlaceholders(array $contentPlaceholders) { $this-&gt;contentPlaceholders = $contentPlaceholders; return $this; } public function getContentPlaceholders() { return $this-&gt;contentPlaceholders; } public function attach(EventManagerInterface $events, $priority = 1) { $this-&gt;listeners[] = $events-&gt;attach(ViewEvent::EVENT_RENDERER, array($this, 'selectRenderer'), $priority); $this-&gt;listeners[] = $events-&gt;attach(ViewEvent::EVENT_RESPONSE, array($this, 'injectResponse'), $priority); } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function selectRenderer(ViewEvent $e) { return $this-&gt;renderer; } public function injectResponse(ViewEvent $e) { $renderer = $e-&gt;getRenderer(); if ($renderer !== $this-&gt;renderer) { return; } $result = $e-&gt;getResult(); $response = $e-&gt;getResponse(); if (empty($result)) { $placeholders = $renderer-&gt;plugin('placeholder'); $registry = $placeholders-&gt;getRegistry(); foreach ($this-&gt;contentPlaceholders as $placeholder) { if ($registry-&gt;containerExists($placeholder)) { $result = (string) $registry-&gt;getContainer($placeholder); break; } } } $response-&gt;setContent($result); } } &lt;?php
 namespace Zend\View; use ArrayObject; class Variables extends ArrayObject { protected $strictVars = false; public function __construct(array $variables = array(), array $options = array()) { parent::__construct( $variables, ArrayObject::ARRAY_AS_PROPS, 'ArrayIterator' ); $this-&gt;setOptions($options); } public function setOptions(array $options) { foreach ($options as $key =&gt; $value) { switch (strtolower($key)) { case 'strict_vars': $this-&gt;setStrictVars($value); break; default: $this[$key] = $value; break; } } return $this; } public function setStrictVars($flag) { $this-&gt;strictVars = (bool) $flag; return $this; } public function isStrict() { return $this-&gt;strictVars; } public function assign($spec) { if (is_object($spec)) { if (method_exists($spec, 'toArray')) { $spec = $spec-&gt;toArray(); } else { $spec = (array) $spec; } } if (!is_array($spec)) { throw new Exception\InvalidArgumentException(sprintf( 'assign() expects either an array or an object as an argument; received "%s"', gettype($spec) )); } foreach ($spec as $key =&gt; $value) { $this[$key] = $value; } return $this; } public function offsetGet($key) { if (!$this-&gt;offsetExists($key)) { if ($this-&gt;isStrict()) { trigger_error(sprintf( 'View variable "%s" does not exist', $key ), E_USER_NOTICE); } return null; } $return = parent::offsetGet($key); if (is_object($return) &amp;&amp; is_callable($return)) { $return = call_user_func($return); } return $return; } public function clear() { $this-&gt;exchangeArray(array()); } } &lt;?php
 namespace Zend\View\Renderer; use Zend\View\Model\ModelInterface; use Zend\View\Resolver\ResolverInterface; interface RendererInterface { public function getEngine(); public function setResolver(ResolverInterface $resolver); public function render($nameOrModel, $values = null); } &lt;?php
 namespace Zend\View\Renderer; interface TreeRendererInterface { public function canRenderTrees(); } &lt;?php
 namespace Zend\View\Renderer; use Zend\View\Exception; use Zend\View\Model\FeedModel; use Zend\View\Model\ModelInterface as Model; use Zend\View\Resolver\ResolverInterface as Resolver; class FeedRenderer implements RendererInterface { protected $resolver; protected $feedType = 'rss'; public function getEngine() { return $this; } public function setResolver(Resolver $resolver) { $this-&gt;resolver = $resolver; } public function render($nameOrModel, $values = null) { if ($nameOrModel instanceof Model) { if (!$nameOrModel instanceof FeedModel) { $vars = $nameOrModel-&gt;getVariables(); $options = $nameOrModel-&gt;getOptions(); $type = $this-&gt;getFeedType(); if (isset($options['feed_type'])) { $type = $options['feed_type']; } else { $this-&gt;setFeedType($type); } $nameOrModel = new FeedModel($vars, array('feed_type' =&gt; $type)); } } elseif (is_string($nameOrModel)) { $nameOrModel = new FeedModel($values, (array) $nameOrModel); } else { throw new Exception\InvalidArgumentException(sprintf( '%s expects a ViewModel or a string feed type as the first argument; received "%s"', __METHOD__, (is_object($nameOrModel) ? get_class($nameOrModel) : gettype($nameOrModel)) )); } $feed = $nameOrModel-&gt;getFeed(); $type = $nameOrModel-&gt;getFeedType(); if (!$type) { $type = $this-&gt;getFeedType(); } else { $this-&gt;setFeedType($type); } return $feed-&gt;export($type); } public function setFeedType($feedType) { $feedType = strtolower($feedType); if (!in_array($feedType, array('rss', 'atom'))) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a string of either "rss" or "atom"', __METHOD__ )); } $this-&gt;feedType = $feedType; return $this; } public function getFeedType() { return $this-&gt;feedType; } } &lt;?php
 namespace Zend\View\Renderer; use JsonSerializable; use Traversable; use Zend\Json\Json; use Zend\Stdlib\ArrayUtils; use Zend\View\Exception; use Zend\View\Model\JsonModel; use Zend\View\Model\ModelInterface as Model; use Zend\View\Renderer\RendererInterface as Renderer; use Zend\View\Resolver\ResolverInterface as Resolver; class JsonRenderer implements Renderer, TreeRendererInterface { protected $mergeUnnamedChildren = false; protected $resolver; protected $jsonpCallback = null; public function getEngine() { return $this; } public function setResolver(Resolver $resolver) { $this-&gt;resolver = $resolver; } public function setMergeUnnamedChildren($mergeUnnamedChildren) { $this-&gt;mergeUnnamedChildren = (bool) $mergeUnnamedChildren; return $this; } public function setJsonpCallback($callback) { $callback = (string) $callback; if (!empty($callback)) { $this-&gt;jsonpCallback = $callback; } return $this; } public function hasJsonpCallback() { return (null !== $this-&gt;jsonpCallback); } public function mergeUnnamedChildren() { return $this-&gt;mergeUnnamedChildren; } public function render($nameOrModel, $values = null) { if ($nameOrModel instanceof Model) { if ($nameOrModel instanceof JsonModel) { $children = $this-&gt;recurseModel($nameOrModel, false); $this-&gt;injectChildren($nameOrModel, $children); $values = $nameOrModel-&gt;serialize(); } else { $values = $this-&gt;recurseModel($nameOrModel); $values = Json::encode($values); } if ($this-&gt;hasJsonpCallback()) { $values = $this-&gt;jsonpCallback . '(' . $values . ');'; } return $values; } if (null === $values) { if (!is_object($nameOrModel) || $nameOrModel instanceof JsonSerializable) { $return = Json::encode($nameOrModel); } elseif ($nameOrModel instanceof Traversable) { $nameOrModel = ArrayUtils::iteratorToArray($nameOrModel); $return = Json::encode($nameOrModel); } else { $return = Json::encode(get_object_vars($nameOrModel)); } if ($this-&gt;hasJsonpCallback()) { $return = $this-&gt;jsonpCallback . '(' . $return . ');'; } return $return; } throw new Exception\DomainException(sprintf( '%s: Do not know how to handle operation when both $nameOrModel and $values are populated', __METHOD__ )); } public function canRenderTrees() { return true; } protected function recurseModel(Model $model, $mergeWithVariables = true) { $values = array(); if ($mergeWithVariables) { $values = $model-&gt;getVariables(); } if ($values instanceof Traversable) { $values = ArrayUtils::iteratorToArray($values); } if (!$model-&gt;hasChildren()) { return $values; } $mergeChildren = $this-&gt;mergeUnnamedChildren(); foreach ($model as $child) { $captureTo = $child-&gt;captureTo(); if (!$captureTo &amp;&amp; !$mergeChildren) { continue; } $childValues = $this-&gt;recurseModel($child); if ($captureTo) { $values[$captureTo] = $childValues; } elseif ($mergeChildren) { $values = array_replace_recursive($values, $childValues); } } return $values; } protected function injectChildren(Model $model, array $children) { foreach ($children as $child =&gt; $value) { $model-&gt;setVariable($child, $value); } } } &lt;?php
 namespace Zend\View\Renderer; use Zend\Filter\FilterChain; use Zend\View\Model\ModelInterface; use Zend\View\Resolver\ResolverInterface; class ConsoleRenderer implements RendererInterface, TreeRendererInterface { protected $__filterChain; public function __construct($config = array()) { $this-&gt;init(); } public function setResolver(ResolverInterface $resolver) { return $this; } public function getEngine() { return $this; } public function init() { } public function setFilterChain(FilterChain $filters) { $this-&gt;__filterChain = $filters; return $this; } public function getFilterChain() { if (null === $this-&gt;__filterChain) { $this-&gt;setFilterChain(new FilterChain()); } return $this-&gt;__filterChain; } public function render($model, $values = null) { if (!$model instanceof ModelInterface) { return ''; } $result = ''; $options = $model-&gt;getOptions(); foreach ($options as $setting =&gt; $value) { $method = 'set' . $setting; if (method_exists($this, $method)) { $this-&gt;$method($value); } unset($method, $setting, $value); } unset($options); $values = $model-&gt;getVariables(); if (isset($values['result'])) { $result .= $this-&gt;getFilterChain()-&gt;filter($values['result']); } if ($model-&gt;hasChildren()) { foreach ($model-&gt;getChildren() as $child) { $result .= $this-&gt;render($child, $values); } } return $result; } public function canRenderTrees() { return true; } } &lt;?php
 namespace Zend\View\Renderer; use ArrayAccess; use Traversable; use Zend\Filter\FilterChain; use Zend\View\Exception; use Zend\View\HelperPluginManager; use Zend\View\Helper\AbstractHelper; use Zend\View\Model\ModelInterface as Model; use Zend\View\Renderer\RendererInterface as Renderer; use Zend\View\Resolver\ResolverInterface as Resolver; use Zend\View\Resolver\TemplatePathStack; use Zend\View\Variables; class PhpRenderer implements Renderer, TreeRendererInterface { private $__content = ''; private $__renderTrees = false; private $__template = null; private $__templates = array(); private $__templateResolver; private $__file = null; private $__helpers; private $__filterChain; private $__vars; private $__varsCache = array(); private $__pluginCache = array(); public function __construct($config = array()) { $this-&gt;init(); } public function getEngine() { return $this; } public function init() { } public function setResolver(Resolver $resolver) { $this-&gt;__templateResolver = $resolver; return $this; } public function resolver($name = null) { if (null === $this-&gt;__templateResolver) { $this-&gt;setResolver(new TemplatePathStack()); } if (null !== $name) { return $this-&gt;__templateResolver-&gt;resolve($name, $this); } return $this-&gt;__templateResolver; } public function setVars($variables) { if (!is_array($variables) &amp;&amp; !$variables instanceof ArrayAccess) { throw new Exception\InvalidArgumentException(sprintf( 'Expected array or ArrayAccess object; received "%s"', (is_object($variables) ? get_class($variables) : gettype($variables)) )); } if (!$variables instanceof Variables) { $variablesAsArray = array(); foreach ($variables as $key =&gt; $value) { $variablesAsArray[$key] = $value; } $variables = new Variables($variablesAsArray); } $this-&gt;__vars = $variables; return $this; } public function vars($key = null) { if (null === $this-&gt;__vars) { $this-&gt;setVars(new Variables()); } if (null === $key) { return $this-&gt;__vars; } return $this-&gt;__vars[$key]; } public function get($key) { if (null === $this-&gt;__vars) { $this-&gt;setVars(new Variables()); } return $this-&gt;__vars[$key]; } public function __get($name) { $vars = $this-&gt;vars(); return $vars[$name]; } public function __set($name, $value) { $vars = $this-&gt;vars(); $vars[$name] = $value; } public function __isset($name) { $vars = $this-&gt;vars(); return isset($vars[$name]); } public function __unset($name) { $vars = $this-&gt;vars(); if (!isset($vars[$name])) { return; } unset($vars[$name]); } public function setHelperPluginManager($helpers) { if (is_string($helpers)) { if (!class_exists($helpers)) { throw new Exception\InvalidArgumentException(sprintf( 'Invalid helper helpers class provided (%s)', $helpers )); } $helpers = new $helpers(); } if (!$helpers instanceof HelperPluginManager) { throw new Exception\InvalidArgumentException(sprintf( 'Helper helpers must extend Zend\View\HelperPluginManager; got type "%s" instead', (is_object($helpers) ? get_class($helpers) : gettype($helpers)) )); } $helpers-&gt;setRenderer($this); $this-&gt;__helpers = $helpers; return $this; } public function getHelperPluginManager() { if (null === $this-&gt;__helpers) { $this-&gt;setHelperPluginManager(new HelperPluginManager()); } return $this-&gt;__helpers; } public function plugin($name, array $options = null) { return $this-&gt;getHelperPluginManager()-&gt;get($name, $options); } public function __call($method, $argv) { if (!isset($this-&gt;__pluginCache[$method])) { $this-&gt;__pluginCache[$method] = $this-&gt;plugin($method); } if (is_callable($this-&gt;__pluginCache[$method])) { return call_user_func_array($this-&gt;__pluginCache[$method], $argv); } return $this-&gt;__pluginCache[$method]; } public function setFilterChain(FilterChain $filters) { $this-&gt;__filterChain = $filters; return $this; } public function getFilterChain() { if (null === $this-&gt;__filterChain) { $this-&gt;setFilterChain(new FilterChain()); } return $this-&gt;__filterChain; } public function render($nameOrModel, $values = null) { if ($nameOrModel instanceof Model) { $model = $nameOrModel; $nameOrModel = $model-&gt;getTemplate(); if (empty($nameOrModel)) { throw new Exception\DomainException(sprintf( '%s: received View Model argument, but template is empty', __METHOD__ )); } $options = $model-&gt;getOptions(); foreach ($options as $setting =&gt; $value) { $method = 'set' . $setting; if (method_exists($this, $method)) { $this-&gt;$method($value); } unset($method, $setting, $value); } unset($options); $helper = $this-&gt;plugin('view_model'); $helper-&gt;setCurrent($model); $values = $model-&gt;getVariables(); unset($model); } $this-&gt;addTemplate($nameOrModel); unset($nameOrModel); $this-&gt;__varsCache[] = $this-&gt;vars(); if (null !== $values) { $this-&gt;setVars($values); } unset($values); $__vars = $this-&gt;vars()-&gt;getArrayCopy(); if (array_key_exists('this', $__vars)) { unset($__vars['this']); } extract($__vars); unset($__vars); while ($this-&gt;__template = array_pop($this-&gt;__templates)) { $this-&gt;__file = $this-&gt;resolver($this-&gt;__template); if (!$this-&gt;__file) { throw new Exception\RuntimeException(sprintf( '%s: Unable to render template "%s"; resolver could not resolve to a file', __METHOD__, $this-&gt;__template )); } try { ob_start(); include $this-&gt;__file; $this-&gt;__content = ob_get_clean(); } catch (\Exception $ex) { ob_end_clean(); throw $ex; } } $this-&gt;setVars(array_pop($this-&gt;__varsCache)); return $this-&gt;getFilterChain()-&gt;filter($this-&gt;__content); } public function setCanRenderTrees($renderTrees) { $this-&gt;__renderTrees = (bool) $renderTrees; return $this; } public function canRenderTrees() { return $this-&gt;__renderTrees; } public function addTemplate($template) { $this-&gt;__templates[] = $template; return $this; } public function __clone() { $this-&gt;__vars = clone $this-&gt;vars(); } } &lt;?php
 namespace Zend\View\Resolver; use Countable; use IteratorAggregate; use Zend\Stdlib\PriorityQueue; use Zend\View\Renderer\RendererInterface as Renderer; use Zend\View\Resolver\ResolverInterface as Resolver; class AggregateResolver implements Countable, IteratorAggregate, ResolverInterface { const FAILURE_NO_RESOLVERS = 'AggregateResolver_Failure_No_Resolvers'; const FAILURE_NOT_FOUND = 'AggregateResolver_Failure_Not_Found'; protected $lastLookupFailure = false; protected $lastSuccessfulResolver; protected $queue; public function __construct() { $this-&gt;queue = new PriorityQueue(); } public function count() { return $this-&gt;queue-&gt;count(); } public function getIterator() { return $this-&gt;queue; } public function attach(Resolver $resolver, $priority = 1) { $this-&gt;queue-&gt;insert($resolver, $priority); return $this; } public function resolve($name, Renderer $renderer = null) { $this-&gt;lastLookupFailure = false; $this-&gt;lastSuccessfulResolver = null; if (0 === count($this-&gt;queue)) { $this-&gt;lastLookupFailure = static::FAILURE_NO_RESOLVERS; return false; } foreach ($this-&gt;queue as $resolver) { $resource = $resolver-&gt;resolve($name, $renderer); if (!$resource) { continue; } $this-&gt;lastSuccessfulResolver = $resolver; return $resource; } $this-&gt;lastLookupFailure = static::FAILURE_NOT_FOUND; return false; } public function getLastSuccessfulResolver() { return $this-&gt;lastSuccessfulResolver; } public function getLastLookupFailure() { return $this-&gt;lastLookupFailure; } } &lt;?php
 namespace Zend\View\Resolver; use SplFileInfo; use Traversable; use Zend\Stdlib\SplStack; use Zend\View\Exception; use Zend\View\Renderer\RendererInterface as Renderer; class TemplatePathStack implements ResolverInterface { const FAILURE_NO_PATHS = 'TemplatePathStack_Failure_No_Paths'; const FAILURE_NOT_FOUND = 'TemplatePathStack_Failure_Not_Found'; protected $defaultSuffix = 'phtml'; protected $paths; protected $lastLookupFailure = false; protected $lfiProtectionOn = true; protected $useViewStream = false; protected $useStreamWrapper = false; public function __construct($options = null) { $this-&gt;useViewStream = (bool) ini_get('short_open_tag'); if ($this-&gt;useViewStream) { if (!in_array('zend.view', stream_get_wrappers())) { stream_wrapper_register('zend.view', 'Zend\View\Stream'); } } $this-&gt;paths = new SplStack; if (null !== $options) { $this-&gt;setOptions($options); } } public function setOptions($options) { if (!is_array($options) &amp;&amp; !$options instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( 'Expected array or Traversable object; received "%s"', (is_object($options) ? get_class($options) : gettype($options)) )); } foreach ($options as $key =&gt; $value) { switch (strtolower($key)) { case 'lfi_protection': $this-&gt;setLfiProtection($value); break; case 'script_paths': $this-&gt;addPaths($value); break; case 'use_stream_wrapper': $this-&gt;setUseStreamWrapper($value); break; default: break; } } } public function setDefaultSuffix($defaultSuffix) { $this-&gt;defaultSuffix = (string) $defaultSuffix; $this-&gt;defaultSuffix = ltrim($this-&gt;defaultSuffix, '.'); return $this; } public function getDefaultSuffix() { return $this-&gt;defaultSuffix; } public function addPaths(array $paths) { foreach ($paths as $path) { $this-&gt;addPath($path); } return $this; } public function setPaths($paths) { if ($paths instanceof SplStack) { $this-&gt;paths = $paths; } elseif (is_array($paths)) { $this-&gt;clearPaths(); $this-&gt;addPaths($paths); } else { throw new Exception\InvalidArgumentException( "Invalid argument provided for \$paths, expecting either an array or SplStack object" ); } return $this; } public static function normalizePath($path) { $path = rtrim($path, '/'); $path = rtrim($path, '\\'); $path .= DIRECTORY_SEPARATOR; return $path; } public function addPath($path) { if (!is_string($path)) { throw new Exception\InvalidArgumentException(sprintf( 'Invalid path provided; must be a string, received %s', gettype($path) )); } $this-&gt;paths[] = static::normalizePath($path); return $this; } public function clearPaths() { $this-&gt;paths = new SplStack; } public function getPaths() { return $this-&gt;paths; } public function setLfiProtection($flag) { $this-&gt;lfiProtectionOn = (bool) $flag; return $this; } public function isLfiProtectionOn() { return $this-&gt;lfiProtectionOn; } public function setUseStreamWrapper($flag) { $this-&gt;useStreamWrapper = (bool) $flag; return $this; } public function useStreamWrapper() { return ($this-&gt;useViewStream &amp;&amp; $this-&gt;useStreamWrapper); } public function resolve($name, Renderer $renderer = null) { $this-&gt;lastLookupFailure = false; if ($this-&gt;isLfiProtectionOn() &amp;&amp; preg_match('#\.\.[\\\/]#', $name)) { throw new Exception\DomainException( 'Requested scripts may not include parent directory traversal ("../", "..\\" notation)' ); } if (!count($this-&gt;paths)) { $this-&gt;lastLookupFailure = static::FAILURE_NO_PATHS; return false; } $defaultSuffix = $this-&gt;getDefaultSuffix(); if (pathinfo($name, PATHINFO_EXTENSION) != $defaultSuffix) {; $name .= '.' . $defaultSuffix; } foreach ($this-&gt;paths as $path) { $file = new SplFileInfo($path . $name); if ($file-&gt;isReadable()) { if (($filePath = $file-&gt;getRealPath()) === false &amp;&amp; substr($path, 0, 7) === 'phar://') { $filePath = $path . $name; if (!file_exists($filePath)) { break; } } if ($this-&gt;useStreamWrapper()) { $filePath = 'zend.view://' . $filePath; } return $filePath; } } $this-&gt;lastLookupFailure = static::FAILURE_NOT_FOUND; return false; } public function getLastLookupFailure() { return $this-&gt;lastLookupFailure; } } &lt;?php
 namespace Zend\View\Resolver; use Zend\View\Renderer\RendererInterface as Renderer; interface ResolverInterface { public function resolve($name, Renderer $renderer = null); } &lt;?php
 namespace Zend\View\Resolver; use ArrayIterator; use IteratorAggregate; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\View\Exception; use Zend\View\Renderer\RendererInterface as Renderer; class TemplateMapResolver implements IteratorAggregate, ResolverInterface { protected $map = array(); public function __construct($map = array()) { $this-&gt;setMap($map); } public function getIterator() { return new ArrayIterator($this-&gt;map); } public function setMap($map) { if (!is_array($map) &amp;&amp; !$map instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects an array or Traversable, received "%s"', __METHOD__, (is_object($map) ? get_class($map) : gettype($map)) )); } if ($map instanceof Traversable) { $map = ArrayUtils::iteratorToArray($map); } $this-&gt;map = $map; return $this; } public function add($nameOrMap, $path = null) { if (is_array($nameOrMap) || $nameOrMap instanceof Traversable) { $this-&gt;merge($nameOrMap); return $this; } if (!is_string($nameOrMap)) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects a string, array, or Traversable for the first argument; received "%s"', __METHOD__, (is_object($nameOrMap) ? get_class($nameOrMap) : gettype($nameOrMap)) )); } if (empty($path)) { if (isset($this-&gt;map[$nameOrMap])) { unset($this-&gt;map[$nameOrMap]); } return $this; } $this-&gt;map[$nameOrMap] = $path; return $this; } public function merge($map) { if (!is_array($map) &amp;&amp; !$map instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects an array or Traversable, received "%s"', __METHOD__, (is_object($map) ? get_class($map) : gettype($map)) )); } if ($map instanceof Traversable) { $map = ArrayUtils::iteratorToArray($map); } $this-&gt;map = array_replace_recursive($this-&gt;map, $map); return $this; } public function has($name) { return array_key_exists($name, $this-&gt;map); } public function get($name) { if (!$this-&gt;has($name)) { return false; } return $this-&gt;map[$name]; } public function getMap() { return $this-&gt;map; } public function resolve($name, Renderer $renderer = null) { return $this-&gt;get($name); } } &lt;?php
 namespace Zend\View; use Zend\EventManager\EventManager; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; use Zend\Stdlib\RequestInterface as Request; use Zend\Stdlib\ResponseInterface as Response; use Zend\View\Model\ModelInterface as Model; use Zend\View\Renderer\RendererInterface as Renderer; use Zend\View\Renderer\TreeRendererInterface; class View implements EventManagerAwareInterface { protected $events; protected $request; protected $response; public function setRequest(Request $request) { $this-&gt;request = $request; return $this; } public function setResponse(Response $response) { $this-&gt;response = $response; return $this; } public function getRequest() { return $this-&gt;request; } public function getResponse() { return $this-&gt;response; } public function setEventManager(EventManagerInterface $events) { $events-&gt;setIdentifiers(array( __CLASS__, get_called_class(), )); $this-&gt;events = $events; return $this; } public function getEventManager() { if (!$this-&gt;events instanceof EventManagerInterface) { $this-&gt;setEventManager(new EventManager()); } return $this-&gt;events; } public function addRenderingStrategy($callable, $priority = 1) { $this-&gt;getEventManager()-&gt;attach(ViewEvent::EVENT_RENDERER, $callable, $priority); return $this; } public function addResponseStrategy($callable, $priority = 1) { $this-&gt;getEventManager()-&gt;attach(ViewEvent::EVENT_RESPONSE, $callable, $priority); return $this; } public function render(Model $model) { $event = $this-&gt;getEvent(); $event-&gt;setModel($model); $events = $this-&gt;getEventManager(); $results = $events-&gt;trigger(ViewEvent::EVENT_RENDERER, $event, function ($result) { return ($result instanceof Renderer); }); $renderer = $results-&gt;last(); if (!$renderer instanceof Renderer) { throw new Exception\RuntimeException(sprintf( '%s: no renderer selected!', __METHOD__ )); } $event-&gt;setRenderer($renderer); $results = $events-&gt;trigger(ViewEvent::EVENT_RENDERER_POST, $event); if ($model-&gt;hasChildren() &amp;&amp; (!$renderer instanceof TreeRendererInterface || !$renderer-&gt;canRenderTrees()) ) { $this-&gt;renderChildren($model); } $event-&gt;setModel($model); $event-&gt;setRenderer($renderer); $rendered = $renderer-&gt;render($model); $options = $model-&gt;getOptions(); if (array_key_exists('has_parent', $options) &amp;&amp; $options['has_parent']) { return $rendered; } $event-&gt;setResult($rendered); $events-&gt;trigger(ViewEvent::EVENT_RESPONSE, $event); } protected function renderChildren(Model $model) { foreach ($model as $child) { if ($child-&gt;terminate()) { throw new Exception\DomainException('Inconsistent state; child view model is marked as terminal'); } $child-&gt;setOption('has_parent', true); $result = $this-&gt;render($child); $child-&gt;setOption('has_parent', null); $capture = $child-&gt;captureTo(); if (!empty($capture)) { if ($child-&gt;isAppend()) { $oldResult=$model-&gt;{$capture}; $model-&gt;setVariable($capture, $oldResult . $result); } else { $model-&gt;setVariable($capture, $result); } } } } protected function getEvent() { $event = new ViewEvent(); $event-&gt;setTarget($this); if (null !== ($request = $this-&gt;getRequest())) { $event-&gt;setRequest($request); } if (null !== ($response = $this-&gt;getResponse())) { $event-&gt;setResponse($response); } return $event; } } &lt;?php
 namespace Zend\View; class Stream { protected $pos = 0; protected $data; protected $stat; public function stream_open($path, $mode, $options, &amp;$opened_path) { $path = str_replace('zend.view://', '', $path); $this-&gt;data = file_get_contents($path); if ($this-&gt;data === false) { $this-&gt;stat = stat($path); return false; } $this-&gt;data = preg_replace('/\&lt;\?\=/', "&lt;?php echo ", $this-&gt;data); $this-&gt;data = preg_replace('/&lt;\?(?!xml|php)/s', '&lt;?php ', $this-&gt;data); $this-&gt;stat = stat($path); return true; } public function url_stat() { return $this-&gt;stat; } public function stream_read($count) { $ret = substr($this-&gt;data, $this-&gt;pos, $count); $this-&gt;pos += strlen($ret); return $ret; } public function stream_tell() { return $this-&gt;pos; } public function stream_eof() { return $this-&gt;pos &gt;= strlen($this-&gt;data); } public function stream_stat() { return $this-&gt;stat; } public function stream_seek($offset, $whence) { switch ($whence) { case SEEK_SET: if ($offset &lt; strlen($this-&gt;data) &amp;&amp; $offset &gt;= 0) { $this-&gt;pos = $offset; return true; } else { return false; } break; case SEEK_CUR: if ($offset &gt;= 0) { $this-&gt;pos += $offset; return true; } else { return false; } break; case SEEK_END: if (strlen($this-&gt;data) + $offset &gt;= 0) { $this-&gt;pos = strlen($this-&gt;data) + $offset; return true; } else { return false; } break; default: return false; } } } &lt;?php
 namespace Zend\Filter; class BaseName extends AbstractFilter { public function filter($value) { return basename((string) $value); } } &lt;?php
 namespace Zend\Filter; use Zend\ServiceManager\AbstractPluginManager; class FilterPluginManager extends AbstractPluginManager { protected $invokableClasses = array( 'alnum' =&gt; 'Zend\I18n\Filter\Alnum', 'alpha' =&gt; 'Zend\I18n\Filter\Alpha', 'basename' =&gt; 'Zend\Filter\BaseName', 'boolean' =&gt; 'Zend\Filter\Boolean', 'callback' =&gt; 'Zend\Filter\Callback', 'compress' =&gt; 'Zend\Filter\Compress', 'compressbz2' =&gt; 'Zend\Filter\Compress\Bz2', 'compressgz' =&gt; 'Zend\Filter\Compress\Gz', 'compresslzf' =&gt; 'Zend\Filter\Compress\Lzf', 'compressrar' =&gt; 'Zend\Filter\Compress\Rar', 'compresssnappy' =&gt; 'Zend\Filter\Compress\Snappy', 'compresstar' =&gt; 'Zend\Filter\Compress\Tar', 'compresszip' =&gt; 'Zend\Filter\Compress\Zip', 'decompress' =&gt; 'Zend\Filter\Decompress', 'decrypt' =&gt; 'Zend\Filter\Decrypt', 'digits' =&gt; 'Zend\Filter\Digits', 'dir' =&gt; 'Zend\Filter\Dir', 'encrypt' =&gt; 'Zend\Filter\Encrypt', 'encryptblockcipher' =&gt; 'Zend\Filter\Encrypt\BlockCipher', 'encryptopenssl' =&gt; 'Zend\Filter\Encrypt\Openssl', 'filedecrypt' =&gt; 'Zend\Filter\File\Decrypt', 'fileencrypt' =&gt; 'Zend\Filter\File\Encrypt', 'filelowercase' =&gt; 'Zend\Filter\File\LowerCase', 'filerename' =&gt; 'Zend\Filter\File\Rename', 'filerenameupload' =&gt; 'Zend\Filter\File\RenameUpload', 'fileuppercase' =&gt; 'Zend\Filter\File\UpperCase', 'htmlentities' =&gt; 'Zend\Filter\HtmlEntities', 'inflector' =&gt; 'Zend\Filter\Inflector', 'int' =&gt; 'Zend\Filter\Int', 'localizedtonormalized' =&gt; 'Zend\Filter\LocalizedToNormalized', 'normalizedtolocalized' =&gt; 'Zend\Filter\NormalizedToLocalized', 'null' =&gt; 'Zend\Filter\Null', 'numberformat' =&gt; 'Zend\I18n\Filter\NumberFormat', 'pregreplace' =&gt; 'Zend\Filter\PregReplace', 'realpath' =&gt; 'Zend\Filter\RealPath', 'stringtolower' =&gt; 'Zend\Filter\StringToLower', 'stringtoupper' =&gt; 'Zend\Filter\StringToUpper', 'stringtrim' =&gt; 'Zend\Filter\StringTrim', 'stripnewlines' =&gt; 'Zend\Filter\StripNewlines', 'striptags' =&gt; 'Zend\Filter\StripTags', 'urinormalize' =&gt; 'Zend\Filter\UriNormalize', 'wordcamelcasetodash' =&gt; 'Zend\Filter\Word\CamelCaseToDash', 'wordcamelcasetoseparator' =&gt; 'Zend\Filter\Word\CamelCaseToSeparator', 'wordcamelcasetounderscore' =&gt; 'Zend\Filter\Word\CamelCaseToUnderscore', 'worddashtocamelcase' =&gt; 'Zend\Filter\Word\DashToCamelCase', 'worddashtoseparator' =&gt; 'Zend\Filter\Word\DashToSeparator', 'worddashtounderscore' =&gt; 'Zend\Filter\Word\DashToUnderscore', 'wordseparatortocamelcase' =&gt; 'Zend\Filter\Word\SeparatorToCamelCase', 'wordseparatortodash' =&gt; 'Zend\Filter\Word\SeparatorToDash', 'wordseparatortoseparator' =&gt; 'Zend\Filter\Word\SeparatorToSeparator', 'wordunderscoretocamelcase' =&gt; 'Zend\Filter\Word\UnderscoreToCamelCase', 'wordunderscoretodash' =&gt; 'Zend\Filter\Word\UnderscoreToDash', 'wordunderscoretoseparator' =&gt; 'Zend\Filter\Word\UnderscoreToSeparator', ); protected $shareByDefault = false; public function validatePlugin($plugin) { if ($plugin instanceof FilterInterface) { return; } if (is_callable($plugin)) { return; } throw new Exception\RuntimeException(sprintf( 'Plugin of type %s is invalid; must implement %s\FilterInterface or be callable', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\ArrayUtils; class HtmlEntities extends AbstractFilter { protected $quoteStyle; protected $encoding; protected $doubleQuote; public function __construct($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = func_get_args(); $temp['quotestyle'] = array_shift($options); if (!empty($options)) { $temp['charset'] = array_shift($options); } $options = $temp; } if (!isset($options['quotestyle'])) { $options['quotestyle'] = ENT_QUOTES; } if (!isset($options['encoding'])) { $options['encoding'] = 'UTF-8'; } if (isset($options['charset'])) { $options['encoding'] = $options['charset']; } if (!isset($options['doublequote'])) { $options['doublequote'] = true; } $this-&gt;setQuoteStyle($options['quotestyle']); $this-&gt;setEncoding($options['encoding']); $this-&gt;setDoubleQuote($options['doublequote']); } public function getQuoteStyle() { return $this-&gt;quoteStyle; } public function setQuoteStyle($quoteStyle) { $this-&gt;quoteStyle = $quoteStyle; return $this; } public function getEncoding() { return $this-&gt;encoding; } public function setEncoding($value) { $this-&gt;encoding = (string) $value; return $this; } public function getCharSet() { return $this-&gt;getEncoding(); } public function setCharSet($charSet) { return $this-&gt;setEncoding($charSet); } public function getDoubleQuote() { return $this-&gt;doubleQuote; } public function setDoubleQuote($doubleQuote) { $this-&gt;doubleQuote = (bool) $doubleQuote; return $this; } public function filter($value) { $filtered = htmlentities((string) $value, $this-&gt;getQuoteStyle(), $this-&gt;getEncoding(), $this-&gt;getDoubleQuote()); if (strlen((string) $value) &amp;&amp; !strlen($filtered)) { if (!function_exists('iconv')) { throw new Exception\DomainException('Encoding mismatch has resulted in htmlentities errors'); } $enc = $this-&gt;getEncoding(); $value = iconv('', $this-&gt;getEncoding() . '//IGNORE', (string) $value); $filtered = htmlentities($value, $this-&gt;getQuoteStyle(), $enc, $this-&gt;getDoubleQuote()); if (!strlen($filtered)) { throw new Exception\DomainException('Encoding mismatch has resulted in htmlentities errors'); } } return $filtered; } } &lt;?php
 namespace Zend\Filter; interface FilterInterface { public function filter($value); } &lt;?php
 namespace Zend\Filter\Exception; class DomainException extends \DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Filter\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Filter\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\Filter\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\Filter\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface { } &lt;?php
 namespace Zend\Filter\Exception; class ExtensionNotLoadedException extends RuntimeException { } &lt;?php
 namespace Zend\Filter; use Traversable; class Null extends AbstractFilter { const TYPE_BOOLEAN = 1; const TYPE_INTEGER = 2; const TYPE_EMPTY_ARRAY = 4; const TYPE_STRING = 8; const TYPE_ZERO_STRING = 16; const TYPE_FLOAT = 32; const TYPE_ALL = 63; protected $constants = array( self::TYPE_BOOLEAN =&gt; 'boolean', self::TYPE_INTEGER =&gt; 'integer', self::TYPE_EMPTY_ARRAY =&gt; 'array', self::TYPE_STRING =&gt; 'string', self::TYPE_ZERO_STRING =&gt; 'zero', self::TYPE_FLOAT =&gt; 'float', self::TYPE_ALL =&gt; 'all', ); protected $options = array( 'type' =&gt; self::TYPE_ALL, ); public function __construct($typeOrOptions = null) { if ($typeOrOptions !== null) { if ($typeOrOptions instanceof Traversable) { $typeOrOptions = iterator_to_array($typeOrOptions); } if (is_array($typeOrOptions)) { if (isset($typeOrOptions['type'])) { $this-&gt;setOptions($typeOrOptions); } else { $this-&gt;setType($typeOrOptions); } } else { $this-&gt;setType($typeOrOptions); } } } public function setType($type = null) { if (is_array($type)) { $detected = 0; foreach ($type as $value) { if (is_int($value)) { $detected += $value; } elseif (in_array($value, $this-&gt;constants)) { $detected += array_search($value, $this-&gt;constants); } } $type = $detected; } elseif (is_string($type) &amp;&amp; in_array($type, $this-&gt;constants)) { $type = array_search($type, $this-&gt;constants); } if (!is_int($type) || ($type &lt; 0) || ($type &gt; self::TYPE_ALL)) { throw new Exception\InvalidArgumentException(sprintf( 'Unknown type value "%s" (%s)', $type, gettype($type) )); } $this-&gt;options['type'] = $type; return $this; } public function getType() { return $this-&gt;options['type']; } public function filter($value) { $type = $this-&gt;getType(); if ($type &gt;= self::TYPE_FLOAT) { $type -= self::TYPE_FLOAT; if (is_float($value) &amp;&amp; ($value == 0.0)) { return null; } } if ($type &gt;= self::TYPE_ZERO_STRING) { $type -= self::TYPE_ZERO_STRING; if (is_string($value) &amp;&amp; ($value == '0')) { return null; } } if ($type &gt;= self::TYPE_STRING) { $type -= self::TYPE_STRING; if (is_string($value) &amp;&amp; ($value == '')) { return null; } } if ($type &gt;= self::TYPE_EMPTY_ARRAY) { $type -= self::TYPE_EMPTY_ARRAY; if (is_array($value) &amp;&amp; ($value == array())) { return null; } } if ($type &gt;= self::TYPE_INTEGER) { $type -= self::TYPE_INTEGER; if (is_int($value) &amp;&amp; ($value == 0)) { return null; } } if ($type &gt;= self::TYPE_BOOLEAN) { $type -= self::TYPE_BOOLEAN; if (is_bool($value) &amp;&amp; ($value == false)) { return null; } } return $value; } } &lt;?php
 namespace Zend\Filter; use Traversable; class Callback extends AbstractFilter { protected $options = array( 'callback' =&gt; null, 'callback_params' =&gt; array() ); public function __construct($callbackOrOptions, $callbackParams = array()) { if (is_callable($callbackOrOptions)) { $this-&gt;setCallback($callbackOrOptions); $this-&gt;setCallbackParams($callbackParams); } else { $this-&gt;setOptions($callbackOrOptions); } } public function setCallback($callback) { if (!is_callable($callback)) { throw new Exception\InvalidArgumentException( 'Invalid parameter for callback: must be callable' ); } $this-&gt;options['callback'] = $callback; return $this; } public function getCallback() { return $this-&gt;options['callback']; } public function setCallbackParams($params) { $this-&gt;options['callback_params'] = (array) $params; return $this; } public function getCallbackParams() { return $this-&gt;options['callback_params']; } public function filter($value) { $params = (array) $this-&gt;options['callback_params']; array_unshift($params, $value); return call_user_func_array($this-&gt;options['callback'], $params); } } &lt;?php
 namespace Zend\Filter; use Traversable; class StringTrim extends AbstractFilter { protected $options = array( 'charlist' =&gt; null, ); public function __construct($charlistOrOptions = null) { if ($charlistOrOptions !== null) { if (!is_array($charlistOrOptions) &amp;&amp; !$charlistOrOptions instanceof Traversable) { $this-&gt;setCharList($charlistOrOptions); } else { $this-&gt;setOptions($charlistOrOptions); } } } public function setCharList($charList) { if (empty($charList)) { $charList = null; } $this-&gt;options['charlist'] = $charList; return $this; } public function getCharList() { return $this-&gt;options['charlist']; } public function filter($value) { if (!is_string($value)) { return $value; } if (null === $this-&gt;options['charlist']) { return $this-&gt;unicodeTrim((string) $value); } return $this-&gt;unicodeTrim((string) $value, $this-&gt;options['charlist']); } protected function unicodeTrim($value, $charlist = '\\\\s') { $chars = preg_replace( array('/[\^\-\]\\\]/S', '/\\\{4}/S', '/\//'), array('\\\\\\0', '\\', '\/'), $charlist ); $pattern = '/^[' . $chars . ']+|[' . $chars . ']+$/usSD'; return preg_replace($pattern, '', $value); } } &lt;?php
 namespace Zend\Filter; use Traversable; class StringToUpper extends AbstractUnicode { protected $options = array( 'encoding' =&gt; null, ); public function __construct($encodingOrOptions = null) { if ($encodingOrOptions !== null) { if (!static::isOptions($encodingOrOptions)) { $this-&gt;setEncoding($encodingOrOptions); } else { $this-&gt;setOptions($encodingOrOptions); } } } public function filter($value) { if ($this-&gt;options['encoding'] !== null) { return mb_strtoupper((string) $value, $this-&gt;options['encoding']); } return strtoupper((string) $value); } } &lt;?php
 namespace Zend\Filter; use Zend\Filter\AbstractFilter; use Zend\Filter\Exception\InvalidArgumentException; use Zend\Uri\UriFactory; use Zend\Uri\Uri; use Zend\Uri\Exception\ExceptionInterface as UriException; class UriNormalize extends AbstractFilter { protected $defaultScheme = null; protected $enforcedScheme = null; public function __construct($options = null) { if ($options) { $this-&gt;setOptions($options); } } public function setDefaultScheme($defaultScheme) { $this-&gt;defaultScheme = $defaultScheme; return $this; } public function setEnforcedScheme($enforcedScheme) { $this-&gt;enforcedScheme = $enforcedScheme; return $this; } public function filter($value) { $defaultScheme = $this-&gt;defaultScheme ?: $this-&gt;enforcedScheme; if (!UriFactory::getRegisteredSchemeClass($defaultScheme)) { $defaultScheme = null; } try { $uri = UriFactory::factory($value, $defaultScheme); if ($this-&gt;enforcedScheme &amp;&amp; (!$uri-&gt;getScheme())) { $this-&gt;enforceScheme($uri); } } catch (UriException $ex) { return $value; } $uri-&gt;normalize(); if (!$uri-&gt;isValid()) { return $value; } return $uri-&gt;toString(); } protected function enforceScheme(Uri $uri) { $path = $uri-&gt;getPath(); if (strpos($path, '/') !== false) { list($host, $path) = explode('/', $path, 2); $path = '/' . $path; } else { $host = $path; $path = ''; } if (!$host) { return; } $uri-&gt;setScheme($this-&gt;enforcedScheme) -&gt;setHost($host) -&gt;setPath($path); } } &lt;?php
 namespace Zend\Filter; class Dir extends AbstractFilter { public function filter($value) { return dirname((string) $value); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\StringUtils; abstract class AbstractFilter implements FilterInterface { protected $options = array(); public static function hasPcreUnicodeSupport() { return StringUtils::hasPcreUnicodeSupport(); } public function setOptions($options) { if (!is_array($options) &amp;&amp; !$options instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '"%s" expects an array or Traversable; received "%s"', __METHOD__, (is_object($options) ? get_class($options) : gettype($options)) )); } foreach ($options as $key =&gt; $value) { $setter = 'set' . str_replace(' ', '', ucwords(str_replace('_', ' ', $key))); if (method_exists($this, $setter)) { $this-&gt;{$setter}($value); } elseif (array_key_exists($key, $this-&gt;options)) { $this-&gt;options[$key] = $value; } else { throw new Exception\InvalidArgumentException(sprintf( 'The option "%s" does not have a matching %s setter method or options[%s] array key', $key, $setter, $key )); } } return $this; } public function getOptions() { return $this-&gt;options; } public function __invoke($value) { return $this-&gt;filter($value); } protected static function isOptions($options) { return (is_array($options) || $options instanceof Traversable); } } &lt;?php
 namespace Zend\Filter\Encrypt; use Traversable; use Zend\Filter\Compress; use Zend\Filter\Decompress; use Zend\Filter\Exception; use Zend\Stdlib\ArrayUtils; class Openssl implements EncryptionAlgorithmInterface { protected $keys = array( 'public' =&gt; array(), 'private' =&gt; array(), 'envelope' =&gt; array(), ); protected $passphrase; protected $compression; protected $package = false; public function __construct($options = array()) { if (!extension_loaded('openssl')) { throw new Exception\ExtensionNotLoadedException('This filter needs the openssl extension'); } if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = array('public' =&gt; $options); } if (array_key_exists('passphrase', $options)) { $this-&gt;setPassphrase($options['passphrase']); unset($options['passphrase']); } if (array_key_exists('compression', $options)) { $this-&gt;setCompression($options['compression']); unset($options['compress']); } if (array_key_exists('package', $options)) { $this-&gt;setPackage($options['package']); unset($options['package']); } $this-&gt;_setKeys($options); } protected function _setKeys($keys) { if (!is_array($keys)) { throw new Exception\InvalidArgumentException('Invalid options argument provided to filter'); } foreach ($keys as $type =&gt; $key) { if (is_file($key) and is_readable($key)) { $file = fopen($key, 'r'); $cert = fread($file, 8192); fclose($file); } else { $cert = $key; $key = count($this-&gt;keys[$type]); } switch ($type) { case 'public': $test = openssl_pkey_get_public($cert); if ($test === false) { throw new Exception\InvalidArgumentException("Public key '{$cert}' not valid"); } openssl_free_key($test); $this-&gt;keys['public'][$key] = $cert; break; case 'private': $test = openssl_pkey_get_private($cert, $this-&gt;passphrase); if ($test === false) { throw new Exception\InvalidArgumentException("Private key '{$cert}' not valid"); } openssl_free_key($test); $this-&gt;keys['private'][$key] = $cert; break; case 'envelope': $this-&gt;keys['envelope'][$key] = $cert; break; default: break; } } return $this; } public function getPublicKey() { $key = $this-&gt;keys['public']; return $key; } public function setPublicKey($key) { if (is_array($key)) { foreach ($key as $type =&gt; $option) { if ($type !== 'public') { $key['public'] = $option; unset($key[$type]); } } } else { $key = array('public' =&gt; $key); } return $this-&gt;_setKeys($key); } public function getPrivateKey() { $key = $this-&gt;keys['private']; return $key; } public function setPrivateKey($key, $passphrase = null) { if (is_array($key)) { foreach ($key as $type =&gt; $option) { if ($type !== 'private') { $key['private'] = $option; unset($key[$type]); } } } else { $key = array('private' =&gt; $key); } if ($passphrase !== null) { $this-&gt;setPassphrase($passphrase); } return $this-&gt;_setKeys($key); } public function getEnvelopeKey() { $key = $this-&gt;keys['envelope']; return $key; } public function setEnvelopeKey($key) { if (is_array($key)) { foreach ($key as $type =&gt; $option) { if ($type !== 'envelope') { $key['envelope'] = $option; unset($key[$type]); } } } else { $key = array('envelope' =&gt; $key); } return $this-&gt;_setKeys($key); } public function getPassphrase() { return $this-&gt;passphrase; } public function setPassphrase($passphrase) { $this-&gt;passphrase = $passphrase; return $this; } public function getCompression() { return $this-&gt;compression; } public function setCompression($compression) { if (is_string($this-&gt;compression)) { $compression = array('adapter' =&gt; $compression); } $this-&gt;compression = $compression; return $this; } public function getPackage() { return $this-&gt;package; } public function setPackage($package) { $this-&gt;package = (bool) $package; return $this; } public function encrypt($value) { $encrypted = array(); $encryptedkeys = array(); if (count($this-&gt;keys['public']) == 0) { throw new Exception\RuntimeException('Openssl can not encrypt without public keys'); } $keys = array(); $fingerprints = array(); $count = -1; foreach ($this-&gt;keys['public'] as $key =&gt; $cert) { $keys[$key] = openssl_pkey_get_public($cert); if ($this-&gt;package) { $details = openssl_pkey_get_details($keys[$key]); if ($details === false) { $details = array('key' =&gt; 'ZendFramework'); } ++$count; $fingerprints[$count] = md5($details['key']); } } if (!empty($this-&gt;compression)) { $compress = new Compress($this-&gt;compression); $value = $compress($value); } $crypt = openssl_seal($value, $encrypted, $encryptedkeys, $keys); foreach ($keys as $key) { openssl_free_key($key); } if ($crypt === false) { throw new Exception\RuntimeException('Openssl was not able to encrypt your content with the given options'); } $this-&gt;keys['envelope'] = $encryptedkeys; if ($this-&gt;package) { $header = pack('n', count($this-&gt;keys['envelope'])); foreach ($this-&gt;keys['envelope'] as $key =&gt; $envKey) { $header .= pack('H32n', $fingerprints[$key], strlen($envKey)) . $envKey; } $encrypted = $header . $encrypted; } return $encrypted; } public function decrypt($value) { $decrypted = ""; $envelope = current($this-&gt;getEnvelopeKey()); if (count($this-&gt;keys['private']) !== 1) { throw new Exception\RuntimeException('Please give a private key for decryption with Openssl'); } if (!$this-&gt;package &amp;&amp; empty($envelope)) { throw new Exception\RuntimeException('Please give an envelope key for decryption with Openssl'); } foreach ($this-&gt;keys['private'] as $cert) { $keys = openssl_pkey_get_private($cert, $this-&gt;getPassphrase()); } if ($this-&gt;package) { $details = openssl_pkey_get_details($keys); if ($details !== false) { $fingerprint = md5($details['key']); } else { $fingerprint = md5("ZendFramework"); } $count = unpack('ncount', $value); $count = $count['count']; $length = 2; for ($i = $count; $i &gt; 0; --$i) { $header = unpack('H32print/nsize', substr($value, $length, 18)); $length += 18; if ($header['print'] == $fingerprint) { $envelope = substr($value, $length, $header['size']); } $length += $header['size']; } $value = substr($value, $length); } $crypt = openssl_open($value, $decrypted, $envelope, $keys); openssl_free_key($keys); if ($crypt === false) { throw new Exception\RuntimeException('Openssl was not able to decrypt you content with the given options'); } if (!empty($this-&gt;compression)) { $decompress = new Decompress($this-&gt;compression); $decrypted = $decompress($decrypted); } return $decrypted; } public function toString() { return 'Openssl'; } } &lt;?php
 namespace Zend\Filter\Encrypt; use Traversable; use Zend\Filter\Compress; use Zend\Filter\Decompress; use Zend\Filter\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Crypt\BlockCipher as CryptBlockCipher; use Zend\Crypt\Exception as CryptException; use Zend\Crypt\Symmetric\Exception as SymmetricException; class BlockCipher implements EncryptionAlgorithmInterface { protected $encryption = array( 'key_iteration' =&gt; 5000, 'algorithm' =&gt; 'aes', 'hash' =&gt; 'sha256', ); protected $blockCipher; protected $compression; public function __construct($options) { try { $this-&gt;blockCipher = CryptBlockCipher::factory('mcrypt', $this-&gt;encryption); } catch (SymmetricException\RuntimeException $e) { throw new Exception\RuntimeException('The BlockCipher cannot be used without the Mcrypt extension'); } if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (is_string($options)) { $options = array('key' =&gt; $options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException('Invalid options argument provided to filter'); } if (array_key_exists('compression', $options)) { $this-&gt;setCompression($options['compression']); unset($options['compress']); } $this-&gt;setEncryption($options); } public function getEncryption() { return $this-&gt;encryption; } public function setEncryption($options) { if (is_string($options)) { $this-&gt;blockCipher-&gt;setKey($options); $this-&gt;encryption['key'] = $options; return $this; } if (!is_array($options)) { throw new Exception\InvalidArgumentException('Invalid options argument provided to filter'); } $options = $options + $this-&gt;encryption; if (isset($options['key'])) { $this-&gt;blockCipher-&gt;setKey($options['key']); } if (isset($options['algorithm'])) { try { $this-&gt;blockCipher-&gt;setCipherAlgorithm($options['algorithm']); } catch (CryptException\InvalidArgumentException $e) { throw new Exception\InvalidArgumentException("The algorithm '{$options['algorithm']}' is not supported"); } } if (isset($options['hash'])) { try { $this-&gt;blockCipher-&gt;setHashAlgorithm($options['hash']); } catch (CryptException\InvalidArgumentException $e) { throw new Exception\InvalidArgumentException("The algorithm '{$options['hash']}' is not supported"); } } if (isset($options['vector'])) { $this-&gt;setVector($options['vector']); } if (isset($options['key_iteration'])) { $this-&gt;blockCipher-&gt;setKeyIteration($options['key_iteration']); } $this-&gt;encryption = $options; return $this; } public function getVector() { return $this-&gt;encryption['vector']; } public function setVector($vector) { try { $this-&gt;blockCipher-&gt;setSalt($vector); } catch (CryptException\InvalidArgumentException $e) { throw new Exception\InvalidArgumentException($e-&gt;getMessage()); } $this-&gt;encryption['vector'] = $vector; return $this; } public function setKey($key) { try { $this-&gt;blockCipher-&gt;setKey($key); } catch (CryptException\InvalidArgumentException $e) { throw new Exception\InvalidArgumentException($e-&gt;getMessage()); } $this-&gt;encryption['key'] = $key; return $this; } public function getKey() { return $this-&gt;encryption['key']; } public function getCompression() { return $this-&gt;compression; } public function setCompression($compression) { if (is_string($this-&gt;compression)) { $compression = array('adapter' =&gt; $compression); } $this-&gt;compression = $compression; return $this; } public function encrypt($value) { if (!empty($this-&gt;compression)) { $compress = new Compress($this-&gt;compression); $value = $compress($value); } try { $encrypted = $this-&gt;blockCipher-&gt;encrypt($value); } catch (CryptException\InvalidArgumentException $e) { throw new Exception\InvalidArgumentException($e-&gt;getMessage()); } return $encrypted; } public function decrypt($value) { $decrypted = $this-&gt;blockCipher-&gt;decrypt($value); if (!empty($this-&gt;compression)) { $decompress = new Decompress($this-&gt;compression); $decrypted = $decompress($decrypted); } return $decrypted; } public function toString() { return 'BlockCipher'; } } &lt;?php
 namespace Zend\Filter\Encrypt; interface EncryptionAlgorithmInterface { public function encrypt($value); public function decrypt($value); public function toString(); } &lt;?php
 namespace Zend\Filter; class StripNewlines extends AbstractFilter { public function filter ($value) { return str_replace(array("\n", "\r"), '', $value); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\ArrayUtils; class Compress extends AbstractFilter { protected $adapter = 'Gz'; protected $adapterOptions = array(); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (is_string($options)) { $this-&gt;setAdapter($options); } elseif ($options instanceof Compress\CompressionAlgorithmInterface) { $this-&gt;setAdapter($options); } elseif (is_array($options)) { $this-&gt;setOptions($options); } } public function setOptions($options) { if (!is_array($options) &amp;&amp; !$options instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '"%s" expects an array or Traversable; received "%s"', __METHOD__, (is_object($options) ? get_class($options) : gettype($options)) )); } foreach ($options as $key =&gt; $value) { if ($key == 'options') { $key = 'adapterOptions'; } $method = 'set' . ucfirst($key); if (method_exists($this, $method)) { $this-&gt;$method($value); } } return $this; } public function getAdapter() { if ($this-&gt;adapter instanceof Compress\CompressionAlgorithmInterface) { return $this-&gt;adapter; } $adapter = $this-&gt;adapter; $options = $this-&gt;getAdapterOptions(); if (!class_exists($adapter)) { $adapter = 'Zend\\Filter\\Compress\\' . ucfirst($adapter); if (!class_exists($adapter)) { throw new Exception\RuntimeException(sprintf( '%s unable to load adapter; class "%s" not found', __METHOD__, $this-&gt;adapter )); } } $this-&gt;adapter = new $adapter($options); if (!$this-&gt;adapter instanceof Compress\CompressionAlgorithmInterface) { throw new Exception\InvalidArgumentException("Compression adapter '" . $adapter . "' does not implement Zend\\Filter\\Compress\\CompressionAlgorithmInterface"); } return $this-&gt;adapter; } public function getAdapterName() { return $this-&gt;getAdapter()-&gt;toString(); } public function setAdapter($adapter) { if ($adapter instanceof Compress\CompressionAlgorithmInterface) { $this-&gt;adapter = $adapter; return $this; } if (!is_string($adapter)) { throw new Exception\InvalidArgumentException('Invalid adapter provided; must be string or instance of Zend\\Filter\\Compress\\CompressionAlgorithmInterface'); } $this-&gt;adapter = $adapter; return $this; } public function getAdapterOptions() { return $this-&gt;adapterOptions; } public function setAdapterOptions(array $options) { $this-&gt;adapterOptions = $options; return $this; } public function getOptions($option = null) { $adapter = $this-&gt;getAdapter(); return $adapter-&gt;getOptions($option); } public function __call($method, $options) { $adapter = $this-&gt;getAdapter(); if (!method_exists($adapter, $method)) { throw new Exception\BadMethodCallException("Unknown method '{$method}'"); } return call_user_func_array(array($adapter, $method), $options); } public function filter($value) { return $this-&gt;getAdapter()-&gt;compress($value); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\ArrayUtils; class StripTags extends AbstractFilter { const UNIQUE_ID_PREFIX = '__Zend_Filter_StripTags__'; protected $tagsAllowed = array(); protected $attributesAllowed = array(); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if ((!is_array($options)) || (is_array($options) &amp;&amp; !array_key_exists('allowTags', $options) &amp;&amp; !array_key_exists('allowAttribs', $options) &amp;&amp; !array_key_exists('allowComments', $options))) { $options = func_get_args(); $temp['allowTags'] = array_shift($options); if (!empty($options)) { $temp['allowAttribs'] = array_shift($options); } if (!empty($options)) { $temp['allowComments'] = array_shift($options); } $options = $temp; } if (array_key_exists('allowTags', $options)) { $this-&gt;setTagsAllowed($options['allowTags']); } if (array_key_exists('allowAttribs', $options)) { $this-&gt;setAttributesAllowed($options['allowAttribs']); } } public function getTagsAllowed() { return $this-&gt;tagsAllowed; } public function setTagsAllowed($tagsAllowed) { if (!is_array($tagsAllowed)) { $tagsAllowed = array($tagsAllowed); } foreach ($tagsAllowed as $index =&gt; $element) { if (is_int($index) &amp;&amp; is_string($element)) { $tagName = strtolower($element); $this-&gt;tagsAllowed[$tagName] = array(); } elseif (is_string($index) &amp;&amp; (is_array($element) || is_string($element))) { $tagName = strtolower($index); if (is_string($element)) { $element = array($element); } $this-&gt;tagsAllowed[$tagName] = array(); foreach ($element as $attribute) { if (is_string($attribute)) { $attributeName = strtolower($attribute); $this-&gt;tagsAllowed[$tagName][$attributeName] = null; } } } } return $this; } public function getAttributesAllowed() { return $this-&gt;attributesAllowed; } public function setAttributesAllowed($attributesAllowed) { if (!is_array($attributesAllowed)) { $attributesAllowed = array($attributesAllowed); } foreach ($attributesAllowed as $attribute) { if (is_string($attribute)) { $attributeName = strtolower($attribute); $this-&gt;attributesAllowed[$attributeName] = null; } } return $this; } public function filter($value) { $value = (string) $value; while (strpos($value, '&lt;!--') !== false) { $pos = strrpos($value, '&lt;!--'); $start = substr($value, 0, $pos); $value = substr($value, $pos); if (!preg_match('/--\s*&gt;/s', $value)) { $value = ''; } else { $value = preg_replace('/&lt;(?:!(?:--[\s\S]*?--\s*)?(&gt;))/s', '', $value); } $value = $start . $value; } $dataFiltered = ''; preg_match_all('/([^&lt;]*)(&lt;?[^&gt;]*&gt;?)/', (string) $value, $matches); foreach ($matches[1] as $index =&gt; $preTag) { if (strlen($preTag)) { $preTag = str_replace('&gt;', '', $preTag); } $tag = $matches[2][$index]; if (strlen($tag)) { $tagFiltered = $this-&gt;_filterTag($tag); } else { $tagFiltered = ''; } $dataFiltered .= $preTag . $tagFiltered; } return $dataFiltered; } protected function _filterTag($tag) { $isMatch = preg_match('~(&lt;/?)(\w*)((/(?!&gt;)|[^/&gt;])*)(/?&gt;)~', $tag, $matches); if (!$isMatch) { return ''; } $tagStart = $matches[1]; $tagName = strtolower($matches[2]); $tagAttributes = $matches[3]; $tagEnd = $matches[5]; if (!isset($this-&gt;tagsAllowed[$tagName])) { return ''; } $tagAttributes = trim($tagAttributes); if (strlen($tagAttributes)) { preg_match_all('/([\w-]+)\s*=\s*(?:(")(.*?)"|(\')(.*?)\')/s', $tagAttributes, $matches); $tagAttributes = ''; foreach ($matches[1] as $index =&gt; $attributeName) { $attributeName = strtolower($attributeName); $attributeDelimiter = empty($matches[2][$index]) ? $matches[4][$index] : $matches[2][$index]; $attributeValue = empty($matches[3][$index]) ? $matches[5][$index] : $matches[3][$index]; if (!array_key_exists($attributeName, $this-&gt;tagsAllowed[$tagName]) &amp;&amp; !array_key_exists($attributeName, $this-&gt;attributesAllowed)) { continue; } $tagAttributes .= " $attributeName=" . $attributeDelimiter . $attributeValue . $attributeDelimiter; } } if (strpos($tagEnd, '/') !== false) { $tagEnd = " $tagEnd"; } return $tagStart . $tagName . $tagAttributes . $tagEnd; } } &lt;?php
 namespace Zend\Filter; use Traversable; class PregReplace extends AbstractFilter { protected $options = array( 'pattern' =&gt; null, 'replacement' =&gt; '', ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = iterator_to_array($options); } if (!is_array($options) || (!isset($options['pattern']) &amp;&amp; !isset($options['replacement']))) { $args = func_get_args(); if (isset($args[0])) { $this-&gt;setPattern($args[0]); } if (isset($args[1])) { $this-&gt;setReplacement($args[1]); } } else { $this-&gt;setOptions($options); } } public function setPattern($pattern) { if (!is_array($pattern) &amp;&amp; !is_string($pattern)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects pattern to be array or string; received "%s"', __METHOD__, (is_object($pattern) ? get_class($pattern) : gettype($pattern)) )); } if (is_array($pattern)) { foreach ($pattern as $p) { $this-&gt;validatePattern($p); } } if (is_string($pattern)) { $this-&gt;validatePattern($pattern); } $this-&gt;options['pattern'] = $pattern; return $this; } public function getPattern() { return $this-&gt;options['pattern']; } public function setReplacement($replacement) { if (!is_array($replacement) &amp;&amp; !is_string($replacement)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects replacement to be array or string; received "%s"', __METHOD__, (is_object($replacement) ? get_class($replacement) : gettype($replacement)) )); } $this-&gt;options['replacement'] = $replacement; return $this; } public function getReplacement() { return $this-&gt;options['replacement']; } public function filter($value) { if ($this-&gt;options['pattern'] === null) { throw new Exception\RuntimeException(sprintf( 'Filter %s does not have a valid pattern set', get_called_class() )); } return preg_replace($this-&gt;options['pattern'], $this-&gt;options['replacement'], $value); } protected function validatePattern($pattern) { if (!preg_match('/(?&lt;modifier&gt;[imsxeADSUXJu]+)$/', $pattern, $matches)) { return true; } if (false !== strstr($matches['modifier'], 'e')) { throw new Exception\InvalidArgumentException(sprintf( 'Pattern for a PregReplace filter may not contain the "e" pattern modifier; received "%s"', $pattern )); } } } &lt;?php
 namespace Zend\Filter; abstract class AbstractUnicode extends AbstractFilter { public function setEncoding($encoding = null) { if ($encoding !== null) { if (!function_exists('mb_strtolower')) { throw new Exception\ExtensionNotLoadedException(sprintf( '%s requires mbstring extension to be loaded', get_class($this) )); } $encoding = strtolower($encoding); $mbEncodings = array_map('strtolower', mb_list_encodings()); if (!in_array($encoding, $mbEncodings)) { throw new Exception\InvalidArgumentException(sprintf( "Encoding '%s' is not supported by mbstring extension", $encoding )); } } $this-&gt;options['encoding'] = $encoding; return $this; } public function getEncoding() { if ($this-&gt;options['encoding'] === null &amp;&amp; function_exists('mb_internal_encoding')) { $this-&gt;options['encoding'] = mb_internal_encoding(); } return $this-&gt;options['encoding']; } } &lt;?php
 namespace Zend\Filter\File; use Zend\Filter\Exception; use Zend\Filter\StringToLower; class LowerCase extends StringToLower { public function filter($value) { $isFileUpload = (is_array($value) &amp;&amp; isset($value['tmp_name'])); if ($isFileUpload) { $uploadData = $value; $value = $value['tmp_name']; } if (!file_exists($value)) { throw new Exception\InvalidArgumentException("File '$value' not found"); } if (!is_writable($value)) { throw new Exception\RuntimeException("File '$value' is not writable"); } $content = file_get_contents($value); if (!$content) { throw new Exception\RuntimeException("Problem while reading file '$value'"); } $content = parent::filter($content); $result = file_put_contents($value, $content); if (!$result) { throw new Exception\RuntimeException("Problem while writing file '$value'"); } if ($isFileUpload) { return $uploadData; } return $value; } } &lt;?php
 namespace Zend\Filter\File; use Zend\Filter\AbstractFilter; use Zend\Filter\Exception; use Zend\Stdlib\ErrorHandler; class RenameUpload extends AbstractFilter { protected $options = array( 'target' =&gt; null, 'use_upload_name' =&gt; false, 'overwrite' =&gt; false, 'randomize' =&gt; false, ); protected $alreadyFiltered = array(); public function __construct($targetOrOptions) { if (is_array($targetOrOptions)) { $this-&gt;setOptions($targetOrOptions); } else { $this-&gt;setTarget($targetOrOptions); } } public function setTarget($target) { if (!is_string($target)) { throw new Exception\InvalidArgumentException( 'Invalid target, must be a string' ); } $this-&gt;options['target'] = $target; return $this; } public function getTarget() { return $this-&gt;options['target']; } public function setUseUploadName($flag = true) { $this-&gt;options['use_upload_name'] = (boolean) $flag; return $this; } public function getUseUploadName() { return $this-&gt;options['use_upload_name']; } public function setOverwrite($flag = true) { $this-&gt;options['overwrite'] = (boolean) $flag; return $this; } public function getOverwrite() { return $this-&gt;options['overwrite']; } public function setRandomize($flag = true) { $this-&gt;options['randomize'] = (boolean) $flag; return $this; } public function getRandomize() { return $this-&gt;options['randomize']; } public function filter($value) { $isFileUpload = (is_array($value) &amp;&amp; isset($value['tmp_name'])); if ($isFileUpload) { $uploadData = $value; $sourceFile = $value['tmp_name']; } else { $uploadData = array( 'tmp_name' =&gt; $value, 'name' =&gt; $value, ); $sourceFile = $value; } if (isset($this-&gt;alreadyFiltered[$sourceFile])) { return $this-&gt;alreadyFiltered[$sourceFile]; } $targetFile = $this-&gt;getFinalTarget($uploadData); if (!file_exists($sourceFile) || $sourceFile == $targetFile) { return $value; } $this-&gt;checkFileExists($targetFile); $this-&gt;moveUploadedFile($sourceFile, $targetFile); $return = $targetFile; if ($isFileUpload) { $return = $uploadData; $return['tmp_name'] = $targetFile; } $this-&gt;alreadyFiltered[$sourceFile] = $return; return $return; } protected function moveUploadedFile($sourceFile, $targetFile) { ErrorHandler::start(); $result = move_uploaded_file($sourceFile, $targetFile); $warningException = ErrorHandler::stop(); if (!$result || null !== $warningException) { throw new Exception\RuntimeException( sprintf("File '%s' could not be renamed. An error occurred while processing the file.", $sourceFile), 0, $warningException ); } return $result; } protected function checkFileExists($targetFile) { if (file_exists($targetFile)) { if ($this-&gt;getOverwrite()) { unlink($targetFile); } else { throw new Exception\InvalidArgumentException( sprintf("File '%s' could not be renamed. It already exists.", $targetFile) ); } } } protected function getFinalTarget($uploadData) { $source = $uploadData['tmp_name']; $target = $this-&gt;getTarget(); if (!isset($target) || $target == '*') { $target = $source; } if (is_dir($target)) { $targetDir = $target; $last = $target[strlen($target) - 1]; if (($last != '/') &amp;&amp; ($last != '\\')) { $targetDir .= DIRECTORY_SEPARATOR; } } else { $info = pathinfo($target); $targetDir = $info['dirname'] . DIRECTORY_SEPARATOR; } if ($this-&gt;getUseUploadName()) { $targetFile = basename($uploadData['name']); } elseif (!is_dir($target)) { $targetFile = basename($target); } else { $targetFile = basename($source); } if ($this-&gt;getRandomize()) { $targetFile = $this-&gt;applyRandomToFilename($targetFile); } return $targetDir . $targetFile; } protected function applyRandomToFilename($filename) { $info = pathinfo($filename); $filename = $info['filename'] . uniqid('_'); if (isset($info['extension'])) { $filename .= '.' . $info['extension']; } return $filename; } } &lt;?php
 namespace Zend\Filter\File; use Zend\Filter; use Zend\Filter\Exception; class Decrypt extends Filter\Decrypt { protected $filename; public function getFilename() { return $this-&gt;filename; } public function setFilename($filename = null) { $this-&gt;filename = $filename; return $this; } public function filter($value) { $isFileUpload = (is_array($value) &amp;&amp; isset($value['tmp_name'])); if ($isFileUpload) { $uploadData = $value; $value = $value['tmp_name']; } if (!file_exists($value)) { throw new Exception\InvalidArgumentException("File '$value' not found"); } if (!isset($this-&gt;filename)) { $this-&gt;filename = $value; } if (file_exists($this-&gt;filename) and !is_writable($this-&gt;filename)) { throw new Exception\RuntimeException("File '{$this-&gt;filename}' is not writable"); } $content = file_get_contents($value); if (!$content) { throw new Exception\RuntimeException("Problem while reading file '$value'"); } $decrypted = parent::filter($content); $result = file_put_contents($this-&gt;filename, $decrypted); if (!$result) { throw new Exception\RuntimeException("Problem while writing file '{$this-&gt;filename}'"); } if ($isFileUpload) { $uploadData['tmp_name'] = $this-&gt;filename; return $uploadData; } return $this-&gt;filename; } } &lt;?php
 namespace Zend\Filter\File; use Zend\Filter\Exception; use Zend\Filter\StringToUpper; class UpperCase extends StringToUpper { public function filter($value) { $isFileUpload = (is_array($value) &amp;&amp; isset($value['tmp_name'])); if ($isFileUpload) { $uploadData = $value; $value = $value['tmp_name']; } if (!file_exists($value)) { throw new Exception\InvalidArgumentException("File '$value' not found"); } if (!is_writable($value)) { throw new Exception\InvalidArgumentException("File '$value' is not writable"); } $content = file_get_contents($value); if (!$content) { throw new Exception\RuntimeException("Problem while reading file '$value'"); } $content = parent::filter($content); $result = file_put_contents($value, $content); if (!$result) { throw new Exception\RuntimeException("Problem while writing file '$value'"); } if ($isFileUpload) { return $uploadData; } return $value; } } &lt;?php
 namespace Zend\Filter\File; use Traversable; use Zend\Filter; use Zend\Filter\Exception; use Zend\Stdlib\ArrayUtils; class Rename extends Filter\AbstractFilter { protected $files = array(); public function __construct($options) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (is_string($options)) { $options = array('target' =&gt; $options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException( 'Invalid options argument provided to filter' ); } $this-&gt;setFile($options); } public function getFile() { return $this-&gt;files; } public function setFile($options) { $this-&gt;files = array(); $this-&gt;addFile($options); return $this; } public function addFile($options) { if (is_string($options)) { $options = array('target' =&gt; $options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException( 'Invalid options to rename filter provided' ); } $this-&gt;_convertOptions($options); return $this; } public function getNewName($value, $source = false) { $file = $this-&gt;_getFileName($value); if (!is_array($file)) { return $file; } if ($file['source'] == $file['target']) { return $value; } if (!file_exists($file['source'])) { return $value; } if ($file['overwrite'] &amp;&amp; file_exists($file['target'])) { unlink($file['target']); } if (file_exists($file['target'])) { throw new Exception\InvalidArgumentException( sprintf("File '%s' could not be renamed. It already exists.", $value) ); } if ($source) { return $file; } return $file['target']; } public function filter($value) { $isFileUpload = (is_array($value) &amp;&amp; isset($value['tmp_name'])); if ($isFileUpload) { $uploadData = $value; $value = $value['tmp_name']; } $file = $this-&gt;getNewName($value, true); if (is_string($file)) { if ($isFileUpload) { return $uploadData; } else { return $file; } } $result = rename($file['source'], $file['target']); if ($result !== true) { throw new Exception\RuntimeException( sprintf( "File '%s' could not be renamed. " . "An error occurred while processing the file.", $value ) ); } if ($isFileUpload) { $uploadData['tmp_name'] = $file['target']; return $uploadData; } return $file['target']; } protected function _convertOptions($options) { $files = array(); foreach ($options as $key =&gt; $value) { if (is_array($value)) { $this-&gt;_convertOptions($value); continue; } switch ($key) { case "source": $files['source'] = (string) $value; break; case 'target' : $files['target'] = (string) $value; break; case 'overwrite' : $files['overwrite'] = (bool) $value; break; case 'randomize' : $files['randomize'] = (boolean) $value; break; default: break; } } if (empty($files)) { return $this; } if (empty($files['source'])) { $files['source'] = '*'; } if (empty($files['target'])) { $files['target'] = '*'; } if (empty($files['overwrite'])) { $files['overwrite'] = false; } if (empty($files['randomize'])) { $files['randomize'] = false; } $found = false; foreach ($this-&gt;files as $key =&gt; $value) { if ($value['source'] == $files['source']) { $this-&gt;files[$key] = $files; $found = true; } } if (!$found) { $count = count($this-&gt;files); $this-&gt;files[$count] = $files; } return $this; } protected function _getFileName($file) { $rename = array(); foreach ($this-&gt;files as $value) { if ($value['source'] == '*') { if (!isset($rename['source'])) { $rename = $value; $rename['source'] = $file; } } if ($value['source'] == $file) { $rename = $value; break; } } if (!isset($rename['source'])) { return $file; } if (!isset($rename['target']) || $rename['target'] == '*') { $rename['target'] = $rename['source']; } if (is_dir($rename['target'])) { $name = basename($rename['source']); $last = $rename['target'][strlen($rename['target']) - 1]; if (($last != '/') &amp;&amp; ($last != '\\')) { $rename['target'] .= DIRECTORY_SEPARATOR; } $rename['target'] .= $name; } if ($rename['randomize']) { $info = pathinfo($rename['target']); $newTarget = $info['dirname'] . DIRECTORY_SEPARATOR . $info['filename'] . uniqid('_'); if (isset($info['extension'])) { $newTarget .= '.' . $info['extension']; } $rename['target'] = $newTarget; } return $rename; } } &lt;?php
 namespace Zend\Filter\File; use Zend\Filter; use Zend\Filter\Exception; class Encrypt extends Filter\Encrypt { protected $filename; public function getFilename() { return $this-&gt;filename; } public function setFilename($filename = null) { $this-&gt;filename = $filename; return $this; } public function filter($value) { $isFileUpload = (is_array($value) &amp;&amp; isset($value['tmp_name'])); if ($isFileUpload) { $uploadData = $value; $value = $value['tmp_name']; } if (!file_exists($value)) { throw new Exception\InvalidArgumentException("File '$value' not found"); } if (!isset($this-&gt;filename)) { $this-&gt;filename = $value; } if (file_exists($this-&gt;filename) and !is_writable($this-&gt;filename)) { throw new Exception\RuntimeException("File '{$this-&gt;filename}' is not writable"); } $content = file_get_contents($value); if (!$content) { throw new Exception\RuntimeException("Problem while reading file '$value'"); } $encrypted = parent::filter($content); $result = file_put_contents($this-&gt;filename, $encrypted); if (!$result) { throw new Exception\RuntimeException("Problem while writing file '{$this-&gt;filename}'"); } if ($isFileUpload) { $uploadData['tmp_name'] = $this-&gt;filename; return $uploadData; } return $this-&gt;filename; } } &lt;?php
 namespace Zend\Filter; class Decrypt extends Encrypt { public function filter($value) { return $this-&gt;adapter-&gt;decrypt($value); } } &lt;?php
 namespace Zend\Filter; use Countable; use Zend\Stdlib\PriorityQueue; class FilterChain extends AbstractFilter implements Countable { const DEFAULT_PRIORITY = 1000; protected $plugins; protected $filters; public function __construct($options = null) { $this-&gt;filters = new PriorityQueue(); if (null !== $options) { $this-&gt;setOptions($options); } } public function setOptions($options) { if (!is_array($options) &amp;&amp; !$options instanceof \Traversable) { throw new Exception\InvalidArgumentException(sprintf( 'Expected array or Traversable; received "%s"', (is_object($options) ? get_class($options) : gettype($options)) )); } foreach ($options as $key =&gt; $value) { switch (strtolower($key)) { case 'callbacks': foreach ($value as $spec) { $callback = isset($spec['callback']) ? $spec['callback'] : false; $priority = isset($spec['priority']) ? $spec['priority'] : static::DEFAULT_PRIORITY; if ($callback) { $this-&gt;attach($callback, $priority); } } break; case 'filters': foreach ($value as $spec) { $name = isset($spec['name']) ? $spec['name'] : false; $options = isset($spec['options']) ? $spec['options'] : array(); $priority = isset($spec['priority']) ? $spec['priority'] : static::DEFAULT_PRIORITY; if ($name) { $this-&gt;attachByName($name, $options, $priority); } } break; default: break; } } return $this; } public function count() { return count($this-&gt;filters); } public function getPluginManager() { if (!$this-&gt;plugins) { $this-&gt;setPluginManager(new FilterPluginManager()); } return $this-&gt;plugins; } public function setPluginManager(FilterPluginManager $plugins) { $this-&gt;plugins = $plugins; return $this; } public function plugin($name, array $options = array()) { $plugins = $this-&gt;getPluginManager(); return $plugins-&gt;get($name, $options); } public function attach($callback, $priority = self::DEFAULT_PRIORITY) { if (!is_callable($callback)) { if (!$callback instanceof FilterInterface) { throw new Exception\InvalidArgumentException(sprintf( 'Expected a valid PHP callback; received "%s"', (is_object($callback) ? get_class($callback) : gettype($callback)) )); } $callback = array($callback, 'filter'); } $this-&gt;filters-&gt;insert($callback, $priority); return $this; } public function attachByName($name, $options = array(), $priority = self::DEFAULT_PRIORITY) { if (!is_array($options)) { $options = (array) $options; } elseif (empty($options)) { $options = null; } $filter = $this-&gt;getPluginManager()-&gt;get($name, $options); return $this-&gt;attach($filter, $priority); } public function merge(FilterChain $filterChain) { foreach ($filterChain-&gt;filters as $filter) { $this-&gt;attach($filter); } return $this; } public function getFilters() { return $this-&gt;filters; } public function filter($value) { $chain = clone $this-&gt;filters; $valueFiltered = $value; foreach ($chain as $filter) { $valueFiltered = call_user_func($filter, $valueFiltered); } return $valueFiltered; } public function __clone() { $this-&gt;filters = clone $this-&gt;filters; } public function __sleep() { return array('filters'); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\ArrayUtils; class Inflector extends AbstractFilter { protected $pluginManager = null; protected $target = null; protected $throwTargetExceptionsOn = true; protected $targetReplacementIdentifier = ':'; protected $rules = array(); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = func_get_args(); $temp = array(); if (!empty($options)) { $temp['target'] = array_shift($options); } if (!empty($options)) { $temp['rules'] = array_shift($options); } if (!empty($options)) { $temp['throwTargetExceptionsOn'] = array_shift($options); } if (!empty($options)) { $temp['targetReplacementIdentifier'] = array_shift($options); } $options = $temp; } $this-&gt;setOptions($options); } public function getPluginManager() { if (!$this-&gt;pluginManager instanceof FilterPluginManager) { $this-&gt;setPluginManager(new FilterPluginManager()); } return $this-&gt;pluginManager; } public function setPluginManager(FilterPluginManager $manager) { $this-&gt;pluginManager = $manager; return $this; } public function setOptions($options) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (array_key_exists('pluginManager', $options)) { if (is_scalar($options['pluginManager']) &amp;&amp; class_exists($options['pluginManager'])) { $options['pluginManager'] = new $options['pluginManager']; } $this-&gt;setPluginManager($options['pluginManager']); } if (array_key_exists('throwTargetExceptionsOn', $options)) { $this-&gt;setThrowTargetExceptionsOn($options['throwTargetExceptionsOn']); } if (array_key_exists('targetReplacementIdentifier', $options)) { $this-&gt;setTargetReplacementIdentifier($options['targetReplacementIdentifier']); } if (array_key_exists('target', $options)) { $this-&gt;setTarget($options['target']); } if (array_key_exists('rules', $options)) { $this-&gt;addRules($options['rules']); } return $this; } public function setThrowTargetExceptionsOn($throwTargetExceptionsOn) { $this-&gt;throwTargetExceptionsOn = ($throwTargetExceptionsOn == true) ? true : false; return $this; } public function isThrowTargetExceptionsOn() { return $this-&gt;throwTargetExceptionsOn; } public function setTargetReplacementIdentifier($targetReplacementIdentifier) { if ($targetReplacementIdentifier) { $this-&gt;targetReplacementIdentifier = (string) $targetReplacementIdentifier; } return $this; } public function getTargetReplacementIdentifier() { return $this-&gt;targetReplacementIdentifier; } public function setTarget($target) { $this-&gt;target = (string) $target; return $this; } public function getTarget() { return $this-&gt;target; } public function setTargetReference(&amp;$target) { $this-&gt;target =&amp; $target; return $this; } public function setRules(Array $rules) { $this-&gt;clearRules(); $this-&gt;addRules($rules); return $this; } public function addRules(Array $rules) { $keys = array_keys($rules); foreach ($keys as $spec) { if ($spec[0] == ':') { $this-&gt;addFilterRule($spec, $rules[$spec]); } else { $this-&gt;setStaticRule($spec, $rules[$spec]); } } return $this; } public function getRules($spec = null) { if (null !== $spec) { $spec = $this-&gt;_normalizeSpec($spec); if (isset($this-&gt;rules[$spec])) { return $this-&gt;rules[$spec]; } return false; } return $this-&gt;rules; } public function getRule($spec, $index) { $spec = $this-&gt;_normalizeSpec($spec); if (isset($this-&gt;rules[$spec]) &amp;&amp; is_array($this-&gt;rules[$spec])) { if (isset($this-&gt;rules[$spec][$index])) { return $this-&gt;rules[$spec][$index]; } } return false; } public function clearRules() { $this-&gt;rules = array(); return $this; } public function setFilterRule($spec, $ruleSet) { $spec = $this-&gt;_normalizeSpec($spec); $this-&gt;rules[$spec] = array(); return $this-&gt;addFilterRule($spec, $ruleSet); } public function addFilterRule($spec, $ruleSet) { $spec = $this-&gt;_normalizeSpec($spec); if (!isset($this-&gt;rules[$spec])) { $this-&gt;rules[$spec] = array(); } if (!is_array($ruleSet)) { $ruleSet = array($ruleSet); } if (is_string($this-&gt;rules[$spec])) { $temp = $this-&gt;rules[$spec]; $this-&gt;rules[$spec] = array(); $this-&gt;rules[$spec][] = $temp; } foreach ($ruleSet as $rule) { $this-&gt;rules[$spec][] = $this-&gt;_getRule($rule); } return $this; } public function setStaticRule($name, $value) { $name = $this-&gt;_normalizeSpec($name); $this-&gt;rules[$name] = (string) $value; return $this; } public function setStaticRuleReference($name, &amp;$reference) { $name = $this-&gt;_normalizeSpec($name); $this-&gt;rules[$name] =&amp; $reference; return $this; } public function filter($source) { foreach ((array) $source as $sourceName =&gt; $sourceValue) { $source[ltrim($sourceName, ':')] = $sourceValue; } $pregQuotedTargetReplacementIdentifier = preg_quote($this-&gt;targetReplacementIdentifier, '#'); $processedParts = array(); foreach ($this-&gt;rules as $ruleName =&gt; $ruleValue) { if (isset($source[$ruleName])) { if (is_string($ruleValue)) { $processedParts['#' . $pregQuotedTargetReplacementIdentifier . $ruleName . '#'] = str_replace('\\', '\\\\', $source[$ruleName]); } elseif (is_array($ruleValue)) { $processedPart = $source[$ruleName]; foreach ($ruleValue as $ruleFilter) { $processedPart = $ruleFilter($processedPart); } $processedParts['#' . $pregQuotedTargetReplacementIdentifier . $ruleName . '#'] = str_replace('\\', '\\\\', $processedPart); } } elseif (is_string($ruleValue)) { $processedParts['#' . $pregQuotedTargetReplacementIdentifier . $ruleName . '#'] = str_replace('\\', '\\\\', $ruleValue); } } $inflectedTarget = preg_replace(array_keys($processedParts), array_values($processedParts), $this-&gt;target); if ($this-&gt;throwTargetExceptionsOn &amp;&amp; (preg_match('#(?=' . $pregQuotedTargetReplacementIdentifier.'[A-Za-z]{1})#', $inflectedTarget) == true)) { throw new Exception\RuntimeException('A replacement identifier ' . $this-&gt;targetReplacementIdentifier . ' was found inside the inflected target, perhaps a rule was not satisfied with a target source?  Unsatisfied inflected target: ' . $inflectedTarget); } return $inflectedTarget; } protected function _normalizeSpec($spec) { return ltrim((string) $spec, ':&amp;'); } protected function _getRule($rule) { if ($rule instanceof FilterInterface) { return $rule; } $rule = (string) $rule; return $this-&gt;getPluginManager()-&gt;get($rule); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\ArrayUtils; class Boolean extends AbstractFilter { const TYPE_BOOLEAN = 1; const TYPE_INTEGER = 2; const TYPE_FLOAT = 4; const TYPE_STRING = 8; const TYPE_ZERO_STRING = 16; const TYPE_EMPTY_ARRAY = 32; const TYPE_NULL = 64; const TYPE_PHP = 127; const TYPE_FALSE_STRING = 128; const TYPE_LOCALIZED = 256; const TYPE_ALL = 511; protected $constants = array( self::TYPE_BOOLEAN =&gt; 'boolean', self::TYPE_INTEGER =&gt; 'integer', self::TYPE_FLOAT =&gt; 'float', self::TYPE_STRING =&gt; 'string', self::TYPE_ZERO_STRING =&gt; 'zero', self::TYPE_EMPTY_ARRAY =&gt; 'array', self::TYPE_NULL =&gt; 'null', self::TYPE_PHP =&gt; 'php', self::TYPE_FALSE_STRING =&gt; 'false', self::TYPE_LOCALIZED =&gt; 'localized', self::TYPE_ALL =&gt; 'all', ); protected $options = array( 'type' =&gt; self::TYPE_PHP, 'casting' =&gt; true, 'translations' =&gt; array(), ); public function __construct($typeOrOptions = null, $casting = true, $translations = array()) { if ($typeOrOptions !== null) { if ($typeOrOptions instanceof Traversable) { $typeOrOptions = ArrayUtils::iteratorToArray($typeOrOptions); } if (is_array($typeOrOptions)) { if (isset($typeOrOptions['type']) || isset($typeOrOptions['casting']) || isset($typeOrOptions['translations'])) { $this-&gt;setOptions($typeOrOptions); } else { $this-&gt;setType($typeOrOptions); $this-&gt;setCasting($casting); $this-&gt;setTranslations($translations); } } else { $this-&gt;setType($typeOrOptions); $this-&gt;setCasting($casting); $this-&gt;setTranslations($translations); } } } public function setType($type = null) { if (is_array($type)) { $detected = 0; foreach ($type as $value) { if (is_int($value)) { $detected += $value; } elseif (in_array($value, $this-&gt;constants)) { $detected += array_search($value, $this-&gt;constants); } } $type = $detected; } elseif (is_string($type) &amp;&amp; in_array($type, $this-&gt;constants)) { $type = array_search($type, $this-&gt;constants); } if (!is_int($type) || ($type &lt; 0) || ($type &gt; self::TYPE_ALL)) { throw new Exception\InvalidArgumentException(sprintf( 'Unknown type value "%s" (%s)', $type, gettype($type) )); } $this-&gt;options['type'] = $type; return $this; } public function getType() { return $this-&gt;options['type']; } public function setCasting($flag = true) { $this-&gt;options['casting'] = (bool) $flag; return $this; } public function getCasting() { return $this-&gt;options['casting']; } public function setTranslations($translations) { if (!is_array($translations) &amp;&amp; !$translations instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '"%s" expects an array or Traversable; received "%s"', __METHOD__, (is_object($translations) ? get_class($translations) : gettype($translations)) )); } foreach ($translations as $message =&gt; $flag) { $this-&gt;options['translations'][$message] = (bool) $flag; } return $this; } public function getTranslations() { return $this-&gt;options['translations']; } public function filter($value) { $type = $this-&gt;getType(); $casting = $this-&gt;getCasting(); if ($type &gt;= self::TYPE_LOCALIZED) { $type -= self::TYPE_LOCALIZED; if (is_string($value)) { if (isset($this-&gt;options['translations'][$value])) { return (bool) $this-&gt;options['translations'][$value]; } } } if ($type &gt;= self::TYPE_FALSE_STRING) { $type -= self::TYPE_FALSE_STRING; if (is_string($value) &amp;&amp; (strtolower($value) == 'false')) { return false; } if (!$casting &amp;&amp; is_string($value) &amp;&amp; (strtolower($value) == 'true')) { return true; } } if ($type &gt;= self::TYPE_NULL) { $type -= self::TYPE_NULL; if ($value === null) { return false; } } if ($type &gt;= self::TYPE_EMPTY_ARRAY) { $type -= self::TYPE_EMPTY_ARRAY; if (is_array($value) &amp;&amp; ($value == array())) { return false; } } if ($type &gt;= self::TYPE_ZERO_STRING) { $type -= self::TYPE_ZERO_STRING; if (is_string($value) &amp;&amp; ($value == '0')) { return false; } if (!$casting &amp;&amp; (is_string($value)) &amp;&amp; ($value == '1')) { return true; } } if ($type &gt;= self::TYPE_STRING) { $type -= self::TYPE_STRING; if (is_string($value) &amp;&amp; ($value == '')) { return false; } } if ($type &gt;= self::TYPE_FLOAT) { $type -= self::TYPE_FLOAT; if (is_float($value) &amp;&amp; ($value == 0.0)) { return false; } if (!$casting &amp;&amp; is_float($value) &amp;&amp; ($value == 1.0)) { return true; } } if ($type &gt;= self::TYPE_INTEGER) { $type -= self::TYPE_INTEGER; if (is_int($value) &amp;&amp; ($value == 0)) { return false; } if (!$casting &amp;&amp; is_int($value) &amp;&amp; ($value == 1)) { return true; } } if ($type &gt;= self::TYPE_BOOLEAN) { $type -= self::TYPE_BOOLEAN; if (is_bool($value)) { return $value; } } if ($casting) { return true; } return $value; } } &lt;?php
 namespace Zend\Filter; class Int extends AbstractFilter { public function filter($value) { return (int) ((string) $value); } } &lt;?php
 namespace Zend\Filter; class Decompress extends Compress { public function __invoke($value) { return $this-&gt;getAdapter()-&gt;decompress($value); } public function filter($value) { return $this-&gt;getAdapter()-&gt;decompress($value); } } &lt;?php
 namespace Zend\Filter; use Zend\Stdlib\StringUtils; class Digits extends AbstractFilter { public function filter($value) { if (!StringUtils::hasPcreUnicodeSupport()) { $pattern = '/[^0-9]/'; } elseif (extension_loaded('mbstring')) { $pattern = '/[^[:digit:]]/'; } else { $pattern = '/[\p{^N}]/'; } return preg_replace($pattern, '', (string) $value); } } &lt;?php
 namespace Zend\Filter\Word; use Zend\Filter\AbstractFilter; use Zend\Filter\Exception; class SeparatorToSeparator extends AbstractFilter { protected $searchSeparator = null; protected $replacementSeparator = null; public function __construct($searchSeparator = ' ', $replacementSeparator = '-') { $this-&gt;setSearchSeparator($searchSeparator); $this-&gt;setReplacementSeparator($replacementSeparator); } public function setSearchSeparator($separator) { $this-&gt;searchSeparator = $separator; return $this; } public function getSearchSeparator() { return $this-&gt;searchSeparator; } public function setReplacementSeparator($separator) { $this-&gt;replacementSeparator = $separator; return $this; } public function getReplacementSeparator() { return $this-&gt;replacementSeparator; } public function filter($value) { if ($this-&gt;searchSeparator == null) { throw new Exception\RuntimeException('You must provide a search separator for this filter to work.'); } $pattern = '#' . preg_quote($this-&gt;searchSeparator, '#') . '#'; return preg_replace($pattern, $this-&gt;replacementSeparator, $value); } } &lt;?php
 namespace Zend\Filter\Word; class UnderscoreToCamelCase extends SeparatorToCamelCase { public function __construct() { parent::__construct('_'); } } &lt;?php
 namespace Zend\Filter\Word; use Zend\Filter\Exception; use Zend\Filter\AbstractFilter; abstract class AbstractSeparator extends AbstractFilter { protected $separator = ' '; public function __construct($separator = ' ') { if (is_array($separator)) { $temp = ' '; if (isset($separator['separator']) &amp;&amp; is_string($separator['separator'])) { $temp = $separator['separator']; } $separator = $temp; } $this-&gt;setSeparator($separator); } public function setSeparator($separator) { if (!is_string($separator)) { throw new Exception\InvalidArgumentException('"' . $separator . '" is not a valid separator.'); } $this-&gt;separator = $separator; return $this; } public function getSeparator() { return $this-&gt;separator; } } &lt;?php
 namespace Zend\Filter\Word; use Zend\Stdlib\StringUtils; class SeparatorToCamelCase extends AbstractSeparator { public function filter($value) { $pregQuotedSeparator = preg_quote($this-&gt;separator, '#'); if (StringUtils::hasPcreUnicodeSupport()) { $patterns = array( '#(' . $pregQuotedSeparator.')(\p{L}{1})#u', '#(^\p{Ll}{1})#u', ); if (!extension_loaded('mbstring')) { $replacements = array( function ($matches) { return strtoupper($matches[2]); }, function ($matches) { return strtoupper($matches[1]); }, ); } else { $replacements = array( function ($matches) { return mb_strtoupper($matches[2], 'UTF-8'); }, function ($matches) { return mb_strtoupper($matches[1], 'UTF-8'); }, ); } } else { $patterns = array( '#(' . $pregQuotedSeparator.')([A-Za-z]{1})#', '#(^[A-Za-z]{1})#', ); $replacements = array( function ($matches) { return strtoupper($matches[2]); }, function ($matches) { return strtoupper($matches[1]); }, ); } $filtered = $value; foreach ($patterns as $index =&gt; $pattern) { $filtered = preg_replace_callback($pattern, $replacements[$index], $filtered); } return $filtered; } } &lt;?php
 namespace Zend\Filter\Word; class CamelCaseToDash extends CamelCaseToSeparator { public function __construct() { parent::__construct('-'); } } &lt;?php
 namespace Zend\Filter\Word; class SeparatorToDash extends SeparatorToSeparator { public function __construct($searchSeparator = ' ') { parent::__construct($searchSeparator, '-'); } } &lt;?php
 namespace Zend\Filter\Word; class CamelCaseToUnderscore extends CamelCaseToSeparator { public function __construct() { parent::__construct('_'); } } &lt;?php
 namespace Zend\Filter\Word; class UnderscoreToSeparator extends SeparatorToSeparator { public function __construct($replacementSeparator = ' ') { parent::__construct('_', $replacementSeparator); } } &lt;?php
 namespace Zend\Filter\Word; class DashToUnderscore extends SeparatorToSeparator { public function __construct() { parent::__construct('-', '_'); } } &lt;?php
 namespace Zend\Filter\Word; class DashToSeparator extends AbstractSeparator { public function filter($value) { return preg_replace('#-#', $this-&gt;separator, $value); } } &lt;?php
 namespace Zend\Filter\Word; class UnderscoreToDash extends SeparatorToSeparator { public function __construct() { parent::__construct('_', '-'); } } &lt;?php
 namespace Zend\Filter\Word; class DashToCamelCase extends SeparatorToCamelCase { public function __construct() { parent::__construct('-'); } } &lt;?php
 namespace Zend\Filter\Word; use Zend\Stdlib\StringUtils; class CamelCaseToSeparator extends AbstractSeparator { public function filter($value) { if (StringUtils::hasPcreUnicodeSupport()) { $pattern = array('#(?&lt;=(?:\p{Lu}))(\p{Lu}\p{Ll})#', '#(?&lt;=(?:\p{Ll}|\p{Nd}))(\p{Lu})#'); $replacement = array($this-&gt;separator . '\1', $this-&gt;separator . '\1'); } else { $pattern = array('#(?&lt;=(?:[A-Z]))([A-Z]+)([A-Z][A-z])#', '#(?&lt;=(?:[a-z0-9]))([A-Z])#'); $replacement = array('\1' . $this-&gt;separator . '\2', $this-&gt;separator . '\1'); } return preg_replace($pattern, $replacement, $value); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\ArrayUtils; class Encrypt extends AbstractFilter { protected $adapter; public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } $this-&gt;setAdapter($options); } public function getAdapter() { return $this-&gt;adapter-&gt;toString(); } public function setAdapter($options = null) { if (is_string($options)) { $adapter = $options; } elseif (isset($options['adapter'])) { $adapter = $options['adapter']; unset($options['adapter']); } else { $adapter = 'BlockCipher'; } if (!is_array($options)) { $options = array(); } if (class_exists('Zend\Filter\Encrypt\\' . ucfirst($adapter))) { $adapter = 'Zend\Filter\Encrypt\\' . ucfirst($adapter); } elseif (!class_exists($adapter)) { throw new Exception\DomainException( sprintf('%s expects a valid registry class name; received "%s", which did not resolve', __METHOD__, $adapter )); } $this-&gt;adapter = new $adapter($options); if (!$this-&gt;adapter instanceof Encrypt\EncryptionAlgorithmInterface) { throw new Exception\InvalidArgumentException( "Encoding adapter '" . $adapter . "' does not implement Zend\\Filter\\Encrypt\\EncryptionAlgorithmInterface"); } return $this; } public function __call($method, $options) { $part = substr($method, 0, 3); if ((($part != 'get') &amp;&amp; ($part != 'set')) || !method_exists($this-&gt;adapter, $method)) { throw new Exception\BadMethodCallException("Unknown method '{$method}'"); } return call_user_func_array(array($this-&gt;adapter, $method), $options); } public function filter($value) { return $this-&gt;adapter-&gt;encrypt($value); } } &lt;?php
 namespace Zend\Filter; use Traversable; class StringToLower extends AbstractUnicode { protected $options = array( 'encoding' =&gt; null, ); public function __construct($encodingOrOptions = null) { if ($encodingOrOptions !== null) { if (!static::isOptions($encodingOrOptions)) { $this-&gt;setEncoding($encodingOrOptions); } else { $this-&gt;setOptions($encodingOrOptions); } } } public function filter($value) { if ($this-&gt;options['encoding'] !== null) { return mb_strtolower((string) $value, $this-&gt;options['encoding']); } return strtolower((string) $value); } } &lt;?php
 namespace Zend\Filter; use Traversable; use Zend\Stdlib\ErrorHandler; class RealPath extends AbstractFilter { protected $options = array( 'exists' =&gt; true ); public function __construct($existsOrOptions = true) { if ($existsOrOptions !== null) { if (!static::isOptions($existsOrOptions)) { $this-&gt;setExists($existsOrOptions); } else { $this-&gt;setOptions($existsOrOptions); } } } public function setExists($flag = true) { $this-&gt;options['exists'] = (bool) $flag; return $this; } public function getExists() { return $this-&gt;options['exists']; } public function filter($value) { $path = (string) $value; if ($this-&gt;options['exists']) { return realpath($path); } ErrorHandler::start(); $realpath = realpath($path); ErrorHandler::stop(); if ($realpath) { return $realpath; } $drive = ''; if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') { $path = preg_replace('/[\\\\\/]/', DIRECTORY_SEPARATOR, $path); if (preg_match('/([a-zA-Z]\:)(.*)/', $path, $matches)) { list(, $drive, $path) = $matches; } else { $cwd = getcwd(); $drive = substr($cwd, 0, 2); if (substr($path, 0, 1) != DIRECTORY_SEPARATOR) { $path = substr($cwd, 3) . DIRECTORY_SEPARATOR . $path; } } } elseif (substr($path, 0, 1) != DIRECTORY_SEPARATOR) { $path = getcwd() . DIRECTORY_SEPARATOR . $path; } $stack = array(); $parts = explode(DIRECTORY_SEPARATOR, $path); foreach ($parts as $dir) { if (strlen($dir) &amp;&amp; $dir !== '.') { if ($dir == '..') { array_pop($stack); } else { array_push($stack, $dir); } } } return $drive . DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $stack); } } &lt;?php
 namespace Zend\Filter; class StaticFilter { protected static $plugins; public static function setPluginManager(FilterPluginManager $manager = null) { if ($manager instanceof FilterPluginManager) { $manager-&gt;setShareByDefault(false); } static::$plugins = $manager; } public static function getPluginManager() { if (null === static::$plugins) { static::setPluginManager(new FilterPluginManager()); } return static::$plugins; } public static function execute($value, $classBaseName, array $args = array()) { $plugins = static::getPluginManager(); $filter = $plugins-&gt;get($classBaseName, $args); return $filter-&gt;filter($value); } } &lt;?php
 namespace Zend\Filter\Compress; use Zend\Filter\Exception; class Lzf implements CompressionAlgorithmInterface { public function __construct($options = null) { if (!extension_loaded('lzf')) { throw new Exception\ExtensionNotLoadedException('This filter needs the lzf extension'); } } public function compress($content) { $compressed = lzf_compress($content); if (!$compressed) { throw new Exception\RuntimeException('Error during compression'); } return $compressed; } public function decompress($content) { $compressed = lzf_decompress($content); if (!$compressed) { throw new Exception\RuntimeException('Error during decompression'); } return $compressed; } public function toString() { return 'Lzf'; } } &lt;?php
 namespace Zend\Filter\Compress; use Archive_Tar; use RecursiveDirectoryIterator; use RecursiveIteratorIterator; use Zend\Filter\Exception; class Tar extends AbstractCompressionAlgorithm { protected $options = array( 'archive' =&gt; null, 'target' =&gt; '.', 'mode' =&gt; null, ); public function __construct($options = null) { if (!class_exists('Archive_Tar')) { throw new Exception\ExtensionNotLoadedException( 'This filter needs PEAR\'s Archive_Tar component. ' . 'Ensure loading Archive_Tar (registering autoload or require_once)'); } parent::__construct($options); } public function getArchive() { return $this-&gt;options['archive']; } public function setArchive($archive) { $archive = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, (string) $archive); $this-&gt;options['archive'] = $archive; return $this; } public function getTarget() { return $this-&gt;options['target']; } public function setTarget($target) { if (!file_exists(dirname($target))) { throw new Exception\InvalidArgumentException("The directory '$target' does not exist"); } $target = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, (string) $target); $this-&gt;options['target'] = $target; return $this; } public function getMode() { return $this-&gt;options['mode']; } public function setMode($mode) { $mode = ucfirst(strtolower($mode)); if (($mode != 'Bz2') &amp;&amp; ($mode != 'Gz')) { throw new Exception\InvalidArgumentException("The mode '$mode' is unknown"); } if (($mode == 'Bz2') &amp;&amp; (!extension_loaded('bz2'))) { throw new Exception\ExtensionNotLoadedException('This mode needs the bz2 extension'); } if (($mode == 'Gz') &amp;&amp; (!extension_loaded('zlib'))) { throw new Exception\ExtensionNotLoadedException('This mode needs the zlib extension'); } $this-&gt;options['mode'] = $mode; return $this; } public function compress($content) { $archive = new Archive_Tar($this-&gt;getArchive(), $this-&gt;getMode()); if (!file_exists($content)) { $file = $this-&gt;getTarget(); if (is_dir($file)) { $file .= DIRECTORY_SEPARATOR . "tar.tmp"; } $result = file_put_contents($file, $content); if ($result === false) { throw new Exception\RuntimeException('Error creating the temporary file'); } $content = $file; } if (is_dir($content)) { foreach (new RecursiveIteratorIterator( new RecursiveDirectoryIterator($content, RecursiveDirectoryIterator::KEY_AS_PATHNAME), RecursiveIteratorIterator::SELF_FIRST ) as $directory =&gt; $info ) { if ($info-&gt;isFile()) { $file[] = $directory; } } $content = $file; } $result = $archive-&gt;create($content); if ($result === false) { throw new Exception\RuntimeException('Error creating the Tar archive'); } return $this-&gt;getArchive(); } public function decompress($content) { $archive = $this-&gt;getArchive(); if (empty($archive) || !file_exists($archive)) { throw new Exception\RuntimeException('Tar Archive not found'); } $archive = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, realpath($content)); $archive = new Archive_Tar($archive, $this-&gt;getMode()); $target = $this-&gt;getTarget(); if (!is_dir($target)) { $target = dirname($target) . DIRECTORY_SEPARATOR; } $result = $archive-&gt;extract($target); if ($result === false) { throw new Exception\RuntimeException('Error while extracting the Tar archive'); } return $target; } public function toString() { return 'Tar'; } } &lt;?php
 namespace Zend\Filter\Compress; use Traversable; use Zend\Stdlib\ArrayUtils; abstract class AbstractCompressionAlgorithm implements CompressionAlgorithmInterface { protected $options = array(); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (is_array($options)) { $this-&gt;setOptions($options); } } public function getOptions($option = null) { if ($option === null) { return $this-&gt;options; } if (!array_key_exists($option, $this-&gt;options)) { return null; } return $this-&gt;options[$option]; } public function setOptions(array $options) { foreach ($options as $key =&gt; $option) { $method = 'set' . $key; if (method_exists($this, $method)) { $this-&gt;$method($option); } } return $this; } } &lt;?php
 namespace Zend\Filter\Compress; use Zend\Filter\Exception; use ZipArchive; class Zip extends AbstractCompressionAlgorithm { protected $options = array( 'archive' =&gt; null, 'target' =&gt; null, ); public function __construct($options = null) { if (!extension_loaded('zip')) { throw new Exception\ExtensionNotLoadedException('This filter needs the zip extension'); } parent::__construct($options); } public function getArchive() { return $this-&gt;options['archive']; } public function setArchive($archive) { $archive = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, (string) $archive); $this-&gt;options['archive'] = $archive; return $this; } public function getTarget() { return $this-&gt;options['target']; } public function setTarget($target) { if (!file_exists(dirname($target))) { throw new Exception\InvalidArgumentException("The directory '$target' does not exist"); } $target = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, (string) $target); $this-&gt;options['target'] = $target; return $this; } public function compress($content) { $zip = new ZipArchive(); $res = $zip-&gt;open($this-&gt;getArchive(), ZipArchive::CREATE | ZipArchive::OVERWRITE); if ($res !== true) { throw new Exception\RuntimeException($this-&gt;errorString($res)); } if (file_exists($content)) { $content = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, realpath($content)); $basename = substr($content, strrpos($content, DIRECTORY_SEPARATOR) + 1); if (is_dir($content)) { $index = strrpos($content, DIRECTORY_SEPARATOR) + 1; $content .= DIRECTORY_SEPARATOR; $stack = array($content); while (!empty($stack)) { $current = array_pop($stack); $files = array(); $dir = dir($current); while (false !== ($node = $dir-&gt;read())) { if (($node == '.') || ($node == '..')) { continue; } if (is_dir($current . $node)) { array_push($stack, $current . $node . DIRECTORY_SEPARATOR); } if (is_file($current . $node)) { $files[] = $node; } } $local = substr($current, $index); $zip-&gt;addEmptyDir(substr($local, 0, -1)); foreach ($files as $file) { $zip-&gt;addFile($current . $file, $local . $file); if ($res !== true) { throw new Exception\RuntimeException($this-&gt;errorString($res)); } } } } else { $res = $zip-&gt;addFile($content, $basename); if ($res !== true) { throw new Exception\RuntimeException($this-&gt;errorString($res)); } } } else { $file = $this-&gt;getTarget(); if (!is_dir($file)) { $file = basename($file); } else { $file = "zip.tmp"; } $res = $zip-&gt;addFromString($file, $content); if ($res !== true) { throw new Exception\RuntimeException($this-&gt;errorString($res)); } } $zip-&gt;close(); return $this-&gt;options['archive']; } public function decompress($content) { $archive = $this-&gt;getArchive(); if (empty($archive) || !file_exists($archive)) { throw new Exception\RuntimeException('ZIP Archive not found'); } $archive = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, realpath($content)); $zip = new ZipArchive(); $res = $zip-&gt;open($archive); $target = $this-&gt;getTarget(); if (!empty($target) &amp;&amp; !is_dir($target)) { $target = dirname($target); } if (!empty($target)) { $target = rtrim($target, '/\\') . DIRECTORY_SEPARATOR; } if (empty($target) || !is_dir($target)) { throw new Exception\RuntimeException('No target for ZIP decompression set'); } if ($res !== true) { throw new Exception\RuntimeException($this-&gt;errorString($res)); } $res = $zip-&gt;extractTo($target); if ($res !== true) { throw new Exception\RuntimeException($this-&gt;errorString($res)); } $zip-&gt;close(); return $target; } public function errorString($error) { switch ($error) { case ZipArchive::ER_MULTIDISK : return 'Multidisk ZIP Archives not supported'; case ZipArchive::ER_RENAME : return 'Failed to rename the temporary file for ZIP'; case ZipArchive::ER_CLOSE : return 'Failed to close the ZIP Archive'; case ZipArchive::ER_SEEK : return 'Failure while seeking the ZIP Archive'; case ZipArchive::ER_READ : return 'Failure while reading the ZIP Archive'; case ZipArchive::ER_WRITE : return 'Failure while writing the ZIP Archive'; case ZipArchive::ER_CRC : return 'CRC failure within the ZIP Archive'; case ZipArchive::ER_ZIPCLOSED : return 'ZIP Archive already closed'; case ZipArchive::ER_NOENT : return 'No such file within the ZIP Archive'; case ZipArchive::ER_EXISTS : return 'ZIP Archive already exists'; case ZipArchive::ER_OPEN : return 'Can not open ZIP Archive'; case ZipArchive::ER_TMPOPEN : return 'Failure creating temporary ZIP Archive'; case ZipArchive::ER_ZLIB : return 'ZLib Problem'; case ZipArchive::ER_MEMORY : return 'Memory allocation problem while working on a ZIP Archive'; case ZipArchive::ER_CHANGED : return 'ZIP Entry has been changed'; case ZipArchive::ER_COMPNOTSUPP : return 'Compression method not supported within ZLib'; case ZipArchive::ER_EOF : return 'Premature EOF within ZIP Archive'; case ZipArchive::ER_INVAL : return 'Invalid argument for ZLIB'; case ZipArchive::ER_NOZIP : return 'Given file is no zip archive'; case ZipArchive::ER_INTERNAL : return 'Internal error while working on a ZIP Archive'; case ZipArchive::ER_INCONS : return 'Inconsistent ZIP archive'; case ZipArchive::ER_REMOVE : return 'Can not remove ZIP Archive'; case ZipArchive::ER_DELETED : return 'ZIP Entry has been deleted'; default : return 'Unknown error within ZIP Archive'; } } public function toString() { return 'Zip'; } } &lt;?php
 namespace Zend\Filter\Compress; interface CompressionAlgorithmInterface { public function compress($value); public function decompress($value); public function toString(); } &lt;?php
 namespace Zend\Filter\Compress; use Zend\Filter\Exception; class Bz2 extends AbstractCompressionAlgorithm { protected $options = array( 'blocksize' =&gt; 4, 'archive' =&gt; null, ); public function __construct($options = null) { if (!extension_loaded('bz2')) { throw new Exception\ExtensionNotLoadedException('This filter needs the bz2 extension'); } parent::__construct($options); } public function getBlocksize() { return $this-&gt;options['blocksize']; } public function setBlocksize($blocksize) { if (($blocksize &lt; 0) || ($blocksize &gt; 9)) { throw new Exception\InvalidArgumentException('Blocksize must be between 0 and 9'); } $this-&gt;options['blocksize'] = (int) $blocksize; return $this; } public function getArchive() { return $this-&gt;options['archive']; } public function setArchive($archive) { $this-&gt;options['archive'] = (string) $archive; return $this; } public function compress($content) { $archive = $this-&gt;getArchive(); if (!empty($archive)) { $file = bzopen($archive, 'w'); if (!$file) { throw new Exception\RuntimeException("Error opening the archive '" . $archive . "'"); } bzwrite($file, $content); bzclose($file); $compressed = true; } else { $compressed = bzcompress($content, $this-&gt;getBlocksize()); } if (is_int($compressed)) { throw new Exception\RuntimeException('Error during compression'); } return $compressed; } public function decompress($content) { $archive = $this-&gt;getArchive(); if (file_exists($content)) { $archive = $content; } if (file_exists($archive)) { $file = bzopen($archive, 'r'); if (!$file) { throw new Exception\RuntimeException("Error opening the archive '" . $content . "'"); } $compressed = bzread($file); bzclose($file); } else { $compressed = bzdecompress($content); } if (is_int($compressed)) { throw new Exception\RuntimeException('Error during decompression'); } return $compressed; } public function toString() { return 'Bz2'; } } &lt;?php
 namespace Zend\Filter\Compress; use Zend\Filter\Exception; class Rar extends AbstractCompressionAlgorithm { protected $options = array( 'callback' =&gt; null, 'archive' =&gt; null, 'password' =&gt; null, 'target' =&gt; '.', ); public function __construct($options = null) { if (!extension_loaded('rar')) { throw new Exception\ExtensionNotLoadedException('This filter needs the rar extension'); } parent::__construct($options); } public function getCallback() { return $this-&gt;options['callback']; } public function setCallback($callback) { if (!is_callable($callback)) { throw new Exception\InvalidArgumentException('Invalid callback provided'); } $this-&gt;options['callback'] = $callback; return $this; } public function getArchive() { return $this-&gt;options['archive']; } public function setArchive($archive) { $archive = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $archive); $this-&gt;options['archive'] = (string) $archive; return $this; } public function getPassword() { return $this-&gt;options['password']; } public function setPassword($password) { $this-&gt;options['password'] = (string) $password; return $this; } public function getTarget() { return $this-&gt;options['target']; } public function setTarget($target) { if (!file_exists(dirname($target))) { throw new Exception\InvalidArgumentException("The directory '$target' does not exist"); } $target = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, (string) $target); $this-&gt;options['target'] = $target; return $this; } public function compress($content) { $callback = $this-&gt;getCallback(); if ($callback === null) { throw new Exception\RuntimeException('No compression callback available'); } $options = $this-&gt;getOptions(); unset($options['callback']); $result = call_user_func($callback, $options, $content); if ($result !== true) { throw new Exception\RuntimeException('Error compressing the RAR Archive'); } return $this-&gt;getArchive(); } public function decompress($content) { if (!file_exists($content)) { throw new Exception\RuntimeException('RAR Archive not found'); } $archive = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, realpath($content)); $password = $this-&gt;getPassword(); if ($password !== null) { $archive = rar_open($archive, $password); } else { $archive = rar_open($archive); } if (!$archive) { throw new Exception\RuntimeException("Error opening the RAR Archive"); } $target = $this-&gt;getTarget(); if (!is_dir($target)) { $target = dirname($target); } $filelist = rar_list($archive); if (!$filelist) { throw new Exception\RuntimeException("Error reading the RAR Archive"); } foreach ($filelist as $file) { $file-&gt;extract($target); } rar_close($archive); return true; } public function toString() { return 'Rar'; } } &lt;?php
 namespace Zend\Filter\Compress; use Zend\Filter\Exception; class Snappy implements CompressionAlgorithmInterface { public function __construct($options = null) { if (!extension_loaded('snappy')) { throw new Exception\ExtensionNotLoadedException('This filter needs the snappy extension'); } } public function compress($content) { $compressed = snappy_compress($content); if ($compressed === false) { throw new Exception\RuntimeException('Error while compressing.'); } return $compressed; } public function decompress($content) { $compressed = snappy_uncompress($content); if ($compressed === false) { throw new Exception\RuntimeException('Error while decompressing.'); } return $compressed; } public function toString() { return 'Snappy'; } } &lt;?php
 namespace Zend\Filter\Compress; use Zend\Filter\Exception; class Gz extends AbstractCompressionAlgorithm { protected $options = array( 'level' =&gt; 9, 'mode' =&gt; 'compress', 'archive' =&gt; null, ); public function __construct($options = null) { if (!extension_loaded('zlib')) { throw new Exception\ExtensionNotLoadedException('This filter needs the zlib extension'); } parent::__construct($options); } public function getLevel() { return $this-&gt;options['level']; } public function setLevel($level) { if (($level &lt; 0) || ($level &gt; 9)) { throw new Exception\InvalidArgumentException('Level must be between 0 and 9'); } $this-&gt;options['level'] = (int) $level; return $this; } public function getMode() { return $this-&gt;options['mode']; } public function setMode($mode) { if (($mode != 'compress') &amp;&amp; ($mode != 'deflate')) { throw new Exception\InvalidArgumentException('Given compression mode not supported'); } $this-&gt;options['mode'] = $mode; return $this; } public function getArchive() { return $this-&gt;options['archive']; } public function setArchive($archive) { $this-&gt;options['archive'] = (string) $archive; return $this; } public function compress($content) { $archive = $this-&gt;getArchive(); if (!empty($archive)) { $file = gzopen($archive, 'w' . $this-&gt;getLevel()); if (!$file) { throw new Exception\RuntimeException("Error opening the archive '" . $this-&gt;options['archive'] . "'"); } gzwrite($file, $content); gzclose($file); $compressed = true; } elseif ($this-&gt;options['mode'] == 'deflate') { $compressed = gzdeflate($content, $this-&gt;getLevel()); } else { $compressed = gzcompress($content, $this-&gt;getLevel()); } if (!$compressed) { throw new Exception\RuntimeException('Error during compression'); } return $compressed; } public function decompress($content) { $archive = $this-&gt;getArchive(); $mode = $this-&gt;getMode(); if (file_exists($content)) { $archive = $content; } if (file_exists($archive)) { $handler = fopen($archive, "rb"); if (!$handler) { throw new Exception\RuntimeException("Error opening the archive '" . $archive . "'"); } fseek($handler, -4, SEEK_END); $packet = fread($handler, 4); $bytes = unpack("V", $packet); $size = end($bytes); fclose($handler); $file = gzopen($archive, 'r'); $compressed = gzread($file, $size); gzclose($file); } elseif ($mode == 'deflate') { $compressed = gzinflate($content); } else { $compressed = gzuncompress($content); } if (!$compressed) { throw new Exception\RuntimeException('Error during decompression'); } return $compressed; } public function toString() { return 'Gz'; } } &lt;?php
 namespace Zend\Stdlib; use Countable; use IteratorAggregate; use Serializable; class PriorityQueue implements Countable, IteratorAggregate, Serializable { const EXTR_DATA = 0x00000001; const EXTR_PRIORITY = 0x00000002; const EXTR_BOTH = 0x00000003; protected $queueClass = 'Zend\Stdlib\SplPriorityQueue'; protected $items = array(); protected $queue; public function insert($data, $priority = 1) { $priority = (int) $priority; $this-&gt;items[] = array( 'data' =&gt; $data, 'priority' =&gt; $priority, ); $this-&gt;getQueue()-&gt;insert($data, $priority); return $this; } public function remove($datum) { $found = false; foreach ($this-&gt;items as $key =&gt; $item) { if ($item['data'] === $datum) { $found = true; break; } } if ($found) { unset($this-&gt;items[$key]); $this-&gt;queue = null; $queue = $this-&gt;getQueue(); foreach ($this-&gt;items as $item) { $queue-&gt;insert($item['data'], $item['priority']); } return true; } return false; } public function isEmpty() { return (0 === $this-&gt;count()); } public function count() { return count($this-&gt;items); } public function top() { return $this-&gt;getIterator()-&gt;top(); } public function extract() { return $this-&gt;getQueue()-&gt;extract(); } public function getIterator() { $queue = $this-&gt;getQueue(); return clone $queue; } public function serialize() { return serialize($this-&gt;items); } public function unserialize($data) { foreach (unserialize($data) as $item) { $this-&gt;insert($item['data'], $item['priority']); } } public function toArray($flag = self::EXTR_DATA) { switch ($flag) { case self::EXTR_BOTH: return $this-&gt;items; break; case self::EXTR_PRIORITY: return array_map(function ($item) { return $item['priority']; }, $this-&gt;items); case self::EXTR_DATA: default: return array_map(function ($item) { return $item['data']; }, $this-&gt;items); } } public function setInternalQueueClass($class) { $this-&gt;queueClass = (string) $class; return $this; } public function contains($datum) { foreach ($this-&gt;items as $item) { if ($item['data'] === $datum) { return true; } } return false; } public function hasPriority($priority) { foreach ($this-&gt;items as $item) { if ($item['priority'] === $priority) { return true; } } return false; } protected function getQueue() { if (null === $this-&gt;queue) { $this-&gt;queue = new $this-&gt;queueClass(); if (!$this-&gt;queue instanceof \SplPriorityQueue) { throw new \DomainException(sprintf( 'PriorityQueue expects an internal queue of type SplPriorityQueue; received "%s"', get_class($this-&gt;queue) )); } } return $this-&gt;queue; } public function __clone() { if (null !== $this-&gt;queue) { $this-&gt;queue = clone $this-&gt;queue; } } } &lt;?php
 namespace Zend\Stdlib; use Zend\Stdlib\ErrorHandler; use Zend\Stdlib\StringWrapper\StringWrapperInterface; abstract class StringUtils { protected static $wrapperRegistry = null; protected static $singleByteEncodings = array( 'ASCII', '7BIT', '8BIT', 'ISO-8859-1', 'ISO-8859-2', 'ISO-8859-3', 'ISO-8859-4', 'ISO-8859-5', 'ISO-8859-6', 'ISO-8859-7', 'ISO-8859-8', 'ISO-8859-9', 'ISO-8859-10', 'ISO-8859-11', 'ISO-8859-13', 'ISO-8859-14', 'ISO-8859-15', 'ISO-8859-16', 'CP-1251', 'CP-1252', ); protected static $hasPcreUnicodeSupport = null; public static function getRegisteredWrappers() { if (static::$wrapperRegistry === null) { static::$wrapperRegistry = array(); if (extension_loaded('intl')) { static::$wrapperRegistry[] = 'Zend\Stdlib\StringWrapper\Intl'; } if (extension_loaded('mbstring')) { static::$wrapperRegistry[] = 'Zend\Stdlib\StringWrapper\MbString'; } if (extension_loaded('iconv')) { static::$wrapperRegistry[] = 'Zend\Stdlib\StringWrapper\Iconv'; } static::$wrapperRegistry[] = 'Zend\Stdlib\StringWrapper\Native'; } return static::$wrapperRegistry; } public static function registerWrapper($wrapper) { $wrapper = (string) $wrapper; if (!in_array($wrapper, static::$wrapperRegistry, true)) { static::$wrapperRegistry[] = $wrapper; } } public static function unregisterWrapper($wrapper) { $index = array_search((string) $wrapper, static::$wrapperRegistry, true); if ($index !== false) { unset(static::$wrapperRegistry[$index]); } } public static function resetRegisteredWrappers() { static::$wrapperRegistry = null; } public static function getWrapper($encoding = 'UTF-8', $convertEncoding = null) { foreach (static::getRegisteredWrappers() as $wrapperClass) { if ($wrapperClass::isSupported($encoding, $convertEncoding)) { $wrapper = new $wrapperClass($encoding, $convertEncoding); $wrapper-&gt;setEncoding($encoding, $convertEncoding); return $wrapper; } } throw new Exception\RuntimeException( 'No wrapper found supporting "' . $encoding . '"' . (($convertEncoding !== null) ? ' and "' . $convertEncoding . '"' : '') ); } public static function getSingleByteEncodings() { return static::$singleByteEncodings; } public static function isSingleByteEncoding($encoding) { return in_array(strtoupper($encoding), static::$singleByteEncodings); } public static function isValidUtf8($str) { return is_string($str) &amp;&amp; ($str === '' || preg_match('/^./su', $str) == 1); } public static function hasPcreUnicodeSupport() { if (static::$hasPcreUnicodeSupport === null) { ErrorHandler::start(); static::$hasPcreUnicodeSupport = defined('PREG_BAD_UTF8_OFFSET_ERROR') &amp;&amp; preg_match('/\pL/u', 'a') == 1; ErrorHandler::stop(); } return static::$hasPcreUnicodeSupport; } } &lt;?php
 namespace Zend\Stdlib\Exception; class InvalidCallbackException extends DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Stdlib\Exception; class DomainException extends \DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Stdlib\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Stdlib\Exception; class LogicException extends \LogicException implements ExceptionInterface { } &lt;?php
 namespace Zend\Stdlib\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\Stdlib\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\Stdlib\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface { } &lt;?php
 namespace Zend\Stdlib\Exception; class ExtensionNotLoadedException extends RuntimeException { } &lt;?php
 namespace Zend\Stdlib; use DateTimeZone; class DateTime extends \DateTime { public static function createFromISO8601($time, DateTimeZone $timezone = null) { $format = self::ISO8601; if (isset($time[19]) &amp;&amp; $time[19] === '.') { $format = 'Y-m-d\TH:i:s.uO'; } if ($timezone !== null) { return self::createFromFormat($format, $time, $timezone); } return self::createFromFormat($format, $time); } } &lt;?php
 namespace Zend\Stdlib; use ArrayIterator; use ArrayObject; class ArrayStack extends ArrayObject { public function getIterator() { $array = $this-&gt;getArrayCopy(); return new ArrayIterator(array_reverse($array)); } } &lt;?php
 namespace Zend\Stdlib; use Serializable; class SplQueue extends \SplQueue implements Serializable { public function toArray() { $array = array(); foreach ($this as $item) { $array[] = $item; } return $array; } public function serialize() { return serialize($this-&gt;toArray()); } public function unserialize($data) { foreach (unserialize($data) as $item) { $this-&gt;push($item); } } } &lt;?php
 namespace Zend\Stdlib; interface RequestInterface extends MessageInterface { } &lt;?php
 namespace Zend\Stdlib; use Serializable; class SplPriorityQueue extends \SplPriorityQueue implements Serializable { protected $serial = PHP_INT_MAX; public function insert($datum, $priority) { if (!is_array($priority)) { $priority = array($priority, $this-&gt;serial--); } parent::insert($datum, $priority); } public function toArray() { $array = array(); foreach (clone $this as $item) { $array[] = $item; } return $array; } public function serialize() { $clone = clone $this; $clone-&gt;setExtractFlags(self::EXTR_BOTH); $data = array(); foreach ($clone as $item) { $data[] = $item; } return serialize($data); } public function unserialize($data) { foreach (unserialize($data) as $item) { $this-&gt;insert($item['data'], $item['priority']); } } } &lt;?php
 namespace Zend\Stdlib; class Response extends Message implements ResponseInterface { } &lt;?php
 namespace Zend\Stdlib; interface InitializableInterface { public function init(); } &lt;?php
 namespace Zend\Stdlib; use Traversable; class Message implements MessageInterface { protected $metadata = array(); protected $content = ''; public function setMetadata($spec, $value = null) { if (is_scalar($spec)) { $this-&gt;metadata[$spec] = $value; return $this; } if (!is_array($spec) &amp;&amp; !$spec instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( 'Expected a string, array, or Traversable argument in first position; received "%s"', (is_object($spec) ? get_class($spec) : gettype($spec)) )); } foreach ($spec as $key =&gt; $value) { $this-&gt;metadata[$key] = $value; } return $this; } public function getMetadata($key = null, $default = null) { if (null === $key) { return $this-&gt;metadata; } if (!is_scalar($key)) { throw new Exception\InvalidArgumentException('Non-scalar argument provided for key'); } if (array_key_exists($key, $this-&gt;metadata)) { return $this-&gt;metadata[$key]; } return $default; } public function setContent($value) { $this-&gt;content = $value; return $this; } public function getContent() { return $this-&gt;content; } public function toString() { $request = ''; foreach ($this-&gt;getMetadata() as $key =&gt; $value) { $request .= sprintf( "%s: %s\r\n", (string) $key, (string) $value ); } $request .= "\r\n" . $this-&gt;getContent(); return $request; } } &lt;?php
 namespace Zend\Stdlib; interface ParameterObjectInterface { public function __set($key, $value); public function __get($key); public function __isset($key); public function __unset($key); } &lt;?php
 namespace Zend\Stdlib; use Closure; use ReflectionClass; use WeakRef; class CallbackHandler { protected $callback; protected $metadata; protected static $isPhp54; protected static $hasWeakRefExtension; public function __construct($callback, array $metadata = array()) { $this-&gt;metadata = $metadata; $this-&gt;registerCallback($callback); } protected function registerCallback($callback) { if (!is_callable($callback)) { throw new Exception\InvalidCallbackException('Invalid callback provided; not callable'); } if (null === static::$hasWeakRefExtension) { static::$hasWeakRefExtension = class_exists('WeakRef'); } if (!static::$hasWeakRefExtension) { $this-&gt;callback = $callback; return; } if (is_object($callback) &amp;&amp; !$callback instanceof Closure) { $this-&gt;callback = new WeakRef($callback); return; } if (!is_array($callback)) { $this-&gt;callback = $callback; return; } list($target, $method) = $callback; if (!is_object($target)) { $this-&gt;callback = $callback; return; } $target = new WeakRef($target); $this-&gt;callback = array($target, $method); } public function getCallback() { $callback = $this-&gt;callback; if (is_string($callback)) { return $callback; } if ($callback instanceof WeakRef) { return $callback-&gt;get(); } if (is_object($callback)) { return $callback; } list($target, $method) = $callback; if ($target instanceof WeakRef) { return array($target-&gt;get(), $method); } return $callback; } public function call(array $args = array()) { $callback = $this-&gt;getCallback(); if (null === $callback) { return null; } if (!isset(static::$isPhp54)) { static::$isPhp54 = version_compare(PHP_VERSION, '5.4.0rc1', '&gt;='); } $argCount = count($args); if (static::$isPhp54 &amp;&amp; is_string($callback)) { $result = $this-&gt;validateStringCallbackFor54($callback); if ($result !== true &amp;&amp; $argCount &lt;= 3) { $callback = $result; $this-&gt;callback = $result; } } switch ($argCount) { case 0: if (static::$isPhp54) { return $callback(); } return call_user_func($callback); case 1: if (static::$isPhp54) { return $callback(array_shift($args)); } return call_user_func($callback, array_shift($args)); case 2: $arg1 = array_shift($args); $arg2 = array_shift($args); if (static::$isPhp54) { return $callback($arg1, $arg2); } return call_user_func($callback, $arg1, $arg2); case 3: $arg1 = array_shift($args); $arg2 = array_shift($args); $arg3 = array_shift($args); if (static::$isPhp54) { return $callback($arg1, $arg2, $arg3); } return call_user_func($callback, $arg1, $arg2, $arg3); default: return call_user_func_array($callback, $args); } } public function __invoke() { return $this-&gt;call(func_get_args()); } public function getMetadata() { return $this-&gt;metadata; } public function getMetadatum($name) { if (array_key_exists($name, $this-&gt;metadata)) { return $this-&gt;metadata[$name]; } return null; } protected function validateStringCallbackFor54($callback) { if (!strstr($callback, '::')) { return true; } list($class, $method) = explode('::', $callback, 2); if (!class_exists($class)) { throw new Exception\InvalidCallbackException(sprintf( 'Static method call "%s" refers to a class that does not exist', $callback )); } $r = new ReflectionClass($class); if (!$r-&gt;hasMethod($method)) { throw new Exception\InvalidCallbackException(sprintf( 'Static method call "%s" refers to a method that does not exist', $callback )); } $m = $r-&gt;getMethod($method); if (!$m-&gt;isStatic()) { throw new Exception\InvalidCallbackException(sprintf( 'Static method call "%s" refers to a method that is not static', $callback )); } return array($class, $method); } } &lt;?php
 namespace Zend\Stdlib; abstract class Glob { const GLOB_MARK = 0x01; const GLOB_NOSORT = 0x02; const GLOB_NOCHECK = 0x04; const GLOB_NOESCAPE = 0x08; const GLOB_BRACE = 0x10; const GLOB_ONLYDIR = 0x20; const GLOB_ERR = 0x40; public static function glob($pattern, $flags, $forceFallback = false) { if (!defined('GLOB_BRACE') || $forceFallback) { return static::fallbackGlob($pattern, $flags); } return static::systemGlob($pattern, $flags); } protected static function systemGlob($pattern, $flags) { if ($flags) { $flagMap = array( self::GLOB_MARK =&gt; GLOB_MARK, self::GLOB_NOSORT =&gt; GLOB_NOSORT, self::GLOB_NOCHECK =&gt; GLOB_NOCHECK, self::GLOB_NOESCAPE =&gt; GLOB_NOESCAPE, self::GLOB_BRACE =&gt; GLOB_BRACE, self::GLOB_ONLYDIR =&gt; GLOB_ONLYDIR, self::GLOB_ERR =&gt; GLOB_ERR, ); $globFlags = 0; foreach ($flagMap as $internalFlag =&gt; $globFlag) { if ($flags &amp; $internalFlag) { $globFlags |= $globFlag; } } } else { $globFlags = 0; } return glob($pattern, $globFlags); } protected static function fallbackGlob($pattern, $flags) { if (!$flags &amp; self::GLOB_BRACE) { return static::systemGlob($pattern, $flags); } $flags &amp;= ~self::GLOB_BRACE; $length = strlen($pattern); $paths = array(); if ($flags &amp; self::GLOB_NOESCAPE) { $begin = strpos($pattern, '{'); } else { $begin = 0; while (true) { if ($begin === $length) { $begin = false; break; } elseif ($pattern[$begin] === '\\' &amp;&amp; ($begin + 1) &lt; $length) { $begin++; } elseif ($pattern[$begin] === '{') { break; } $begin++; } } if ($begin === false) { return static::systemGlob($pattern, $flags); } $next = static::nextBraceSub($pattern, $begin + 1, $flags); if ($next === null) { return static::systemGlob($pattern, $flags); } $rest = $next; while ($pattern[$rest] !== '}') { $rest = static::nextBraceSub($pattern, $rest + 1, $flags); if ($rest === null) { return static::systemGlob($pattern, $flags); } } $p = $begin + 1; while (true) { $subPattern = substr($pattern, 0, $begin) . substr($pattern, $p, $next - $p) . substr($pattern, $rest + 1); $result = static::fallbackGlob($subPattern, $flags | self::GLOB_BRACE); if ($result) { $paths = array_merge($paths, $result); } if ($pattern[$next] === '}') { break; } $p = $next + 1; $next = static::nextBraceSub($pattern, $p, $flags); } return array_unique($paths); } protected static function nextBraceSub($pattern, $begin, $flags) { $length = strlen($pattern); $depth = 0; $current = $begin; while ($current &lt; $length) { if (!$flags &amp; self::GLOB_NOESCAPE &amp;&amp; $pattern[$current] === '\\') { if (++$current === $length) { break; } $current++; } else { if (($pattern[$current] === '}' &amp;&amp; $depth-- === 0) || ($pattern[$current] === ',' &amp;&amp; $depth === 0)) { break; } elseif ($pattern[$current++] === '{') { $depth++; } } } return ($current &lt; $length ? $current : null); } } &lt;?php
 namespace Zend\Stdlib; use Traversable; abstract class AbstractOptions implements ParameterObjectInterface { protected $__strictMode__ = true; public function __construct($options = null) { if (null !== $options) { $this-&gt;setFromArray($options); } } public function setFromArray($options) { if (!is_array($options) &amp;&amp; !$options instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( 'Parameter provided to %s must be an array or Traversable', __METHOD__ )); } foreach ($options as $key =&gt; $value) { $this-&gt;__set($key, $value); } return $this; } public function toArray() { $array = array(); $transform = function ($letters) { $letter = array_shift($letters); return '_' . strtolower($letter); }; foreach ($this as $key =&gt; $value) { if ($key === '__strictMode__') continue; $normalizedKey = preg_replace_callback('/([A-Z])/', $transform, $key); $array[$normalizedKey] = $value; } return $array; } public function __set($key, $value) { $setter = 'set' . str_replace(' ', '', ucwords(str_replace('_', ' ', $key))); if ($this-&gt;__strictMode__ &amp;&amp; !method_exists($this, $setter)) { throw new Exception\BadMethodCallException( 'The option "' . $key . '" does not ' . 'have a matching ' . $setter . ' setter method ' . 'which must be defined' ); } elseif (!$this-&gt;__strictMode__ &amp;&amp; !method_exists($this, $setter)) { return; } $this-&gt;{$setter}($value); } public function __get($key) { $getter = 'get' . str_replace(' ', '', ucwords(str_replace('_', ' ', $key))); if (!method_exists($this, $getter)) { throw new Exception\BadMethodCallException( 'The option "' . $key . '" does not ' . 'have a matching ' . $getter . ' getter method ' . 'which must be defined' ); } return $this-&gt;{$getter}(); } public function __isset($key) { return null !== $this-&gt;__get($key); } public function __unset($key) { try { $this-&gt;__set($key, null); } catch (Exception\BadMethodCallException $e) { throw new Exception\InvalidArgumentException( 'The class property $' . $key . ' cannot be unset as' . ' NULL is an invalid value for it', 0, $e ); } } } &lt;?php
 namespace Zend\Stdlib; use IteratorAggregate; use ArrayAccess; use Serializable; use Countable; class ArrayObject implements IteratorAggregate, ArrayAccess, Serializable, Countable { const STD_PROP_LIST = 1; const ARRAY_AS_PROPS = 2; protected $storage; protected $flag; protected $iteratorClass; protected $protectedProperties; public function __construct($input = array(), $flags = self::STD_PROP_LIST, $iteratorClass = 'ArrayIterator') { $this-&gt;setFlags($flags); $this-&gt;storage = $input; $this-&gt;setIteratorClass($iteratorClass); $this-&gt;protectedProperties = array_keys(get_object_vars($this)); } public function __isset($key) { if ($this-&gt;flag == self::ARRAY_AS_PROPS) { return $this-&gt;offsetExists($key); } if (in_array($key, $this-&gt;protectedProperties)) { throw new Exception\InvalidArgumentException('$key is a protected property, use a different key'); } return isset($this-&gt;$key); } public function __set($key, $value) { if ($this-&gt;flag == self::ARRAY_AS_PROPS) { return $this-&gt;offsetSet($key, $value); } if (in_array($key, $this-&gt;protectedProperties)) { throw new Exception\InvalidArgumentException('$key is a protected property, use a different key'); } $this-&gt;$key = $value; } public function __unset($key) { if ($this-&gt;flag == self::ARRAY_AS_PROPS) { return $this-&gt;offsetUnset($key); } if (in_array($key, $this-&gt;protectedProperties)) { throw new Exception\InvalidArgumentException('$key is a protected property, use a different key'); } unset($this-&gt;$key); } public function &amp;__get($key) { $ret = null; if ($this-&gt;flag == self::ARRAY_AS_PROPS) { $ret =&amp; $this-&gt;offsetGet($key); return $ret; } if (in_array($key, $this-&gt;protectedProperties)) { throw new Exception\InvalidArgumentException('$key is a protected property, use a different key'); } return $this-&gt;$key; } public function append($value) { $this-&gt;storage[] = $value; } public function asort() { asort($this-&gt;storage); } public function count() { return count($this-&gt;storage); } public function exchangeArray($data) { if (!is_array($data) &amp;&amp; !is_object($data)) { throw new Exception\InvalidArgumentException('Passed variable is not an array or object, using empty array instead'); } if (is_object($data) &amp;&amp; ($data instanceof ArrayObject || $data instanceof \ArrayObject)) { $data = $data-&gt;getArrayCopy(); } if (!is_array($data)) { $data = (array) $data; } $storage = $this-&gt;storage; $this-&gt;storage = $data; return $storage; } public function getArrayCopy() { return $this-&gt;storage; } public function getFlags() { return $this-&gt;flag; } public function getIterator() { $class = $this-&gt;iteratorClass; return new $class($this-&gt;storage); } public function getIteratorClass() { return $this-&gt;iteratorClass; } public function ksort() { ksort($this-&gt;storage); } public function natcasesort() { natcasesort($this-&gt;storage); } public function natsort() { natsort($this-&gt;storage); } public function offsetExists($key) { return isset($this-&gt;storage[$key]); } public function &amp;offsetGet($key) { $ret = null; if (!$this-&gt;offsetExists($key)) { return $ret; } $ret =&amp; $this-&gt;storage[$key]; return $ret; } public function offsetSet($key, $value) { $this-&gt;storage[$key] = $value; } public function offsetUnset($key) { if ($this-&gt;offsetExists($key)) { unset($this-&gt;storage[$key]); } } public function serialize() { return serialize(get_object_vars($this)); } public function setFlags($flags) { $this-&gt;flag = $flags; } public function setIteratorClass($class) { if (class_exists($class)) { $this-&gt;iteratorClass = $class; return ; } if (strpos($class, '\\') === 0) { $class = '\\' . $class; if (class_exists($class)) { $this-&gt;iteratorClass = $class; return ; } } throw new Exception\InvalidArgumentException('The iterator class does not exist'); } public function uasort($function) { if (is_callable($function)) { uasort($this-&gt;storage, $function); } } public function uksort($function) { if (is_callable($function)) { uksort($this-&gt;storage, $function); } } public function unserialize($data) { $ar = unserialize($data); $this-&gt;setFlags($ar['flag']); $this-&gt;exchangeArray($ar['storage']); $this-&gt;setIteratorClass($ar['iteratorClass']); foreach ($ar as $k =&gt; $v) { switch ($k) { case 'flag': $this-&gt;setFlags($v); break; case 'storage': $this-&gt;exchangeArray($v); break; case 'iteratorClass': $this-&gt;setIteratorClass($v); break; case 'protectedProperties': continue; default: $this-&gt;__set($k, $v); } } } } &lt;?php
if (version_compare(PHP_VERSION, '5.3.4', 'lt') &amp;&amp; !class_exists('Zend\Stdlib\ArrayObject', false) ) { require_once __DIR__ . '/ArrayObject.php'; } &lt;?php
 namespace Zend\Stdlib; use ArrayObject as PhpArrayObject; class ArrayObject extends PhpArrayObject { public function __construct($input = array(), $flags = self::STD_PROP_LIST, $iteratorClass = 'ArrayIterator') { parent::__construct($input, $flags, $iteratorClass); } } &lt;?php
 namespace Zend\Stdlib\StringWrapper; use Zend\Stdlib\Exception; class Iconv extends AbstractStringWrapper { protected static $encodings = array( 'ASCII', 'ISO-8859-1', 'ISO-8859-2', 'ISO-8859-3', 'ISO-8859-4', 'ISO-8859-5', 'ISO-8859-7', 'ISO-8859-9', 'ISO-8859-10', 'ISO-8859-13', 'ISO-8859-14', 'ISO-8859-15', 'ISO-8859-16', 'KOI8-R', 'KOI8-U', 'KOI8-RU', 'CP1250', 'CP1251', 'CP1252', 'CP1253', 'CP1254', 'CP1257', 'CP850', 'CP866', 'CP1131', 'MACROMAN', 'MACCENTRALEUROPE', 'MACICELAND', 'MACCROATIAN', 'MACROMANIA', 'MACCYRILLIC', 'MACUKRAINE', 'MACGREEK', 'MACTURKISH', 'MACINTOSH', 'ISO-8859-6', 'ISO-8859-8', 'CP1255', 'CP1256', 'CP862', 'MACHEBREW', 'MACARABIC', 'EUC-JP', 'SHIFT_JIS', 'CP932', 'ISO-2022-JP', 'ISO-2022-JP-2', 'ISO-2022-JP-1', 'EUC-CN', 'HZ', 'GBK', 'CP936', 'GB18030', 'EUC-TW', 'BIG5', 'CP950', 'BIG5-HKSCS', 'BIG5-HKSCS:2004', 'BIG5-HKSCS:2001', 'BIG5-HKSCS:1999', 'ISO-2022-CN', 'ISO-2022-CN-EXT', 'EUC-KR', 'CP949', 'ISO-2022-KR', 'JOHAB', 'ARMSCII-8', 'GEORGIAN-ACADEMY', 'GEORGIAN-PS', 'KOI8-T', 'PT154', 'RK1048', 'ISO-8859-11', 'TIS-620', 'CP874', 'MACTHAI', 'MULELAO-1', 'CP1133', 'VISCII', 'TCVN', 'CP1258', 'HP-ROMAN8', 'NEXTSTEP', 'UTF-8', 'UCS-2', 'UCS-2BE', 'UCS-2LE', 'UCS-4', 'UCS-4BE', 'UCS-4LE', 'UTF-16', 'UTF-16BE', 'UTF-16LE', 'UTF-32', 'UTF-32BE', 'UTF-32LE', 'UTF-7', 'C99', 'JAVA', 'CP437', 'CP737', 'CP775', 'CP852', 'CP853', 'CP855', 'CP857', 'CP858', 'CP860', 'CP861', 'CP863', 'CP865', 'CP869', 'CP1125', 'CP864', 'EUC-JISX0213', 'Shift_JISX0213', 'ISO-2022-JP-3', 'BIG5-2003', 'TDS565', 'ATARIST', 'RISCOS-LATIN1', ); public static function getSupportedEncodings() { return static::$encodings; } public function __construct() { if (!extension_loaded('iconv')) { throw new Exception\ExtensionNotLoadedException( 'PHP extension "iconv" is required for this wrapper' ); } } public function strlen($str) { return iconv_strlen($str, $this-&gt;getEncoding()); } public function substr($str, $offset = 0, $length = null) { return iconv_substr($str, $offset, $length, $this-&gt;getEncoding()); } public function strpos($haystack, $needle, $offset = 0) { return iconv_strpos($haystack, $needle, $offset, $this-&gt;getEncoding()); } public function convert($str, $reverse = false) { $encoding = $this-&gt;getEncoding(); $convertEncoding = $this-&gt;getConvertEncoding(); if ($convertEncoding === null) { throw new Exception\LogicException( 'No convert encoding defined' ); } if ($encoding === $convertEncoding) { return $str; } $fromEncoding = $reverse ? $convertEncoding : $encoding; $toEncoding = $reverse ? $encoding : $convertEncoding; return iconv($fromEncoding, $toEncoding . '//IGNORE', $str); } } &lt;?php
 namespace Zend\Stdlib\StringWrapper; use Zend\Stdlib\Exception; use Zend\Stdlib\StringUtils; abstract class AbstractStringWrapper implements StringWrapperInterface { protected $encoding = 'UTF-8'; protected $convertEncoding; public static function isSupported($encoding, $convertEncoding = null) { $supportedEncodings = static::getSupportedEncodings(); if (!in_array(strtoupper($encoding), $supportedEncodings)) { return false; } if ($convertEncoding !== null &amp;&amp; !in_array(strtoupper($convertEncoding), $supportedEncodings)) { return false; } return true; } public function setEncoding($encoding, $convertEncoding = null) { $supportedEncodings = static::getSupportedEncodings(); $encodingUpper = strtoupper($encoding); if (!in_array($encodingUpper, $supportedEncodings)) { throw new Exception\InvalidArgumentException( 'Wrapper doesn\'t support character encoding "' . $encoding . '"' ); } if ($convertEncoding !== null) { $convertEncodingUpper = strtoupper($convertEncoding); if (!in_array($convertEncodingUpper, $supportedEncodings)) { throw new Exception\InvalidArgumentException( 'Wrapper doesn\'t support character encoding "' . $convertEncoding . '"' ); } $this-&gt;convertEncoding = $convertEncodingUpper; } else { $this-&gt;convertEncoding = null; } $this-&gt;encoding = $encodingUpper; return $this; } public function getEncoding() { return $this-&gt;encoding; } public function getConvertEncoding() { return $this-&gt;convertEncoding; } public function convert($str, $reverse = false) { $encoding = $this-&gt;getEncoding(); $convertEncoding = $this-&gt;getConvertEncoding(); if ($convertEncoding === null) { throw new Exception\LogicException( 'No convert encoding defined' ); } if ($encoding === $convertEncoding) { return $str; } $from = $reverse ? $convertEncoding : $encoding; $to = $reverse ? $encoding : $convertEncoding; throw new Exception\RuntimeException(sprintf( 'Converting from "%s" to "%s" isn\'t supported by this string wrapper', $from, $to )); } public function wordWrap($string, $width = 75, $break = "\n", $cut = false) { $string = (string) $string; if ($string === '') { return ''; } $break = (string) $break; if ($break === '') { throw new Exception\InvalidArgumentException('Break string cannot be empty'); } $width = (int) $width; if ($width === 0 &amp;&amp; $cut) { throw new Exception\InvalidArgumentException('Cannot force cut when width is zero'); } if (StringUtils::isSingleByteEncoding($this-&gt;getEncoding())) { return wordwrap($string, $width, $break, $cut); } $stringWidth = $this-&gt;strlen($string); $breakWidth = $this-&gt;strlen($break); $result = ''; $lastStart = $lastSpace = 0; for ($current = 0; $current &lt; $stringWidth; $current++) { $char = $this-&gt;substr($string, $current, 1); $possibleBreak = $char; if ($breakWidth !== 1) { $possibleBreak = $this-&gt;substr($string, $current, $breakWidth); } if ($possibleBreak === $break) { $result .= $this-&gt;substr($string, $lastStart, $current - $lastStart + $breakWidth); $current += $breakWidth - 1; $lastStart = $lastSpace = $current + 1; continue; } if ($char === ' ') { if ($current - $lastStart &gt;= $width) { $result .= $this-&gt;substr($string, $lastStart, $current - $lastStart) . $break; $lastStart = $current + 1; } $lastSpace = $current; continue; } if ($current - $lastStart &gt;= $width &amp;&amp; $cut &amp;&amp; $lastStart &gt;= $lastSpace) { $result .= $this-&gt;substr($string, $lastStart, $current - $lastStart) . $break; $lastStart = $lastSpace = $current; continue; } if ($current - $lastStart &gt;= $width &amp;&amp; $lastStart &lt; $lastSpace) { $result .= $this-&gt;substr($string, $lastStart, $lastSpace - $lastStart) . $break; $lastStart = $lastSpace = $lastSpace + 1; continue; } } if ($lastStart !== $current) { $result .= $this-&gt;substr($string, $lastStart, $current - $lastStart); } return $result; } public function strPad($input, $padLength, $padString = ' ', $padType = STR_PAD_RIGHT) { if (StringUtils::isSingleByteEncoding($this-&gt;getEncoding())) { return str_pad($input, $padLength, $padString, $padType); } $lengthOfPadding = $padLength - $this-&gt;strlen($input); if ($lengthOfPadding &lt;= 0) { return $input; } $padStringLength = $this-&gt;strlen($padString); if ($padStringLength === 0) { return $input; } $repeatCount = floor($lengthOfPadding / $padStringLength); if ($padType === STR_PAD_BOTH) { $lastStringLeft = ''; $lastStringRight = ''; $repeatCountLeft = $repeatCountRight = ($repeatCount - $repeatCount % 2) / 2; $lastStringLength = $lengthOfPadding - 2 * $repeatCountLeft * $padStringLength; $lastStringLeftLength = $lastStringRightLength = floor($lastStringLength / 2); $lastStringRightLength += $lastStringLength % 2; $lastStringLeft = $this-&gt;substr($padString, 0, $lastStringLeftLength); $lastStringRight = $this-&gt;substr($padString, 0, $lastStringRightLength); return str_repeat($padString, $repeatCountLeft) . $lastStringLeft . $input . str_repeat($padString, $repeatCountRight) . $lastStringRight; } $lastString = $this-&gt;substr($padString, 0, $lengthOfPadding % $padStringLength); if ($padType === STR_PAD_LEFT) { return str_repeat($padString, $repeatCount) . $lastString . $input; } return $input . str_repeat($padString, $repeatCount) . $lastString; } } &lt;?php
 namespace Zend\Stdlib\StringWrapper; use Zend\Stdlib\Exception; class Intl extends AbstractStringWrapper { protected static $encodings = array('UTF-8'); public static function getSupportedEncodings() { return static::$encodings; } public function __construct() { if (!extension_loaded('intl')) { throw new Exception\ExtensionNotLoadedException( 'PHP extension "intl" is required for this wrapper' ); } } public function strlen($str) { return grapheme_strlen($str); } public function substr($str, $offset = 0, $length = null) { return grapheme_substr($str, $offset, $length); } public function strpos($haystack, $needle, $offset = 0) { return grapheme_strpos($haystack, $needle, $offset); } } &lt;?php
 namespace Zend\Stdlib\StringWrapper; use Zend\Stdlib\Exception; use Zend\Stdlib\StringUtils; class Native extends AbstractStringWrapper { protected $encoding = 'ASCII'; public static function isSupported($encoding, $convertEncoding = null) { $encodingUpper = strtoupper($encoding); $supportedEncodings = static::getSupportedEncodings(); if (!in_array($encodingUpper, $supportedEncodings)) { return false; } if ($convertEncoding !== null &amp;&amp; $encodingUpper !== strtoupper($convertEncoding)) { return false; } return true; } public static function getSupportedEncodings() { return StringUtils::getSingleByteEncodings(); } public function setEncoding($encoding, $convertEncoding = null) { $supportedEncodings = static::getSupportedEncodings(); $encodingUpper = strtoupper($encoding); if (!in_array($encodingUpper, $supportedEncodings)) { throw new Exception\InvalidArgumentException( 'Wrapper doesn\'t support character encoding "' . $encoding . '"' ); } if ($encodingUpper !== strtoupper($convertEncoding)) { $this-&gt;convertEncoding = $encodingUpper; } if ($convertEncoding !== null) { if ($encodingUpper !== strtoupper($convertEncoding)) { throw new Exception\InvalidArgumentException( 'Wrapper doesn\'t support to convert between character encodings' ); } $this-&gt;convertEncoding = $encodingUpper; } else { $this-&gt;convertEncoding = null; } $this-&gt;encoding = $encodingUpper; return $this; } public function strlen($str) { return strlen($str); } public function substr($str, $offset = 0, $length = null) { return substr($str, $offset, $length); } public function strpos($haystack, $needle, $offset = 0) { return strpos($haystack, $needle, $offset); } } &lt;?php
 namespace Zend\Stdlib\StringWrapper; interface StringWrapperInterface { public static function isSupported($encoding, $convertEncoding = null); public static function getSupportedEncodings(); public function setEncoding($encoding, $convertEncoding = null); public function getEncoding(); public function getConvertEncoding(); public function strlen($str); public function substr($str, $offset = 0, $length = null); public function strpos($haystack, $needle, $offset = 0); public function convert($str, $reverse = false); public function wordWrap($str, $width = 75, $break = "\n", $cut = false); public function strPad($input, $padLength, $padString = ' ', $padType = STR_PAD_RIGHT); } &lt;?php
 namespace Zend\Stdlib\StringWrapper; use Zend\Stdlib\Exception; class MbString extends AbstractStringWrapper { protected static $encodings = null; public static function getSupportedEncodings() { if (static::$encodings === null) { static::$encodings = array_map('strtoupper', mb_list_encodings()); $indexIso885916 = array_search('ISO-8859-16', static::$encodings, true); if ($indexIso885916 !== false) { unset(static::$encodings[$indexIso885916]); } } return static::$encodings; } public function __construct() { if (!extension_loaded('mbstring')) { throw new Exception\ExtensionNotLoadedException( 'PHP extension "mbstring" is required for this wrapper' ); } } public function strlen($str) { return mb_strlen($str, $this-&gt;getEncoding()); } public function substr($str, $offset = 0, $length = null) { return mb_substr($str, $offset, $length, $this-&gt;getEncoding()); } public function strpos($haystack, $needle, $offset = 0) { return mb_strpos($haystack, $needle, $offset, $this-&gt;getEncoding()); } public function convert($str, $reverse = false) { $encoding = $this-&gt;getEncoding(); $convertEncoding = $this-&gt;getConvertEncoding(); if ($convertEncoding === null) { throw new Exception\LogicException( 'No convert encoding defined' ); } if ($encoding === $convertEncoding) { return $str; } $fromEncoding = $reverse ? $convertEncoding : $encoding; $toEncoding = $reverse ? $encoding : $convertEncoding; return mb_convert_encoding($str, $toEncoding, $fromEncoding); } } &lt;?php
 namespace Zend\Stdlib\Hydrator; use ArrayObject; use Zend\Stdlib\Exception; use Zend\Stdlib\Hydrator\Filter\FilterComposite; use Zend\Stdlib\Hydrator\StrategyEnabledInterface; use Zend\Stdlib\Hydrator\Strategy\StrategyInterface; abstract class AbstractHydrator implements HydratorInterface, StrategyEnabledInterface { protected $strategies; protected $filterComposite; public function __construct() { $this-&gt;strategies = new ArrayObject(); $this-&gt;filterComposite = new FilterComposite(); } public function getStrategy($name) { if (isset($this-&gt;strategies[$name])) { return $this-&gt;strategies[$name]; } if (!isset($this-&gt;strategies['*'])) { throw new Exception\InvalidArgumentException(sprintf( '%s: no strategy by name of "%s", and no wildcard strategy present', __METHOD__, $name )); } return $this-&gt;strategies['*']; } public function hasStrategy($name) { return array_key_exists($name, $this-&gt;strategies) || array_key_exists('*', $this-&gt;strategies); } public function addStrategy($name, StrategyInterface $strategy) { $this-&gt;strategies[$name] = $strategy; return $this; } public function removeStrategy($name) { unset($this-&gt;strategies[$name]); return $this; } public function extractValue($name, $value) { if ($this-&gt;hasStrategy($name)) { $strategy = $this-&gt;getStrategy($name); $value = $strategy-&gt;extract($value); } return $value; } public function hydrateValue($name, $value) { if ($this-&gt;hasStrategy($name)) { $strategy = $this-&gt;getStrategy($name); $value = $strategy-&gt;hydrate($value); } return $value; } public function getFilter() { return $this-&gt;filterComposite; } public function addFilter($name, $filter, $condition = FilterComposite::CONDITION_OR) { return $this-&gt;filterComposite-&gt;addFilter($name, $filter, $condition); } public function hasFilter($name) { return $this-&gt;filterComposite-&gt;hasFilter($name); } public function removeFilter($name) { return $this-&gt;filterComposite-&gt;removeFilter($name); } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; interface FilterInterface { public function filter($property); } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; class MethodMatchFilter implements FilterInterface { protected $method = null; protected $exclude = null; public function __construct($method, $exclude = true) { $this-&gt;method = $method; $this-&gt;exclude = $exclude; } public function filter($property) { $pos = strpos($property, '::'); if ($pos !== false) { $pos += 2; } else { $pos = 0; } if (substr($property, $pos) === $this-&gt;method) { return $this-&gt;exclude ? false : true; } return $this-&gt;exclude ? true : false; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; class IsFilter implements FilterInterface { public function filter($property) { $pos = strpos($property, '::'); if ($pos !== false) { $pos += 2; } else { $pos = 0; } if (substr($property, $pos, 2) === 'is') { return true; } return false; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; class GetFilter implements FilterInterface { public function filter($property) { $pos = strpos($property, '::'); if ($pos !== false) { $pos += 2; } else { $pos = 0; } if (substr($property, $pos, 3) === 'get') { return true; } return false; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; use ReflectionMethod; use ReflectionException; use Zend\Stdlib\Exception\InvalidArgumentException; use Zend\Stdlib\Hydrator\Filter\FilterInterface; class NumberOfParameterFilter implements FilterInterface { protected $numberOfParameters = null; public function __construct($numberOfParameters = 0) { $this-&gt;numberOfParameters = 0; } public function filter($property) { try { $reflectionMethod = new ReflectionMethod($property); } catch( ReflectionException $exception) { throw new InvalidArgumentException( "Method $property doesn't exist" ); } if ($reflectionMethod-&gt;getNumberOfParameters() !== $this-&gt;numberOfParameters) { return false; } return true; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; use ArrayObject; use Zend\Stdlib\Exception\InvalidArgumentException; class FilterComposite implements FilterInterface { protected $orFilter; protected $andFilter; const CONDITION_OR = 1; const CONDITION_AND = 2; public function __construct($orFilter = array(), $andFilter = array()) { array_walk($orFilter, function($value, $key) { if ( !is_callable($value) &amp;&amp; !$value instanceof FilterInterface ) { throw new InvalidArgumentException( 'The value of ' . $key . ' should be either a callable or ' . 'an instance of Zend\Stdlib\Hydrator\Filter\FilterInterface' ); } } ); array_walk($andFilter, function($value, $key) { if ( !is_callable($value) &amp;&amp; !$value instanceof FilterInterface ) { throw new InvalidArgumentException( 'The value of ' . $key . '  should be either a callable or ' . 'an instance of Zend\Stdlib\Hydrator\Filter\FilterInterface' ); } } ); $this-&gt;orFilter = new ArrayObject($orFilter); $this-&gt;andFilter = new ArrayObject($andFilter); } public function addFilter($name, $filter, $condition = self::CONDITION_OR) { if ( !is_callable($filter) &amp;&amp; !($filter instanceof FilterInterface) ) { throw new InvalidArgumentException( 'The value of ' . $name . ' should be either a callable or ' . 'an instance of Zend\Stdlib\Hydrator\Filter\FilterInterface' ); } if ($condition === self::CONDITION_OR) { $this-&gt;orFilter[$name] = $filter; } elseif ($condition === self::CONDITION_AND) { $this-&gt;andFilter[$name] = $filter; } return $this; } public function removeFilter($name) { if (isset($this-&gt;orFilter[$name])) { unset($this-&gt;orFilter[$name]); } if (isset($this-&gt;andFilter[$name])) { unset($this-&gt;andFilter[$name]); } return $this; } public function hasFilter($name) { return isset($this-&gt;orFilter[$name]) || isset($this-&gt;andFilter[$name]); } public function filter($property) { $andCount = count($this-&gt;andFilter); $orCount = count($this-&gt;orFilter); if ($orCount === 0 &amp;&amp; $andCount === 0) { return true; } elseif ($orCount === 0 &amp;&amp; $andCount !== 0) { $returnValue = true; } else { $returnValue = false; } foreach ($this-&gt;orFilter as $filter) { if (is_callable($filter)) { if ( $filter($property) === true) { $returnValue = true; break; } continue; } else { if ( $filter-&gt;filter($property) === true) { $returnValue = true; break; } } } foreach ($this-&gt;andFilter as $filter) { if (is_callable($filter)) { if ($filter($property) === false) { return false; } continue; } else { if ($filter-&gt;filter($property) === false) { return false; } } } return $returnValue; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; class HasFilter implements FilterInterface { public function filter($property) { $pos = strpos($property, '::'); if ($pos !== false) { $pos += 2; } else { $pos = 0; } if (substr($property, $pos, 3) === 'has') { return true; } return false; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Filter; interface FilterProviderInterface { public function getFilter(); } &lt;?php
 namespace Zend\Stdlib\Hydrator; interface HydratorOptionsInterface { public function setOptions($options); } &lt;?php
 namespace Zend\Stdlib\Hydrator; use ReflectionMethod; use Traversable; use Zend\Stdlib\Exception; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\Hydrator\Filter\FilterComposite; use Zend\Stdlib\Hydrator\Filter\FilterProviderInterface; use Zend\Stdlib\Hydrator\Filter\MethodMatchFilter; use Zend\Stdlib\Hydrator\Filter\GetFilter; use Zend\Stdlib\Hydrator\Filter\HasFilter; use Zend\Stdlib\Hydrator\Filter\IsFilter; use Zend\Stdlib\Hydrator\Filter\NumberOfParameterFilter; class ClassMethods extends AbstractHydrator implements HydratorOptionsInterface { protected $underscoreSeparatedKeys = true; public function __construct($underscoreSeparatedKeys = true) { parent::__construct(); $this-&gt;setUnderscoreSeparatedKeys($underscoreSeparatedKeys); $this-&gt;filterComposite-&gt;addFilter("is", new IsFilter()); $this-&gt;filterComposite-&gt;addFilter("has", new HasFilter()); $this-&gt;filterComposite-&gt;addFilter("get", new GetFilter()); $this-&gt;filterComposite-&gt;addFilter("parameter", new NumberOfParameterFilter(), FilterComposite::CONDITION_AND); } public function setOptions($options) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException( 'The options parameter must be an array or a Traversable' ); } if (isset($options['underscoreSeparatedKeys'])) { $this-&gt;setUnderscoreSeparatedKeys($options['underscoreSeparatedKeys']); } return $this; } public function setUnderscoreSeparatedKeys($underscoreSeparatedKeys) { $this-&gt;underscoreSeparatedKeys = $underscoreSeparatedKeys; return $this; } public function getUnderscoreSeparatedKeys() { return $this-&gt;underscoreSeparatedKeys; } public function extract($object) { if (!is_object($object)) { throw new Exception\BadMethodCallException(sprintf( '%s expects the provided $object to be a PHP object)', __METHOD__ )); } $filter = null; if ($object instanceof FilterProviderInterface) { $filter = new FilterComposite( array($object-&gt;getFilter()), array(new MethodMatchFilter("getFilter")) ); } else { $filter = $this-&gt;filterComposite; } $transform = function ($letters) { $letter = array_shift($letters); return '_' . strtolower($letter); }; $attributes = array(); $methods = get_class_methods($object); foreach ($methods as $method) { if ( !$filter-&gt;filter( get_class($object) . '::' . $method ) ) { continue; } $reflectionMethod = new ReflectionMethod(get_class($object) . '::' . $method); if ($reflectionMethod-&gt;getNumberOfParameters() &gt; 0) { continue; } $attribute = $method; if (preg_match('/^get/', $method)) { $attribute = substr($method, 3); $attribute = lcfirst($attribute); } if ($this-&gt;underscoreSeparatedKeys) { $attribute = preg_replace_callback('/([A-Z])/', $transform, $attribute); } $attributes[$attribute] = $this-&gt;extractValue($attribute, $object-&gt;$method()); } return $attributes; } public function hydrate(array $data, $object) { if (!is_object($object)) { throw new Exception\BadMethodCallException(sprintf( '%s expects the provided $object to be a PHP object)', __METHOD__ )); } $transform = function ($letters) { $letter = substr(array_shift($letters), 1, 1); return ucfirst($letter); }; foreach ($data as $property =&gt; $value) { $method = 'set' . ucfirst($property); if ($this-&gt;underscoreSeparatedKeys) { $method = preg_replace_callback('/(_[a-z])/', $transform, $method); } if (method_exists($object, $method)) { $value = $this-&gt;hydrateValue($property, $value); $object-&gt;$method($value); } } return $object; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Strategy; class DefaultStrategy implements StrategyInterface { public function extract($value) { return $value; } public function hydrate($value) { return $value; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Strategy; interface StrategyInterface { public function extract($value); public function hydrate($value); } &lt;?php
 namespace Zend\Stdlib\Hydrator\Strategy; use Zend\Stdlib\Exception\InvalidArgumentException; use Zend\Serializer\Adapter\AdapterInterface as SerializerAdapter; use Zend\Serializer\Serializer as SerializerFactory; class SerializableStrategy implements StrategyInterface { protected $serializer; protected $serializerOptions = array(); public function __construct($serializer, $serializerOptions = null) { $this-&gt;setSerializer($serializer); if($serializerOptions) { $this-&gt;setSerializerOptions($serializerOptions); } } public function extract($value) { $serializer = $this-&gt;getSerializer(); return $serializer-&gt;serialize($value); } public function hydrate($value) { $serializer = $this-&gt;getSerializer(); return $serializer-&gt;unserialize($value); } public function setSerializer($serializer) { if (!is_string($serializer) &amp;&amp; !$serializer instanceof SerializerAdapter) { throw new InvalidArgumentException(sprintf( '%s expects either a string serializer name or Zend\Serializer\Adapter\AdapterInterface instance; ' . 'received "%s"', __METHOD__, (is_object($serializer) ? get_class($serializer) : gettype($serializer)) )); } $this-&gt;serializer = $serializer; return $this; } public function getSerializer() { if (is_string($this-&gt;serializer)) { $options = $this-&gt;getSerializerOptions(); $this-&gt;setSerializer(SerializerFactory::factory($this-&gt;serializer, $options)); } elseif (null === $this-&gt;serializer) { $this-&gt;setSerializer(SerializerFactory::getDefaultAdapter()); } return $this-&gt;serializer; } public function setSerializerOptions($serializerOptions) { $this-&gt;serializerOptions = $serializerOptions; return $this; } public function getSerializerOptions() { return $this-&gt;serializerOptions; } } &lt;?php
 namespace Zend\Stdlib\Hydrator\Strategy; class ClosureStrategy implements StrategyInterface { protected $extractFunc = null; protected $hydrateFunc = null; public function __construct($extractFunc = null, $hydrateFunc = null) { if (isset($extractFunc)) { if (!is_callable($extractFunc)) { throw new \Exception('$extractFunc must be callable'); } $this-&gt;extractFunc = $extractFunc; } else { $this-&gt;extractFunc = function($value) { return $value; }; } if (isset($hydrateFunc)) { if (!is_callable($hydrateFunc)) { throw new \Exception('$hydrateFunc must be callable'); } $this-&gt;hydrateFunc = $hydrateFunc; } else { $this-&gt;hydrateFunc = function($value) { return $value; }; } } public function extract($value) { $func = $this-&gt;extractFunc; return $func($value); } public function hydrate($value) { $func = $this-&gt;hydrateFunc; return $func($value); } } &lt;?php
 namespace Zend\Stdlib\Hydrator; use ReflectionClass; use Zend\Stdlib\Exception; class Reflection extends AbstractHydrator { protected static $reflProperties = array(); public function extract($object) { $result = array(); foreach (self::getReflProperties($object) as $property) { $propertyName = $property-&gt;getName(); if (!$this-&gt;filterComposite-&gt;filter($propertyName)) { continue; } $value = $property-&gt;getValue($object); $result[$propertyName] = $this-&gt;extractValue($propertyName, $value); } return $result; } public function hydrate(array $data, $object) { $reflProperties = self::getReflProperties($object); foreach ($data as $key =&gt; $value) { if (isset($reflProperties[$key])) { $reflProperties[$key]-&gt;setValue($object, $this-&gt;hydrateValue($key, $value)); } } return $object; } protected static function getReflProperties($input) { if (is_object($input)) { $input = get_class($input); } elseif (!is_string($input)) { throw new Exception\InvalidArgumentException('Input must be a string or an object.'); } if (!isset(static::$reflProperties[$input])) { $reflClass = new ReflectionClass($input); $reflProperties = $reflClass-&gt;getProperties(); foreach ($reflProperties as $property) { $property-&gt;setAccessible(true); static::$reflProperties[$input][$property-&gt;getName()] = $property; } } return static::$reflProperties[$input]; } } &lt;?php
 namespace Zend\Stdlib\Hydrator; use Zend\Stdlib\Exception; class ObjectProperty extends AbstractHydrator { public function extract($object) { if (!is_object($object)) { throw new Exception\BadMethodCallException(sprintf( '%s expects the provided $object to be a PHP object)', __METHOD__ )); } $self = $this; $data = get_object_vars($object); array_walk($data, function (&amp;$value, $name) use ($self, &amp;$data) { if (!$self-&gt;getFilter()-&gt;filter($name)) { unset($data[$name]); } else { $value = $self-&gt;extractValue($name, $value); } }); return $data; } public function hydrate(array $data, $object) { if (!is_object($object)) { throw new Exception\BadMethodCallException(sprintf( '%s expects the provided $object to be a PHP object)', __METHOD__ )); } foreach ($data as $property =&gt; $value) { $object-&gt;$property = $this-&gt;hydrateValue($property, $value); } return $object; } } &lt;?php
 namespace Zend\Stdlib\Hydrator; use Zend\Stdlib\Exception; class ArraySerializable extends AbstractHydrator { public function extract($object) { if (!is_callable(array($object, 'getArrayCopy'))) { throw new Exception\BadMethodCallException(sprintf( '%s expects the provided object to implement getArrayCopy()', __METHOD__ )); } $self = $this; $data = $object-&gt;getArrayCopy(); array_walk($data, function (&amp;$value, $name) use ($self, &amp;$data) { if (!$self-&gt;getFilter()-&gt;filter($name)) { unset($data[$name]); } else { $value = $self-&gt;extractValue($name, $value); } }); return $data; } public function hydrate(array $data, $object) { $self = $this; array_walk($data, function (&amp;$value, $name) use ($self) { $value = $self-&gt;hydrateValue($name, $value); }); if (is_callable(array($object, 'exchangeArray'))) { $object-&gt;exchangeArray($data); } elseif (is_callable(array($object, 'populate'))) { $object-&gt;populate($data); } else { throw new Exception\BadMethodCallException(sprintf( '%s expects the provided object to implement exchangeArray() or populate()', __METHOD__ )); } return $object; } } &lt;?php
 namespace Zend\Stdlib\Hydrator; use Zend\Stdlib\Hydrator\Strategy\StrategyInterface; interface StrategyEnabledInterface { public function addStrategy($name, StrategyInterface $strategy); public function getStrategy($name); public function hasStrategy($name); public function removeStrategy($name); } &lt;?php
 namespace Zend\Stdlib\Hydrator; interface HydratorInterface { public function extract($object); public function hydrate(array $data, $object); } &lt;?php
 namespace Zend\Stdlib; use Serializable; class SplStack extends \SplStack implements Serializable { public function toArray() { $array = array(); foreach ($this as $item) { $array[] = $item; } return $array; } public function serialize() { return serialize($this-&gt;toArray()); } public function unserialize($data) { foreach (unserialize($data) as $item) { $this-&gt;unshift($item); } } } &lt;?php
 namespace Zend\Stdlib; class Request extends Message implements RequestInterface { } &lt;?php
 namespace Zend\Stdlib; use ErrorException; abstract class ErrorHandler { protected static $stack = array(); public static function started() { return (bool) static::getNestedLevel(); } public static function getNestedLevel() { return count(static::$stack); } public static function start($errorLevel = \E_WARNING) { if (!static::$stack) { set_error_handler(array(get_called_class(), 'addError'), $errorLevel); } static::$stack[] = null; } public static function stop($throw = false) { $errorException = null; if (static::$stack) { $errorException = array_pop(static::$stack); if (!static::$stack) { restore_error_handler(); } if ($errorException &amp;&amp; $throw) { throw $errorException; } } return $errorException; } public static function clean() { if (static::$stack) { restore_error_handler(); } static::$stack = array(); } public static function addError($errno, $errstr = '', $errfile = '', $errline = 0) { $stack = &amp; static::$stack[ count(static::$stack) - 1 ]; $stack = new ErrorException($errstr, 0, $errno, $errfile, $errline, $stack); } } &lt;?php
 namespace Zend\Stdlib; interface ResponseInterface extends MessageInterface { } &lt;?php
 namespace Zend\Stdlib; use Traversable; abstract class ArrayUtils { public static function hasStringKeys($value, $allowEmpty = false) { if (!is_array($value)) { return false; } if (!$value) { return $allowEmpty; } return count(array_filter(array_keys($value), 'is_string')) &gt; 0; } public static function hasIntegerKeys($value, $allowEmpty = false) { if (!is_array($value)) { return false; } if (!$value) { return $allowEmpty; } return count(array_filter(array_keys($value), 'is_int')) &gt; 0; } public static function hasNumericKeys($value, $allowEmpty = false) { if (!is_array($value)) { return false; } if (!$value) { return $allowEmpty; } return count(array_filter(array_keys($value), 'is_numeric')) &gt; 0; } public static function isList($value, $allowEmpty = false) { if (!is_array($value)) { return false; } if (!$value) { return $allowEmpty; } return (array_values($value) === $value); } public static function isHashTable($value, $allowEmpty = false) { if (!is_array($value)) { return false; } if (!$value) { return $allowEmpty; } return (array_values($value) !== $value); } public static function inArray($needle, array $haystack, $strict = false) { if (!$strict) { if (is_int($needle) || is_float($needle)) { $needle = (string) $needle; } if (is_string($needle)) { foreach ($haystack as &amp;$h) { if (is_int($h) || is_float($h)) { $h = (string) $h; } } } } return in_array($needle, $haystack, $strict); } public static function iteratorToArray($iterator, $recursive = true) { if (!is_array($iterator) &amp;&amp; !$iterator instanceof Traversable) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable object'); } if (!$recursive) { if (is_array($iterator)) { return $iterator; } return iterator_to_array($iterator); } if (method_exists($iterator, 'toArray')) { return $iterator-&gt;toArray(); } $array = array(); foreach ($iterator as $key =&gt; $value) { if (is_scalar($value)) { $array[$key] = $value; continue; } if ($value instanceof Traversable) { $array[$key] = static::iteratorToArray($value, $recursive); continue; } if (is_array($value)) { $array[$key] = static::iteratorToArray($value, $recursive); continue; } $array[$key] = $value; } return $array; } public static function merge(array $a, array $b) { foreach ($b as $key =&gt; $value) { if (array_key_exists($key, $a)) { if (is_int($key)) { $a[] = $value; } elseif (is_array($value) &amp;&amp; is_array($a[$key])) { $a[$key] = static::merge($a[$key], $value); } else { $a[$key] = $value; } } else { $a[$key] = $value; } } return $a; } } &lt;?php
 namespace Zend\Stdlib; use Zend\Stdlib\RequestInterface as Request; use Zend\Stdlib\ResponseInterface as Response; interface DispatchableInterface { public function dispatch(Request $request, Response $response = null); } &lt;?php
 namespace Zend\Stdlib; use ArrayAccess; use Countable; use Serializable; use Traversable; interface ParametersInterface extends ArrayAccess, Countable, Serializable, Traversable { public function __construct(array $values = null); public function fromArray(array $values); public function fromString($string); public function toArray(); public function toString(); public function get($name, $default = null); public function set($name, $value); } &lt;?php
 namespace Zend\Stdlib; use ArrayObject as PhpArrayObject; class Parameters extends PhpArrayObject implements ParametersInterface { public function __construct(array $values = null) { if (null === $values) { $values = array(); } parent::__construct($values, ArrayObject::ARRAY_AS_PROPS); } public function fromArray(array $values) { $this-&gt;exchangeArray($values); } public function fromString($string) { $array = array(); parse_str($string, $array); $this-&gt;fromArray($array); } public function toArray() { return $this-&gt;getArrayCopy(); } public function toString() { return http_build_query($this); } public function offsetGet($name) { if (isset($this[$name])) { return parent::offsetGet($name); } return null; } public function get($name, $default = null) { if (isset($this[$name])) { return parent::offsetGet($name); } return $default; } public function set($name, $value) { $this[$name] = $value; return $this; } } &lt;?php
 namespace Zend\Stdlib; interface MessageInterface { public function setMetadata($spec, $value = null); public function getMetadata($key = null); public function setContent($content); public function getContent(); } &lt;?php
 namespace Zend\Stdlib; interface ArraySerializableInterface { public function exchangeArray(array $array); public function getArrayCopy(); } &lt;?php
 namespace Zend\ServiceManager; class Config implements ConfigInterface { protected $config = array(); public function __construct($config = array()) { $this-&gt;config = $config; } public function getAllowOverride() { return (isset($this-&gt;config['allow_override'])) ? $this-&gt;config['allow_override'] : null; } public function getFactories() { return (isset($this-&gt;config['factories'])) ? $this-&gt;config['factories'] : array(); } public function getAbstractFactories() { return (isset($this-&gt;config['abstract_factories'])) ? $this-&gt;config['abstract_factories'] : array(); } public function getInvokables() { return (isset($this-&gt;config['invokables'])) ? $this-&gt;config['invokables'] : array(); } public function getServices() { return (isset($this-&gt;config['services'])) ? $this-&gt;config['services'] : array(); } public function getAliases() { return (isset($this-&gt;config['aliases'])) ? $this-&gt;config['aliases'] : array(); } public function getInitializers() { return (isset($this-&gt;config['initializers'])) ? $this-&gt;config['initializers'] : array(); } public function getShared() { return (isset($this-&gt;config['shared'])) ? $this-&gt;config['shared'] : array(); } public function configureServiceManager(ServiceManager $serviceManager) { if (($allowOverride = $this-&gt;getAllowOverride()) !== null) { $serviceManager-&gt;setAllowOverride($allowOverride); } foreach ($this-&gt;getFactories() as $name =&gt; $factory) { $serviceManager-&gt;setFactory($name, $factory); } foreach ($this-&gt;getAbstractFactories() as $factory) { $serviceManager-&gt;addAbstractFactory($factory); } foreach ($this-&gt;getInvokables() as $name =&gt; $invokable) { $serviceManager-&gt;setInvokableClass($name, $invokable); } foreach ($this-&gt;getServices() as $name =&gt; $service) { $serviceManager-&gt;setService($name, $service); } foreach ($this-&gt;getAliases() as $alias =&gt; $nameOrAlias) { $serviceManager-&gt;setAlias($alias, $nameOrAlias); } foreach ($this-&gt;getInitializers() as $initializer) { $serviceManager-&gt;addInitializer($initializer); } foreach ($this-&gt;getShared() as $name =&gt; $isShared) { $serviceManager-&gt;setShared($name, $isShared); } } } &lt;?php
 namespace Zend\ServiceManager; abstract class AbstractPluginManager extends ServiceManager implements ServiceLocatorAwareInterface { protected $allowOverride = true; protected $autoAddInvokableClass = true; protected $creationOptions = null; protected $serviceLocator; public function __construct(ConfigInterface $configuration = null) { parent::__construct($configuration); $self = $this; $this-&gt;addInitializer(function ($instance) use ($self) { if ($instance instanceof ServiceLocatorAwareInterface) { $instance-&gt;setServiceLocator($self); } }); } abstract public function validatePlugin($plugin); public function get($name, $options = array(), $usePeeringServiceManagers = true) { if (!$this-&gt;has($name) &amp;&amp; $this-&gt;autoAddInvokableClass &amp;&amp; class_exists($name)) { $this-&gt;setInvokableClass($name, $name); } $this-&gt;creationOptions = $options; $instance = parent::get($name, $usePeeringServiceManagers); $this-&gt;creationOptions = null; $this-&gt;validatePlugin($instance); return $instance; } public function setService($name, $service, $shared = true) { if ($service) { $this-&gt;validatePlugin($service); } parent::setService($name, $service, $shared); return $this; } public function setServiceLocator(ServiceLocatorInterface $serviceLocator) { $this-&gt;serviceLocator = $serviceLocator; return $this; } public function getServiceLocator() { return $this-&gt;serviceLocator; } protected function createFromInvokable($canonicalName, $requestedName) { $invokable = $this-&gt;invokableClasses[$canonicalName]; if (null === $this-&gt;creationOptions || (is_array($this-&gt;creationOptions) &amp;&amp; empty($this-&gt;creationOptions)) ) { $instance = new $invokable(); } else { $instance = new $invokable($this-&gt;creationOptions); } return $instance; } protected function createFromFactory($canonicalName, $requestedName) { $factory = $this-&gt;factories[$canonicalName]; if (is_string($factory) &amp;&amp; class_exists($factory, true)) { if (null === $this-&gt;creationOptions || (is_array($this-&gt;creationOptions) &amp;&amp; empty($this-&gt;creationOptions))) { $factory = new $factory(); } else { $factory = new $factory($this-&gt;creationOptions); } $this-&gt;factories[$canonicalName] = $factory; } if ($factory instanceof FactoryInterface) { $instance = $this-&gt;createServiceViaCallback(array($factory, 'createService'), $canonicalName, $requestedName); } elseif (is_callable($factory)) { $instance = $this-&gt;createServiceViaCallback($factory, $canonicalName, $requestedName); } else { throw new Exception\ServiceNotCreatedException(sprintf( 'While attempting to create %s%s an invalid factory was registered for this instance type.', $canonicalName, ($requestedName ? '(alias: ' . $requestedName . ')' : '') )); } return $instance; } } &lt;?php
 namespace Zend\ServiceManager\Exception; class InvalidServiceNameException extends RuntimeException { } &lt;?php
 namespace Zend\ServiceManager\Exception; class ServiceNotCreatedException extends RuntimeException { } &lt;?php
 namespace Zend\ServiceManager\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\ServiceManager\Exception; class ServiceNotFoundException extends InvalidArgumentException { } &lt;?php
 namespace Zend\ServiceManager\Exception; class CircularDependencyFoundException extends RuntimeException { } &lt;?php
 namespace Zend\ServiceManager\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\ServiceManager\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\ServiceManager; interface ServiceLocatorInterface { public function get($name); public function has($name); } &lt;?php
 namespace Zend\ServiceManager; use Zend\ServiceManager\ServiceLocatorInterface; trait ServiceLocatorAwareTrait { protected $serviceLocator = null; public function setServiceLocator(ServiceLocatorInterface $serviceLocator) { $this-&gt;serviceLocator = $serviceLocator; return $this; } public function getServiceLocator() { return $this-&gt;serviceLocator; } } &lt;?php
 namespace Zend\ServiceManager; interface ServiceLocatorAwareInterface { public function setServiceLocator(ServiceLocatorInterface $serviceLocator); public function getServiceLocator(); } &lt;?php
 namespace Zend\ServiceManager; use ReflectionClass; class ServiceManager implements ServiceLocatorInterface { const SCOPE_PARENT = 'parent'; const SCOPE_CHILD = 'child'; protected $canonicalNames = array(); protected $allowOverride = false; protected $invokableClasses = array(); protected $factories = array(); protected $abstractFactories = array(); protected $pendingAbstractFactoryRequests = array(); protected $shared = array(); protected $instances = array(); protected $aliases = array(); protected $initializers = array(); protected $peeringServiceManagers = array(); protected $shareByDefault = true; protected $retrieveFromPeeringManagerFirst = false; protected $throwExceptionInCreate = true; protected $canonicalNamesReplacements = array('-' =&gt; '', '_' =&gt; '', ' ' =&gt; '', '\\' =&gt; '', '/' =&gt; ''); public function __construct(ConfigInterface $config = null) { if ($config) { $config-&gt;configureServiceManager($this); } } public function setAllowOverride($allowOverride) { $this-&gt;allowOverride = (bool) $allowOverride; return $this; } public function getAllowOverride() { return $this-&gt;allowOverride; } public function setShareByDefault($shareByDefault) { if ($this-&gt;allowOverride === false) { throw new Exception\RuntimeException(sprintf( '%s: cannot alter default shared service setting; container is marked immutable (allow_override is false)', __METHOD__ )); } $this-&gt;shareByDefault = (bool) $shareByDefault; return $this; } public function shareByDefault() { return $this-&gt;shareByDefault; } public function setThrowExceptionInCreate($throwExceptionInCreate) { $this-&gt;throwExceptionInCreate = $throwExceptionInCreate; return $this; } public function getThrowExceptionInCreate() { return $this-&gt;throwExceptionInCreate; } public function setRetrieveFromPeeringManagerFirst($retrieveFromPeeringManagerFirst = true) { $this-&gt;retrieveFromPeeringManagerFirst = (bool) $retrieveFromPeeringManagerFirst; return $this; } public function retrieveFromPeeringManagerFirst() { return $this-&gt;retrieveFromPeeringManagerFirst; } public function setInvokableClass($name, $invokableClass, $shared = null) { $cName = $this-&gt;canonicalizeName($name); if ($this-&gt;has(array($cName, $name), false)) { if ($this-&gt;allowOverride === false) { throw new Exception\InvalidServiceNameException(sprintf( 'A service by the name or alias "%s" already exists and cannot be overridden; please use an alternate name', $cName )); } $this-&gt;unregisterService($cName); } if ($shared === null) { $shared = $this-&gt;shareByDefault(); } $this-&gt;invokableClasses[$cName] = $invokableClass; $this-&gt;shared[$cName] = (bool) $shared; return $this; } public function setFactory($name, $factory, $shared = null) { $cName = $this-&gt;canonicalizeName($name); if (!is_string($factory) &amp;&amp; !$factory instanceof FactoryInterface &amp;&amp; !is_callable($factory)) { throw new Exception\InvalidArgumentException( 'Provided abstract factory must be the class name of an abstract factory or an instance of an AbstractFactoryInterface.' ); } if ($this-&gt;has(array($cName, $name), false)) { if ($this-&gt;allowOverride === false) { throw new Exception\InvalidServiceNameException(sprintf( 'A service by the name or alias "%s" already exists and cannot be overridden, please use an alternate name', $cName )); } $this-&gt;unregisterService($cName); } if ($shared === null) { $shared = $this-&gt;shareByDefault(); } $this-&gt;factories[$cName] = $factory; $this-&gt;shared[$cName] = (bool) $shared; return $this; } public function addAbstractFactory($factory, $topOfStack = true) { if (!is_string($factory) &amp;&amp; !$factory instanceof AbstractFactoryInterface) { throw new Exception\InvalidArgumentException( 'Provided abstract factory must be the class name of an abstract factory or an instance of an AbstractFactoryInterface.' ); } if (is_string($factory)) { if (!class_exists($factory, true)) { throw new Exception\InvalidArgumentException( 'Provided abstract factory must be the class name of an abstract factory or an instance of an AbstractFactoryInterface.' ); } $refl = new ReflectionClass($factory); if (!$refl-&gt;implementsInterface(__NAMESPACE__ . '\\AbstractFactoryInterface')) { throw new Exception\InvalidArgumentException( 'Provided abstract factory must be the class name of an abstract factory or an instance of an AbstractFactoryInterface.' ); } } if ($topOfStack) { array_unshift($this-&gt;abstractFactories, $factory); } else { array_push($this-&gt;abstractFactories, $factory); } return $this; } public function addInitializer($initializer, $topOfStack = true) { if (!is_callable($initializer) &amp;&amp; !$initializer instanceof InitializerInterface) { if (!is_string($initializer) || !$this-&gt;isSubclassOf($initializer, __NAMESPACE__ . '\InitializerInterface') ) { throw new Exception\InvalidArgumentException('$initializer should be callable.'); } $initializer = new $initializer; } if ($topOfStack) { array_unshift($this-&gt;initializers, $initializer); } else { array_push($this-&gt;initializers, $initializer); } return $this; } public function setService($name, $service) { $cName = $this-&gt;canonicalizeName($name); if ($this-&gt;has($cName, false)) { if ($this-&gt;allowOverride === false) { throw new Exception\InvalidServiceNameException(sprintf( '%s: A service by the name "%s" or alias already exists and cannot be overridden, please use an alternate name.', __METHOD__, $name )); } $this-&gt;unregisterService($cName); } $this-&gt;instances[$cName] = $service; return $this; } public function setShared($name, $isShared) { $cName = $this-&gt;canonicalizeName($name); if ( !isset($this-&gt;invokableClasses[$cName]) &amp;&amp; !isset($this-&gt;factories[$cName]) &amp;&amp; !$this-&gt;canCreateFromAbstractFactory($cName, $name) ) { throw new Exception\ServiceNotFoundException(sprintf( '%s: A service by the name "%s" was not found and could not be marked as shared', __METHOD__, $name )); } $this-&gt;shared[$cName] = (bool) $isShared; return $this; } public function get($name, $usePeeringServiceManagers = true) { $cName = $this-&gt;canonicalizeName($name); $isAlias = false; if ($this-&gt;hasAlias($cName)) { $isAlias = true; do { $cName = $this-&gt;aliases[$cName]; } while ($this-&gt;hasAlias($cName)); } $instance = null; $retrieveFromPeeringManagerFirst = $this-&gt;retrieveFromPeeringManagerFirst(); if ($usePeeringServiceManagers &amp;&amp; $retrieveFromPeeringManagerFirst) { $instance = $this-&gt;retrieveFromPeeringManager($name); if(null !== $instance) { return $instance; } } if (isset($this-&gt;instances[$cName])) { return $this-&gt;instances[$cName]; } if (!$instance) { if ($this-&gt;canCreate(array($cName, $name))) { $instance = $this-&gt;create(array($cName, $name)); } elseif ($usePeeringServiceManagers &amp;&amp; !$retrieveFromPeeringManagerFirst) { $instance = $this-&gt;retrieveFromPeeringManager($name); } } if ($instance === null &amp;&amp; !is_array($instance)) { if ($isAlias) { throw new Exception\ServiceNotFoundException(sprintf( 'An alias "%s" was requested but no service could be found.', $name )); } throw new Exception\ServiceNotFoundException(sprintf( '%s was unable to fetch or create an instance for %s', __METHOD__, $name )); } if ( ($this-&gt;shareByDefault() &amp;&amp; !isset($this-&gt;shared[$cName])) || (isset($this-&gt;shared[$cName]) &amp;&amp; $this-&gt;shared[$cName] === true) ) { $this-&gt;instances[$cName] = $instance; } return $instance; } public function create($name) { $instance = false; if (is_array($name)) { list($cName, $rName) = $name; } else { $rName = $name; $cName = $this-&gt;canonicalizeName($rName); } if (isset($this-&gt;factories[$cName])) { $instance = $this-&gt;createFromFactory($cName, $rName); } if ($instance === false &amp;&amp; isset($this-&gt;invokableClasses[$cName])) { $instance = $this-&gt;createFromInvokable($cName, $rName); } if ($instance === false &amp;&amp; $this-&gt;canCreateFromAbstractFactory($cName, $rName)) { $instance = $this-&gt;createFromAbstractFactory($cName, $rName); } if ($this-&gt;throwExceptionInCreate == true &amp;&amp; $instance === false) { throw new Exception\ServiceNotFoundException(sprintf( 'No valid instance was found for %s%s', $cName, ($rName ? '(alias: ' . $rName . ')' : '') )); } foreach ($this-&gt;initializers as $initializer) { if ($initializer instanceof InitializerInterface) { $initializer-&gt;initialize($instance, $this); } elseif (is_object($initializer) &amp;&amp; is_callable($initializer)) { $initializer($instance, $this); } else { call_user_func($initializer, $instance, $this); } } return $instance; } public function canCreate($name, $checkAbstractFactories = true) { if (is_array($name)) { list($cName, $rName) = $name; } else { $rName = $name; $cName = $this-&gt;canonicalizeName($rName); } if ( isset($this-&gt;invokableClasses[$cName]) || isset($this-&gt;factories[$cName]) || isset($this-&gt;aliases[$cName]) || isset($this-&gt;instances[$cName]) ) { return true; } if ($checkAbstractFactories &amp;&amp; $this-&gt;canCreateFromAbstractFactory($cName, $rName)) { return true; } return false; } public function has($name, $checkAbstractFactories = true, $usePeeringServiceManagers = true) { if (is_array($name)) { list($cName, $rName) = $name; } else { $rName = $name; $cName = $this-&gt;canonicalizeName($rName); } if ($this-&gt;canCreate(array($cName, $rName), $checkAbstractFactories)) { return true; } if ($usePeeringServiceManagers) { foreach ($this-&gt;peeringServiceManagers as $peeringServiceManager) { if ($peeringServiceManager-&gt;has($rName)) { return true; } } } return false; } public function canCreateFromAbstractFactory($cName, $rName) { foreach ($this-&gt;abstractFactories as $index =&gt; $abstractFactory) { if (is_string($abstractFactory) &amp;&amp; class_exists($abstractFactory, true)) { $this-&gt;abstractFactories[$index] = $abstractFactory = new $abstractFactory(); } if ( isset($this-&gt;pendingAbstractFactoryRequests[get_class($abstractFactory)]) &amp;&amp; $this-&gt;pendingAbstractFactoryRequests[get_class($abstractFactory)] == $rName ) { return false; } if ($abstractFactory-&gt;canCreateServiceWithName($this, $cName, $rName)) { return true; } } return false; } public function setAlias($alias, $nameOrAlias) { if (!is_string($alias) || !is_string($nameOrAlias)) { throw new Exception\InvalidServiceNameException('Service or alias names must be strings.'); } $cAlias = $this-&gt;canonicalizeName($alias); $nameOrAlias = $this-&gt;canonicalizeName($nameOrAlias); if ($alias == '' || $nameOrAlias == '') { throw new Exception\InvalidServiceNameException('Invalid service name alias'); } if ($this-&gt;allowOverride === false &amp;&amp; $this-&gt;has(array($cAlias, $alias), false)) { throw new Exception\InvalidServiceNameException(sprintf( 'An alias by the name "%s" or "%s" already exists', $cAlias, $alias )); } $this-&gt;aliases[$cAlias] = $nameOrAlias; return $this; } public function hasAlias($alias) { $alias = $this-&gt;canonicalizeName($alias); return (isset($this-&gt;aliases[$alias])); } public function createScopedServiceManager($peering = self::SCOPE_PARENT) { $scopedServiceManager = new ServiceManager(); if ($peering == self::SCOPE_PARENT) { $scopedServiceManager-&gt;peeringServiceManagers[] = $this; } if ($peering == self::SCOPE_CHILD) { $this-&gt;peeringServiceManagers[] = $scopedServiceManager; } return $scopedServiceManager; } public function addPeeringServiceManager(ServiceManager $manager, $peering = self::SCOPE_PARENT) { if ($peering == self::SCOPE_PARENT) { $this-&gt;peeringServiceManagers[] = $manager; } if ($peering == self::SCOPE_CHILD) { $manager-&gt;peeringServiceManagers[] = $this; } return $this; } protected function canonicalizeName($name) { if (isset($this-&gt;canonicalNames[$name])) { return $this-&gt;canonicalNames[$name]; } return $this-&gt;canonicalNames[$name] = strtolower(strtr($name, $this-&gt;canonicalNamesReplacements)); } protected function createServiceViaCallback($callable, $cName, $rName) { static $circularDependencyResolver = array(); $depKey = spl_object_hash($this) . '-' . $cName; if (isset($circularDependencyResolver[$depKey])) { $circularDependencyResolver = array(); throw new Exception\CircularDependencyFoundException('Circular dependency for LazyServiceLoader was found for instance ' . $rName); } try { $circularDependencyResolver[$depKey] = true; $instance = call_user_func($callable, $this, $cName, $rName); unset($circularDependencyResolver[$depKey]); } catch (Exception\ServiceNotFoundException $e) { unset($circularDependencyResolver[$depKey]); throw $e; } catch (\Exception $e) { unset($circularDependencyResolver[$depKey]); throw new Exception\ServiceNotCreatedException( sprintf('An exception was raised while creating "%s"; no instance returned', $rName), $e-&gt;getCode(), $e ); } if ($instance === null) { throw new Exception\ServiceNotCreatedException('The factory was called but did not return an instance.'); } return $instance; } public function getRegisteredServices() { return array( 'invokableClasses' =&gt; array_keys($this-&gt;invokableClasses), 'factories' =&gt; array_keys($this-&gt;factories), 'aliases' =&gt; array_keys($this-&gt;aliases), 'instances' =&gt; array_keys($this-&gt;instances), ); } public function getCanonicalNames() { return $this-&gt;canonicalNames; } public function setCanonicalNames($canonicalNames) { $this-&gt;canonicalNames = $canonicalNames; return $this; } protected function retrieveFromPeeringManager($name) { foreach ($this-&gt;peeringServiceManagers as $peeringServiceManager) { if ($peeringServiceManager-&gt;has($name)) { return $peeringServiceManager-&gt;get($name); } } $name = $this-&gt;canonicalizeName($name); if ($this-&gt;hasAlias($name)) { do { $name = $this-&gt;aliases[$name]; } while ($this-&gt;hasAlias($name)); } foreach ($this-&gt;peeringServiceManagers as $peeringServiceManager) { if ($peeringServiceManager-&gt;has($name)) { return $peeringServiceManager-&gt;get($name); } } return null; } protected function createFromInvokable($canonicalName, $requestedName) { $invokable = $this-&gt;invokableClasses[$canonicalName]; if (!class_exists($invokable)) { throw new Exception\ServiceNotFoundException(sprintf( '%s: failed retrieving "%s%s" via invokable class "%s"; class does not exist', __METHOD__, $canonicalName, ($requestedName ? '(alias: ' . $requestedName . ')' : ''), $invokable )); } $instance = new $invokable; return $instance; } protected function createFromFactory($canonicalName, $requestedName) { $factory = $this-&gt;factories[$canonicalName]; if (is_string($factory) &amp;&amp; class_exists($factory, true)) { $factory = new $factory; $this-&gt;factories[$canonicalName] = $factory; } if ($factory instanceof FactoryInterface) { $instance = $this-&gt;createServiceViaCallback(array($factory, 'createService'), $canonicalName, $requestedName); } elseif (is_callable($factory)) { $instance = $this-&gt;createServiceViaCallback($factory, $canonicalName, $requestedName); } else { throw new Exception\ServiceNotCreatedException(sprintf( 'While attempting to create %s%s an invalid factory was registered for this instance type.', $canonicalName, ($requestedName ? '(alias: ' . $requestedName . ')' : '') )); } return $instance; } protected function createFromAbstractFactory($canonicalName, $requestedName) { foreach ($this-&gt;abstractFactories as $index =&gt; $abstractFactory) { if (is_string($abstractFactory) &amp;&amp; class_exists($abstractFactory, true)) { $this-&gt;abstractFactories[$index] = $abstractFactory = new $abstractFactory; } elseif (!$abstractFactory instanceof AbstractFactoryInterface) { throw new Exception\ServiceNotCreatedException(sprintf( 'While attempting to create %s%s an abstract factory could not produce a valid instance.', $canonicalName, ($requestedName ? '(alias: ' . $requestedName . ')' : '') )); } try { if ($abstractFactory-&gt;canCreateServiceWithName($this, $canonicalName, $requestedName)) { $this-&gt;pendingAbstractFactoryRequests[get_class($abstractFactory)] = $requestedName; $instance = $this-&gt;createServiceViaCallback( array($abstractFactory, 'createServiceWithName'), $canonicalName, $requestedName ); unset($this-&gt;pendingAbstractFactoryRequests[get_class($abstractFactory)]); } else { $instance = false; } } catch (\Exception $e) { unset($this-&gt;pendingAbstractFactoryRequests[get_class($abstractFactory)]); throw new Exception\ServiceNotCreatedException( sprintf( 'An abstract factory could not create an instance of %s%s.', $canonicalName, ($requestedName ? '(alias: ' . $requestedName . ')' : '') ), $e-&gt;getCode(), $e ); } if (is_object($instance)) { break; } } return $instance; } protected static function isSubclassOf($className, $type) { if (is_subclass_of($className, $type)) { return true; } if (version_compare(PHP_VERSION, '5.3.7', '&gt;=')) { return false; } if (!interface_exists($type)) { return false; } $r = new ReflectionClass($className); return $r-&gt;implementsInterface($type); } protected function unregisterService($canonical) { $types = array('invokableClasses', 'factories', 'aliases'); foreach ($types as $type) { if (isset($this-&gt;{$type}[$canonical])) { unset($this-&gt;{$type}[$canonical]); break; } } if (isset($this-&gt;instances[$canonical])) { unset($this-&gt;instances[$canonical]); } if (isset($this-&gt;shared[$canonical])) { unset($this-&gt;shared[$canonical]); } } } &lt;?php
 namespace Zend\ServiceManager; interface ServiceManagerAwareInterface { public function setServiceManager(ServiceManager $serviceManager); } &lt;?php
 namespace Zend\ServiceManager; use Zend\ServiceManager\ServiceLocatorInterface; interface InitializerInterface { public function initialize($instance, ServiceLocatorInterface $serviceLocator); } &lt;?php
 namespace Zend\ServiceManager; interface ConfigInterface { public function configureServiceManager(ServiceManager $serviceManager); } &lt;?php
 namespace Zend\ServiceManager; interface FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator); } &lt;?php
 namespace Zend\ServiceManager; interface AbstractFactoryInterface { public function canCreateServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName); public function createServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName); } &lt;?php
 namespace Zend\ServiceManager\Di; use Zend\Di\Di; use Zend\ServiceManager\Exception; use Zend\ServiceManager\InitializerInterface; use Zend\ServiceManager\ServiceLocatorInterface; class DiServiceInitializer extends Di implements InitializerInterface { protected $di = null; protected $diInstanceManagerProxy = null; protected $serviceLocator = null; public function __construct(Di $di, ServiceLocatorInterface $serviceLocator, DiInstanceManagerProxy $diImProxy = null) { $this-&gt;di = $di; $this-&gt;serviceLocator = $serviceLocator; $this-&gt;diInstanceManagerProxy = ($diImProxy) ?: new DiInstanceManagerProxy($di-&gt;instanceManager(), $serviceLocator); } public function initialize($instance, ServiceLocatorInterface $serviceLocator) { $instanceManager = $this-&gt;di-&gt;instanceManager; $this-&gt;di-&gt;instanceManager = $this-&gt;diInstanceManagerProxy; try { $this-&gt;di-&gt;injectDependencies($instance); $this-&gt;di-&gt;instanceManager = $instanceManager; } catch (\Exception $e) { $this-&gt;di-&gt;instanceManager = $instanceManager; throw $e; } } } &lt;?php
 namespace Zend\ServiceManager\Di; use Zend\Di\Di; use Zend\ServiceManager\AbstractFactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class DiAbstractServiceFactory extends DiServiceFactory implements AbstractFactoryInterface { public function __construct(Di $di, $useServiceLocator = self::USE_SL_NONE) { $this-&gt;di = $di; if (in_array($useServiceLocator, array(self::USE_SL_BEFORE_DI, self::USE_SL_AFTER_DI, self::USE_SL_NONE))) { $this-&gt;useServiceLocator = $useServiceLocator; } $this-&gt;definitions = $this-&gt;di-&gt;definitions; $this-&gt;instanceManager = $this-&gt;di-&gt;instanceManager; } public function createServiceWithName(ServiceLocatorInterface $serviceLocator, $serviceName, $requestedName) { $this-&gt;serviceLocator = $serviceLocator; if ($requestedName) { return $this-&gt;get($requestedName, array(), true); } return $this-&gt;get($serviceName, array(), true); } public function canCreateServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName) { return $this-&gt;instanceManager-&gt;hasSharedInstance($requestedName) || $this-&gt;instanceManager-&gt;hasAlias($requestedName) || $this-&gt;instanceManager-&gt;hasConfig($requestedName) || $this-&gt;instanceManager-&gt;hasTypePreferences($requestedName) || $this-&gt;definitions-&gt;hasClass($requestedName); } } &lt;?php
 namespace Zend\ServiceManager\Di; use Zend\Di\Di; use Zend\Di\Exception\ClassNotFoundException as DiClassNotFoundException; use Zend\ServiceManager\Exception; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class DiServiceFactory extends Di implements FactoryInterface { const USE_SL_BEFORE_DI = 'before'; const USE_SL_AFTER_DI = 'after'; const USE_SL_NONE = 'none'; protected $di = null; protected $name = null; protected $parameters = array(); protected $useServiceLocator = self::USE_SL_AFTER_DI; protected $serviceLocator = null; public function __construct(Di $di, $name, array $parameters = array(), $useServiceLocator = self::USE_SL_NONE) { $this-&gt;di = $di; $this-&gt;name = $name; $this-&gt;parameters = $parameters; if (in_array($useServiceLocator, array(self::USE_SL_BEFORE_DI, self::USE_SL_AFTER_DI, self::USE_SL_NONE))) { $this-&gt;useServiceLocator = $useServiceLocator; } $this-&gt;definitions = $this-&gt;di-&gt;definitions; $this-&gt;instanceManager = $this-&gt;di-&gt;instanceManager; } public function createService(ServiceLocatorInterface $serviceLocator) { $this-&gt;serviceLocator = $serviceLocator; return $this-&gt;get($this-&gt;name, $this-&gt;parameters, true); } public function get($name, array $params = array()) { if ($this-&gt;useServiceLocator == self::USE_SL_BEFORE_DI &amp;&amp; $this-&gt;serviceLocator-&gt;has($name)) { return $this-&gt;serviceLocator-&gt;get($name); } try { $service = parent::get($name, $params); return $service; } catch (DiClassNotFoundException $e) { if ($this-&gt;useServiceLocator == self::USE_SL_AFTER_DI &amp;&amp; $this-&gt;serviceLocator-&gt;has($name)) { return $this-&gt;serviceLocator-&gt;get($name); } else { throw new Exception\ServiceNotFoundException( sprintf('Service %s was not found in this DI instance', $name), null, $e ); } } } } &lt;?php
 namespace Zend\ServiceManager\Di; use Zend\Di\InstanceManager as DiInstanceManager; use Zend\ServiceManager\ServiceLocatorInterface; class DiInstanceManagerProxy extends DiInstanceManager { protected $diInstanceManager = null; protected $serviceLocator = null; public function __construct(DiInstanceManager $diInstanceManager, ServiceLocatorInterface $serviceLocator) { $this-&gt;diInstanceManager = $diInstanceManager; $this-&gt;serviceLocator = $serviceLocator; $this-&gt;aliases = &amp;$diInstanceManager-&gt;aliases; $this-&gt;sharedInstances = &amp;$diInstanceManager-&gt;sharedInstances; $this-&gt;sharedInstancesWithParams = &amp;$diInstanceManager-&gt;sharedInstancesWithParams; $this-&gt;configurations = &amp;$diInstanceManager-&gt;configurations; $this-&gt;typePreferences = &amp;$diInstanceManager-&gt;typePreferences; } public function hasSharedInstance($classOrAlias) { return ($this-&gt;serviceLocator-&gt;has($classOrAlias) || $this-&gt;diInstanceManager-&gt;hasSharedInstance($classOrAlias)); } public function getSharedInstance($classOrAlias) { if ($this-&gt;serviceLocator-&gt;has($classOrAlias)) { return $this-&gt;serviceLocator-&gt;get($classOrAlias); } return $this-&gt;diInstanceManager-&gt;getSharedInstance($classOrAlias); } } &lt;?php
 namespace Zend\Form; use Countable; use IteratorAggregate; use Zend\Stdlib\Hydrator\HydratorInterface; interface FieldsetInterface extends Countable, IteratorAggregate, ElementInterface, ElementPrepareAwareInterface, FormFactoryAwareInterface { public function add($elementOrFieldset, array $flags = array()); public function has($elementOrFieldset); public function get($elementOrFieldset); public function remove($elementOrFieldset); public function setPriority($elementOrFieldset, $priority); public function getElements(); public function getFieldsets(); public function populateValues($data); public function setObject($object); public function getObject(); public function allowObjectBinding($object); public function setHydrator(HydratorInterface $hydrator); public function getHydrator(); public function bindValues(array $values = array()); public function allowValueBinding(); } &lt;?php
 namespace Zend\Form; use Traversable; use Zend\Stdlib\Hydrator; use Zend\Stdlib\Hydrator\HydratorInterface; use Zend\Stdlib\PriorityQueue; class Fieldset extends Element implements FieldsetInterface { protected $factory; protected $byName = array(); protected $elements = array(); protected $fieldsets = array(); protected $messages = array(); protected $iterator; protected $hydrator; protected $object; protected $useAsBaseFieldset = false; public function __construct($name = null, $options = array()) { $this-&gt;iterator = new PriorityQueue(); parent::__construct($name, $options); } public function setOptions($options) { parent::setOptions($options); if (isset($options['use_as_base_fieldset'])) { $this-&gt;setUseAsBaseFieldset($options['use_as_base_fieldset']); } return $this; } public function setFormFactory(Factory $factory) { $this-&gt;factory = $factory; return $this; } public function getFormFactory() { if (null === $this-&gt;factory) { $this-&gt;setFormFactory(new Factory()); } return $this-&gt;factory; } public function add($elementOrFieldset, array $flags = array()) { if (is_array($elementOrFieldset) || ($elementOrFieldset instanceof Traversable &amp;&amp; !$elementOrFieldset instanceof ElementInterface) ) { $factory = $this-&gt;getFormFactory(); $elementOrFieldset = $factory-&gt;create($elementOrFieldset); } if (!$elementOrFieldset instanceof ElementInterface) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that $elementOrFieldset be an object implementing %s; received "%s"', __METHOD__, __NAMESPACE__ . '\ElementInterface', (is_object($elementOrFieldset) ? get_class($elementOrFieldset) : gettype($elementOrFieldset)) )); } $name = $elementOrFieldset-&gt;getName(); if ((null === $name || '' === $name) &amp;&amp; (!array_key_exists('name', $flags) || $flags['name'] === '') ) { throw new Exception\InvalidArgumentException(sprintf( '%s: element or fieldset provided is not named, and no name provided in flags', __METHOD__ )); } if (array_key_exists('name', $flags) &amp;&amp; $flags['name'] !== '') { $name = $flags['name']; $elementOrFieldset-&gt;setName($name); } $order = 0; if (array_key_exists('priority', $flags)) { $order = $flags['priority']; } $this-&gt;iterator-&gt;insert($elementOrFieldset, $order); $this-&gt;byName[$name] = $elementOrFieldset; if ($elementOrFieldset instanceof FieldsetInterface) { if ($elementOrFieldset instanceof FieldsetPrepareAwareInterface) { $elementOrFieldset-&gt;prepareFieldset(); } $this-&gt;fieldsets[$name] = $elementOrFieldset; return $this; } $this-&gt;elements[$name] = $elementOrFieldset; return $this; } public function has($elementOrFieldset) { return array_key_exists($elementOrFieldset, $this-&gt;byName); } public function get($elementOrFieldset) { if (!$this-&gt;has($elementOrFieldset)) { return null; } return $this-&gt;byName[$elementOrFieldset]; } public function remove($elementOrFieldset) { if (!$this-&gt;has($elementOrFieldset)) { return $this; } $entry = $this-&gt;byName[$elementOrFieldset]; unset($this-&gt;byName[$elementOrFieldset]); $this-&gt;iterator-&gt;remove($entry); if ($entry instanceof FieldsetInterface) { unset($this-&gt;fieldsets[$elementOrFieldset]); return $this; } unset($this-&gt;elements[$elementOrFieldset]); return $this; } public function setPriority($elementOrFieldset, $priority) { $element = $this-&gt;get($elementOrFieldset); $this-&gt;remove($elementOrFieldset); $this-&gt;add($element, array('priority' =&gt; $priority)); return $this; } public function getElements() { return $this-&gt;elements; } public function getFieldsets() { return $this-&gt;fieldsets; } public function setMessages($messages) { if (!is_array($messages) &amp;&amp; !$messages instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable object of messages; received "%s"', __METHOD__, (is_object($messages) ? get_class($messages) : gettype($messages)) )); } foreach ($messages as $key =&gt; $messageSet) { if (!$this-&gt;has($key)) { continue; } $element = $this-&gt;get($key); $element-&gt;setMessages($messageSet); } return $this; } public function getMessages($elementName = null) { if (null === $elementName) { $messages = array(); foreach ($this-&gt;byName as $name =&gt; $element) { $messageSet = $element-&gt;getMessages(); if (!is_array($messageSet) &amp;&amp; !$messageSet instanceof Traversable || empty($messageSet)) { continue; } $messages[$name] = $messageSet; } return $messages; } if (!$this-&gt;has($elementName)) { throw new Exception\InvalidArgumentException(sprintf( 'Invalid element name "%s" provided to %s', $elementName, __METHOD__ )); } $element = $this-&gt;get($elementName); return $element-&gt;getMessages(); } public function prepareElement(FormInterface $form) { $name = $this-&gt;getName(); foreach ($this-&gt;byName as $elementOrFieldset) { $elementOrFieldset-&gt;setName($name . '[' . $elementOrFieldset-&gt;getName() . ']'); if ($elementOrFieldset instanceof ElementPrepareAwareInterface) { $elementOrFieldset-&gt;prepareElement($form); } } } public function populateValues($data) { if (!is_array($data) &amp;&amp; !$data instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable set of data; received "%s"', __METHOD__, (is_object($data) ? get_class($data) : gettype($data)) )); } foreach ($data as $name =&gt; $value) { if (!$this-&gt;has($name)) { continue; } $element = $this-&gt;get($name); if ($element instanceof FieldsetInterface &amp;&amp; is_array($value)) { $element-&gt;populateValues($value); continue; } $element-&gt;setValue($value); } } public function count() { return $this-&gt;iterator-&gt;count(); } public function getIterator() { return $this-&gt;iterator; } public function setObject($object) { if (!is_object($object)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an object argument; received "%s"', __METHOD__, $object )); } $this-&gt;object = $object; return $this; } public function getObject() { return $this-&gt;object; } public function allowObjectBinding($object) { return ($this-&gt;object &amp;&amp; $object instanceof $this-&gt;object); } public function setHydrator(HydratorInterface $hydrator) { $this-&gt;hydrator = $hydrator; return $this; } public function getHydrator() { if (!$this-&gt;hydrator instanceof HydratorInterface) { $this-&gt;setHydrator(new Hydrator\ArraySerializable()); } return $this-&gt;hydrator; } public function allowValueBinding() { return is_object($this-&gt;object); } public function bindValues(array $values = array()) { $hydrator = $this-&gt;getHydrator(); $hydratableData = array(); foreach ($values as $name =&gt; $value) { if (!$this-&gt;has($name)) { continue; } $element = $this-&gt;byName[$name]; if($element instanceof FieldsetInterface &amp;&amp; $element-&gt;allowValueBinding()) { $value = $element-&gt;bindValues($value); } $hydratableData[$name] = $value; } if (!empty($hydratableData)) { $this-&gt;object = $hydrator-&gt;hydrate($hydratableData, $this-&gt;object); } return $this-&gt;object; } public function setUseAsBaseFieldset($useAsBaseFieldset) { $this-&gt;useAsBaseFieldset = (bool) $useAsBaseFieldset; return $this; } public function useAsBaseFieldset() { return $this-&gt;useAsBaseFieldset; } protected function extract() { if (!is_object($this-&gt;object)) { return array(); } $hydrator = $this-&gt;getHydrator(); if (!$hydrator instanceof Hydrator\HydratorInterface) { return array(); } $values = $hydrator-&gt;extract($this-&gt;object); if (!is_array($values)) { return array(); } foreach ($this-&gt;fieldsets as $fieldset) { $name = $fieldset-&gt;getName(); if (isset($values[$name])) { $object = $values[$name]; if ($fieldset-&gt;allowObjectBinding($object)) { $fieldset-&gt;setObject($object); $values[$name] = $fieldset-&gt;extract(); } } } return $values; } public function __clone() { $items = $this-&gt;iterator-&gt;toArray(PriorityQueue::EXTR_BOTH); $this-&gt;byName = array(); $this-&gt;elements = array(); $this-&gt;fieldsets = array(); $this-&gt;iterator = new PriorityQueue(); foreach ($items as $item) { $elementOrFieldset = clone $item['data']; $name = $elementOrFieldset-&gt;getName(); $this-&gt;iterator-&gt;insert($elementOrFieldset, $item['priority']); $this-&gt;byName[$name] = $elementOrFieldset; if ($elementOrFieldset instanceof FieldsetInterface) { $this-&gt;fieldsets[$name] = $elementOrFieldset; } elseif ($elementOrFieldset instanceof ElementInterface) { $this-&gt;elements[$name] = $elementOrFieldset; } } if (is_object($this-&gt;object)) { $this-&gt;object = clone $this-&gt;object; } } } &lt;?php
 namespace Zend\Form; interface FormFactoryAwareInterface { public function setFormFactory(Factory $factory); } &lt;?php
 namespace Zend\Form\Exception; class InvalidElementException extends InvalidArgumentException {} &lt;?php
 namespace Zend\Form\Exception; class DomainException extends \DomainException implements ExceptionInterface {} &lt;?php
 namespace Zend\Form\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Form\Exception; class UnexpectedValueException extends \UnexpectedValueException implements ExceptionInterface {} &lt;?php
 namespace Zend\Form\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Form\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface {} &lt;?php
 namespace Zend\Form; use Zend\InputFilter\InputFilterInterface; interface FormInterface extends FieldsetInterface { const BIND_ON_VALIDATE = 0x00; const BIND_MANUAL = 0x01; const VALIDATE_ALL = 0x10; const VALUES_NORMALIZED = 0x11; const VALUES_RAW = 0x12; const VALUES_AS_ARRAY = 0x13; public function setData($data); public function bind($object, $flags = FormInterface::VALUES_NORMALIZED); public function setBindOnValidate($bindOnValidateFlag); public function setInputFilter(InputFilterInterface $inputFilter); public function getInputFilter(); public function isValid(); public function getData($flag = FormInterface::VALUES_NORMALIZED); public function setValidationGroup(); } &lt;?php
 namespace Zend\Form; interface FieldsetPrepareAwareInterface { public function prepareFieldset(); } &lt;?php
 namespace Zend\Form; use Traversable; use Zend\Form\Element\Collection; use Zend\Form\Exception; use Zend\InputFilter\InputFilter; use Zend\InputFilter\InputFilterAwareInterface; use Zend\InputFilter\InputFilterInterface; use Zend\InputFilter\InputFilterProviderInterface; use Zend\InputFilter\InputProviderInterface; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\Hydrator\HydratorInterface; class Form extends Fieldset implements FormInterface { protected $attributes = array( 'method' =&gt; 'POST', ); protected $bindAs = FormInterface::VALUES_NORMALIZED; protected $bindOnValidate = FormInterface::BIND_ON_VALIDATE; protected $baseFieldset; protected $data; protected $filter; protected $useInputFilterDefaults = true; protected $hasAddedInputFilterDefaults = false; protected $hasValidated = false; protected $isValid = false; protected $isPrepared = false; protected $preferFormInputFilter = false; protected $wrapElements = false; protected $validationGroup; public function add($elementOrFieldset, array $flags = array()) { if (is_array($elementOrFieldset) || ($elementOrFieldset instanceof Traversable &amp;&amp; !$elementOrFieldset instanceof ElementInterface) ) { $factory = $this-&gt;getFormFactory(); $elementOrFieldset = $factory-&gt;create($elementOrFieldset); } parent::add($elementOrFieldset, $flags); if ($elementOrFieldset instanceof Fieldset &amp;&amp; $elementOrFieldset-&gt;useAsBaseFieldset()) { $this-&gt;baseFieldset = $elementOrFieldset; } return $this; } public function prepare() { if ($this-&gt;isPrepared) { return $this; } $this-&gt;getInputFilter(); if ($this-&gt;wrapElements()) { $this-&gt;prepareElement($this); } else { foreach ($this-&gt;getIterator() as $elementOrFieldset) { if ($elementOrFieldset instanceof ElementPrepareAwareInterface) { $elementOrFieldset-&gt;prepareElement($this); } } } $this-&gt;isPrepared = true; return $this; } public function setData($data) { if ($data instanceof Traversable) { $data = ArrayUtils::iteratorToArray($data); } if (!is_array($data)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable argument; received "%s"', __METHOD__, (is_object($data) ? get_class($data) : gettype($data)) )); } $this-&gt;hasValidated = false; $this-&gt;data = $data; $this-&gt;populateValues($data); return $this; } public function bind($object, $flags = FormInterface::VALUES_NORMALIZED) { if (!in_array($flags, array(FormInterface::VALUES_NORMALIZED, FormInterface::VALUES_RAW))) { throw new Exception\InvalidArgumentException(sprintf( '%s expects the $flags argument to be one of "%s" or "%s"; received "%s"', __METHOD__, 'Zend\Form\FormInterface::VALUES_NORMALIZED', 'Zend\Form\FormInterface::VALUES_RAW', $flags )); } if ($this-&gt;baseFieldset !== null) { $this-&gt;baseFieldset-&gt;setObject($object); } $this-&gt;bindAs = $flags; $this-&gt;setObject($object); $this-&gt;extract(); return $this; } public function setHydrator(HydratorInterface $hydrator) { if ($this-&gt;baseFieldset !== null) { $this-&gt;baseFieldset-&gt;setHydrator($hydrator); } return parent::setHydrator($hydrator); } public function bindValues(array $values = array()) { if (!is_object($this-&gt;object)) { return; } if (!$this-&gt;hasValidated() &amp;&amp; !empty($values)) { $this-&gt;setData($values); if (!$this-&gt;isValid()) { return; } } elseif (!$this-&gt;isValid) { return; } $filter = $this-&gt;getInputFilter(); switch ($this-&gt;bindAs) { case FormInterface::VALUES_RAW: $data = $filter-&gt;getRawValues(); break; case FormInterface::VALUES_NORMALIZED: default: $data = $filter-&gt;getValues(); break; } $data = $this-&gt;prepareBindData($data, $this-&gt;data); if ($this-&gt;baseFieldset !== null) { $data = $data[$this-&gt;baseFieldset-&gt;getName()]; $this-&gt;object = $this-&gt;baseFieldset-&gt;bindValues($data); } else { $this-&gt;object = parent::bindValues($data); } } protected function prepareBindData(array $values, array $match) { $data = array(); foreach ($values as $name =&gt; $value) { if (!array_key_exists($name, $match)) { continue; } if (is_array($value) &amp;&amp; is_array($match[$name])) { $data[$name] = $this-&gt;prepareBindData($value, $match[$name]); } else { $data[$name] = $value; } } return $data; } public function setBindOnValidate($bindOnValidateFlag) { if (!in_array($bindOnValidateFlag, array(self::BIND_ON_VALIDATE, self::BIND_MANUAL))) { throw new Exception\InvalidArgumentException(sprintf( '%s expects the flag to be one of %s::%s or %s::%s', __METHOD__, get_called_class(), 'BIND_ON_VALIDATE', get_called_class(), 'BIND_MANUAL' )); } $this-&gt;bindOnValidate = $bindOnValidateFlag; return $this; } public function bindOnValidate() { return (static::BIND_ON_VALIDATE === $this-&gt;bindOnValidate); } public function setBaseFieldset(FieldsetInterface $baseFieldset) { $this-&gt;baseFieldset = $baseFieldset; return $this; } public function getBaseFieldset() { return $this-&gt;baseFieldset; } public function hasValidated() { return $this-&gt;hasValidated; } public function isValid() { if ($this-&gt;hasValidated) { return $this-&gt;isValid; } $this-&gt;isValid = false; if (!is_array($this-&gt;data) &amp;&amp; !is_object($this-&gt;object)) { throw new Exception\DomainException(sprintf( '%s is unable to validate as there is no data currently set', __METHOD__ )); } if (!is_array($this-&gt;data)) { $data = $this-&gt;extract(); if (!is_array($data)) { throw new Exception\DomainException(sprintf( '%s is unable to validate as there is no data currently set', __METHOD__ )); } $this-&gt;data = $data; } $filter = $this-&gt;getInputFilter(); if (!$filter instanceof InputFilterInterface) { throw new Exception\DomainException(sprintf( '%s is unable to validate as there is no input filter present', __METHOD__ )); } $filter-&gt;setData($this-&gt;data); $filter-&gt;setValidationGroup(InputFilterInterface::VALIDATE_ALL); if ($this-&gt;validationGroup !== null) { $this-&gt;prepareValidationGroup($this, $this-&gt;data, $this-&gt;validationGroup); $filter-&gt;setValidationGroup($this-&gt;validationGroup); } $this-&gt;isValid = $result = $filter-&gt;isValid(); $this-&gt;hasValidated = true; if ($result &amp;&amp; $this-&gt;bindOnValidate()) { $this-&gt;bindValues(); } if (!$result) { $this-&gt;setMessages($filter-&gt;getMessages()); } return $result; } public function getData($flag = FormInterface::VALUES_NORMALIZED) { if (!$this-&gt;hasValidated) { throw new Exception\DomainException(sprintf( '%s cannot return data as validation has not yet occurred', __METHOD__ )); } if (($flag !== FormInterface::VALUES_AS_ARRAY) &amp;&amp; is_object($this-&gt;object)) { return $this-&gt;object; } $filter = $this-&gt;getInputFilter(); if ($flag === FormInterface::VALUES_RAW) { return $filter-&gt;getRawValues(); } return $filter-&gt;getValues(); } public function setValidationGroup() { $argc = func_num_args(); if (0 === $argc) { throw new Exception\InvalidArgumentException(sprintf( '%s expects at least one argument; none provided', __METHOD__ )); } $argv = func_get_args(); $this-&gt;hasValidated = false; if ($argc &gt; 1) { $this-&gt;validationGroup = $argv; return $this; } $arg = array_shift($argv); if ($arg === FormInterface::VALIDATE_ALL) { $this-&gt;validationGroup = null; return $this; } if (!is_array($arg)) { $arg = (array) $arg; } $this-&gt;validationGroup = $arg; return $this; } protected function prepareValidationGroup(FieldsetInterface $formOrFieldset, array $data, array &amp;$validationGroup) { foreach ($validationGroup as $key =&gt; &amp;$value) { if (!$formOrFieldset-&gt;has($key)) { continue; } $fieldset = $formOrFieldset-&gt;byName[$key]; if ($fieldset instanceof Collection) { if (!isset($data[$key]) &amp;&amp; $fieldset-&gt;getCount() == 0) { unset ($validationGroup[$key]); continue; } $values = array(); if (isset($data[$key])) { foreach(array_keys($data[$key]) as $cKey) { $values[$cKey] = $value; } } $value = $values; } else { if (!isset($data[$key])) { $data[$key] = array(); } $this-&gt;prepareValidationGroup($fieldset, $data[$key], $validationGroup[$key]); } } } public function setInputFilter(InputFilterInterface $inputFilter) { $this-&gt;hasValidated = false; $this-&gt;hasAddedInputFilterDefaults = false; $this-&gt;filter = $inputFilter; return $this; } public function getInputFilter() { if ($this-&gt;object instanceof InputFilterAwareInterface) { if (null == $this-&gt;baseFieldset) { $this-&gt;filter = $this-&gt;object-&gt;getInputFilter(); } else { $name = $this-&gt;baseFieldset-&gt;getName(); if (!$this-&gt;filter instanceof InputFilterInterface || !$this-&gt;filter-&gt;has($name)) { $filter = new InputFilter(); $filter-&gt;add($this-&gt;object-&gt;getInputFilter(), $name); $this-&gt;filter = $filter; } } } if (!isset($this-&gt;filter)) { $this-&gt;filter = new InputFilter(); } if (!$this-&gt;hasAddedInputFilterDefaults &amp;&amp; $this-&gt;filter instanceof InputFilterInterface &amp;&amp; $this-&gt;useInputFilterDefaults() ) { $this-&gt;attachInputFilterDefaults($this-&gt;filter, $this); $this-&gt;hasAddedInputFilterDefaults = true; } return $this-&gt;filter; } public function setUseInputFilterDefaults($useInputFilterDefaults) { $this-&gt;useInputFilterDefaults = (bool) $useInputFilterDefaults; return $this; } public function useInputFilterDefaults() { return $this-&gt;useInputFilterDefaults; } public function setPreferFormInputFilter($preferFormInputFilter) { $this-&gt;preferFormInputFilter = (bool) $preferFormInputFilter; return $this; } public function getPreferFormInputFilter() { return $this-&gt;preferFormInputFilter; } public function attachInputFilterDefaults(InputFilterInterface $inputFilter, FieldsetInterface $fieldset) { $formFactory = $this-&gt;getFormFactory(); $inputFactory = $formFactory-&gt;getInputFilterFactory(); if ($this instanceof InputFilterProviderInterface) { foreach ($this-&gt;getInputFilterSpecification() as $name =&gt; $spec) { $input = $inputFactory-&gt;createInput($spec); $inputFilter-&gt;add($input, $name); } } foreach ($fieldset-&gt;getElements() as $element) { $name = $element-&gt;getName(); if ($this-&gt;preferFormInputFilter &amp;&amp; $inputFilter-&gt;has($name)) { continue; } if (!$element instanceof InputProviderInterface) { if ($inputFilter-&gt;has($name)) { continue; } $spec = array('name' =&gt; $name, 'required' =&gt; false); } else { $spec = $element-&gt;getInputSpecification(); } $input = $inputFactory-&gt;createInput($spec); $inputFilter-&gt;add($input, $name); } foreach ($fieldset-&gt;getFieldsets() as $fieldset) { $name = $fieldset-&gt;getName(); if (!$fieldset instanceof InputFilterProviderInterface) { if (!$inputFilter-&gt;has($name)) { if ($fieldset-&gt;getObject() instanceof InputFilterAwareInterface) { $inputFilter-&gt;add($fieldset-&gt;getObject()-&gt;getInputFilter(), $name); } else { $inputFilter-&gt;add(new InputFilter(), $name); } } $fieldsetFilter = $inputFilter-&gt;get($name); if (!$fieldsetFilter instanceof InputFilterInterface) { continue; } $this-&gt;attachInputFilterDefaults($fieldsetFilter, $fieldset); continue; } if ($inputFilter-&gt;has($name)) { continue; } $spec = $fieldset-&gt;getInputFilterSpecification(); $filter = $inputFactory-&gt;createInputFilter($spec); $inputFilter-&gt;add($filter, $name); $this-&gt;attachInputFilterDefaults($filter, $fieldset); } } public function setWrapElements($wrapElements) { $this-&gt;wrapElements = (bool) $wrapElements; return $this; } public function wrapElements() { return $this-&gt;wrapElements; } protected function extract() { if (null !== $this-&gt;baseFieldset) { $name = $this-&gt;baseFieldset-&gt;getName(); $values[$name] = $this-&gt;baseFieldset-&gt;extract(); $this-&gt;baseFieldset-&gt;populateValues($values[$name]); } else { $values = parent::extract(); $this-&gt;populateValues($values); } return $values; } } &lt;?php
 namespace Zend\Form; use \Zend\Form\Factory; trait FormFactoryAwareTrait { protected $factory = null; public function setFormFactory(Factory $factory) { $this-&gt;factory = $factory; return $this; } } &lt;?php
 namespace Zend\Form; interface ElementAttributeRemovalInterface { public function removeAttribute($key); public function removeAttributes(array $keys); public function clearAttributes(); } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormMonth extends FormDateTime { protected function getType(ElementInterface $element) { return 'month'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\Element; use Zend\Form\ElementInterface; use Zend\View\Helper\AbstractHelper as BaseAbstractHelper; class FormElement extends BaseAbstractHelper { public function render(ElementInterface $element) { $renderer = $this-&gt;getView(); if (!method_exists($renderer, 'plugin')) { return ''; } if ($element instanceof Element\Button) { $helper = $renderer-&gt;plugin('form_button'); return $helper($element); } if ($element instanceof Element\Captcha) { $helper = $renderer-&gt;plugin('form_captcha'); return $helper($element); } if ($element instanceof Element\Csrf) { $helper = $renderer-&gt;plugin('form_hidden'); return $helper($element); } if ($element instanceof Element\Collection) { $helper = $renderer-&gt;plugin('form_collection'); return $helper($element); } if ($element instanceof Element\DateTimeSelect) { $helper = $renderer-&gt;plugin('form_date_time_select'); return $helper($element); } if ($element instanceof Element\DateSelect) { $helper = $renderer-&gt;plugin('form_date_select'); return $helper($element); } if ($element instanceof Element\MonthSelect) { $helper = $renderer-&gt;plugin('form_month_select'); return $helper($element); } $type = $element-&gt;getAttribute('type'); if ('checkbox' == $type) { $helper = $renderer-&gt;plugin('form_checkbox'); return $helper($element); } if ('color' == $type) { $helper = $renderer-&gt;plugin('form_color'); return $helper($element); } if ('date' == $type) { $helper = $renderer-&gt;plugin('form_date'); return $helper($element); } if ('datetime' == $type) { $helper = $renderer-&gt;plugin('form_date_time'); return $helper($element); } if ('datetime-local' == $type) { $helper = $renderer-&gt;plugin('form_date_time_local'); return $helper($element); } if ('email' == $type) { $helper = $renderer-&gt;plugin('form_email'); return $helper($element); } if ('file' == $type) { $helper = $renderer-&gt;plugin('form_file'); return $helper($element); } if ('hidden' == $type) { $helper = $renderer-&gt;plugin('form_hidden'); return $helper($element); } if ('image' == $type) { $helper = $renderer-&gt;plugin('form_image'); return $helper($element); } if ('month' == $type) { $helper = $renderer-&gt;plugin('form_month'); return $helper($element); } if ('multi_checkbox' == $type) { $helper = $renderer-&gt;plugin('form_multi_checkbox'); return $helper($element); } if ('number' == $type) { $helper = $renderer-&gt;plugin('form_number'); return $helper($element); } if ('password' == $type) { $helper = $renderer-&gt;plugin('form_password'); return $helper($element); } if ('radio' == $type) { $helper = $renderer-&gt;plugin('form_radio'); return $helper($element); } if ('range' == $type) { $helper = $renderer-&gt;plugin('form_range'); return $helper($element); } if ('reset' == $type) { $helper = $renderer-&gt;plugin('form_reset'); return $helper($element); } if ('search' == $type) { $helper = $renderer-&gt;plugin('form_search'); return $helper($element); } if ('select' == $type) { $helper = $renderer-&gt;plugin('form_select'); return $helper($element); } if ('submit' == $type) { $helper = $renderer-&gt;plugin('form_submit'); return $helper($element); } if ('tel' == $type) { $helper = $renderer-&gt;plugin('form_tel'); return $helper($element); } if ('text' == $type) { $helper = $renderer-&gt;plugin('form_text'); return $helper($element); } if ('textarea' == $type) { $helper = $renderer-&gt;plugin('form_textarea'); return $helper($element); } if ('time' == $type) { $helper = $renderer-&gt;plugin('form_time'); return $helper($element); } if ('url' == $type) { $helper = $renderer-&gt;plugin('form_url'); return $helper($element); } if ('week' == $type) { $helper = $renderer-&gt;plugin('form_week'); return $helper($element); } $helper = $renderer-&gt;plugin('form_input'); return $helper($element); } public function __invoke(ElementInterface $element = null) { if (!$element) { return $this; } return $this-&gt;render($element); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormTime extends FormDateTime { protected function getType(ElementInterface $element) { return 'time'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormDateTimeLocal extends FormDateTime { protected function getType(ElementInterface $element) { return 'datetime-local'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormInput extends AbstractHelper { protected $validTagAttributes = array( 'name' =&gt; true, 'accept' =&gt; true, 'alt' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'checked' =&gt; true, 'dirname' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'formaction' =&gt; true, 'formenctype' =&gt; true, 'formmethod' =&gt; true, 'formnovalidate' =&gt; true, 'formtarget' =&gt; true, 'height' =&gt; true, 'list' =&gt; true, 'max' =&gt; true, 'maxlength' =&gt; true, 'min' =&gt; true, 'multiple' =&gt; true, 'pattern' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'size' =&gt; true, 'src' =&gt; true, 'step' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, 'width' =&gt; true, ); protected $validTypes = array( 'text' =&gt; true, 'button' =&gt; true, 'checkbox' =&gt; true, 'file' =&gt; true, 'hidden' =&gt; true, 'image' =&gt; true, 'password' =&gt; true, 'radio' =&gt; true, 'reset' =&gt; true, 'select' =&gt; true, 'submit' =&gt; true, 'color' =&gt; true, 'date' =&gt; true, 'datetime' =&gt; true, 'datetime-local' =&gt; true, 'email' =&gt; true, 'month' =&gt; true, 'number' =&gt; true, 'range' =&gt; true, 'search' =&gt; true, 'tel' =&gt; true, 'time' =&gt; true, 'url' =&gt; true, 'week' =&gt; true, ); public function render(ElementInterface $element) { $name = $element-&gt;getName(); if ($name === null || $name === '') { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $attributes = $element-&gt;getAttributes(); $attributes['name'] = $name; $attributes['type'] = $this-&gt;getType($element); $attributes['value'] = $element-&gt;getValue(); return sprintf( '&lt;input %s%s', $this-&gt;createAttributesString($attributes), $this-&gt;getInlineClosingBracket() ); } public function __invoke(ElementInterface $element = null) { if (!$element) { return $this; } return $this-&gt;render($element); } protected function getType(ElementInterface $element) { $type = $element-&gt;getAttribute('type'); if (empty($type)) { return 'text'; } $type = strtolower($type); if (!isset($this-&gt;validTypes[$type])) { return 'text'; } return $type; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Element\Select as SelectElement; use Zend\Form\Exception; use Zend\Stdlib\ArrayUtils; class FormSelect extends AbstractHelper { protected $validTagAttributes; protected $validSelectAttributes = array( 'name' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'multiple' =&gt; true, 'required' =&gt; true, 'size' =&gt; true ); protected $validOptionAttributes = array( 'disabled' =&gt; true, 'selected' =&gt; true, 'label' =&gt; true, 'value' =&gt; true, ); protected $validOptgroupAttributes = array( 'disabled' =&gt; true, 'label' =&gt; true, ); public function render(ElementInterface $element) { if (!$element instanceof SelectElement) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that the element is of type Zend\Form\Element\Select', __METHOD__ )); } $name = $element-&gt;getName(); if (empty($name) &amp;&amp; $name !== 0) { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $options = $element-&gt;getValueOptions(); if (($emptyOption = $element-&gt;getEmptyOption()) !== null) { $options = array('' =&gt; $emptyOption) + $options; } $attributes = $element-&gt;getAttributes(); $value = $this-&gt;validateMultiValue($element-&gt;getValue(), $attributes); $attributes['name'] = $name; if (array_key_exists('multiple', $attributes) &amp;&amp; $attributes['multiple']) { $attributes['name'] .= '[]'; } $this-&gt;validTagAttributes = $this-&gt;validSelectAttributes; return sprintf( '&lt;select %s&gt;%s&lt;/select&gt;', $this-&gt;createAttributesString($attributes), $this-&gt;renderOptions($options, $value) ); } public function renderOptions(array $options, array $selectedOptions = array()) { $template = '&lt;option %s&gt;%s&lt;/option&gt;'; $optionStrings = array(); $escapeHtml = $this-&gt;getEscapeHtmlHelper(); foreach ($options as $key =&gt; $optionSpec) { $value = ''; $label = ''; $selected = false; $disabled = false; if (is_scalar($optionSpec)) { $optionSpec = array( 'label' =&gt; $optionSpec, 'value' =&gt; $key ); } if (isset($optionSpec['options']) &amp;&amp; is_array($optionSpec['options'])) { $optionStrings[] = $this-&gt;renderOptgroup($optionSpec, $selectedOptions); continue; } if (isset($optionSpec['value'])) { $value = $optionSpec['value']; } if (isset($optionSpec['label'])) { $label = $optionSpec['label']; } if (isset($optionSpec['selected'])) { $selected = $optionSpec['selected']; } if (isset($optionSpec['disabled'])) { $disabled = $optionSpec['disabled']; } if (ArrayUtils::inArray($value, $selectedOptions)) { $selected = true; } if (null !== ($translator = $this-&gt;getTranslator())) { $label = $translator-&gt;translate( $label, $this-&gt;getTranslatorTextDomain() ); } $attributes = compact('value', 'selected', 'disabled'); $this-&gt;validTagAttributes = $this-&gt;validOptionAttributes; $optionStrings[] = sprintf( $template, $this-&gt;createAttributesString($attributes), $escapeHtml($label) ); } return implode("\n", $optionStrings); } public function renderOptgroup(array $optgroup, array $selectedOptions = array()) { $template = '&lt;optgroup%s&gt;%s&lt;/optgroup&gt;'; $options = array(); if (isset($optgroup['options']) &amp;&amp; is_array($optgroup['options'])) { $options = $optgroup['options']; unset($optgroup['options']); } $this-&gt;validTagAttributes = $this-&gt;validOptgroupAttributes; $attributes = $this-&gt;createAttributesString($optgroup); if (!empty($attributes)) { $attributes = ' ' . $attributes; } return sprintf( $template, $attributes, $this-&gt;renderOptions($options, $selectedOptions) ); } public function __invoke(ElementInterface $element = null) { if (!$element) { return $this; } return $this-&gt;render($element); } protected function validateMultiValue($value, array $attributes) { if (null === $value) { return array(); } if (!is_array($value)) { return (array) $value; } if (!isset($attributes['multiple']) || !$attributes['multiple']) { throw new Exception\DomainException(sprintf( '%s does not allow specifying multiple selected values when the element does not have a multiple attribute set to a boolean true', __CLASS__ )); } return $value; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormText extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'dirname' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'maxlength' =&gt; true, 'pattern' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'size' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'text'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormSearch extends FormText { protected function getType(ElementInterface $element) { return 'search'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Captcha\AdapterInterface as CaptchaAdapter; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormCaptcha extends AbstractHelper { public function render(ElementInterface $element) { $captcha = $element-&gt;getCaptcha(); if ($captcha === null || !$captcha instanceof CaptchaAdapter) { throw new Exception\DomainException(sprintf( '%s requires that the element has a "captcha" attribute implementing Zend\Captcha\AdapterInterface; none found', __METHOD__ )); } $helper = $captcha-&gt;getHelperName(); $renderer = $this-&gt;getView(); if (!method_exists($renderer, 'plugin')) { throw new Exception\DomainException(sprintf( '%s requires that the renderer implements plugin(); it does not', __METHOD__ )); } $helper = $renderer-&gt;plugin($helper); return $helper($element); } public function __invoke(ElementInterface $element) { if (!$element) { return $this; } return $this-&gt;render($element); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormRange extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'max' =&gt; true, 'min' =&gt; true, 'step' =&gt; true, 'required' =&gt; true, 'type' =&gt; true, 'value' =&gt; true ); protected function getType(ElementInterface $element) { return 'range'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\FieldsetInterface; use Zend\Form\FormInterface; class Form extends AbstractHelper { protected $validTagAttributes = array( 'accept-charset' =&gt; true, 'action' =&gt; true, 'autocomplete' =&gt; true, 'enctype' =&gt; true, 'method' =&gt; true, 'name' =&gt; true, 'novalidate' =&gt; true, 'target' =&gt; true, ); public function __invoke(FormInterface $form = null) { if (!$form) { return $this; } return $this-&gt;render($form); } public function render(FormInterface $form) { if (method_exists($form, 'prepare')) { $form-&gt;prepare(); } $formContent = ''; foreach ($form as $element) { if ($element instanceof FieldsetInterface) { $formContent.= $this-&gt;getView()-&gt;formCollection($element); } else { $formContent.= $this-&gt;getView()-&gt;formRow($element); } } return $this-&gt;openTag($form) . $formContent . $this-&gt;closeTag(); } public function openTag(FormInterface $form = null) { $attributes = array( 'action' =&gt; '', 'method' =&gt; 'get', ); if ($form instanceof FormInterface) { $formAttributes = $form-&gt;getAttributes(); if (!array_key_exists('id', $formAttributes) &amp;&amp; array_key_exists('name', $formAttributes)) { $formAttributes['id'] = $formAttributes['name']; } $attributes = array_merge($attributes, $formAttributes); } $tag = sprintf('&lt;form %s&gt;', $this-&gt;createAttributesString($attributes)); return $tag; } public function closeTag() { return '&lt;/form&gt;'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormReset extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected $translatableAttributes = array( 'value' =&gt; true ); protected function getType(ElementInterface $element) { return 'reset'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormButton extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'formaction' =&gt; true, 'formenctype' =&gt; true, 'formmethod' =&gt; true, 'formnovalidate' =&gt; true, 'formtarget' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected $validTypes = array( 'button' =&gt; true, 'reset' =&gt; true, 'submit' =&gt; true, ); public function openTag($attributesOrElement = null) { if (null === $attributesOrElement) { return '&lt;button&gt;'; } if (is_array($attributesOrElement)) { $attributes = $this-&gt;createAttributesString($attributesOrElement); return sprintf('&lt;button %s&gt;', $attributes); } if (!$attributesOrElement instanceof ElementInterface) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Zend\Form\ElementInterface instance; received "%s"', __METHOD__, (is_object($attributesOrElement) ? get_class($attributesOrElement) : gettype($attributesOrElement)) )); } $element = $attributesOrElement; $name = $element-&gt;getName(); if (empty($name) &amp;&amp; $name !== 0) { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $attributes = $element-&gt;getAttributes(); $attributes['name'] = $name; $attributes['type'] = $this-&gt;getType($element); $attributes['value'] = $element-&gt;getValue(); return sprintf( '&lt;button %s&gt;', $this-&gt;createAttributesString($attributes) ); } public function closeTag() { return '&lt;/button&gt;'; } public function render(ElementInterface $element, $buttonContent = null) { $openTag = $this-&gt;openTag($element); if (null === $buttonContent) { $buttonContent = $element-&gt;getLabel(); if (null === $buttonContent) { throw new Exception\DomainException(sprintf( '%s expects either button content as the second argument, ' . 'or that the element provided has a label value; neither found', __METHOD__ )); } if (null !== ($translator = $this-&gt;getTranslator())) { $buttonContent = $translator-&gt;translate( $buttonContent, $this-&gt;getTranslatorTextDomain() ); } } $escape = $this-&gt;getEscapeHtmlHelper(); return $openTag . $escape($buttonContent) . $this-&gt;closeTag(); } public function __invoke(ElementInterface $element = null, $buttonContent = null) { if (!$element) { return $this; } return $this-&gt;render($element, $buttonContent); } protected function getType(ElementInterface $element) { $type = $element-&gt;getAttribute('type'); if (empty($type)) { return 'submit'; } $type = strtolower($type); if (!isset($this-&gt;validTypes[$type])) { return 'submit'; } return $type; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormEmail extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'maxlength' =&gt; true, 'multiple' =&gt; true, 'pattern' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'size' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'email'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; use Zend\Form\View\Helper\AbstractHelper; class FormRow extends AbstractHelper { const LABEL_APPEND = 'append'; const LABEL_PREPEND = 'prepend'; protected $labelPosition = self::LABEL_PREPEND; protected $renderErrors = true; protected $labelAttributes; protected $inputErrorClass = 'input-error'; protected $labelHelper; protected $elementHelper; protected $elementErrorsHelper; public function render(ElementInterface $element) { $escapeHtmlHelper = $this-&gt;getEscapeHtmlHelper(); $labelHelper = $this-&gt;getLabelHelper(); $elementHelper = $this-&gt;getElementHelper(); $elementErrorsHelper = $this-&gt;getElementErrorsHelper(); $label = $element-&gt;getLabel(); $inputErrorClass = $this-&gt;getInputErrorClass(); $elementErrors = $elementErrorsHelper-&gt;render($element); if (!empty($elementErrors) &amp;&amp; !empty($inputErrorClass)) { $classAttributes = ($element-&gt;hasAttribute('class') ? $element-&gt;getAttribute('class') . ' ' : ''); $classAttributes = $classAttributes . $inputErrorClass; $element-&gt;setAttribute('class', $classAttributes); } $elementString = $elementHelper-&gt;render($element); if (isset($label) &amp;&amp; '' !== $label) { if (null !== ($translator = $this-&gt;getTranslator())) { $label = $translator-&gt;translate( $label, $this-&gt;getTranslatorTextDomain() ); } $label = $escapeHtmlHelper($label); $labelAttributes = $element-&gt;getLabelAttributes(); if (empty($labelAttributes)) { $labelAttributes = $this-&gt;labelAttributes; } $type = $element-&gt;getAttribute('type'); if ($type === 'multi_checkbox' || $type === 'radio') { $markup = sprintf( '&lt;fieldset&gt;&lt;legend&gt;%s&lt;/legend&gt;%s&lt;/fieldset&gt;', $label, $elementString); } else { if ($element-&gt;hasAttribute('id')) { $labelOpen = ''; $labelClose = ''; $label = $labelHelper($element); } else { $labelOpen = $labelHelper-&gt;openTag($labelAttributes); $labelClose = $labelHelper-&gt;closeTag(); } if ($label !== '' &amp;&amp; !$element-&gt;hasAttribute('id')) { $label = '&lt;span&gt;' . $label . '&lt;/span&gt;'; } switch ($this-&gt;labelPosition) { case self::LABEL_PREPEND: $markup = $labelOpen . $label . $elementString . $labelClose; break; case self::LABEL_APPEND: default: $markup = $labelOpen . $elementString . $label . $labelClose; break; } } if ($this-&gt;renderErrors) { $markup .= $elementErrors; } } else { if ($this-&gt;renderErrors) { $markup = $elementString . $elementErrors; } else { $markup = $elementString; } } return $markup; } public function __invoke(ElementInterface $element = null, $labelPosition = null, $renderErrors = null) { if (!$element) { return $this; } if ($labelPosition !== null) { $this-&gt;setLabelPosition($labelPosition); } if($renderErrors !== null){ $this-&gt;setRenderErrors($renderErrors); } return $this-&gt;render($element); } public function setLabelPosition($labelPosition) { $labelPosition = strtolower($labelPosition); if (!in_array($labelPosition, array(self::LABEL_APPEND, self::LABEL_PREPEND))) { throw new Exception\InvalidArgumentException(sprintf( '%s expects either %s::LABEL_APPEND or %s::LABEL_PREPEND; received "%s"', __METHOD__, __CLASS__, __CLASS__, (string) $labelPosition )); } $this-&gt;labelPosition = $labelPosition; return $this; } public function getLabelPosition() { return $this-&gt;labelPosition; } public function setRenderErrors($renderErrors) { $this-&gt;renderErrors = (bool) $renderErrors; return $this; } public function getRenderErrors() { return $this-&gt;renderErrors; } public function setLabelAttributes($labelAttributes) { $this-&gt;labelAttributes = $labelAttributes; return $this; } public function getLabelAttributes() { return $this-&gt;labelAttributes; } public function setInputErrorClass($inputErrorClass) { $this-&gt;inputErrorClass = $inputErrorClass; return $this; } public function getInputErrorClass() { return $this-&gt;inputErrorClass; } protected function getLabelHelper() { if ($this-&gt;labelHelper) { return $this-&gt;labelHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;labelHelper = $this-&gt;view-&gt;plugin('form_label'); } if (!$this-&gt;labelHelper instanceof FormLabel) { $this-&gt;labelHelper = new FormLabel(); } if ($this-&gt;hasTranslator()) { $this-&gt;labelHelper-&gt;setTranslator( $this-&gt;getTranslator(), $this-&gt;getTranslatorTextDomain() ); } return $this-&gt;labelHelper; } protected function getElementHelper() { if ($this-&gt;elementHelper) { return $this-&gt;elementHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;elementHelper = $this-&gt;view-&gt;plugin('form_element'); } if (!$this-&gt;elementHelper instanceof FormElement) { $this-&gt;elementHelper = new FormElement(); } return $this-&gt;elementHelper; } protected function getElementErrorsHelper() { if ($this-&gt;elementErrorsHelper) { return $this-&gt;elementErrorsHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;elementErrorsHelper = $this-&gt;view-&gt;plugin('form_element_errors'); } if (!$this-&gt;elementErrorsHelper instanceof FormElementErrors) { $this-&gt;elementErrorsHelper = new FormElementErrors(); } return $this-&gt;elementErrorsHelper; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormSubmit extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'formaction' =&gt; true, 'formenctype' =&gt; true, 'formmethod' =&gt; true, 'formnovalidate' =&gt; true, 'formtarget' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected $translatableAttributes = array( 'value' =&gt; true ); protected function getType(ElementInterface $element) { return 'submit'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormDateTime extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'max' =&gt; true, 'min' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'step' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'datetime'; } } &lt;?php
 namespace Zend\Form\View\Helper; use DateTime; use IntlDateFormatter; use Zend\Form\ElementInterface; use Zend\Form\Element\DateTimeSelect as DateTimeSelectElement; use Zend\Form\Exception; use Zend\Form\View\Helper\FormDateSelect as FormDateSelectHelper; class FormDateTimeSelect extends FormDateSelectHelper { protected $timeType = IntlDateFormatter::LONG; public function render(ElementInterface $element) { if (!$element instanceof DateTimeSelectElement) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that the element is of type Zend\Form\Element\DateTimeSelect', __METHOD__ )); } $name = $element-&gt;getName(); if ($name === null || $name === '') { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $selectHelper = $this-&gt;getSelectElementHelper(); $pattern = $this-&gt;parsePattern($element-&gt;shouldRenderDelimiters()); $daysOptions = $this-&gt;getDaysOptions($pattern['day']); $monthsOptions = $this-&gt;getMonthsOptions($pattern['month']); $yearOptions = $this-&gt;getYearsOptions($element-&gt;getMinYear(), $element-&gt;getMaxYear()); $hourOptions = $this-&gt;getHoursOptions($pattern['hour']); $minuteOptions = $this-&gt;getMinutesOptions($pattern['minute']); $secondOptions = $this-&gt;getSecondsOptions($pattern['second']); $dayElement = $element-&gt;getDayElement()-&gt;setValueOptions($daysOptions); $monthElement = $element-&gt;getMonthElement()-&gt;setValueOptions($monthsOptions); $yearElement = $element-&gt;getYearElement()-&gt;setValueOptions($yearOptions); $hourElement = $element-&gt;getHourElement()-&gt;setValueOptions($hourOptions); $minuteElement = $element-&gt;getMinuteElement()-&gt;setValueOptions($minuteOptions); $secondElement = $element-&gt;getSecondElement()-&gt;setValueOptions($secondOptions); if ($element-&gt;shouldCreateEmptyOption()) { $dayElement-&gt;setEmptyOption(''); $yearElement-&gt;setEmptyOption(''); $monthElement-&gt;setEmptyOption(''); $hourElement-&gt;setEmptyOption(''); $minuteElement-&gt;setEmptyOption(''); $secondElement-&gt;setEmptyOption(''); } $data = array(); $data[$pattern['day']] = $selectHelper-&gt;render($dayElement); $data[$pattern['month']] = $selectHelper-&gt;render($monthElement); $data[$pattern['year']] = $selectHelper-&gt;render($yearElement); $data[$pattern['hour']] = $selectHelper-&gt;render($hourElement); $data[$pattern['minute']] = $selectHelper-&gt;render($minuteElement); if ($element-&gt;shouldShowSeconds()) { $data[$pattern['second']] = $selectHelper-&gt;render($secondElement); } else { unset($pattern['second']); } $markup = ''; foreach ($pattern as $key =&gt; $value) { if (is_numeric($key)) { $markup .= $value; } else { $markup .= $data[$value]; } } return $markup; } public function __invoke( ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $timeType = IntlDateFormatter::LONG, $locale = null ) { if (!$element) { return $this; } $this-&gt;setDateType($dateType); $this-&gt;setTimeType($timeType); if ($locale !== null) { $this-&gt;setLocale($locale); } return $this-&gt;render($element); } public function setTimeType($timeType) { if ($timeType === IntlDateFormatter::FULL) { $timeType = IntlDateFormatter::LONG; } $this-&gt;timeType = $timeType; return $this; } public function getTimeType() { return $this-&gt;timeType; } public function getPattern() { if ($this-&gt;pattern === null) { $intl = new IntlDateFormatter($this-&gt;getLocale(), $this-&gt;dateType, $this-&gt;timeType); $pattern = rtrim($intl-&gt;getPattern(), ' z'); $this-&gt;pattern = $pattern; } return $this-&gt;pattern; } protected function parsePattern($renderDelimiters = true) { $pattern = $this-&gt;getPattern(); $pregResult = preg_split("/([ -,.:\/]*'.*?'[ -,.:\/]*)|([ -,.:\/]+)/", $pattern, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY); $result = array(); foreach ($pregResult as $value) { if (stripos($value, "'") === false &amp;&amp; stripos($value, 'd') !== false) { $result['day'] = $value; } elseif (stripos($value, "'") === false &amp;&amp; strpos($value, 'M') !== false) { $result['month'] = $value; } elseif (stripos($value, "'") === false &amp;&amp; stripos($value, 'y') !== false) { $result['year'] = $value; } elseif (stripos($value, "'") === false &amp;&amp; stripos($value, 'h') !== false) { $result['hour'] = $value; } elseif (stripos($value, "'") === false &amp;&amp; stripos($value, 'm') !== false) { $result['minute'] = $value; } elseif (stripos($value, "'") === false &amp;&amp; strpos($value, 's') !== false) { $result['second'] = $value; } elseif ($renderDelimiters) { $result[] = str_replace("'", '', $value); } } return $result; } protected function getHoursOptions($pattern) { $keyFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, 'HH'); $valueFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, $pattern); $date = new DateTime('1970-01-01 00:00:00'); $result = array(); for ($hour = 1; $hour &lt;= 24; $hour++) { $key = $keyFormatter-&gt;format($date); $value = $valueFormatter-&gt;format($date); $result[$key] = $value; $date-&gt;modify('+1 hour'); } return $result; } protected function getMinutesOptions($pattern) { $keyFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, 'mm'); $valueFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, $pattern); $date = new DateTime('1970-01-01 00:00:00'); $result = array(); for ($min = 1; $min &lt;= 60; $min++) { $key = $keyFormatter-&gt;format($date); $value = $valueFormatter-&gt;format($date); $result[$key] = $value; $date-&gt;modify('+1 minute'); } return $result; } protected function getSecondsOptions($pattern) { $keyFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, 'ss'); $valueFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, $pattern); $date = new DateTime('1970-01-01 00:00:00'); $result = array(); for ($sec = 1; $sec &lt;= 60; $sec++) { $key = $keyFormatter-&gt;format($date); $value = $valueFormatter-&gt;format($date); $result[$key] = $value; $date-&gt;modify('+1 second'); } return $result; } } &lt;?php
 namespace Zend\Form\View\Helper; use DateTime; use IntlDateFormatter; use Locale; use Zend\Form\ElementInterface; use Zend\Form\Element\MonthSelect as MonthSelectElement; use Zend\Form\Exception; class FormMonthSelect extends AbstractHelper { protected $selectHelper; protected $dateType = IntlDateFormatter::LONG; protected $pattern; protected $locale; public function render(ElementInterface $element) { if (!$element instanceof MonthSelectElement) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that the element is of type Zend\Form\Element\MonthSelect', __METHOD__ )); } $name = $element-&gt;getName(); if ($name === null || $name === '') { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $selectHelper = $this-&gt;getSelectElementHelper(); $pattern = $this-&gt;parsePattern($element-&gt;shouldRenderDelimiters()); unset($pattern['day']); unset($pattern[0]); $monthsOptions = $this-&gt;getMonthsOptions($pattern['month']); $yearOptions = $this-&gt;getYearsOptions($element-&gt;getMinYear(), $element-&gt;getMaxYear()); $monthElement = $element-&gt;getMonthElement()-&gt;setValueOptions($monthsOptions); $yearElement = $element-&gt;getYearElement()-&gt;setValueOptions($yearOptions); if ($element-&gt;shouldCreateEmptyOption()) { $monthElement-&gt;setEmptyOption(''); $yearElement-&gt;setEmptyOption(''); } $data = array(); $data[$pattern['month']] = $selectHelper-&gt;render($monthElement); $data[$pattern['year']] = $selectHelper-&gt;render($yearElement); $markup = ''; foreach ($pattern as $key =&gt; $value) { if (is_numeric($key)) { $markup .= $value; } else { $markup .= $data[$value]; } } return $markup; } public function __invoke(ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $locale = null) { if (!$element) { return $this; } $this-&gt;setDateType($dateType); if ($locale !== null) { $this-&gt;setLocale($locale); } return $this-&gt;render($element); } public function getPattern() { if ($this-&gt;pattern === null) { $intl = new IntlDateFormatter($this-&gt;getLocale(), $this-&gt;dateType, IntlDateFormatter::NONE); $this-&gt;pattern = $intl-&gt;getPattern(); } return $this-&gt;pattern; } protected function parsePattern($renderDelimiters = true) { $pattern = $this-&gt;getPattern(); $pregResult = preg_split("/([ -,.\/]*(?:'[a-zA-Z]+')*[ -,.\/]+)/", $pattern, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY); $result = array(); foreach ($pregResult as $value) { if (stripos($value, "'") === false &amp;&amp; stripos($value, 'd') !== false) { $result['day'] = $value; } elseif (stripos($value, "'") === false &amp;&amp; stripos($value, 'm') !== false) { $result['month'] = $value; } elseif (stripos($value, "'") === false &amp;&amp; stripos($value, 'y') !== false) { $result['year'] = $value; } elseif ($renderDelimiters) { $result[] = str_replace("'", '', $value); } } return $result; } public function setDateType($dateType) { if ($dateType === IntlDateFormatter::FULL) { $dateType = IntlDateFormatter::LONG; } $this-&gt;dateType = $dateType; return $this; } public function getDateType() { return $this-&gt;dateType; } public function setLocale($locale) { $this-&gt;locale = $locale; return $this; } public function getLocale() { if ($this-&gt;locale === null) { $this-&gt;locale = Locale::getDefault(); } return $this-&gt;locale; } protected function getMonthsOptions($pattern) { $keyFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, 'MM'); $valueFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, $pattern); $date = new DateTime('1970-01-01'); $result = array(); for ($month = 1; $month &lt;= 12; $month++) { $key = $keyFormatter-&gt;format($date); $value = $valueFormatter-&gt;format($date); $result[$key] = $value; $date-&gt;modify('+1 month'); } return $result; } protected function getYearsOptions($minYear, $maxYear) { $result = array(); for ($i = $maxYear; $i &gt;= $minYear; --$i) { $result[$i] = $i; } return $result; } protected function getSelectElementHelper() { if ($this-&gt;selectHelper) { return $this-&gt;selectHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;selectHelper = $this-&gt;view-&gt;plugin('formselect'); } return $this-&gt;selectHelper; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormColor extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'color'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Traversable; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormElementErrors extends AbstractHelper { protected $messageCloseString = '&lt;/li&gt;&lt;/ul&gt;'; protected $messageOpenFormat = '&lt;ul%s&gt;&lt;li&gt;'; protected $messageSeparatorString = '&lt;/li&gt;&lt;li&gt;'; protected $attributes = array(); public function setMessageCloseString($messageCloseString) { $this-&gt;messageCloseString = (string) $messageCloseString; return $this; } public function getMessageCloseString() { return $this-&gt;messageCloseString; } public function setMessageOpenFormat($messageOpenFormat) { $this-&gt;messageOpenFormat = (string) $messageOpenFormat; return $this; } public function getMessageOpenFormat() { return $this-&gt;messageOpenFormat; } public function setMessageSeparatorString($messageSeparatorString) { $this-&gt;messageSeparatorString = (string) $messageSeparatorString; return $this; } public function getMessageSeparatorString() { return $this-&gt;messageSeparatorString; } public function setAttributes(array $attributes) { $this-&gt;attributes = $attributes; return $this; } public function getAttributes() { return $this-&gt;attributes; } public function render(ElementInterface $element, array $attributes = array()) { $messages = $element-&gt;getMessages(); if (empty($messages)) { return ''; } if (!is_array($messages) &amp;&amp; !$messages instanceof Traversable) { throw new Exception\DomainException(sprintf( '%s expects that $element-&gt;getMessages() will return an array or Traversable; received "%s"', __METHOD__, (is_object($messages) ? get_class($messages) : gettype($messages)) )); } $attributes = array_merge($this-&gt;attributes, $attributes); $attributes = $this-&gt;createAttributesString($attributes); if (!empty($attributes)) { $attributes = ' ' . $attributes; } $escapeHtml = $this-&gt;getEscapeHtmlHelper(); $messagesToPrint = array(); array_walk_recursive($messages, function ($item) use (&amp;$messagesToPrint, $escapeHtml) { $messagesToPrint[] = $escapeHtml($item); }); if (empty($messagesToPrint)) { return ''; } $markup = sprintf($this-&gt;getMessageOpenFormat(), $attributes); $markup .= implode($this-&gt;getMessageSeparatorString(), $messagesToPrint); $markup .= $this-&gt;getMessageCloseString(); return $markup; } public function __invoke(ElementInterface $element = null, array $attributes = array()) { if (!$element) { return $this; } return $this-&gt;render($element, $attributes); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormNumber extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'max' =&gt; true, 'min' =&gt; true, 'step' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'type' =&gt; true, 'value' =&gt; true ); protected function getType(ElementInterface $element) { return 'number'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormImage extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'alt' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'formaction' =&gt; true, 'formenctype' =&gt; true, 'formmethod' =&gt; true, 'formnovalidate' =&gt; true, 'formtarget' =&gt; true, 'height' =&gt; true, 'src' =&gt; true, 'type' =&gt; true, 'width' =&gt; true, ); public function render(ElementInterface $element) { $src = $element-&gt;getAttribute('src'); if (empty($src)) { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned src; none discovered', __METHOD__ )); } return parent::render($element); } protected function getType(ElementInterface $element) { return 'image'; } } &lt;?php
 namespace Zend\Form\View\Helper\Captcha; use Zend\Captcha\Figlet as CaptchaAdapter; use Zend\Form\ElementInterface; use Zend\Form\Exception; class Figlet extends AbstractWord { public function render(ElementInterface $element) { $captcha = $element-&gt;getCaptcha(); if ($captcha === null || !$captcha instanceof CaptchaAdapter) { throw new Exception\DomainException(sprintf( '%s requires that the element has a "captcha" attribute of type Zend\Captcha\Figlet; none found', __METHOD__ )); } $captcha-&gt;generate(); $figlet = sprintf( '&lt;pre&gt;%s&lt;/pre&gt;', $captcha-&gt;getFiglet()-&gt;render($captcha-&gt;getWord()) ); $position = $this-&gt;getCaptchaPosition(); $separator = $this-&gt;getSeparator(); $captchaInput = $this-&gt;renderCaptchaInputs($element); $pattern = '%s%s%s'; if ($position == self::CAPTCHA_PREPEND) { return sprintf($pattern, $captchaInput, $separator, $figlet); } return sprintf($pattern, $figlet, $separator, $captchaInput); } } &lt;?php
 namespace Zend\Form\View\Helper\Captcha; use Zend\Captcha\ReCaptcha as CaptchaAdapter; use Zend\Form\ElementInterface; use Zend\Form\Exception; use Zend\Form\View\Helper\FormInput; class ReCaptcha extends FormInput { public function render(ElementInterface $element) { $attributes = $element-&gt;getAttributes(); $captcha = $element-&gt;getCaptcha(); if ($captcha === null || !$captcha instanceof CaptchaAdapter) { throw new Exception\DomainException(sprintf( '%s requires that the element has a "captcha" attribute implementing Zend\Captcha\AdapterInterface; none found', __METHOD__ )); } $name = $element-&gt;getName(); $id = isset($attributes['id']) ? $attributes['id'] : $name; $challengeName = empty($name) ? 'recaptcha_challenge_field' : $name . '[recaptcha_challenge_field]'; $responseName = empty($name) ? 'recaptcha_response_field' : $name . '[recaptcha_response_field]'; $challengeId = $id . '-challenge'; $responseId = $id . '-response'; $markup = $captcha-&gt;getService()-&gt;getHtml($name); $hidden = $this-&gt;renderHiddenInput($challengeName, $challengeId, $responseName, $responseId); $js = $this-&gt;renderJsEvents($challengeId, $responseId); return $hidden . $markup . $js; } public function __invoke(ElementInterface $element = null) { if (!$element) { return $this; } return $this-&gt;render($element); } protected function renderHiddenInput($challengeName, $challengeId, $responseName, $responseId) { $pattern = '&lt;input type="hidden" %s%s'; $closingBracket = $this-&gt;getInlineClosingBracket(); $attributes = $this-&gt;createAttributesString(array( 'name' =&gt; $challengeName, 'id' =&gt; $challengeId, )); $challenge = sprintf($pattern, $attributes, $closingBracket); $attributes = $this-&gt;createAttributesString(array( 'name' =&gt; $responseName, 'id' =&gt; $responseId, )); $response = sprintf($pattern, $attributes, $closingBracket); return $challenge . $response; } protected function renderJsEvents($challengeId, $responseId) { $elseif = 'else if'; $js =&lt;&lt;&lt;EOJ
&lt;script type="text/javascript" language="JavaScript"&gt;
function windowOnLoad(fn)
{
    var old = window.onload;
    window.onload = function() {
        if (old) {
            old();
        }
        fn();
    };
}
function zendBindEvent(el, eventName, eventHandler)
{
    if (el.addEventListener) {
        el.addEventListener(eventName, eventHandler, false);
    } $elseif (el.attachEvent) {
        el.attachEvent('on'+eventName, eventHandler);
    }
}
windowOnLoad(function() {
    zendBindEvent(
        document.getElementById("$challengeId").form,
        'submit',
        function(e) {
            document.getElementById("$challengeId").value = document.getElementById("recaptcha_challenge_field").value;
            document.getElementById("$responseId").value = document.getElementById("recaptcha_response_field").value;
        }
    );
});
&lt;/script&gt;
EOJ;
return $js; } } &lt;?php
 namespace Zend\Form\View\Helper\Captcha; use Zend\Captcha\AdapterInterface as CaptchaAdapter; use Zend\Form\ElementInterface; use Zend\Form\Exception; use Zend\Form\View\Helper\FormInput; abstract class AbstractWord extends FormInput { const CAPTCHA_APPEND = 'append'; const CAPTCHA_PREPEND = 'prepend'; protected $inputHelper; protected $captchaPosition = self::CAPTCHA_APPEND; protected $separator = ''; public function setCaptchaPosition($captchaPosition) { $captchaPosition = strtolower($captchaPosition); if (!in_array($captchaPosition, array(self::CAPTCHA_APPEND, self::CAPTCHA_PREPEND))) { throw new Exception\InvalidArgumentException(sprintf( '%s expects either %s::CAPTCHA_APPEND or %s::CAPTCHA_PREPEND; received "%s"', __METHOD__, __CLASS__, __CLASS__, (string) $captchaPosition )); } $this-&gt;captchaPosition = $captchaPosition; return $this; } public function getCaptchaPosition() { return $this-&gt;captchaPosition; } public function setSeparator($separator) { $this-&gt;separator = (string) $separator; return $this; } public function getSeparator() { return $this-&gt;separator; } protected function renderCaptchaInputs(ElementInterface $element) { $name = $element-&gt;getName(); if ($name === null || $name === '') { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $attributes = $element-&gt;getAttributes(); $captcha = $element-&gt;getCaptcha(); if ($captcha === null || !$captcha instanceof CaptchaAdapter) { throw new Exception\DomainException(sprintf( '%s requires that the element has a "captcha" attribute implementing Zend\Captcha\AdapterInterface; none found', __METHOD__ )); } $hidden = $this-&gt;renderCaptchaHidden($captcha, $attributes); $input = $this-&gt;renderCaptchaInput($captcha, $attributes); return $hidden . $input; } public function __invoke(ElementInterface $element = null) { if (!$element) { return $this; } return $this-&gt;render($element); } protected function renderCaptchaHidden(CaptchaAdapter $captcha, array $attributes) { $attributes['type'] = 'hidden'; $attributes['name'] .= '[id]'; if (isset($attributes['id'])) { $attributes['id'] .= '-hidden'; } if (method_exists($captcha, 'getId')) { $attributes['value'] = $captcha-&gt;getId(); } elseif (array_key_exists('value', $attributes)) { if (is_array($attributes['value']) &amp;&amp; array_key_exists('id', $attributes['value'])) { $attributes['value'] = $attributes['value']['id']; } } $closingBracket = $this-&gt;getInlineClosingBracket(); $hidden = sprintf( '&lt;input %s%s', $this-&gt;createAttributesString($attributes), $closingBracket ); return $hidden; } protected function renderCaptchaInput(CaptchaAdapter $captcha, array $attributes) { $attributes['type'] = 'text'; $attributes['name'] .= '[input]'; if (array_key_exists('value', $attributes)) { unset($attributes['value']); } $closingBracket = $this-&gt;getInlineClosingBracket(); $input = sprintf( '&lt;input %s%s', $this-&gt;createAttributesString($attributes), $closingBracket ); return $input; } } &lt;?php
 namespace Zend\Form\View\Helper\Captcha; use Zend\Captcha\Image as CaptchaAdapter; use Zend\Form\ElementInterface; use Zend\Form\Exception; class Image extends AbstractWord { public function render(ElementInterface $element) { $captcha = $element-&gt;getCaptcha(); if ($captcha === null || !$captcha instanceof CaptchaAdapter) { throw new Exception\DomainException(sprintf( '%s requires that the element has a "captcha" attribute of type Zend\Captcha\Image; none found', __METHOD__ )); } $captcha-&gt;generate(); $imgAttributes = array( 'width' =&gt; $captcha-&gt;getWidth(), 'height' =&gt; $captcha-&gt;getHeight(), 'alt' =&gt; $captcha-&gt;getImgAlt(), 'src' =&gt; $captcha-&gt;getImgUrl() . $captcha-&gt;getId() . $captcha-&gt;getSuffix(), ); if ($element-&gt;hasAttribute('id')) { $imgAttributes['id'] = $element-&gt;getAttribute('id') . '-image'; } $closingBracket = $this-&gt;getInlineClosingBracket(); $img = sprintf( '&lt;img %s%s', $this-&gt;createAttributesString($imgAttributes), $closingBracket ); $position = $this-&gt;getCaptchaPosition(); $separator = $this-&gt;getSeparator(); $captchaInput = $this-&gt;renderCaptchaInputs($element); $pattern = '%s%s%s'; if ($position == self::CAPTCHA_PREPEND) { return sprintf($pattern, $captchaInput, $separator, $img); } return sprintf($pattern, $img, $separator, $captchaInput); } } &lt;?php
 namespace Zend\Form\View\Helper\Captcha; use Zend\Captcha\Dumb as CaptchaAdapter; use Zend\Form\ElementInterface; use Zend\Form\Exception; class Dumb extends AbstractWord { public function render(ElementInterface $element) { $captcha = $element-&gt;getCaptcha(); if ($captcha === null || !$captcha instanceof CaptchaAdapter) { throw new Exception\DomainException(sprintf( '%s requires that the element has a "captcha" attribute of type Zend\Captcha\Dumb; none found', __METHOD__ )); } $captcha-&gt;generate(); $label = sprintf( '%s &lt;b&gt;%s&lt;/b&gt;', $captcha-&gt;getLabel(), strrev($captcha-&gt;getWord()) ); $position = $this-&gt;getCaptchaPosition(); $separator = $this-&gt;getSeparator(); $captchaInput = $this-&gt;renderCaptchaInputs($element); $pattern = '%s%s%s'; if ($position === self::CAPTCHA_PREPEND) { return sprintf($pattern, $captchaInput, $separator, $label); } return sprintf($pattern, $label, $separator, $captchaInput); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormHidden extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'hidden'; } } &lt;?php
 namespace Zend\Form\View\Helper; use RuntimeException; use Zend\Form\Element; use Zend\Form\ElementInterface; use Zend\Form\Element\Collection as CollectionElement; use Zend\Form\FieldsetInterface; use Zend\View\Helper\AbstractHelper as BaseAbstractHelper; class FormCollection extends AbstractHelper { protected $shouldWrap = true; protected $defaultElementHelper = 'formrow'; protected $elementHelper; protected $fieldsetHelper; public function render(ElementInterface $element) { $renderer = $this-&gt;getView(); if (!method_exists($renderer, 'plugin')) { return ''; } $markup = ''; $templateMarkup = ''; $escapeHtmlHelper = $this-&gt;getEscapeHtmlHelper(); $elementHelper = $this-&gt;getElementHelper(); $fieldsetHelper = $this-&gt;getFieldsetHelper(); if ($element instanceof CollectionElement &amp;&amp; $element-&gt;shouldCreateTemplate()) { $templateMarkup = $this-&gt;renderTemplate($element); } foreach ($element-&gt;getIterator() as $elementOrFieldset) { if ($elementOrFieldset instanceof FieldsetInterface) { $markup .= $fieldsetHelper($elementOrFieldset); } elseif ($elementOrFieldset instanceof ElementInterface) { $markup .= $elementHelper($elementOrFieldset); } } if (!empty($templateMarkup)) { $markup .= $templateMarkup; } if ($this-&gt;shouldWrap) { $label = $element-&gt;getLabel(); if (!empty($label)) { if (null !== ($translator = $this-&gt;getTranslator())) { $label = $translator-&gt;translate( $label, $this-&gt;getTranslatorTextDomain() ); } $label = $escapeHtmlHelper($label); $markup = sprintf( '&lt;fieldset&gt;&lt;legend&gt;%s&lt;/legend&gt;%s&lt;/fieldset&gt;', $label, $markup ); } } return $markup; } public function renderTemplate(CollectionElement $collection) { $elementHelper = $this-&gt;getElementHelper(); $escapeHtmlAttribHelper = $this-&gt;getEscapeHtmlAttrHelper(); $templateMarkup = ''; $elementOrFieldset = $collection-&gt;getTemplateElement(); if ($elementOrFieldset instanceof FieldsetInterface) { $templateMarkup .= $this-&gt;render($elementOrFieldset); } elseif ($elementOrFieldset instanceof ElementInterface) { $templateMarkup .= $elementHelper($elementOrFieldset); } return sprintf( '&lt;span data-template="%s"&gt;&lt;/span&gt;', $escapeHtmlAttribHelper($templateMarkup) ); } public function __invoke(ElementInterface $element = null, $wrap = true) { if (!$element) { return $this; } $this-&gt;setShouldWrap($wrap); return $this-&gt;render($element); } public function setShouldWrap($wrap) { $this-&gt;shouldWrap = (bool) $wrap; return $this; } public function shouldWrap() { return $this-&gt;shouldWrap; } public function getDefaultElementHelper() { return $this-&gt;defaultElementHelper; } public function setDefaultElementHelper($defaultSubHelper) { $this-&gt;defaultElementHelper = $defaultSubHelper; return $this; } protected function getElementHelper() { if ($this-&gt;elementHelper) { return $this-&gt;elementHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;elementHelper = $this-&gt;view-&gt;plugin($this-&gt;getDefaultElementHelper()); } if (!$this-&gt;elementHelper instanceof BaseAbstractHelper) { throw new RuntimeException('Invalid element helper set in FormCollection. The helper must be an instance of AbstractHelper.'); } return $this-&gt;elementHelper; } public function setElementHelper(AbstractHelper $elementHelper) { $this-&gt;elementHelper = $elementHelper; return $this; } protected function getFieldsetHelper() { if ($this-&gt;fieldsetHelper) { return $this-&gt;fieldsetHelper; } return $this; } public function setFieldsetHelper(AbstractHelper $fieldsetHelper) { $this-&gt;fieldsetHelper = $fieldsetHelper; return $this; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Element\Checkbox as CheckboxElement; use Zend\Form\Exception; class FormCheckbox extends FormInput { public function render(ElementInterface $element) { if (!$element instanceof CheckboxElement) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that the element is of type Zend\Form\Element\Checkbox', __METHOD__ )); } $name = $element-&gt;getName(); if (empty($name) &amp;&amp; $name !== 0) { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $attributes = $element-&gt;getAttributes(); $attributes['name'] = $name; $attributes['type'] = $this-&gt;getInputType(); $attributes['value'] = $element-&gt;getCheckedValue(); $closingBracket = $this-&gt;getInlineClosingBracket(); if ($element-&gt;isChecked()) { $attributes['checked'] = 'checked'; } $rendered = sprintf( '&lt;input %s%s', $this-&gt;createAttributesString($attributes), $closingBracket ); if ($element-&gt;useHiddenElement()) { $hiddenAttributes = array( 'name' =&gt; $attributes['name'], 'value' =&gt; $element-&gt;getUncheckedValue(), ); $rendered = sprintf( '&lt;input type="hidden" %s%s', $this-&gt;createAttributesString($hiddenAttributes), $closingBracket ) . $rendered; } return $rendered; } protected function getInputType() { return 'checkbox'; } } &lt;?php
 namespace Zend\Form\View\Helper\File; class FormFileSessionProgress extends FormFileUploadProgress { protected function getName() { return ini_get('session.upload_progress.name'); } } &lt;?php
 namespace Zend\Form\View\Helper\File; class FormFileApcProgress extends FormFileUploadProgress { protected function getName() { return ini_get('apc.rfc1867_name'); } } &lt;?php
 namespace Zend\Form\View\Helper\File; use Zend\Form\ElementInterface; use Zend\Form\View\Helper\FormInput; class FormFileUploadProgress extends FormInput { public function __invoke(ElementInterface $element = null) { return $this-&gt;renderHiddenId(); } public function renderHiddenId() { $attributes = array(); $attributes['id'] = 'progress_key'; $attributes['name'] = $this-&gt;getName(); $attributes['type'] = 'hidden'; $attributes['value'] = $this-&gt;getValue(); return sprintf( '&lt;input %s%s', $this-&gt;createAttributesString($attributes), $this-&gt;getInlineClosingBracket() ); } protected function getName() { return 'UPLOAD_IDENTIFIER'; } protected function getValue() { return uniqid(); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Element\MultiCheckbox as MultiCheckboxElement; use Zend\Form\Exception; class FormMultiCheckbox extends FormInput { const LABEL_APPEND = 'append'; const LABEL_PREPEND = 'prepend'; protected $useHiddenElement = false; protected $uncheckedValue = ''; protected $inputHelper; protected $labelHelper; protected $labelPosition = self::LABEL_APPEND; protected $labelAttributes; protected $separator = ''; public function setLabelPosition($labelPosition) { $labelPosition = strtolower($labelPosition); if (!in_array($labelPosition, array(self::LABEL_APPEND, self::LABEL_PREPEND))) { throw new Exception\InvalidArgumentException(sprintf( '%s expects either %s::LABEL_APPEND or %s::LABEL_PREPEND; received "%s"', __METHOD__, __CLASS__, __CLASS__, (string) $labelPosition )); } $this-&gt;labelPosition = $labelPosition; return $this; } public function getLabelPosition() { return $this-&gt;labelPosition; } public function setSeparator($separator) { $this-&gt;separator = (string) $separator; return $this; } public function getSeparator() { return $this-&gt;separator; } public function setLabelAttributes($attributes) { $this-&gt;labelAttributes = $attributes; return $this; } public function getLabelAttributes() { return $this-&gt;labelAttributes; } public function getUseHiddenElement() { return $this-&gt;useHiddenElement; } public function setUseHiddenElement($useHiddenElement) { $this-&gt;useHiddenElement = (bool) $useHiddenElement; return $this; } public function getUncheckedValue() { return $this-&gt;uncheckedValue; } public function setUncheckedValue($value) { $this-&gt;uncheckedValue = $value; return $this; } public function render(ElementInterface $element) { if (!$element instanceof MultiCheckboxElement) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that the element is of type Zend\Form\Element\MultiCheckbox', __METHOD__ )); } $name = static::getName($element); $options = $element-&gt;getValueOptions(); if (empty($options)) { throw new Exception\DomainException(sprintf( '%s requires that the element has "value_options"; none found', __METHOD__ )); } $attributes = $element-&gt;getAttributes(); $attributes['name'] = $name; $attributes['type'] = $this-&gt;getInputType(); $selectedOptions = (array) $element-&gt;getValue(); $rendered = $this-&gt;renderOptions($element, $options, $selectedOptions, $attributes); $useHiddenElement = method_exists($element, 'useHiddenElement') &amp;&amp; $element-&gt;useHiddenElement() ? $element-&gt;useHiddenElement() : $this-&gt;useHiddenElement; if ($useHiddenElement) { $rendered = $this-&gt;renderHiddenElement($element, $attributes) . $rendered; } return $rendered; } protected function renderOptions(MultiCheckboxElement $element, array $options, array $selectedOptions, array $attributes) { $escapeHtmlHelper = $this-&gt;getEscapeHtmlHelper(); $labelHelper = $this-&gt;getLabelHelper(); $labelClose = $labelHelper-&gt;closeTag(); $labelPosition = $this-&gt;getLabelPosition(); $globalLabelAttributes = $element-&gt;getLabelAttributes(); $closingBracket = $this-&gt;getInlineClosingBracket(); if (empty($globalLabelAttributes)) { $globalLabelAttributes = $this-&gt;labelAttributes; } $combinedMarkup = array(); $count = 0; foreach ($options as $key =&gt; $optionSpec) { $count++; if ($count &gt; 1 &amp;&amp; array_key_exists('id', $attributes)) { unset($attributes['id']); } $value = ''; $label = ''; $selected = false; $disabled = false; $inputAttributes = $attributes; $labelAttributes = $globalLabelAttributes; if (is_scalar($optionSpec)) { $optionSpec = array( 'label' =&gt; $optionSpec, 'value' =&gt; $key ); } if (isset($optionSpec['value'])) { $value = $optionSpec['value']; } if (isset($optionSpec['label'])) { $label = $optionSpec['label']; } if (isset($optionSpec['selected'])) { $selected = $optionSpec['selected']; } if (isset($optionSpec['disabled'])) { $disabled = $optionSpec['disabled']; } if (isset($optionSpec['label_attributes'])) { $labelAttributes = (isset($labelAttributes)) ? array_merge($labelAttributes, $optionSpec['label_attributes']) : $optionSpec['label_attributes']; } if (isset($optionSpec['attributes'])) { $inputAttributes = array_merge($inputAttributes, $optionSpec['attributes']); } if (in_array($value, $selectedOptions)) { $selected = true; } $inputAttributes['value'] = $value; $inputAttributes['checked'] = $selected; $inputAttributes['disabled'] = $disabled; $input = sprintf( '&lt;input %s%s', $this-&gt;createAttributesString($inputAttributes), $closingBracket ); if (null !== ($translator = $this-&gt;getTranslator())) { $label = $translator-&gt;translate( $label, $this-&gt;getTranslatorTextDomain() ); } $label = $escapeHtmlHelper($label); $labelOpen = $labelHelper-&gt;openTag($labelAttributes); $template = $labelOpen . '%s%s' . $labelClose; switch ($labelPosition) { case self::LABEL_PREPEND: $markup = sprintf($template, $label, $input); break; case self::LABEL_APPEND: default: $markup = sprintf($template, $input, $label); break; } $combinedMarkup[] = $markup; } return implode($this-&gt;getSeparator(), $combinedMarkup); } protected function renderHiddenElement(MultiCheckboxElement $element, array $attributes) { $closingBracket = $this-&gt;getInlineClosingBracket(); $uncheckedValue = $element-&gt;getUncheckedValue() ? $element-&gt;getUncheckedValue() : $this-&gt;uncheckedValue; $hiddenAttributes = array( 'name' =&gt; $element-&gt;getName(), 'value' =&gt; $uncheckedValue, ); return sprintf( '&lt;input type="hidden" %s%s', $this-&gt;createAttributesString($hiddenAttributes), $closingBracket ); } public function __invoke(ElementInterface $element = null, $labelPosition = null) { if (!$element) { return $this; } if ($labelPosition !== null) { $this-&gt;setLabelPosition($labelPosition); } return $this-&gt;render($element); } protected function getInputType() { return 'checkbox'; } protected function getInputHelper() { if ($this-&gt;inputHelper) { return $this-&gt;inputHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;inputHelper = $this-&gt;view-&gt;plugin('form_input'); } if (!$this-&gt;inputHelper instanceof FormInput) { $this-&gt;inputHelper = new FormInput(); } return $this-&gt;inputHelper; } protected function getLabelHelper() { if ($this-&gt;labelHelper) { return $this-&gt;labelHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;labelHelper = $this-&gt;view-&gt;plugin('form_label'); } if (!$this-&gt;labelHelper instanceof FormLabel) { $this-&gt;labelHelper = new FormLabel(); } return $this-&gt;labelHelper; } protected static function getName(ElementInterface $element) { $name = $element-&gt;getName(); if ($name === null || $name === '') { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } return $name . '[]'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormPassword extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'maxlength' =&gt; true, 'pattern' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'size' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'password'; } } &lt;?php
 namespace Zend\Form\View\Helper; use DateTime; use IntlDateFormatter; use Zend\Form\ElementInterface; use Zend\Form\Element\DateSelect as DateSelectElement; use Zend\Form\Exception; use Zend\Form\View\Helper\FormMonthSelect as FormMonthSelectHelper; class FormDateSelect extends FormMonthSelectHelper { public function render(ElementInterface $element) { if (!$element instanceof DateSelectElement) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that the element is of type Zend\Form\Element\DateSelect', __METHOD__ )); } $name = $element-&gt;getName(); if ($name === null || $name === '') { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $selectHelper = $this-&gt;getSelectElementHelper(); $pattern = $this-&gt;parsePattern($element-&gt;shouldRenderDelimiters()); $daysOptions = $this-&gt;getDaysOptions($pattern['day']); $monthsOptions = $this-&gt;getMonthsOptions($pattern['month']); $yearOptions = $this-&gt;getYearsOptions($element-&gt;getMinYear(), $element-&gt;getMaxYear()); $dayElement = $element-&gt;getDayElement()-&gt;setValueOptions($daysOptions); $monthElement = $element-&gt;getMonthElement()-&gt;setValueOptions($monthsOptions); $yearElement = $element-&gt;getYearElement()-&gt;setValueOptions($yearOptions); if ($element-&gt;shouldCreateEmptyOption()) { $dayElement-&gt;setEmptyOption(''); $yearElement-&gt;setEmptyOption(''); $monthElement-&gt;setEmptyOption(''); } $data = array(); $data[$pattern['day']] = $selectHelper-&gt;render($dayElement); $data[$pattern['month']] = $selectHelper-&gt;render($monthElement); $data[$pattern['year']] = $selectHelper-&gt;render($yearElement); $markup = ''; foreach ($pattern as $key =&gt; $value) { if (is_numeric($key)) { $markup .= $value; } else { $markup .= $data[$value]; } } return $markup; } protected function getDaysOptions($pattern) { $keyFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, 'dd'); $valueFormatter = new IntlDateFormatter($this-&gt;getLocale(), null, null, null, null, $pattern); $date = new DateTime('1970-01-01'); $result = array(); for ($day = 1; $day &lt;= 31; $day++) { $key = $keyFormatter-&gt;format($date); $value = $valueFormatter-&gt;format($date); $result[$key] = $value; $date-&gt;modify('+1 day'); } return $result; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormWeek extends FormDateTime { protected function getType(ElementInterface $element) { return 'week'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\I18n\View\Helper\AbstractTranslatorHelper as BaseAbstractHelper; use Zend\View\Helper\Doctype; use Zend\View\Helper\EscapeHtml; use Zend\View\Helper\EscapeHtmlAttr; abstract class AbstractHelper extends BaseAbstractHelper { protected $booleanAttributes = array( 'autocomplete' =&gt; array('on' =&gt; 'on', 'off' =&gt; 'off'), 'autofocus' =&gt; array('on' =&gt; 'autofocus', 'off' =&gt; ''), 'checked' =&gt; array('on' =&gt; 'checked', 'off' =&gt; ''), 'disabled' =&gt; array('on' =&gt; 'disabled', 'off' =&gt; ''), 'multiple' =&gt; array('on' =&gt; 'multiple', 'off' =&gt; ''), 'readonly' =&gt; array('on' =&gt; 'readonly', 'off' =&gt; ''), 'required' =&gt; array('on' =&gt; 'required', 'off' =&gt; ''), 'selected' =&gt; array('on' =&gt; 'selected', 'off' =&gt; ''), ); protected $translatableAttributes = array( 'placeholder' =&gt; true ); protected $doctypeHelper; protected $escapeHtmlHelper; protected $escapeHtmlAttrHelper; protected $validGlobalAttributes = array( 'accesskey' =&gt; true, 'class' =&gt; true, 'contenteditable' =&gt; true, 'contextmenu' =&gt; true, 'dir' =&gt; true, 'draggable' =&gt; true, 'dropzone' =&gt; true, 'hidden' =&gt; true, 'id' =&gt; true, 'lang' =&gt; true, 'onabort' =&gt; true, 'onblur' =&gt; true, 'oncanplay' =&gt; true, 'oncanplaythrough' =&gt; true, 'onchange' =&gt; true, 'onclick' =&gt; true, 'oncontextmenu' =&gt; true, 'ondblclick' =&gt; true, 'ondrag' =&gt; true, 'ondragend' =&gt; true, 'ondragenter' =&gt; true, 'ondragleave' =&gt; true, 'ondragover' =&gt; true, 'ondragstart' =&gt; true, 'ondrop' =&gt; true, 'ondurationchange' =&gt; true, 'onemptied' =&gt; true, 'onended' =&gt; true, 'onerror' =&gt; true, 'onfocus' =&gt; true, 'oninput' =&gt; true, 'oninvalid' =&gt; true, 'onkeydown' =&gt; true, 'onkeypress' =&gt; true, 'onkeyup' =&gt; true, 'onload' =&gt; true, 'onloadeddata' =&gt; true, 'onloadedmetadata' =&gt; true, 'onloadstart' =&gt; true, 'onmousedown' =&gt; true, 'onmousemove' =&gt; true, 'onmouseout' =&gt; true, 'onmouseover' =&gt; true, 'onmouseup' =&gt; true, 'onmousewheel' =&gt; true, 'onpause' =&gt; true, 'onplay' =&gt; true, 'onplaying' =&gt; true, 'onprogress' =&gt; true, 'onratechange' =&gt; true, 'onreadystatechange' =&gt; true, 'onreset' =&gt; true, 'onscroll' =&gt; true, 'onseeked' =&gt; true, 'onseeking' =&gt; true, 'onselect' =&gt; true, 'onshow' =&gt; true, 'onstalled' =&gt; true, 'onsubmit' =&gt; true, 'onsuspend' =&gt; true, 'ontimeupdate' =&gt; true, 'onvolumechange' =&gt; true, 'onwaiting' =&gt; true, 'spellcheck' =&gt; true, 'style' =&gt; true, 'tabindex' =&gt; true, 'title' =&gt; true, 'xml:base' =&gt; true, 'xml:lang' =&gt; true, 'xml:space' =&gt; true, ); protected $validTagAttributes = array( ); public function setDoctype($doctype) { $this-&gt;getDoctypeHelper()-&gt;setDoctype($doctype); return $this; } public function getDoctype() { return $this-&gt;getDoctypeHelper()-&gt;getDoctype(); } public function setEncoding($encoding) { $this-&gt;getEscapeHtmlHelper()-&gt;setEncoding($encoding); return $this; } public function getEncoding() { return $this-&gt;getEscapeHtmlHelper()-&gt;getEncoding(); } public function createAttributesString(array $attributes) { $attributes = $this-&gt;prepareAttributes($attributes); $escape = $this-&gt;getEscapeHtmlHelper(); $strings = array(); foreach ($attributes as $key =&gt; $value) { $key = strtolower($key); if (!$value &amp;&amp; isset($this-&gt;booleanAttributes[$key])) { if ('' === $this-&gt;booleanAttributes[$key]['off']) { continue; } } if (isset($this-&gt;translatableAttributes[$key]) &amp;&amp; !empty($value)) { if (($translator = $this-&gt;getTranslator()) !== null) { $value = $translator-&gt;translate( $value, $this-&gt;getTranslatorTextDomain() ); } } $strings[] = sprintf('%s="%s"', $escape($key), $escape($value)); } return implode(' ', $strings); } public function getId(ElementInterface $element) { $id = $element-&gt;getAttribute('id'); if (null !== $id) { return $id; } return $element-&gt;getName(); } public function getInlineClosingBracket() { $doctypeHelper = $this-&gt;getDoctypeHelper(); if ($doctypeHelper-&gt;isXhtml()) { return '/&gt;'; } return '&gt;'; } protected function getDoctypeHelper() { if ($this-&gt;doctypeHelper) { return $this-&gt;doctypeHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;doctypeHelper = $this-&gt;view-&gt;plugin('doctype'); } if (!$this-&gt;doctypeHelper instanceof Doctype) { $this-&gt;doctypeHelper = new Doctype(); } return $this-&gt;doctypeHelper; } protected function getEscapeHtmlHelper() { if ($this-&gt;escapeHtmlHelper) { return $this-&gt;escapeHtmlHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;escapeHtmlHelper = $this-&gt;view-&gt;plugin('escapehtml'); } if (!$this-&gt;escapeHtmlHelper instanceof EscapeHtml) { $this-&gt;escapeHtmlHelper = new EscapeHtml(); } return $this-&gt;escapeHtmlHelper; } protected function getEscapeHtmlAttrHelper() { if ($this-&gt;escapeHtmlAttrHelper) { return $this-&gt;escapeHtmlAttrHelper; } if (method_exists($this-&gt;view, 'plugin')) { $this-&gt;escapeHtmlAttrHelper = $this-&gt;view-&gt;plugin('escapehtmlattr'); } if (!$this-&gt;escapeHtmlAttrHelper instanceof EscapeHtmlAttr) { $this-&gt;escapeHtmlAttrHelper = new EscapeHtmlAttr(); } return $this-&gt;escapeHtmlAttrHelper; } protected function prepareAttributes(array $attributes) { foreach ($attributes as $key =&gt; $value) { $attribute = strtolower($key); if (!isset($this-&gt;validGlobalAttributes[$attribute]) &amp;&amp; !isset($this-&gt;validTagAttributes[$attribute]) &amp;&amp; 'data-' != substr($attribute, 0, 5) ) { unset($attributes[$key]); continue; } if ($attribute != $key) { unset($attributes[$key]); $attributes[$attribute] = $value; } if (isset($this-&gt;booleanAttributes[$attribute])) { $attributes[$attribute] = $this-&gt;prepareBooleanAttributeValue($attribute, $value); } } return $attributes; } protected function prepareBooleanAttributeValue($attribute, $value) { if (!is_bool($value) &amp;&amp; in_array($value, $this-&gt;booleanAttributes[$attribute])) { return $value; } $value = (bool) $value; return ($value ? $this-&gt;booleanAttributes[$attribute]['on'] : $this-&gt;booleanAttributes[$attribute]['off'] ); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormTextarea extends AbstractHelper { protected $validTagAttributes = array( 'autofocus' =&gt; true, 'cols' =&gt; true, 'dirname' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'maxlength' =&gt; true, 'name' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'rows' =&gt; true, 'wrap' =&gt; true, ); public function render(ElementInterface $element) { $name = $element-&gt;getName(); if (empty($name) &amp;&amp; $name !== 0) { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $attributes = $element-&gt;getAttributes(); $attributes['name'] = $name; $content = (string) $element-&gt;getValue(); $escapeHtml = $this-&gt;getEscapeHtmlHelper(); return sprintf( '&lt;textarea %s&gt;%s&lt;/textarea&gt;', $this-&gt;createAttributesString($attributes), $escapeHtml($content) ); } public function __invoke(ElementInterface $element = null) { if (!$element) { return $this; } return $this-&gt;render($element); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormLabel extends AbstractHelper { const APPEND = 'append'; const PREPEND = 'prepend'; protected $validTagAttributes = array( 'for' =&gt; true, 'form' =&gt; true, ); public function openTag($attributesOrElement = null) { if (null === $attributesOrElement) { return '&lt;label&gt;'; } if (is_array($attributesOrElement)) { $attributes = $this-&gt;createAttributesString($attributesOrElement); return sprintf('&lt;label %s&gt;', $attributes); } if (!$attributesOrElement instanceof ElementInterface) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Zend\Form\ElementInterface instance; received "%s"', __METHOD__, (is_object($attributesOrElement) ? get_class($attributesOrElement) : gettype($attributesOrElement)) )); } $id = $this-&gt;getId($attributesOrElement); if (null === $id) { throw new Exception\DomainException(sprintf( '%s expects the Element provided to have either a name or an id present; neither found', __METHOD__ )); } $labelAttributes = $attributesOrElement-&gt;getLabelAttributes(); $attributes = array('for' =&gt; $id); if (!empty($labelAttributes)) { $attributes = array_merge($labelAttributes, $attributes); } $attributes = $this-&gt;createAttributesString($attributes); return sprintf('&lt;label %s&gt;', $attributes); } public function closeTag() { return '&lt;/label&gt;'; } public function __invoke(ElementInterface $element = null, $labelContent = null, $position = null) { if (!$element) { return $this; } $openTag = $this-&gt;openTag($element); $label = ''; if ($labelContent === null || $position !== null) { $label = $element-&gt;getLabel(); if (empty($label)) { throw new Exception\DomainException(sprintf( '%s expects either label content as the second argument, ' . 'or that the element provided has a label attribute; neither found', __METHOD__ )); } if (null !== ($translator = $this-&gt;getTranslator())) { $label = $translator-&gt;translate( $label, $this-&gt;getTranslatorTextDomain() ); } } if ($label &amp;&amp; $labelContent) { switch ($position) { case self::APPEND: $labelContent .= $label; break; case self::PREPEND: default: $labelContent = $label . $labelContent; break; } } if ($label &amp;&amp; null === $labelContent) { $labelContent = $label; } return $openTag . $labelContent . $this-&gt;closeTag(); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormDate extends FormDateTime { protected function getType(ElementInterface $element) { return 'date'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormRadio extends FormMultiCheckbox { protected function getInputType() { return 'radio'; } protected static function getName(ElementInterface $element) { return $element-&gt;getName(); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormTel extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'maxlength' =&gt; true, 'pattern' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'size' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'tel'; } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; use Zend\Form\Exception; class FormFile extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'accept' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'multiple' =&gt; true, 'required' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'file'; } public function render(ElementInterface $element) { $name = $element-&gt;getName(); if ($name === null || $name === '') { throw new Exception\DomainException(sprintf( '%s requires that the element has an assigned name; none discovered', __METHOD__ )); } $attributes = $element-&gt;getAttributes(); $attributes['type'] = $this-&gt;getType($element); $attributes['name'] = $name; if (array_key_exists('multiple', $attributes) &amp;&amp; $attributes['multiple']) { $attributes['name'] .= '[]'; } $value = $element-&gt;getValue(); if (is_array($value) &amp;&amp; isset($value['name']) &amp;&amp; !is_array($value['name'])) { $attributes['value'] = $value['name']; } elseif (is_string($value)) { $attributes['value'] = $value; } return sprintf( '&lt;input %s%s', $this-&gt;createAttributesString($attributes), $this-&gt;getInlineClosingBracket() ); } } &lt;?php
 namespace Zend\Form\View\Helper; use Zend\Form\ElementInterface; class FormUrl extends FormInput { protected $validTagAttributes = array( 'name' =&gt; true, 'autocomplete' =&gt; true, 'autofocus' =&gt; true, 'disabled' =&gt; true, 'form' =&gt; true, 'list' =&gt; true, 'maxlength' =&gt; true, 'pattern' =&gt; true, 'placeholder' =&gt; true, 'readonly' =&gt; true, 'required' =&gt; true, 'size' =&gt; true, 'type' =&gt; true, 'value' =&gt; true, ); protected function getType(ElementInterface $element) { return 'url'; } } &lt;?php
 namespace Zend\Form\View; use Zend\ServiceManager\ConfigInterface; use Zend\ServiceManager\ServiceManager; class HelperConfig implements ConfigInterface { protected $invokables = array( 'form' =&gt; 'Zend\Form\View\Helper\Form', 'formbutton' =&gt; 'Zend\Form\View\Helper\FormButton', 'formcaptcha' =&gt; 'Zend\Form\View\Helper\FormCaptcha', 'captchadumb' =&gt; 'Zend\Form\View\Helper\Captcha\Dumb', 'formcaptchadumb' =&gt; 'Zend\Form\View\Helper\Captcha\Dumb', 'captchafiglet' =&gt; 'Zend\Form\View\Helper\Captcha\Figlet', 'formcaptchafiglet' =&gt; 'Zend\Form\View\Helper\Captcha\Figlet', 'captchaimage' =&gt; 'Zend\Form\View\Helper\Captcha\Image', 'formcaptchaimage' =&gt; 'Zend\Form\View\Helper\Captcha\Image', 'captcharecaptcha' =&gt; 'Zend\Form\View\Helper\Captcha\ReCaptcha', 'formcaptcharecaptcha' =&gt; 'Zend\Form\View\Helper\Captcha\ReCaptcha', 'formcheckbox' =&gt; 'Zend\Form\View\Helper\FormCheckbox', 'formcollection' =&gt; 'Zend\Form\View\Helper\FormCollection', 'formcolor' =&gt; 'Zend\Form\View\Helper\FormColor', 'formdate' =&gt; 'Zend\Form\View\Helper\FormDate', 'formdatetime' =&gt; 'Zend\Form\View\Helper\FormDateTime', 'formdatetimelocal' =&gt; 'Zend\Form\View\Helper\FormDateTimeLocal', 'formdatetimeselect' =&gt; 'Zend\Form\View\Helper\FormDateTimeSelect', 'formdateselect' =&gt; 'Zend\Form\View\Helper\FormDateSelect', 'formelement' =&gt; 'Zend\Form\View\Helper\FormElement', 'formelementerrors' =&gt; 'Zend\Form\View\Helper\FormElementErrors', 'formemail' =&gt; 'Zend\Form\View\Helper\FormEmail', 'formfile' =&gt; 'Zend\Form\View\Helper\FormFile', 'formfileapcprogress' =&gt; 'Zend\Form\View\Helper\File\FormFileApcProgress', 'formfilesessionprogress' =&gt; 'Zend\Form\View\Helper\File\FormFileSessionProgress', 'formfileuploadprogress' =&gt; 'Zend\Form\View\Helper\File\FormFileUploadProgress', 'formhidden' =&gt; 'Zend\Form\View\Helper\FormHidden', 'formimage' =&gt; 'Zend\Form\View\Helper\FormImage', 'forminput' =&gt; 'Zend\Form\View\Helper\FormInput', 'formlabel' =&gt; 'Zend\Form\View\Helper\FormLabel', 'formmonth' =&gt; 'Zend\Form\View\Helper\FormMonth', 'formmonthselect' =&gt; 'Zend\Form\View\Helper\FormMonthSelect', 'formmulticheckbox' =&gt; 'Zend\Form\View\Helper\FormMultiCheckbox', 'formnumber' =&gt; 'Zend\Form\View\Helper\FormNumber', 'formpassword' =&gt; 'Zend\Form\View\Helper\FormPassword', 'formradio' =&gt; 'Zend\Form\View\Helper\FormRadio', 'formrange' =&gt; 'Zend\Form\View\Helper\FormRange', 'formreset' =&gt; 'Zend\Form\View\Helper\FormReset', 'form_reset' =&gt; 'Zend\Form\View\Helper\FormReset', 'formrow' =&gt; 'Zend\Form\View\Helper\FormRow', 'form_row' =&gt; 'Zend\Form\View\Helper\FormRow', 'formsearch' =&gt; 'Zend\Form\View\Helper\FormSearch', 'formselect' =&gt; 'Zend\Form\View\Helper\FormSelect', 'formsubmit' =&gt; 'Zend\Form\View\Helper\FormSubmit', 'formtel' =&gt; 'Zend\Form\View\Helper\FormTel', 'formtext' =&gt; 'Zend\Form\View\Helper\FormText', 'formtextarea' =&gt; 'Zend\Form\View\Helper\FormTextarea', 'formtime' =&gt; 'Zend\Form\View\Helper\FormTime', 'formurl' =&gt; 'Zend\Form\View\Helper\FormUrl', 'formweek' =&gt; 'Zend\Form\View\Helper\FormWeek', ); public function configureServiceManager(ServiceManager $serviceManager) { foreach ($this-&gt;invokables as $name =&gt; $service) { $serviceManager-&gt;setInvokableClass($name, $service); } } } &lt;?php
 namespace Zend\Form; use Zend\ServiceManager\AbstractPluginManager; use Zend\ServiceManager\ConfigInterface; use Zend\Stdlib\InitializableInterface; class FormElementManager extends AbstractPluginManager { protected $invokableClasses = array( 'button' =&gt; 'Zend\Form\Element\Button', 'captcha' =&gt; 'Zend\Form\Element\Captcha', 'checkbox' =&gt; 'Zend\Form\Element\Checkbox', 'collection' =&gt; 'Zend\Form\Element\Collection', 'color' =&gt; 'Zend\Form\Element\Color', 'csrf' =&gt; 'Zend\Form\Element\Csrf', 'date' =&gt; 'Zend\Form\Element\Date', 'dateselect' =&gt; 'Zend\Form\Element\DateSelect', 'datetime' =&gt; 'Zend\Form\Element\DateTime', 'datetimelocal' =&gt; 'Zend\Form\Element\DateTimeLocal', 'datetimeselect' =&gt; 'Zend\Form\Element\DateTimeSelect', 'element' =&gt; 'Zend\Form\Element', 'email' =&gt; 'Zend\Form\Element\Email', 'fieldset' =&gt; 'Zend\Form\Fieldset', 'file' =&gt; 'Zend\Form\Element\File', 'form' =&gt; 'Zend\Form\Form', 'hidden' =&gt; 'Zend\Form\Element\Hidden', 'image' =&gt; 'Zend\Form\Element\Image', 'month' =&gt; 'Zend\Form\Element\Month', 'monthselect' =&gt; 'Zend\Form\Element\MonthSelect', 'multicheckbox' =&gt; 'Zend\Form\Element\MultiCheckbox', 'number' =&gt; 'Zend\Form\Element\Number', 'password' =&gt; 'Zend\Form\Element\Password', 'radio' =&gt; 'Zend\Form\Element\Radio', 'range' =&gt; 'Zend\Form\Element\Range', 'select' =&gt; 'Zend\Form\Element\Select', 'submit' =&gt; 'Zend\Form\Element\Submit', 'text' =&gt; 'Zend\Form\Element\Text', 'textarea' =&gt; 'Zend\Form\Element\Textarea', 'time' =&gt; 'Zend\Form\Element\Time', 'url' =&gt; 'Zend\Form\Element\Url', 'week' =&gt; 'Zend\Form\Element\Week', ); protected $shareByDefault = false; public function __construct(ConfigInterface $configuration = null) { parent::__construct($configuration); $this-&gt;addInitializer(array($this, 'injectFactory')); } public function injectFactory($element) { if ($element instanceof FormFactoryAwareInterface) { $element-&gt;getFormFactory()-&gt;setFormElementManager($this); } } public function validatePlugin($plugin) { if ($plugin instanceof InitializableInterface) { $plugin-&gt;init(); } if ($plugin instanceof ElementInterface) { return; } throw new Exception\InvalidElementException(sprintf( 'Plugin of type %s is invalid; must implement Zend\Form\ElementInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)) )); } } &lt;?php
 namespace Zend\Form; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\InitializableInterface; class Element implements ElementAttributeRemovalInterface, ElementInterface, InitializableInterface { protected $attributes = array(); protected $label; protected $labelAttributes; protected $messages = array(); protected $options = array(); protected $value; public function __construct($name = null, $options = array()) { if (null !== $name) { $this-&gt;setName($name); } if (!empty($options)) { $this-&gt;setOptions($options); } } public function init() { } public function setName($name) { $this-&gt;setAttribute('name', $name); return $this; } public function getName() { return $this-&gt;getAttribute('name'); } public function setOptions($options) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException( 'The options parameter must be an array or a Traversable' ); } if (isset($options['label'])) { $this-&gt;setLabel($options['label']); } if (isset($options['label_attributes'])) { $this-&gt;setLabelAttributes($options['label_attributes']); } $this-&gt;options = $options; return $this; } public function getOptions() { return $this-&gt;options; } public function getOption($option) { if (!isset($this-&gt;options[$option])) { return null; } return $this-&gt;options[$option]; } public function setAttribute($key, $value) { if ($key === 'value') { $this-&gt;setValue($value); return $this; } $this-&gt;attributes[$key] = $value; return $this; } public function getAttribute($key) { if (!array_key_exists($key, $this-&gt;attributes)) { return null; } return $this-&gt;attributes[$key]; } public function removeAttribute($key) { unset($this-&gt;attributes[$key]); return $this; } public function hasAttribute($key) { return array_key_exists($key, $this-&gt;attributes); } public function setAttributes($arrayOrTraversable) { if (!is_array($arrayOrTraversable) &amp;&amp; !$arrayOrTraversable instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable argument; received "%s"', __METHOD__, (is_object($arrayOrTraversable) ? get_class($arrayOrTraversable) : gettype($arrayOrTraversable)) )); } foreach ($arrayOrTraversable as $key =&gt; $value) { $this-&gt;setAttribute($key, $value); } return $this; } public function getAttributes() { return $this-&gt;attributes; } public function removeAttributes(array $keys) { foreach ($keys as $key) { unset($this-&gt;attributes[$key]); } return $this; } public function clearAttributes() { $this-&gt;attributes = array(); return $this; } public function setValue($value) { $this-&gt;value = $value; return $this; } public function getValue() { return $this-&gt;value; } public function setLabel($label) { if (is_string($label)) { $this-&gt;label = $label; } return $this; } public function getLabel() { return $this-&gt;label; } public function setLabelAttributes(array $labelAttributes) { $this-&gt;labelAttributes = $labelAttributes; return $this; } public function getLabelAttributes() { return $this-&gt;labelAttributes; } public function setMessages($messages) { if (!is_array($messages) &amp;&amp; !$messages instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable object of validation error messages; received "%s"', __METHOD__, (is_object($messages) ? get_class($messages) : gettype($messages)) )); } $this-&gt;messages = $messages; return $this; } public function getMessages() { return $this-&gt;messages; } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; class Hidden extends Element { protected $attributes = array( 'type' =&gt; 'hidden', ); } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\Validator\DateStep as DateStepValidator; use Zend\Validator\Regex as RegexValidator; class Week extends DateTime { protected $attributes = array( 'type' =&gt; 'week', ); protected function getDateValidator() { return new RegexValidator('/^[0-9]{4}\-W[0-9]{2}$/'); } protected function getStepValidator() { $stepValue = (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 1; $baseValue = (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : '1970-W01'; return new DateStepValidator(array( 'format' =&gt; 'Y-\WW', 'baseValue' =&gt; $baseValue, 'step' =&gt; new \DateInterval("P{$stepValue}W"), )); } } &lt;?php
 namespace Zend\Form\Element; use DateTime; use Zend\Form\Element; use Zend\Form\ElementPrepareAwareInterface; use Zend\Form\FormInterface; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\ValidatorInterface; use Zend\Validator\Regex as RegexValidator; class MonthSelect extends Element implements InputProviderInterface, ElementPrepareAwareInterface { protected $monthElement; protected $yearElement; protected $minYear; protected $maxYear; protected $createEmptyOption = false; protected $renderDelimiters = true; protected $validator; public function __construct($name = null, $options = array()) { $this-&gt;minYear = date('Y') - 100; $this-&gt;maxYear = date('Y'); $this-&gt;monthElement = new Select('month'); $this-&gt;yearElement = new Select('year'); parent::__construct($name, $options); } public function setOptions($options) { parent::setOptions($options); if (isset($options['month_attributes'])) { $this-&gt;setMonthAttributes($options['month_attributes']); } if (isset($options['year_attributes'])) { $this-&gt;setYearAttributes($options['year_attributes']); } if (isset($options['min_year'])) { $this-&gt;setMinYear($options['min_year']); } if (isset($options['max_year'])) { $this-&gt;setMaxYear($options['max_year']); } if (isset($options['create_empty_option'])) { $this-&gt;setShouldCreateEmptyOption($options['create_empty_option']); } if (isset($options['render_delimiters'])) { $this-&gt;setShouldRenderDelimiters($options['render_delimiters']); } return $this; } public function getMonthElement() { return $this-&gt;monthElement; } public function getYearElement() { return $this-&gt;yearElement; } public function setMonthAttributes(array $monthAttributes) { $this-&gt;monthElement-&gt;setAttributes($monthAttributes); return $this; } public function getMonthAttributes() { return $this-&gt;monthElement-&gt;getAttributes(); } public function setYearAttributes(array $yearAttributes) { $this-&gt;yearElement-&gt;setAttributes($yearAttributes); return $this; } public function getYearAttributes() { return $this-&gt;yearElement-&gt;getAttributes(); } public function setMinYear($minYear) { $this-&gt;minYear = $minYear; return $this; } public function getMinYear() { return $this-&gt;minYear; } public function setMaxYear($maxYear) { $this-&gt;maxYear = $maxYear; return $this; } public function getMaxYear() { return $this-&gt;maxYear; } public function setShouldCreateEmptyOption($createEmptyOption) { $this-&gt;createEmptyOption = (bool) $createEmptyOption; return $this; } public function shouldCreateEmptyOption() { return $this-&gt;createEmptyOption; } public function setShouldRenderDelimiters($renderDelimiters) { $this-&gt;renderDelimiters = (bool) $renderDelimiters; return $this; } public function shouldRenderDelimiters() { return $this-&gt;renderDelimiters; } public function setValue($value) { if ($value instanceof DateTime) { $value = array( 'year' =&gt; $value-&gt;format('Y'), 'month' =&gt; $value-&gt;format('m') ); } $this-&gt;yearElement-&gt;setValue($value['year']); $this-&gt;monthElement-&gt;setValue($value['month']); } public function prepareElement(FormInterface $form) { $name = $this-&gt;getName(); $this-&gt;monthElement-&gt;setName($name . '[month]'); $this-&gt;yearElement-&gt;setName($name . '[year]'); } protected function getValidator() { return new RegexValidator('/^[0-9]{4}\-(0?[1-9]|1[012])$/'); } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; false, 'filters' =&gt; array( array( 'name' =&gt; 'Callback', 'options' =&gt; array( 'callback' =&gt; function($date) { if (is_array($date)) { $date = $date['year'] . '-' . $date['month']; } return $date; } ) ) ), 'validators' =&gt; array( $this-&gt;getValidator(), ) ); } public function __clone() { $this-&gt;monthElement = clone $this-&gt;monthElement; $this-&gt;yearElement = clone $this-&gt;yearElement; } } &lt;?php
 namespace Zend\Form\Element; use DateInterval; use DateTime as PhpDateTime; use Zend\Form\Element; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\Date as DateValidator; use Zend\Validator\DateStep as DateStepValidator; use Zend\Validator\GreaterThan as GreaterThanValidator; use Zend\Validator\LessThan as LessThanValidator; class DateTime extends Element implements InputProviderInterface { const DATETIME_FORMAT = 'Y-m-d\TH:iP'; protected $attributes = array( 'type' =&gt; 'datetime', ); protected $format = self::DATETIME_FORMAT; protected $validators; public function setOptions($options) { parent::setOptions($options); if (isset($this-&gt;options['format'])) { $this-&gt;setFormat($this-&gt;options['format']); } return $this; } public function getValue($returnFormattedValue = true) { $value = parent::getValue(); if (!$value instanceof PhpDateTime || !$returnFormattedValue) { return $value; } $format = $this-&gt;getFormat(); return $value-&gt;format($format); } public function setFormat($format) { $this-&gt;format = (string) $format; return $this; } public function getFormat() { return $this-&gt;format; } protected function getValidators() { if ($this-&gt;validators) { return $this-&gt;validators; } $validators = array(); $validators[] = $this-&gt;getDateValidator(); if (isset($this-&gt;attributes['min'])) { $validators[] = new GreaterThanValidator(array( 'min' =&gt; $this-&gt;attributes['min'], 'inclusive' =&gt; true, )); } if (isset($this-&gt;attributes['max'])) { $validators[] = new LessThanValidator(array( 'max' =&gt; $this-&gt;attributes['max'], 'inclusive' =&gt; true, )); } if (!isset($this-&gt;attributes['step']) || 'any' !== $this-&gt;attributes['step'] ) { $validators[] = $this-&gt;getStepValidator(); } $this-&gt;validators = $validators; return $this-&gt;validators; } protected function getDateValidator() { return new DateValidator(array('format' =&gt; $this-&gt;format)); } protected function getStepValidator() { $format = $this-&gt;getFormat(); $stepValue = (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 1; $baseValue = (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : date($format, 0); return new DateStepValidator(array( 'format' =&gt; $format, 'baseValue' =&gt; $baseValue, 'step' =&gt; new DateInterval("PT{$stepValue}M"), )); } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'filters' =&gt; array( array('name' =&gt; 'Zend\Filter\StringTrim'), ), 'validators' =&gt; $this-&gt;getValidators(), ); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\Form\ElementPrepareAwareInterface; use Zend\Form\FormInterface; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\Csrf as CsrfValidator; class Csrf extends Element implements InputProviderInterface, ElementPrepareAwareInterface { protected $attributes = array( 'type' =&gt; 'hidden', ); protected $csrfValidatorOptions = array(); protected $csrfValidator; public function setOptions($options) { parent::setOptions($options); if (isset($options['csrf_options'])) { $this-&gt;setCsrfValidatorOptions($options['csrf_options']); } return $this; } public function getCsrfValidatorOptions() { return $this-&gt;csrfValidatorOptions; } public function setCsrfValidatorOptions(array $options) { $this-&gt;csrfValidatorOptions = $options; return $this; } public function getCsrfValidator() { if (null === $this-&gt;csrfValidator) { $csrfOptions = $this-&gt;getCsrfValidatorOptions(); $csrfOptions = array_merge($csrfOptions, array('name' =&gt; $this-&gt;getName())); $this-&gt;setCsrfValidator(new CsrfValidator($csrfOptions)); } return $this-&gt;csrfValidator; } public function setCsrfValidator(CsrfValidator $validator) { $this-&gt;csrfValidator = $validator; return $this; } public function getValue() { $validator = $this-&gt;getCsrfValidator(); return $validator-&gt;getHash(); } public function getAttributes() { $attributes = parent::getAttributes(); $validator = $this-&gt;getCsrfValidator(); $attributes['value'] = $validator-&gt;getHash(); return $attributes; } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'filters' =&gt; array( array('name' =&gt; 'Zend\Filter\StringTrim'), ), 'validators' =&gt; array( $this-&gt;getCsrfValidator(), ), ); } public function prepareElement(FormInterface $form) { $this-&gt;getCsrfValidator()-&gt;getHash(true); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\ElementInterface; use Zend\Form\Exception\InvalidArgumentException; use Zend\Validator\Explode as ExplodeValidator; use Zend\Validator\InArray as InArrayValidator; use Zend\Validator\ValidatorInterface; class MultiCheckbox extends Checkbox { protected $attributes = array( 'type' =&gt; 'multi_checkbox', ); protected $useHiddenElement = false; protected $uncheckedValue = ''; protected $valueOptions = array(); public function getValueOptions() { return $this-&gt;valueOptions; } public function setValueOptions(array $options) { $this-&gt;valueOptions = $options; if ($this-&gt;validator instanceof ExplodeValidator) { $validator = $this-&gt;validator-&gt;getValidator(); $validator-&gt;setHaystack($this-&gt;getValueOptionsValues()); } return $this; } public function setOptions($options) { parent::setOptions($options); if (isset($this-&gt;options['value_options'])) { $this-&gt;setValueOptions($this-&gt;options['value_options']); } if (isset($this-&gt;options['options'])) { $this-&gt;setValueOptions($this-&gt;options['options']); } return $this; } public function setAttribute($key, $value) { if ($key === 'options') { $this-&gt;setValueOptions($value); return $this; } return parent::setAttribute($key, $value); } protected function getValidator() { if (null === $this-&gt;validator) { $inArrayValidator = new InArrayValidator(array( 'haystack' =&gt; $this-&gt;getValueOptionsValues(), 'strict' =&gt; false, )); $this-&gt;validator = new ExplodeValidator(array( 'validator' =&gt; $inArrayValidator, 'valueDelimiter' =&gt; null, )); } return $this-&gt;validator; } protected function getValueOptionsValues() { $values = array(); $options = $this-&gt;getValueOptions(); foreach ($options as $key =&gt; $optionSpec) { $value = (is_array($optionSpec)) ? $optionSpec['value'] : $key; $values[] = $value; } if ($this-&gt;useHiddenElement()) { $values[] = $this-&gt;getUncheckedValue(); } return $values; } public function setValue($value) { $this-&gt;value = $value; return $this; } } &lt;?php
 namespace Zend\Form\Element; use DateTime as PhpDateTime; use Zend\Form\FormInterface; use Zend\Validator\ValidatorInterface; use Zend\Validator\Date as DateValidator; use Zend\Form\Exception\InvalidArgumentException; use Exception; class DateTimeSelect extends DateSelect { protected $hourElement; protected $minuteElement; protected $secondElement; protected $shouldShowSeconds = false; public function __construct($name = null, $options = array()) { parent::__construct($name, $options); $this-&gt;hourElement = new Select('hour'); $this-&gt;minuteElement = new Select('minute'); $this-&gt;secondElement = new Select('second'); } public function setOptions($options) { parent::setOptions($options); if (isset($options['hour_attributes'])) { $this-&gt;setHourAttributes($options['hour_attributes']); } if (isset($options['minute_attributes'])) { $this-&gt;setMinuteAttributes($options['minute_attributes']); } if (isset($options['second_attributes'])) { $this-&gt;setSecondAttributes($options['second_attributes']); } if (isset($options['should_show_seconds'])) { $this-&gt;setShouldShowSeconds($options['should_show_seconds']); } return $this; } public function getHourElement() { return $this-&gt;hourElement; } public function getMinuteElement() { return $this-&gt;minuteElement; } public function getSecondElement() { return $this-&gt;secondElement; } public function setHourAttributes(array $hourAttributes) { $this-&gt;hourElement-&gt;setAttributes($hourAttributes); return $this; } public function getHourAttributes() { return $this-&gt;hourElement-&gt;getAttributes(); } public function setMinuteAttributes(array $minuteAttributes) { $this-&gt;minuteElement-&gt;setAttributes($minuteAttributes); return $this; } public function getMinuteAttributes() { return $this-&gt;minuteElement-&gt;getAttributes(); } public function setSecondAttributes(array $secondAttributes) { $this-&gt;secondElement-&gt;setAttributes($secondAttributes); return $this; } public function getSecondAttributes() { return $this-&gt;secondElement-&gt;getAttributes(); } public function setShouldShowSeconds($shouldShowSeconds) { $this-&gt;shouldShowSeconds = (bool) $shouldShowSeconds; return $this; } public function shouldShowSeconds() { return $this-&gt;shouldShowSeconds; } public function setValue($value) { if (is_string($value)) { try { $value = new PhpDateTime($value); } catch (Exception $e) { throw new InvalidArgumentException('Value should be a parsable string or an instance of \DateTime'); } } if ($value instanceof PhpDateTime) { $value = array( 'year' =&gt; $value-&gt;format('Y'), 'month' =&gt; $value-&gt;format('m'), 'day' =&gt; $value-&gt;format('d'), 'hour' =&gt; $value-&gt;format('H'), 'minute' =&gt; $value-&gt;format('i'), 'second' =&gt; $value-&gt;format('s') ); } if (!isset($value['second'])) { $value['second'] = '00'; } $this-&gt;yearElement-&gt;setValue($value['year']); $this-&gt;monthElement-&gt;setValue($value['month']); $this-&gt;dayElement-&gt;setValue($value['day']); $this-&gt;hourElement-&gt;setValue($value['hour']); $this-&gt;minuteElement-&gt;setValue($value['minute']); $this-&gt;secondElement-&gt;setValue($value['second']); } public function prepareElement(FormInterface $form) { parent::prepareElement($form); $name = $this-&gt;getName(); $this-&gt;hourElement-&gt;setName($name . '[hour]'); $this-&gt;minuteElement-&gt;setName($name . '[minute]'); $this-&gt;secondElement-&gt;setName($name . '[second]'); } protected function getValidator() { if (null === $this-&gt;validator) { $this-&gt;validator = new DateValidator(array('format' =&gt; 'Y-m-d H:i:s')); } return $this-&gt;validator; } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; false, 'filters' =&gt; array( array( 'name' =&gt; 'Callback', 'options' =&gt; array( 'callback' =&gt; function($date) { if (is_array($date)) { if (!isset($date['second'])) { $date['second'] = '00'; } $date = sprintf('%s-%s-%s %s:%s:%s', $date['year'], $date['month'], $date['day'], $date['hour'], $date['minute'], $date['second'] ); } return $date; } ) ) ), 'validators' =&gt; array( $this-&gt;getValidator(), ) ); } public function __clone() { $this-&gt;dayElement = clone $this-&gt;dayElement; $this-&gt;monthElement = clone $this-&gt;monthElement; $this-&gt;yearElement = clone $this-&gt;yearElement; $this-&gt;hourElement = clone $this-&gt;monthElement; $this-&gt;minuteElement = clone $this-&gt;minuteElement; $this-&gt;secondElement = clone $this-&gt;secondElement; } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; class Text extends Element { protected $attributes = array( 'type' =&gt; 'text', ); } &lt;?php
 namespace Zend\Form\Element; use DateInterval; use Zend\Form\Element; use Zend\Form\Element\DateTime as DateTimeElement; use Zend\Validator\Date as DateValidator; use Zend\Validator\DateStep as DateStepValidator; class Date extends DateTimeElement { protected $attributes = array( 'type' =&gt; 'date', ); protected $format = 'Y-m-d'; protected function getStepValidator() { $format = $this-&gt;getFormat(); $stepValue = (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 1; $baseValue = (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : date($format, 0); return new DateStepValidator(array( 'format' =&gt; $format, 'baseValue' =&gt; $baseValue, 'step' =&gt; new DateInterval("P{$stepValue}D"), )); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\Uri as UriValidator; class Url extends Element implements InputProviderInterface { protected $attributes = array( 'type' =&gt; 'url', ); protected $validator; public function getValidator() { if (null === $this-&gt;validator) { $this-&gt;validator = new UriValidator(array( 'allowAbsolute' =&gt; true, 'allowRelative' =&gt; false, )); } return $this-&gt;validator; } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'filters' =&gt; array( array('name' =&gt; 'Zend\Filter\StringTrim'), ), 'validators' =&gt; array( $this-&gt;getValidator(), ), ); } } &lt;?php
 namespace Zend\Form\Element; use Traversable; use Zend\Form\Element; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\InArray as InArrayValidator; class Checkbox extends Element implements InputProviderInterface { protected $attributes = array( 'type' =&gt; 'checkbox' ); protected $validator; protected $useHiddenElement = true; protected $uncheckedValue = '0'; protected $checkedValue = '1'; public function setOptions($options) { parent::setOptions($options); if (isset($options['use_hidden_element'])) { $this-&gt;setUseHiddenElement($options['use_hidden_element']); } if (isset($options['unchecked_value'])) { $this-&gt;setUncheckedValue($options['unchecked_value']); } if (isset($options['checked_value'])) { $this-&gt;setCheckedValue($options['checked_value']); } return $this; } public function setUseHiddenElement($useHiddenElement) { $this-&gt;useHiddenElement = (bool) $useHiddenElement; return $this; } public function useHiddenElement() { return $this-&gt;useHiddenElement; } public function setUncheckedValue($uncheckedValue) { $this-&gt;uncheckedValue = $uncheckedValue; return $this; } public function getUncheckedValue() { return $this-&gt;uncheckedValue; } public function setCheckedValue($checkedValue) { $this-&gt;checkedValue = $checkedValue; return $this; } public function getCheckedValue() { return $this-&gt;checkedValue; } protected function getValidator() { if (null === $this-&gt;validator) { $this-&gt;validator = new InArrayValidator(array( 'haystack' =&gt; array($this-&gt;checkedValue, $this-&gt;uncheckedValue), 'strict' =&gt; false )); } return $this-&gt;validator; } public function getInputSpecification() { $spec = array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'validators' =&gt; array( $this-&gt;getValidator() ) ); return $spec; } public function isChecked() { return (bool) $this-&gt;value; } public function setChecked($value) { $this-&gt;value = (bool) $value; return $this; } public function setValue($value) { if (is_bool($value)) { $this-&gt;value = $value; } else { $this-&gt;value = $value === $this-&gt;getCheckedValue(); } return $this; } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; class Button extends Element { protected $attributes = array( 'type' =&gt; 'button', ); } &lt;?php
 namespace Zend\Form\Element; use DateInterval; use Zend\Form\Element; use Zend\Validator\Date as DateValidator; use Zend\Validator\DateStep as DateStepValidator; class Time extends DateTime { protected $attributes = array( 'type' =&gt; 'time', ); protected $format = 'H:i:s'; protected function getStepValidator() { $format = $this-&gt;getFormat(); $stepValue = (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 60; $baseValue = (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : date($format, 0); return new DateStepValidator(array( 'format' =&gt; $format, 'baseValue' =&gt; $baseValue, 'step' =&gt; new DateInterval("PT{$stepValue}S"), )); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\FormInterface; use Zend\Form\Element; use Zend\Form\ElementPrepareAwareInterface; use Zend\InputFilter\InputProviderInterface; class File extends Element implements InputProviderInterface, ElementPrepareAwareInterface { protected $attributes = array( 'type' =&gt; 'file', ); public function prepareElement(FormInterface $form) { $form-&gt;setAttribute('enctype', 'multipart/form-data'); } public function getInputSpecification() { return array( 'type' =&gt; 'Zend\InputFilter\FileInput', 'name' =&gt; $this-&gt;getName(), 'required' =&gt; false, ); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; class Image extends Element { protected $attributes = array( 'type' =&gt; 'image', ); } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\FormInterface; use Zend\Form\Element; use Zend\Form\ElementPrepareAwareInterface; class Password extends Element implements ElementPrepareAwareInterface { protected $attributes = array( 'type' =&gt; 'password', ); public function prepareElement(FormInterface $form) { $this-&gt;setValue(''); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element\Number as NumberElement; use Zend\I18n\Validator\Float as NumberValidator; use Zend\Validator\GreaterThan as GreaterThanValidator; use Zend\Validator\LessThan as LessThanValidator; use Zend\Validator\Step as StepValidator; class Range extends NumberElement { protected $attributes = array( 'type' =&gt; 'range', ); protected function getValidators() { if ($this-&gt;validators) { return $this-&gt;validators; } $validators = array(); $validators[] = new NumberValidator(); $inclusive = true; if (!empty($this-&gt;attributes['inclusive'])) { $inclusive = $this-&gt;attributes['inclusive']; } $validators[] = new GreaterThanValidator(array( 'min' =&gt; (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : 0, 'inclusive' =&gt; $inclusive )); $validators[] = new LessThanValidator(array( 'max' =&gt; (isset($this-&gt;attributes['max'])) ? $this-&gt;attributes['max'] : 100, 'inclusive' =&gt; $inclusive )); if (!isset($this-&gt;attributes['step']) || 'any' !== $this-&gt;attributes['step'] ) { $validators[] = new StepValidator(array( 'baseValue' =&gt; (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : 0, 'step' =&gt; (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 1, )); } $this-&gt;validators = $validators; return $this-&gt;validators; } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; class Submit extends Element { protected $attributes = array( 'type' =&gt; 'submit', ); } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\Validator\DateStep as DateStepValidator; class DateTimeLocal extends DateTime { const DATETIME_LOCAL_FORMAT = 'Y-m-d\TH:i'; protected $attributes = array( 'type' =&gt; 'datetime-local', ); protected $format = self::DATETIME_LOCAL_FORMAT; protected function getStepValidator() { $stepValue = (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 1; $baseValue = (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : '1970-01-01T00:00'; return new DateStepValidator(array( 'format' =&gt; $this-&gt;format, 'baseValue' =&gt; $baseValue, 'step' =&gt; new \DateInterval("PT{$stepValue}M"), )); } } &lt;?php
 namespace Zend\Form\Element; use Traversable; use Zend\Captcha as ZendCaptcha; use Zend\Form\Element; use Zend\Form\Exception; use Zend\InputFilter\InputProviderInterface; class Captcha extends Element implements InputProviderInterface { protected $captcha; public function setOptions($options) { parent::setOptions($options); if (isset($this-&gt;options['captcha'])) { $this-&gt;setCaptcha($this-&gt;options['captcha']); } return $this; } public function setCaptcha($captcha) { if (is_array($captcha) || $captcha instanceof Traversable) { $captcha = ZendCaptcha\Factory::factory($captcha); } elseif (!$captcha instanceof ZendCaptcha\AdapterInterface) { throw new Exception\InvalidArgumentException(sprintf( '%s expects either a Zend\Captcha\AdapterInterface or specification to pass to Zend\Captcha\Factory; received "%s"', __METHOD__, (is_object($captcha) ? get_class($captcha) : gettype($captcha)) )); } $this-&gt;captcha = $captcha; return $this; } public function getCaptcha() { return $this-&gt;captcha; } public function getInputSpecification() { $spec = array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'filters' =&gt; array( array('name' =&gt; 'Zend\Filter\StringTrim'), ), ); $captcha = $this-&gt;getCaptcha(); if ($captcha instanceof ZendCaptcha\AdapterInterface) { $spec['validators'] = array($captcha); } return $spec; } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\Regex as RegexValidator; use Zend\Validator\Explode as ExplodeValidator; use Zend\Validator\ValidatorInterface; class Email extends Element implements InputProviderInterface { protected $attributes = array( 'type' =&gt; 'email', ); protected $validator; protected $emailValidator; public function getValidator() { if (null === $this-&gt;validator) { $emailValidator = $this-&gt;getEmailValidator(); $multiple = (isset($this-&gt;attributes['multiple'])) ? $this-&gt;attributes['multiple'] : null; if (true === $multiple || 'multiple' === $multiple) { $this-&gt;validator = new ExplodeValidator(array( 'validator' =&gt; $emailValidator, )); } else { $this-&gt;validator = $emailValidator; } } return $this-&gt;validator; } public function setValidator(ValidatorInterface $validator) { $this-&gt;validator = $validator; return $this; } public function getEmailValidator() { if (null === $this-&gt;emailValidator) { $this-&gt;emailValidator = new RegexValidator( '/^[a-zA-Z0-9.!#$%&amp;\'*+\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/' ); } return $this-&gt;emailValidator; } public function setEmailValidator(ValidatorInterface $validator) { $this-&gt;emailValidator = $validator; return $this; } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'filters' =&gt; array( array('name' =&gt; 'Zend\Filter\StringTrim'), ), 'validators' =&gt; array( $this-&gt;getValidator(), ), ); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Validator\InArray as InArrayValidator; class Radio extends MultiCheckbox { protected $attributes = array( 'type' =&gt; 'radio' ); protected function getValidator() { if (null === $this-&gt;validator) { $this-&gt;validator = new InArrayValidator(array( 'haystack' =&gt; $this-&gt;getValueOptionsValues(), 'strict' =&gt; false, )); } return $this-&gt;validator; } } &lt;?php
 namespace Zend\Form\Element; use Traversable; use Zend\Form\Element; use Zend\Form\ElementInterface; use Zend\Form\Exception; use Zend\Form\Fieldset; use Zend\Form\FieldsetInterface; use Zend\Form\FieldsetPrepareAwareInterface; use Zend\Form\FormInterface; use Zend\Stdlib\ArrayUtils; class Collection extends Fieldset implements FieldsetPrepareAwareInterface { const DEFAULT_TEMPLATE_PLACEHOLDER = '__index__'; protected $targetElement; protected $count = 1; protected $allowAdd = true; protected $allowRemove = true; protected $shouldCreateTemplate = false; protected $templatePlaceholder = self::DEFAULT_TEMPLATE_PLACEHOLDER; protected $templateElement; public function setOptions($options) { parent::setOptions($options); if (isset($options['target_element'])) { $this-&gt;setTargetElement($options['target_element']); } if (isset($options['count'])) { $this-&gt;setCount($options['count']); } if (isset($options['allow_add'])) { $this-&gt;setAllowAdd($options['allow_add']); } if (isset($options['allow_remove'])) { $this-&gt;setAllowRemove($options['allow_remove']); } if (isset($options['should_create_template'])) { $this-&gt;setShouldCreateTemplate($options['should_create_template']); } if (isset($options['template_placeholder'])) { $this-&gt;setTemplatePlaceholder($options['template_placeholder']); } return $this; } public function allowObjectBinding($object) { return true; } public function setObject($object) { if (!is_array($object) &amp;&amp; !$object instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable object argument; received "%s"', __METHOD__, (is_object($object) ? get_class($object) : gettype($object)) )); } $this-&gt;object = $object; $this-&gt;count = count($object); return $this; } public function populateValues($data) { if (!is_array($data) &amp;&amp; !$data instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable set of data; received "%s"', __METHOD__, (is_object($data) ? get_class($data) : gettype($data)) )); } if (empty($data)) { return; } if (count($data) &lt; $this-&gt;getCount()) { if (!$this-&gt;allowRemove) { throw new Exception\DomainException(sprintf( 'There are fewer elements than specified in the collection (%s). Either set the allow_remove option ' . 'to true, or re-submit the form.', get_class($this) ) ); } $this-&gt;setCount(count($data)); foreach ($this-&gt;byName as $name =&gt; $elementOrFieldset) { if (isset($data[$name])) { continue; } $this-&gt;remove($name); } } if ($this-&gt;targetElement instanceof FieldsetInterface) { foreach ($this-&gt;byName as $name =&gt; $fieldset) { if (isset($data[$name])) { $fieldset-&gt;populateValues($data[$name]); unset($data[$name]); } } } else { foreach ($this-&gt;byName as $name =&gt; $element) { $element-&gt;setAttribute('value', $data[$name]); unset($data[$name]); } } if (!empty($data) &amp;&amp; $this-&gt;allowAdd) { foreach ($data as $key =&gt; $value) { $elementOrFieldset = $this-&gt;createNewTargetElementInstance(); $elementOrFieldset-&gt;setName($key); if ($elementOrFieldset instanceof FieldsetInterface) { $elementOrFieldset-&gt;populateValues($value); } else { $elementOrFieldset-&gt;setAttribute('value', $value); } $this-&gt;add($elementOrFieldset); } } elseif (!empty($data) &amp;&amp; !$this-&gt;allowAdd) { throw new Exception\DomainException(sprintf( 'There are more elements than specified in the collection (%s). Either set the allow_add option ' . 'to true, or re-submit the form.', get_class($this) ) ); } } public function allowValueBinding() { return true; } public function bindValues(array $values = array()) { $collection = array(); foreach ($values as $name =&gt; $value) { $element = $this-&gt;get($name); if ($element instanceof FieldsetInterface) { $collection[] = $element-&gt;bindValues($value); } else { $collection[] = $value; } } return $collection; } public function setCount($count) { $this-&gt;count = $count &gt; 0 ? $count : 0; return $this; } public function getCount() { return $this-&gt;count; } public function setTargetElement($elementOrFieldset) { if (is_array($elementOrFieldset) || ($elementOrFieldset instanceof Traversable &amp;&amp; !$elementOrFieldset instanceof ElementInterface) ) { $factory = $this-&gt;getFormFactory(); $elementOrFieldset = $factory-&gt;create($elementOrFieldset); } if (!$elementOrFieldset instanceof ElementInterface) { throw new Exception\InvalidArgumentException(sprintf( '%s requires that $elementOrFieldset be an object implementing %s; received "%s"', __METHOD__, __NAMESPACE__ . '\ElementInterface', (is_object($elementOrFieldset) ? get_class($elementOrFieldset) : gettype($elementOrFieldset)) )); } $this-&gt;targetElement = $elementOrFieldset; return $this; } public function getTargetElement() { return $this-&gt;targetElement; } public function setAllowAdd($allowAdd) { $this-&gt;allowAdd = (bool) $allowAdd; return $this; } public function allowAdd() { return $this-&gt;allowAdd; } public function setAllowRemove($allowRemove) { $this-&gt;allowRemove = (bool) $allowRemove; return $this; } public function allowRemove() { return $this-&gt;allowRemove; } public function setShouldCreateTemplate($shouldCreateTemplate) { $this-&gt;shouldCreateTemplate = (bool) $shouldCreateTemplate; return $this; } public function shouldCreateTemplate() { return $this-&gt;shouldCreateTemplate; } public function setTemplatePlaceholder($templatePlaceholder) { if (is_string($templatePlaceholder)) { $this-&gt;templatePlaceholder = $templatePlaceholder; } return $this; } public function getTemplatePlaceholder() { return $this-&gt;templatePlaceholder; } public function getTemplateElement() { if ($this-&gt;templateElement === null) { $this-&gt;templateElement = $this-&gt;createTemplateElement(); } return $this-&gt;templateElement; } public function prepareElement(FormInterface $form) { if ($this-&gt;shouldCreateTemplate) { $templateElement = $this-&gt;getTemplateElement(); $this-&gt;add($templateElement); } parent::prepareElement($form); if ($this-&gt;shouldCreateTemplate) { $this-&gt;remove($this-&gt;templatePlaceholder); } } public function extract() { if ($this-&gt;object instanceof Traversable) { $this-&gt;object = ArrayUtils::iteratorToArray($this-&gt;object); } if (!is_array($this-&gt;object)) { return array(); } $values = array(); foreach ($this-&gt;object as $key =&gt; $value) { if ($this-&gt;hydrator) { $values[$key] = $this-&gt;hydrator-&gt;extract($value); } elseif ($value instanceof $this-&gt;targetElement-&gt;object) { $targetElement = clone $this-&gt;targetElement; $targetElement-&gt;object = $value; $values[$key] = $targetElement-&gt;extract(); } } return $values; } public function prepareFieldset() { if ($this-&gt;targetElement !== null) { for ($i = 0; $i != $this-&gt;count; ++$i) { $elementOrFieldset = $this-&gt;createNewTargetElementInstance(); $elementOrFieldset-&gt;setName($i); $this-&gt;add($elementOrFieldset); } } } protected function createNewTargetElementInstance() { return clone $this-&gt;targetElement; } protected function createTemplateElement() { if (!$this-&gt;shouldCreateTemplate) { return null; } if ($this-&gt;templateElement) { return $this-&gt;templateElement; } $elementOrFieldset = $this-&gt;createNewTargetElementInstance(); $elementOrFieldset-&gt;setName($this-&gt;templatePlaceholder); return $elementOrFieldset; } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\Validator\DateStep as DateStepValidator; use Zend\Validator\Regex as RegexValidator; use Zend\Validator\ValidatorInterface; class Month extends DateTime { protected $attributes = array( 'type' =&gt; 'month', ); protected function getDateValidator() { return new RegexValidator('/^[0-9]{4}\-(0[1-9]|1[012])$/'); } protected function getStepValidator() { $stepValue = (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 1; $baseValue = (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : '1970-01'; return new DateStepValidator(array( 'format' =&gt; "Y-m", 'baseValue' =&gt; $baseValue, 'step' =&gt; new \DateInterval("P{$stepValue}M"), )); } } &lt;?php
 namespace Zend\Form\Element; use Traversable; use Zend\Form\Element; use Zend\Form\ElementInterface; use Zend\Form\Exception\InvalidArgumentException; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\Explode as ExplodeValidator; use Zend\Validator\InArray as InArrayValidator; class Select extends Element implements InputProviderInterface { protected $attributes = array( 'type' =&gt; 'select', ); protected $validator; protected $emptyOption = null; protected $valueOptions = array(); public function getValueOptions() { return $this-&gt;valueOptions; } public function setValueOptions(array $options) { $this-&gt;valueOptions = $options; if (null !== $this-&gt;validator) { if ($this-&gt;validator instanceof InArrayValidator){ $validator = $this-&gt;validator; } if ($this-&gt;validator instanceof ExplodeValidator &amp;&amp; $this-&gt;validator-&gt;getValidator() instanceof InArrayValidator ){ $validator = $this-&gt;validator-&gt;getValidator(); } if (!empty($validator)){ $validator-&gt;setHaystack($this-&gt;getValueOptionsValues()); } } return $this; } public function setOptions($options) { parent::setOptions($options); if (isset($this-&gt;options['value_options'])) { $this-&gt;setValueOptions($this-&gt;options['value_options']); } if (isset($this-&gt;options['options'])) { $this-&gt;setValueOptions($this-&gt;options['options']); } if (isset($this-&gt;options['empty_option'])) { $this-&gt;setEmptyOption($this-&gt;options['empty_option']); } return $this; } public function setAttribute($key, $value) { if ($key === 'options') { $this-&gt;setValueOptions($value); return $this; } return parent::setAttribute($key, $value); } public function setEmptyOption($emptyOption) { $this-&gt;emptyOption = $emptyOption; return $this; } public function getEmptyOption() { return $this-&gt;emptyOption; } protected function getValidator() { if (null === $this-&gt;validator) { $validator = new InArrayValidator(array( 'haystack' =&gt; $this-&gt;getValueOptionsValues(), 'strict' =&gt; false )); $multiple = (isset($this-&gt;attributes['multiple'])) ? $this-&gt;attributes['multiple'] : null; if (true === $multiple || 'multiple' === $multiple) { $validator = new ExplodeValidator(array( 'validator' =&gt; $validator, 'valueDelimiter' =&gt; null, )); } $this-&gt;validator = $validator; } return $this-&gt;validator; } public function getInputSpecification() { $spec = array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'validators' =&gt; array( $this-&gt;getValidator() ) ); return $spec; } protected function getValueOptionsValues() { $values = array(); $options = $this-&gt;getValueOptions(); foreach ($options as $key =&gt; $optionSpec) { if (is_array($optionSpec) &amp;&amp; array_key_exists('options', $optionSpec)) { foreach ($optionSpec['options'] as $nestedKey =&gt; $nestedOptionSpec) { $values[] = $this-&gt;getOptionValue($nestedKey, $nestedOptionSpec); } continue; } $values[] = $this-&gt;getOptionValue($key, $optionSpec); } return $values; } protected function getOptionValue($key, $optionSpec) { return is_array($optionSpec) ? $optionSpec['value'] : $key; } } &lt;?php
 namespace Zend\Form\Element; use DateTime as PhpDateTime; use Zend\Form\FormInterface; use Zend\Validator\ValidatorInterface; use Zend\Validator\Date as DateValidator; use Zend\Form\Exception\InvalidArgumentException; use Exception; class DateSelect extends MonthSelect { protected $dayElement; public function __construct($name = null, $options = array()) { parent::__construct($name, $options); $this-&gt;dayElement = new Select('day'); } public function setOptions($options) { parent::setOptions($options); if (isset($options['day_attributes'])) { $this-&gt;setDayAttributes($options['day_attributes']); } return $this; } public function getDayElement() { return $this-&gt;dayElement; } public function setDayAttributes(array $dayAttributes) { $this-&gt;dayElement-&gt;setAttributes($dayAttributes); return $this; } public function getDayAttributes() { return $this-&gt;dayElement-&gt;getAttributes(); } public function setValue($value) { if (is_string($value)) { try { $value = new PhpDateTime($value); } catch (Exception $e) { throw new InvalidArgumentException('Value should be a parsable string or an instance of DateTime'); } } if ($value instanceof PhpDateTime) { $value = array( 'year' =&gt; $value-&gt;format('Y'), 'month' =&gt; $value-&gt;format('m'), 'day' =&gt; $value-&gt;format('d') ); } $this-&gt;yearElement-&gt;setValue($value['year']); $this-&gt;monthElement-&gt;setValue($value['month']); $this-&gt;dayElement-&gt;setValue($value['day']); } public function prepareElement(FormInterface $form) { parent::prepareElement($form); $name = $this-&gt;getName(); $this-&gt;dayElement-&gt;setName($name . '[day]'); } protected function getValidator() { if (null === $this-&gt;validator) { $this-&gt;validator = new DateValidator(array('format' =&gt; 'Y-m-d')); } return $this-&gt;validator; } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; false, 'filters' =&gt; array( array( 'name' =&gt; 'Callback', 'options' =&gt; array( 'callback' =&gt; function($date) { if (is_array($date)) { $date = $date['year'] . '-' . $date['month'] . '-' . $date['day']; } return $date; } ) ) ), 'validators' =&gt; array( $this-&gt;getValidator(), ) ); } public function __clone() { $this-&gt;dayElement = clone $this-&gt;dayElement; $this-&gt;monthElement = clone $this-&gt;monthElement; $this-&gt;yearElement = clone $this-&gt;yearElement; } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\Regex as RegexValidator; class Color extends Element implements InputProviderInterface { protected $attributes = array( 'type' =&gt; 'color', ); protected $validator; protected function getValidator() { if (null === $this-&gt;validator) { $this-&gt;validator = new RegexValidator('/^#[0-9a-fA-F]{6}$/'); } return $this-&gt;validator; } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'filters' =&gt; array( array('name' =&gt; 'Zend\Filter\StringTrim'), array('name' =&gt; 'Zend\Filter\StringToLower'), ), 'validators' =&gt; array( $this-&gt;getValidator(), ), ); } } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; class Textarea extends Element { protected $attributes = array( 'type' =&gt; 'textarea', ); } &lt;?php
 namespace Zend\Form\Element; use Zend\Form\Element; use Zend\I18n\Validator\Float as NumberValidator; use Zend\InputFilter\InputProviderInterface; use Zend\Validator\GreaterThan as GreaterThanValidator; use Zend\Validator\LessThan as LessThanValidator; use Zend\Validator\Step as StepValidator; class Number extends Element implements InputProviderInterface { protected $attributes = array( 'type' =&gt; 'number', ); protected $validators; protected function getValidators() { if ($this-&gt;validators) { return $this-&gt;validators; } $validators = array(); $validators[] = new NumberValidator(array( 'locale' =&gt; 'en_US', )); $inclusive = true; if (!empty($this-&gt;attributes['inclusive'])) { $inclusive = $this-&gt;attributes['inclusive']; } if (isset($this-&gt;attributes['min'])) { $validators[] = new GreaterThanValidator(array( 'min' =&gt; $this-&gt;attributes['min'], 'inclusive' =&gt; $inclusive )); } if (isset($this-&gt;attributes['max'])) { $validators[] = new LessThanValidator(array( 'max' =&gt; $this-&gt;attributes['max'], 'inclusive' =&gt; $inclusive )); } if (!isset($this-&gt;attributes['step']) || 'any' !== $this-&gt;attributes['step'] ) { $validators[] = new StepValidator(array( 'baseValue' =&gt; (isset($this-&gt;attributes['min'])) ? $this-&gt;attributes['min'] : 0, 'step' =&gt; (isset($this-&gt;attributes['step'])) ? $this-&gt;attributes['step'] : 1, )); } $this-&gt;validators = $validators; return $this-&gt;validators; } public function getInputSpecification() { return array( 'name' =&gt; $this-&gt;getName(), 'required' =&gt; true, 'filters' =&gt; array( array('name' =&gt; 'Zend\Filter\StringTrim') ), 'validators' =&gt; $this-&gt;getValidators(), ); } } &lt;?php
 namespace Zend\Form\Annotation; class Exclude { } &lt;?php
 namespace Zend\Form\Annotation; class Options extends AbstractArrayAnnotation { public function getOptions() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; class ValidationGroup extends AbstractArrayAnnotation { public function getValidationGroup() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; class Input extends AbstractStringAnnotation { public function getInput() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; class Type extends AbstractStringAnnotation { public function getType() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; class Name extends AbstractStringAnnotation { public function getName() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; use ReflectionClass; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; abstract class AbstractAnnotationsListener implements ListenerAggregateInterface { protected $listeners = array(); public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $index =&gt; $listener) { if (false !== $events-&gt;detach($listener)) { unset($this-&gt;listeners[$index]); } } } public function handleNameAnnotation($e) { $annotations = $e-&gt;getParam('annotations'); if (!$annotations-&gt;hasAnnotation('Zend\Form\Annotation\Name')) { return false; } foreach ($annotations as $annotation) { if (!$annotation instanceof Name) { continue; } return $annotation-&gt;getName(); } return false; } public function discoverFallbackName($e) { $reflection = $e-&gt;getParam('reflection'); if ($reflection instanceof ReflectionClass) { return $reflection-&gt;getShortName(); } return $reflection-&gt;getName(); } } &lt;?php
 namespace Zend\Form\Annotation; class InputFilter extends AbstractStringAnnotation { public function getInputFilter() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; use Zend\Filter\Boolean as BooleanFilter; class AllowEmpty { protected $allowEmpty = true; public function __construct(array $data) { if (!isset($data['value'])) { $data['value'] = false; } $allowEmpty = $data['value']; if (!is_bool($allowEmpty)) { $filter = new BooleanFilter(); $allowEmpty = $filter-&gt;filter($allowEmpty); } $this-&gt;allowEmpty = $allowEmpty; } public function getAllowEmpty() { return $this-&gt;allowEmpty; } } &lt;?php
 namespace Zend\Form\Annotation; class Attributes extends AbstractArrayAnnotation { public function getAttributes() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; use Zend\EventManager\EventManagerInterface; class FormAnnotationsListener extends AbstractAnnotationsListener { public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleAttributesAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleFlagsAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleHydratorAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleInputFilterAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleObjectAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleOptionsAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleTypeAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureForm', array($this, 'handleValidationGroupAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('discoverName', array($this, 'handleNameAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('discoverName', array($this, 'discoverFallbackName')); } public function handleAttributesAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Attributes) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['attributes'] = $annotation-&gt;getAttributes(); } public function handleFlagsAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Flags) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['flags'] = $annotation-&gt;getFlags(); } public function handleHydratorAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Hydrator) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['hydrator'] = $annotation-&gt;getHydrator(); } public function handleInputFilterAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof InputFilter) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['input_filter'] = $annotation-&gt;getInputFilter(); } public function handleObjectAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Object) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['object'] = $annotation-&gt;getObject(); } public function handleOptionsAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Options) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['options'] = $annotation-&gt;getOptions(); } public function handleTypeAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Type) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['type'] = $annotation-&gt;getType(); } public function handleValidationGroupAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof ValidationGroup) { return; } $formSpec = $e-&gt;getParam('formSpec'); $formSpec['validation_group'] = $annotation-&gt;getValidationGroup(); } } &lt;?php
 namespace Zend\Form\Annotation; use Zend\Form\Exception; abstract class AbstractArrayAnnotation { protected $value; public function __construct(array $data) { if (!isset($data['value']) || !is_array($data['value'])) { throw new Exception\DomainException(sprintf( '%s expects the annotation to define an array; received "%s"', get_class($this), isset($data['value']) ? gettype($data['value']) : 'null' )); } $this-&gt;value = $data['value']; } } &lt;?php
 namespace Zend\Form\Annotation; class Object extends AbstractStringAnnotation { public function getObject() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; use Zend\Form\Exception; abstract class AbstractStringAnnotation { protected $value; public function __construct(array $data) { if (!isset($data['value']) || !is_string($data['value'])) { throw new Exception\DomainException(sprintf( '%s expects the annotation to define a string; received "%s"', get_class($this), gettype($data['value']) )); } $this-&gt;value = $data['value']; } } &lt;?php
 namespace Zend\Form\Annotation; use ArrayObject; use ReflectionClass; use Zend\Code\Annotation\AnnotationCollection; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Annotation\Parser; use Zend\Code\Reflection\ClassReflection; use Zend\EventManager\Event; use Zend\EventManager\EventManager; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; use Zend\Form\Exception; use Zend\Form\Factory; use Zend\Form\FormFactoryAwareInterface; use Zend\Stdlib\ArrayUtils; class AnnotationBuilder implements EventManagerAwareInterface, FormFactoryAwareInterface { protected $annotationManager; protected $events; protected $formFactory; protected $entity; protected $defaultAnnotations = array( 'AllowEmpty', 'Attributes', 'ComposedObject', 'ErrorMessage', 'Exclude', 'Filter', 'Flags', 'Hydrator', 'Input', 'InputFilter', 'Name', 'Object', 'Options', 'Required', 'Type', 'ValidationGroup', 'Validator' ); public function setFormFactory(Factory $formFactory) { $this-&gt;formFactory = $formFactory; return $this; } public function setAnnotationManager(AnnotationManager $annotationManager) { $parser = new Parser\DoctrineAnnotationParser(); foreach ($this-&gt;defaultAnnotations as $annotationName) { $class = __NAMESPACE__ . '\\' . $annotationName; $parser-&gt;registerAnnotation($class); } $annotationManager-&gt;attach($parser); $this-&gt;annotationManager = $annotationManager; return $this; } public function setEventManager(EventManagerInterface $events) { $events-&gt;setIdentifiers(array( __CLASS__, get_class($this), )); $events-&gt;attach(new ElementAnnotationsListener()); $events-&gt;attach(new FormAnnotationsListener()); $this-&gt;events = $events; return $this; } public function getFormFactory() { if ($this-&gt;formFactory) { return $this-&gt;formFactory; } $this-&gt;formFactory = new Factory(); return $this-&gt;formFactory; } public function getAnnotationManager() { if ($this-&gt;annotationManager) { return $this-&gt;annotationManager; } $this-&gt;setAnnotationManager(new AnnotationManager()); return $this-&gt;annotationManager; } public function getEventManager() { if (null === $this-&gt;events) { $this-&gt;setEventManager(new EventManager()); } return $this-&gt;events; } public function getFormSpecification($entity) { if (!is_object($entity)) { if ((is_string($entity) &amp;&amp; (!class_exists($entity))) || (!is_string($entity)) ) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an object or valid class name; received "%s"', __METHOD__, var_export($entity, 1) )); } } $this-&gt;entity = $entity; $annotationManager = $this-&gt;getAnnotationManager(); $formSpec = new ArrayObject(); $filterSpec = new ArrayObject(); $reflection = new ClassReflection($entity); $annotations = $reflection-&gt;getAnnotations($annotationManager); if ($annotations instanceof AnnotationCollection) { $this-&gt;configureForm($annotations, $reflection, $formSpec, $filterSpec); } foreach ($reflection-&gt;getProperties() as $property) { $annotations = $property-&gt;getAnnotations($annotationManager); if ($annotations instanceof AnnotationCollection) { $this-&gt;configureElement($annotations, $property, $formSpec, $filterSpec); } } if (!isset($formSpec['input_filter'])) { $formSpec['input_filter'] = $filterSpec; } return $formSpec; } public function createForm($entity) { $formSpec = ArrayUtils::iteratorToArray($this-&gt;getFormSpecification($entity)); $formFactory = $this-&gt;getFormFactory(); return $formFactory-&gt;createForm($formSpec); } public function getEntity() { return $this-&gt;entity; } protected function configureForm($annotations, $reflection, $formSpec, $filterSpec) { $name = $this-&gt;discoverName($annotations, $reflection); $formSpec['name'] = $name; $formSpec['attributes'] = array(); $formSpec['elements'] = array(); $formSpec['fieldsets'] = array(); $events = $this-&gt;getEventManager(); foreach ($annotations as $annotation) { $events-&gt;trigger(__FUNCTION__, $this, array( 'annotation' =&gt; $annotation, 'name' =&gt; $name, 'formSpec' =&gt; $formSpec, 'filterSpec' =&gt; $filterSpec, )); } } protected function configureElement($annotations, $reflection, $formSpec, $filterSpec) { if ($this-&gt;checkForExclude($annotations)) { return; } $events = $this-&gt;getEventManager(); $name = $this-&gt;discoverName($annotations, $reflection); $elementSpec = new ArrayObject(array( 'flags' =&gt; array(), 'spec' =&gt; array( 'name' =&gt; $name ), )); $inputSpec = new ArrayObject(array( 'name' =&gt; $name, )); $event = new Event(); $event-&gt;setParams(array( 'name' =&gt; $name, 'elementSpec' =&gt; $elementSpec, 'inputSpec' =&gt; $inputSpec, 'formSpec' =&gt; $formSpec, 'filterSpec' =&gt; $filterSpec, )); foreach ($annotations as $annotation) { $event-&gt;setParam('annotation', $annotation); $events-&gt;trigger(__FUNCTION__, $this, $event); } $filterSpec[$name] = $event-&gt;getParam('inputSpec'); $elementSpec = $event-&gt;getParam('elementSpec'); $type = (isset($elementSpec['spec']['type'])) ? $elementSpec['spec']['type'] : 'Zend\Form\Element'; if (static::isSubclassOf($type, 'Zend\Form\FieldsetInterface')) { if (!isset($formSpec['fieldsets'])) { $formSpec['fieldsets'] = array(); } $formSpec['fieldsets'][] = $elementSpec; } else { if (!isset($formSpec['elements'])) { $formSpec['elements'] = array(); } $formSpec['elements'][] = $elementSpec; } } protected function discoverName($annotations, $reflection) { $results = $this-&gt;getEventManager()-&gt;trigger('discoverName', $this, array( 'annotations' =&gt; $annotations, 'reflection' =&gt; $reflection, ), function ($r) { return (is_string($r) &amp;&amp; !empty($r)); }); return $results-&gt;last(); } protected function checkForExclude($annotations) { $results = $this-&gt;getEventManager()-&gt;trigger('checkForExclude', $this, array( 'annotations' =&gt; $annotations, ), function ($r) { return (true === $r); }); return (bool) $results-&gt;last(); } protected static function isSubclassOf($className, $type) { if (is_subclass_of($className, $type)) { return true; } if (version_compare(PHP_VERSION, '5.3.7', '&gt;=')) { return false; } if (!interface_exists($type)) { return false; } $r = new ReflectionClass($className); return $r-&gt;implementsInterface($type); } } &lt;?php
 namespace Zend\Form\Annotation; class ErrorMessage extends AbstractStringAnnotation { public function getMessage() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; use Zend\Form\Exception; abstract class AbstractArrayOrStringAnnotation { protected $value; public function __construct(array $data) { if (!isset($data['value']) || (!is_array($data['value']) &amp;&amp; !is_string($data['value']))) { throw new Exception\DomainException(sprintf( '%s expects the annotation to define an array or string; received "%s"', get_class($this), isset($data['value']) ? gettype($data['value']) : 'null' )); } $this-&gt;value = $data['value']; } } &lt;?php
 namespace Zend\Form\Annotation; class ComposedObject extends AbstractStringAnnotation { public function getComposedObject() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; class Validator extends AbstractArrayAnnotation { public function getValidator() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; use Zend\Filter\Boolean as BooleanFilter; class Required { protected $required = true; public function __construct(array $data) { if (!isset($data['value'])) { $data['value'] = false; } $required = $data['value']; if (!is_bool($required)) { $filter = new BooleanFilter(); $required = $filter-&gt;filter($required); } $this-&gt;required = $required; } public function getRequired() { return $this-&gt;required; } } &lt;?php
 namespace Zend\Form\Annotation; class Hydrator extends AbstractArrayOrStringAnnotation { public function getHydrator() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; use Zend\EventManager\EventManagerInterface; class ElementAnnotationsListener extends AbstractAnnotationsListener { public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleAllowEmptyAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleAttributesAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleComposedObjectAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleErrorMessageAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleFilterAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleFlagsAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleHydratorAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleInputAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleObjectAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleOptionsAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleRequiredAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleTypeAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('configureElement', array($this, 'handleValidatorAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('discoverName', array($this, 'handleNameAnnotation')); $this-&gt;listeners[] = $events-&gt;attach('discoverName', array($this, 'discoverFallbackName')); $this-&gt;listeners[] = $events-&gt;attach('checkForExclude', array($this, 'handleExcludeAnnotation')); } public function handleAllowEmptyAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof AllowEmpty) { return; } $inputSpec = $e-&gt;getParam('inputSpec'); $inputSpec['allow_empty'] = true; } public function handleAttributesAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Attributes) { return; } $elementSpec = $e-&gt;getParam('elementSpec'); if (isset($elementSpec['spec']['attributes'])) { $elementSpec['spec']['attributes'] = array_merge($elementSpec['spec']['attributes'], $annotation-&gt;getAttributes()); return; } $elementSpec['spec']['attributes'] = $annotation-&gt;getAttributes(); } public function handleComposedObjectAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof ComposedObject) { return; } $class = $annotation-&gt;getComposedObject(); $annotationManager = $e-&gt;getTarget(); $specification = $annotationManager-&gt;getFormSpecification($class); $name = $e-&gt;getParam('name'); $elementSpec = $e-&gt;getParam('elementSpec'); $filterSpec = $e-&gt;getParam('filterSpec'); $inputFilter = $specification['input_filter']; if (!isset($inputFilter['type'])) { $inputFilter['type'] = 'Zend\InputFilter\InputFilter'; } $e-&gt;setParam('inputSpec', $inputFilter); unset($specification['input_filter']); if (!isset($specification['type'])) { $specification['type'] = 'Zend\Form\Fieldset'; } $elementSpec['spec'] = $specification; $elementSpec['spec']['name'] = $name; } public function handleErrorMessageAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof ErrorMessage) { return; } $inputSpec = $e-&gt;getParam('inputSpec'); $inputSpec['error_message'] = $annotation-&gt;getMessage(); } public function handleExcludeAnnotation($e) { $annotations = $e-&gt;getParam('annotations'); if ($annotations-&gt;hasAnnotation('Zend\Form\Annotation\Exclude')) { return true; } return false; } public function handleFilterAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Filter) { return; } $inputSpec = $e-&gt;getParam('inputSpec'); if (!isset($inputSpec['filters'])) { $inputSpec['filters'] = array(); } $inputSpec['filters'][] = $annotation-&gt;getFilter(); } public function handleFlagsAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Flags) { return; } $elementSpec = $e-&gt;getParam('elementSpec'); $elementSpec['flags'] = $annotation-&gt;getFlags(); } public function handleHydratorAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Hydrator) { return; } $elementSpec = $e-&gt;getParam('elementSpec'); $elementSpec['spec']['hydrator'] = $annotation-&gt;getHydrator(); } public function handleInputAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Input) { return; } $name = $e-&gt;getParam('name'); $filterSpec = $e-&gt;getParam('filterSpec'); $filterSpec[$name] = $annotation-&gt;getInput(); } public function handleObjectAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Object) { return; } $elementSpec = $e-&gt;getParam('elementSpec'); $elementSpec['spec']['object'] = $annotation-&gt;getObject(); } public function handleOptionsAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Options) { return; } $elementSpec = $e-&gt;getParam('elementSpec'); $elementSpec['spec']['options'] = $annotation-&gt;getOptions(); } public function handleRequiredAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Required) { return; } $required = (bool) $annotation-&gt;getRequired(); $inputSpec = $e-&gt;getParam('inputSpec'); $inputSpec['required'] = $required; if ($required) { $elementSpec = $e-&gt;getParam('elementSpec'); if (!isset($elementSpec['spec']['attributes'])) { $elementSpec['spec']['attributes'] = array(); } $elementSpec['spec']['attributes']['required'] = 'required'; } } public function handleTypeAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Type) { return; } $elementSpec = $e-&gt;getParam('elementSpec'); $elementSpec['spec']['type'] = $annotation-&gt;getType(); } public function handleValidatorAnnotation($e) { $annotation = $e-&gt;getParam('annotation'); if (!$annotation instanceof Validator) { return; } $inputSpec = $e-&gt;getParam('inputSpec'); if (!isset($inputSpec['validators'])) { $inputSpec['validators'] = array(); } $inputSpec['validators'][] = $annotation-&gt;getValidator(); } } &lt;?php
 namespace Zend\Form\Annotation; class Filter extends AbstractArrayAnnotation { public function getFilter() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form\Annotation; class Flags extends AbstractArrayAnnotation { public function getFlags() { return $this-&gt;value; } } &lt;?php
 namespace Zend\Form; use ArrayAccess; use Traversable; use Zend\InputFilter\Factory as InputFilterFactory; use Zend\InputFilter\InputFilterInterface; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\Hydrator; class Factory { protected $inputFilterFactory; protected $formElementManager; public function __construct(FormElementManager $formElementManager = null) { if ($formElementManager) { $this-&gt;setFormElementManager($formElementManager); } } public function setInputFilterFactory(InputFilterFactory $inputFilterFactory) { $this-&gt;inputFilterFactory = $inputFilterFactory; return $this; } public function getInputFilterFactory() { if (null === $this-&gt;inputFilterFactory) { $this-&gt;setInputFilterFactory(new InputFilterFactory()); } return $this-&gt;inputFilterFactory; } public function setFormElementManager(FormElementManager $formElementManager) { $this-&gt;formElementManager = $formElementManager; return $this; } public function getFormElementManager() { if ($this-&gt;formElementManager === null) { $this-&gt;setFormElementManager(new FormElementManager()); } return $this-&gt;formElementManager; } public function create($spec) { $spec = $this-&gt;validateSpecification($spec, __METHOD__); $type = isset($spec['type']) ? $spec['type'] : 'Zend\Form\Element'; $element = $this-&gt;getFormElementManager()-&gt;get($type); if ($element instanceof FormInterface) { return $this-&gt;configureForm($element, $spec); } if ($element instanceof FieldsetInterface) { return $this-&gt;configureFieldset($element, $spec); } if ($element instanceof ElementInterface) { return $this-&gt;configureElement($element, $spec); } throw new Exception\DomainException(sprintf( '%s expects the $spec["type"] to implement one of %s, %s, or %s; received %s', __METHOD__, 'Zend\Form\ElementInterface', 'Zend\Form\FieldsetInterface', 'Zend\Form\FormInterface', $type )); } public function createElement($spec) { if (!isset($spec['type'])) { $spec['type'] = 'Zend\Form\Element'; } return $this-&gt;create($spec); } public function createFieldset($spec) { if (!isset($spec['type'])) { $spec['type'] = 'Zend\Form\Fieldset'; } return $this-&gt;create($spec); } public function createForm($spec) { if (!isset($spec['type'])) { $spec['type'] = 'Zend\Form\Form'; } return $this-&gt;create($spec); } public function configureElement(ElementInterface $element, $spec) { $spec = $this-&gt;validateSpecification($spec, __METHOD__); $name = isset($spec['name']) ? $spec['name'] : null; $options = isset($spec['options']) ? $spec['options'] : null; $attributes = isset($spec['attributes']) ? $spec['attributes'] : null; if ($name !== null &amp;&amp; $name !== '') { $element-&gt;setName($name); } if (is_array($options) || $options instanceof Traversable || $options instanceof ArrayAccess) { $element-&gt;setOptions($options); } if (is_array($attributes) || $attributes instanceof Traversable || $attributes instanceof ArrayAccess) { $element-&gt;setAttributes($attributes); } return $element; } public function configureFieldset(FieldsetInterface $fieldset, $spec) { $spec = $this-&gt;validateSpecification($spec, __METHOD__); $fieldset = $this-&gt;configureElement($fieldset, $spec); if (isset($spec['object'])) { $this-&gt;prepareAndInjectObject($spec['object'], $fieldset, __METHOD__); } if (isset($spec['hydrator'])) { $this-&gt;prepareAndInjectHydrator($spec['hydrator'], $fieldset, __METHOD__); } if (isset($spec['elements'])) { $this-&gt;prepareAndInjectElements($spec['elements'], $fieldset, __METHOD__); } if (isset($spec['fieldsets'])) { $this-&gt;prepareAndInjectFieldsets($spec['fieldsets'], $fieldset, __METHOD__); } return $fieldset; } public function configureForm(FormInterface $form, $spec) { $spec = $this-&gt;validateSpecification($spec, __METHOD__); $form = $this-&gt;configureFieldset($form, $spec); if (isset($spec['input_filter'])) { $this-&gt;prepareAndInjectInputFilter($spec['input_filter'], $form, __METHOD__); } if (isset($spec['validation_group'])) { $this-&gt;prepareAndInjectValidationGroup($spec['validation_group'], $form, __METHOD__); } return $form; } protected function validateSpecification($spec, $method) { if (is_array($spec)) { return $spec; } if ($spec instanceof Traversable) { $spec = ArrayUtils::iteratorToArray($spec); return $spec; } if (!$spec instanceof ArrayAccess) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array, or object implementing Traversable or ArrayAccess; received "%s"', $method, (is_object($spec) ? get_class($spec) : gettype($spec)) )); } return $spec; } protected function prepareAndInjectElements($elements, FieldsetInterface $fieldset, $method) { $elements = $this-&gt;validateSpecification($elements, $method); foreach ($elements as $elementSpecification) { $flags = isset($elementSpecification['flags']) ? $elementSpecification['flags'] : array(); $spec = isset($elementSpecification['spec']) ? $elementSpecification['spec'] : array(); if (!isset($spec['type'])) { $spec['type'] = 'Zend\Form\Element'; } $element = $this-&gt;create($spec); $fieldset-&gt;add($element, $flags); } } public function prepareAndInjectFieldsets($fieldsets, FieldsetInterface $masterFieldset, $method) { $fieldsets = $this-&gt;validateSpecification($fieldsets, $method); foreach ($fieldsets as $fieldsetSpecification) { $flags = isset($fieldsetSpecification['flags']) ? $fieldsetSpecification['flags'] : array(); $spec = isset($fieldsetSpecification['spec']) ? $fieldsetSpecification['spec'] : array(); $fieldset = $this-&gt;createFieldset($spec); $masterFieldset-&gt;add($fieldset, $flags); } } protected function prepareAndInjectObject($objectName, FieldsetInterface $fieldset, $method) { if (!is_string($objectName)) { throw new Exception\DomainException(sprintf( '%s expects string class name; received "%s"', $method, (is_object($objectName) ? get_class($objectName) : gettype($objectName)) )); } if (!class_exists($objectName)) { throw new Exception\DomainException(sprintf( '%s expects string class name to be a valid class name; received "%s"', $method, $objectName )); } $fieldset-&gt;setObject(new $objectName); } protected function prepareAndInjectHydrator($hydratorOrName, FieldsetInterface $fieldset, $method) { if (is_object($hydratorOrName) &amp;&amp; $hydratorOrName instanceof Hydrator\HydratorInterface) { $fieldset-&gt;setHydrator($hydratorOrName); return; } if (is_array($hydratorOrName)) { if (!isset($hydratorOrName['type'])) { throw new Exception\DomainException(sprintf( '%s expects array specification to have a type value', $method )); } $hydratorOptions = (isset($hydratorOrName['options'])) ? $hydratorOrName['options'] : array(); $hydratorOrName = $hydratorOrName['type']; } else { $hydratorOptions = array(); } if (is_string($hydratorOrName)) { $hydrator = $this-&gt;getHydratorFromName($hydratorOrName); } if (!$hydrator instanceof Hydrator\HydratorInterface) { throw new Exception\DomainException(sprintf( '%s expects a valid implementation of Zend\Form\Hydrator\HydratorInterface; received "%s"', $method, $hydratorOrName )); } if (!empty($hydratorOptions) &amp;&amp; $hydrator instanceof Hydrator\HydratorOptionsInterface) { $hydrator-&gt;setOptions($hydratorOptions); } $fieldset-&gt;setHydrator($hydrator); } protected function prepareAndInjectInputFilter($spec, FormInterface $form, $method) { if (is_string($spec)) { if (!class_exists($spec)) { throw new Exception\DomainException(sprintf( '%s expects string input filter names to be valid class names; received "%s"', $method, $spec )); } $filter = new $spec; if (!$filter instanceof InputFilterInterface) { throw new Exception\DomainException(sprintf( '%s expects a valid implementation of Zend\InputFilter\InputFilterInterface; received "%s"', $method, $spec )); } $form-&gt;setInputFilter($filter); return; } $factory = $this-&gt;getInputFilterFactory(); $filter = $factory-&gt;createInputFilter($spec); $form-&gt;setInputFilter($filter); } protected function prepareAndInjectValidationGroup($spec, FormInterface $form, $method) { if (!is_array($spec)) { if (!class_exists($spec)) { throw new Exception\DomainException(sprintf( '%s expects an array for validation group; received "%s"', $method, $spec )); } } $form-&gt;setValidationGroup($spec); } protected function getHydratorFromName($hydratorName) { $serviceLocator = $this-&gt;getFormElementManager()-&gt;getServiceLocator(); if ($serviceLocator &amp;&amp; $serviceLocator-&gt;has($hydratorName)) { return $serviceLocator-&gt;get($hydratorName); } if (!class_exists($hydratorName)) { throw new Exception\DomainException(sprintf( 'Expects string hydrator name to be a valid class name; received "%s"', $hydratorName )); } $hydrator = new $hydratorName; return $hydrator; } } &lt;?php
 namespace Zend\Form; interface ElementInterface { public function setName($name); public function getName(); public function setOptions($options); public function getOptions(); public function getOption($option); public function setAttribute($key, $value); public function getAttribute($key); public function hasAttribute($key); public function setAttributes($arrayOrTraversable); public function getAttributes(); public function setValue($value); public function getValue(); public function setLabel($label); public function getLabel(); public function setMessages($messages); public function getMessages(); } &lt;?php
 namespace Zend\Form; interface ElementPrepareAwareInterface { public function prepareElement(FormInterface $form); } &lt;?php
 namespace Zend\Text; use Zend\Stdlib\StringUtils; class MultiByte { public static function wordWrap($string, $width = 75, $break = "\n", $cut = false, $charset = 'utf-8') { trigger_error(sprintf( "This method is deprecated, please use '%s' instead", 'Zend\Stdlib\StringUtils::getWrapper(&lt;charset&gt;)-&gt;wordWrap' ), E_USER_DEPRECATED); try { return StringUtils::getWrapper($charset)-&gt;wordWrap($string, $width, $break, $cut); } catch (\Zend\Stdlib\Exception\InvalidArgumentException $e) { throw new Exception\InvalidArgumentException($e-&gt;getMessage(), $e-&gt;getCode(), $e); } } public static function strPad($input, $padLength, $padString = ' ', $padType = STR_PAD_RIGHT, $charset = 'utf-8') { trigger_error(sprintf( "This method is deprecated, please use '%s' instead", 'Zend\Stdlib\StringUtils::getWrapper(&lt;charset&gt;)-&gt;strPad' ), E_USER_DEPRECATED); return StringUtils::getWrapper($charset)-&gt;strPad($input, $padLength, $padString, $padType); } } &lt;?php
 namespace Zend\Text\Figlet; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\ErrorHandler; use Zend\Stdlib\StringUtils; class Figlet { const SM_EQUAL = 0x01; const SM_LOWLINE = 0x02; const SM_HIERARCHY = 0x04; const SM_PAIR = 0x08; const SM_BIGX = 0x10; const SM_HARDBLANK = 0x20; const SM_KERN = 0x40; const SM_SMUSH = 0x80; const SMO_NO = 0; const SMO_YES = 1; const SMO_FORCE = 2; const JUSTIFICATION_LEFT = 0; const JUSTIFICATION_CENTER = 1; const JUSTIFICATION_RIGHT = 2; const DIRECTION_LEFT_TO_RIGHT = 0; const DIRECTION_RIGHT_TO_LEFT = 1; const FONTFILE_MAGIC_NUMBER = 'flf2'; protected $charList = array(); protected $fontLoaded = false; protected $germanChars = array(196, 214, 220, 228, 246, 252, 223); protected $outputWidth = 80; protected $hardBlank; protected $charHeight; protected $maxLength; protected $smushMode = 0; protected $fontSmush = 0; protected $userSmush = 0; protected $handleParagraphs = false; protected $justification = null; protected $rightToLeft = null; protected $smushOverride = 0; protected $fontOptions = array(); protected $previousCharWidth = 0; protected $currentCharWidth = 0; protected $outlineLength = 0; protected $outlineLengthLimit = 0; protected $inCharLine; protected $inCharLineLength = 0; protected $inCharLineLengthLimit = 0; protected $currentChar = null; protected $outputLine; protected $output; protected $skipOptions = array( 'options', 'config', ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (is_array($options)) { $this-&gt;setOptions($options); } if (!$this-&gt;fontLoaded) { $this-&gt;_loadFont(__DIR__ . '/zend-framework.flf'); } } public function setOptions(array $options) { foreach ($options as $key =&gt; $value) { if (in_array(strtolower($key), $this-&gt;skipOptions)) { continue; } $method = 'set' . ucfirst($key); if (method_exists($this, $method)) { $this-&gt;$method($value); } } return $this; } public function setFont($font) { $this-&gt;_loadFont($font); return $this; } public function setHandleParagraphs($handleParagraphs) { $this-&gt;handleParagraphs = (bool) $handleParagraphs; return $this; } public function setJustification($justification) { $this-&gt;justification = min(3, max(0, (int) $justification)); return $this; } public function setOutputWidth($outputWidth) { $this-&gt;outputWidth = max(1, (int) $outputWidth); return $this; } public function setRightToLeft($rightToLeft) { $this-&gt;rightToLeft = min(1, max(0, (int) $rightToLeft)); return $this; } public function setSmushMode($smushMode) { $smushMode = (int) $smushMode; if ($smushMode &lt; -1) { $this-&gt;smushOverride = self::SMO_NO; } else { if ($smushMode === 0) { $this-&gt;userSmush = self::SM_KERN; } elseif ($smushMode === -1) { $this-&gt;userSmush = 0; } else { $this-&gt;userSmush = (($smushMode &amp; 63) | self::SM_SMUSH); } $this-&gt;smushOverride = self::SMO_YES; } $this-&gt;_setUsedSmush(); return $this; } public function render($text, $encoding = 'UTF-8') { if (!is_string($text)) { throw new Exception\InvalidArgumentException('$text must be a string'); } $strWrapper = StringUtils::getWrapper($encoding, 'UTF-8'); $text = $strWrapper-&gt;convert($text); if (!StringUtils::isValidUtf8($text)) { throw new Exception\UnexpectedValueException('$text is not encoded with ' . $encoding); } $strWrapper = StringUtils::getWrapper('UTF-8'); $this-&gt;output = ''; $this-&gt;outputLine = array(); $this-&gt;_clearLine(); $this-&gt;outlineLengthLimit = ($this-&gt;outputWidth - 1); $this-&gt;inCharLineLengthLimit = ($this-&gt;outputWidth * 4 + 100); $wordBreakMode = 0; $lastCharWasEol = false; $textLength = $strWrapper-&gt;strlen($text); for ($charNum = 0; $charNum &lt; $textLength; $charNum++) { $char = $strWrapper-&gt;substr($text, $charNum, 1); if ($char === "\n" &amp;&amp; $this-&gt;handleParagraphs &amp;&amp; !$lastCharWasEol) { $nextChar = $strWrapper-&gt;substr($text, ($charNum + 1), 1); if (!$nextChar) { $nextChar = null; } $char = (ctype_space($nextChar)) ? "\n" : ' '; } $lastCharWasEol = (ctype_space($char) &amp;&amp; $char !== "\t" &amp;&amp; $char !== ' '); if (ctype_space($char)) { $char = ($char === "\t" || $char === ' ') ? ' ': "\n"; } $ordChar = $this-&gt;_uniOrd($char); if (($ordChar &gt; 0 &amp;&amp; $ordChar &lt; 32 &amp;&amp; $char !== "\n") || $ordChar === 127) { continue; } do { $charNotAdded = false; if ($wordBreakMode === -1) { if ($char === ' ') { break; } elseif ($char === "\n") { $wordBreakMode = 0; break; } $wordBreakMode = 0; } if ($char === "\n") { $this-&gt;_appendLine(); $wordBreakMode = false; } elseif ($this-&gt;_addChar($char)) { if ($char !== ' ') { $wordBreakMode = ($wordBreakMode &gt;= 2) ? 3: 1; } else { $wordBreakMode = ($wordBreakMode &gt; 0) ? 2: 0; } } elseif ($this-&gt;outlineLength === 0) { for ($i = 0; $i &lt; $this-&gt;charHeight; $i++) { if ($this-&gt;rightToLeft === 1 &amp;&amp; $this-&gt;outputWidth &gt; 1) { $offset = (strlen($this-&gt;currentChar[$i]) - $this-&gt;outlineLengthLimit); $this-&gt;_putString(substr($this-&gt;currentChar[$i], $offset)); } else { $this-&gt;_putString($this-&gt;currentChar[$i]); } } $wordBreakMode = -1; } elseif ($char === ' ') { if ($wordBreakMode === 2) { $this-&gt;_splitLine(); } else { $this-&gt;_appendLine(); } $wordBreakMode = -1; } else { if ($wordBreakMode &gt;= 2) { $this-&gt;_splitLine(); } else { $this-&gt;_appendLine(); } $wordBreakMode = ($wordBreakMode === 3) ? 1 : 0; $charNotAdded = true; } } while ($charNotAdded); } if ($this-&gt;outlineLength !== 0) { $this-&gt;_appendLine(); } return $this-&gt;output; } protected function _putString($string) { $length = strlen($string); if ($this-&gt;outputWidth &gt; 1) { if ($length &gt; ($this-&gt;outputWidth - 1)) { $length = ($this-&gt;outputWidth - 1); } if ($this-&gt;justification &gt; 0) { for ($i = 1; ((3 - $this-&gt;justification) * $i + $length + $this-&gt;justification - 2) &lt; $this-&gt;outputWidth; $i++) { $this-&gt;output .= ' '; } } } $this-&gt;output .= str_replace($this-&gt;hardBlank, ' ', $string) . "\n"; } protected function _appendLine() { for ($i = 0; $i &lt; $this-&gt;charHeight; $i++) { $this-&gt;_putString($this-&gt;outputLine[$i]); } $this-&gt;_clearLine(); } protected function _splitLine() { $gotSpace = false; for ($i = ($this-&gt;inCharLineLength - 1); $i &gt;= 0; $i--) { if (!$gotSpace &amp;&amp; $this-&gt;inCharLine[$i] === ' ') { $gotSpace = true; $lastSpace = $i; } if ($gotSpace &amp;&amp; $this-&gt;inCharLine[$i] !== ' ') { break; } } $firstLength = ($i + 1); $lastLength = ($this-&gt;inCharLineLength - $lastSpace - 1); $firstPart = ''; for ($i = 0; $i &lt; $firstLength; $i++) { $firstPart[$i] = $this-&gt;inCharLine[$i]; } $lastPart = ''; for ($i = 0; $i &lt; $lastLength; $i++) { $lastPart[$i] = $this-&gt;inCharLine[($lastSpace + 1 + $i)]; } $this-&gt;_clearLine(); for ($i = 0; $i &lt; $firstLength; $i++) { $this-&gt;_addChar($firstPart[$i]); } $this-&gt;_appendLine(); for ($i = 0; $i &lt; $lastLength; $i++) { $this-&gt;_addChar($lastPart[$i]); } } protected function _clearLine() { for ($i = 0; $i &lt; $this-&gt;charHeight; $i++) { $this-&gt;outputLine[$i] = ''; } $this-&gt;outlineLength = 0; $this-&gt;inCharLineLength = 0; } protected function _addChar($char) { $this-&gt;_getLetter($char); if ($this-&gt;currentChar === null) { return true; } $smushAmount = $this-&gt;_smushAmount(); if (($this-&gt;outlineLength + $this-&gt;currentCharWidth - $smushAmount) &gt; $this-&gt;outlineLengthLimit || ($this-&gt;inCharLineLength + 1) &gt; $this-&gt;inCharLineLengthLimit) { return false; } $tempLine = ''; for ($row = 0; $row &lt; $this-&gt;charHeight; $row++) { if ($this-&gt;rightToLeft === 1) { $tempLine = $this-&gt;currentChar[$row]; for ($k = 0; $k &lt; $smushAmount; $k++) { $position = ($this-&gt;currentCharWidth - $smushAmount + $k); $tempLine[$position] = $this-&gt;_smushem($tempLine[$position], $this-&gt;outputLine[$row][$k]); } $this-&gt;outputLine[$row] = $tempLine . substr($this-&gt;outputLine[$row], $smushAmount); } else { for ($k = 0; $k &lt; $smushAmount; $k++) { if (($this-&gt;outlineLength - $smushAmount + $k) &lt; 0) { continue; } $position = ($this-&gt;outlineLength - $smushAmount + $k); if (isset($this-&gt;outputLine[$row][$position])) { $leftChar = $this-&gt;outputLine[$row][$position]; } else { $leftChar = null; } $this-&gt;outputLine[$row][$position] = $this-&gt;_smushem($leftChar, $this-&gt;currentChar[$row][$k]); } $this-&gt;outputLine[$row] .= substr($this-&gt;currentChar[$row], $smushAmount); } } $this-&gt;outlineLength = strlen($this-&gt;outputLine[0]); $this-&gt;inCharLine[$this-&gt;inCharLineLength++] = $char; return true; } protected function _getLetter($char) { if (array_key_exists($this-&gt;_uniOrd($char), $this-&gt;charList)) { $this-&gt;currentChar = $this-&gt;charList[$this-&gt;_uniOrd($char)]; $this-&gt;previousCharWidth = $this-&gt;currentCharWidth; $this-&gt;currentCharWidth = strlen($this-&gt;currentChar[0]); } else { $this-&gt;currentChar = null; } } protected function _smushAmount() { if (($this-&gt;smushMode &amp; (self::SM_SMUSH | self::SM_KERN)) === 0) { return 0; } $maxSmush = $this-&gt;currentCharWidth; $amount = $maxSmush; for ($row = 0; $row &lt; $this-&gt;charHeight; $row++) { if ($this-&gt;rightToLeft === 1) { $charbd = strlen($this-&gt;currentChar[$row]); while (true) { if (!isset($this-&gt;currentChar[$row][$charbd])) { $leftChar = null; } else { $leftChar = $this-&gt;currentChar[$row][$charbd]; } if ($charbd &gt; 0 &amp;&amp; ($leftChar === null || $leftChar == ' ')) { $charbd--; } else { break; } } $linebd = 0; while (true) { if (!isset($this-&gt;outputLine[$row][$linebd])) { $rightChar = null; } else { $rightChar = $this-&gt;outputLine[$row][$linebd]; } if ($rightChar === ' ') { $linebd++; } else { break; } } $amount = ($linebd + $this-&gt;currentCharWidth - 1 - $charbd); } else { $linebd = strlen($this-&gt;outputLine[$row]); while (true) { if (!isset($this-&gt;outputLine[$row][$linebd])) { $leftChar = null; } else { $leftChar = $this-&gt;outputLine[$row][$linebd]; } if ($linebd &gt; 0 &amp;&amp; ($leftChar === null || $leftChar == ' ')) { $linebd--; } else { break; } } $charbd = 0; while (true) { if (!isset($this-&gt;currentChar[$row][$charbd])) { $rightChar = null; } else { $rightChar = $this-&gt;currentChar[$row][$charbd]; } if ($rightChar === ' ') { $charbd++; } else { break; } } $amount = ($charbd + $this-&gt;outlineLength - 1 - $linebd); } if (empty($leftChar) || $leftChar === ' ') { $amount++; } elseif (!empty($rightChar)) { if ($this-&gt;_smushem($leftChar, $rightChar) !== null) { $amount++; } } $maxSmush = min($amount, $maxSmush); } return $maxSmush; } protected function _smushem($leftChar, $rightChar) { if ($leftChar === ' ') { return $rightChar; } if ($rightChar === ' ') { return $leftChar; } if ($this-&gt;previousCharWidth &lt; 2 || $this-&gt;currentCharWidth &lt; 2) { return null; } if (($this-&gt;smushMode &amp; self::SM_SMUSH) === 0) { return null; } if (($this-&gt;smushMode &amp; 63) === 0) { if ($leftChar === ' ') { return $rightChar; } elseif ($rightChar === ' ') { return $leftChar; } elseif ($leftChar === $this-&gt;hardBlank) { return $rightChar; } elseif ($rightChar === $this-&gt;hardBlank) { return $rightChar; } elseif ($this-&gt;rightToLeft === 1) { return $leftChar; } else { return $rightChar; } } if (($this-&gt;smushMode &amp; self::SM_HARDBLANK) &gt; 0) { if ($leftChar === $this-&gt;hardBlank &amp;&amp; $rightChar === $this-&gt;hardBlank) { return $leftChar; } } if ($leftChar === $this-&gt;hardBlank &amp;&amp; $rightChar === $this-&gt;hardBlank) { return null; } if (($this-&gt;smushMode &amp; self::SM_EQUAL) &gt; 0) { if ($leftChar === $rightChar) { return $leftChar; } } if (($this-&gt;smushMode &amp; self::SM_LOWLINE) &gt; 0) { if ($leftChar === '_' &amp;&amp; strchr('|/\\[]{}()&lt;&gt;', $rightChar) !== false) { return $rightChar; } elseif ($rightChar === '_' &amp;&amp; strchr('|/\\[]{}()&lt;&gt;', $leftChar) !== false) { return $leftChar; } } if (($this-&gt;smushMode &amp; self::SM_HIERARCHY) &gt; 0) { if ($leftChar === '|' &amp;&amp; strchr('/\\[]{}()&lt;&gt;', $rightChar) !== false) { return $rightChar; } elseif ($rightChar === '|' &amp;&amp; strchr('/\\[]{}()&lt;&gt;', $leftChar) !== false) { return $leftChar; } elseif (strchr('/\\', $leftChar) &amp;&amp; strchr('[]{}()&lt;&gt;', $rightChar) !== false) { return $rightChar; } elseif (strchr('/\\', $rightChar) &amp;&amp; strchr('[]{}()&lt;&gt;', $leftChar) !== false) { return $leftChar; } elseif (strchr('[]', $leftChar) &amp;&amp; strchr('{}()&lt;&gt;', $rightChar) !== false) { return $rightChar; } elseif (strchr('[]', $rightChar) &amp;&amp; strchr('{}()&lt;&gt;', $leftChar) !== false) { return $leftChar; } elseif (strchr('{}', $leftChar) &amp;&amp; strchr('()&lt;&gt;', $rightChar) !== false) { return $rightChar; } elseif (strchr('{}', $rightChar) &amp;&amp; strchr('()&lt;&gt;', $leftChar) !== false) { return $leftChar; } elseif (strchr('()', $leftChar) &amp;&amp; strchr('&lt;&gt;', $rightChar) !== false) { return $rightChar; } elseif (strchr('()', $rightChar) &amp;&amp; strchr('&lt;&gt;', $leftChar) !== false) { return $leftChar; } } if (($this-&gt;smushMode &amp; self::SM_PAIR) &gt; 0) { if ($leftChar === '[' &amp;&amp; $rightChar === ']') { return '|'; } elseif ($rightChar === '[' &amp;&amp; $leftChar === ']') { return '|'; } elseif ($leftChar === '{' &amp;&amp; $rightChar === '}') { return '|'; } elseif ($rightChar === '{' &amp;&amp; $leftChar === '}') { return '|'; } elseif ($leftChar === '(' &amp;&amp; $rightChar === ')') { return '|'; } elseif ($rightChar === '(' &amp;&amp; $leftChar === ')') { return '|'; } } if (($this-&gt;smushMode &amp; self::SM_BIGX) &gt; 0) { if ($leftChar === '/' &amp;&amp; $rightChar === '\\') { return '|'; } elseif ($rightChar === '/' &amp;&amp; $leftChar === '\\') { return 'Y'; } elseif ($leftChar === '&gt;' &amp;&amp; $rightChar === '&lt;') { return 'X'; } } return null; } protected function _loadFont($fontFile) { if (!file_exists($fontFile)) { throw new Exception\RuntimeException($fontFile . ': Font file not found'); } if (substr($fontFile, -3) === '.gz') { if (!function_exists('gzcompress')) { throw new Exception\RuntimeException('GZIP library is required for ' . 'gzip compressed font files'); } $fontFile = 'compress.zlib://' . $fontFile; $compressed = true; } else { $compressed = false; } $fp = fopen($fontFile, 'rb'); if ($fp === false) { throw new Exception\RuntimeException($fontFile . ': Could not open file'); } if (!$compressed) { flock($fp, LOCK_SH); } $magic = $this-&gt;_readMagic($fp); $numsRead = sscanf(fgets($fp, 1000), '%*c%c %d %*d %d %d %d %d %d', $this-&gt;hardBlank, $this-&gt;charHeight, $this-&gt;maxLength, $smush, $cmtLines, $rightToLeft, $this-&gt;fontSmush); if ($magic !== self::FONTFILE_MAGIC_NUMBER || $numsRead &lt; 5) { throw new Exception\UnexpectedValueException($fontFile . ': Not a FIGlet 2 font file'); } if ($numsRead &lt; 6) { $rightToLeft = 0; } if ($numsRead &lt; 7) { if ($smush === 2) { $this-&gt;fontSmush = self::SM_KERN; } elseif ($smush &lt; 0) { $this-&gt;fontSmush = 0; } else { $this-&gt;fontSmush = (($smush &amp; 31) | self::SM_SMUSH); } } $this-&gt;charHeight = max(1, $this-&gt;charHeight); $this-&gt;maxLength = max(1, $this-&gt;maxLength); $this-&gt;maxLength += 100; $this-&gt;_setUsedSmush(); if ($this-&gt;rightToLeft === null) { $this-&gt;rightToLeft = $rightToLeft; } if ($this-&gt;justification === null) { $this-&gt;justification = (2 * $this-&gt;rightToLeft); } for ($line = 1; $line &lt;= $cmtLines; $line++) { $this-&gt;_skipToEol($fp); } for ($asciiCode = 32; $asciiCode &lt; 127; $asciiCode++) { $this-&gt;charList[$asciiCode] = $this-&gt;_loadChar($fp); } foreach ($this-&gt;germanChars as $uniCode) { $char = $this-&gt;_loadChar($fp); if ($char === false) { fclose($fp); return; } if (trim(implode('', $char)) !== '') { $this-&gt;charList[$uniCode] = $char; } } while (!feof($fp)) { list($uniCode) = explode(' ', fgets($fp, 2048)); if (empty($uniCode)) { continue; } if (substr($uniCode, 0, 2) === '0x') { $uniCode = hexdec(substr($uniCode, 2)); } elseif (substr($uniCode, 0, 1) === '0' and $uniCode !== '0' or substr($uniCode, 0, 2) === '-0') { $uniCode = octdec($uniCode); } else { $uniCode = (int) $uniCode; } $char = $this-&gt;_loadChar($fp); if ($char === false) { fclose($fp); return; } $this-&gt;charList[$uniCode] = $char; } fclose($fp); $this-&gt;fontLoaded = true; } protected function _setUsedSmush() { if ($this-&gt;smushOverride === self::SMO_NO) { $this-&gt;smushMode = $this-&gt;fontSmush; } elseif ($this-&gt;smushOverride === self::SMO_YES) { $this-&gt;smushMode = $this-&gt;userSmush; } elseif ($this-&gt;smushOverride === self::SMO_FORCE) { $this-&gt;smushMode = ($this-&gt;fontSmush | $this-&gt;userSmush); } } protected function _readMagic($fp) { $magic = ''; for ($i = 0; $i &lt; 4; $i++) { $magic .= fgetc($fp); } return $magic; } protected function _skipToEol($fp) { $dummy = fgetc($fp); while ($dummy !== false &amp;&amp; !feof($fp)) { if ($dummy === "\n") { return; } if ($dummy === "\r") { $dummy = fgetc($fp); if (!feof($fp) &amp;&amp; $dummy !== "\n") { fseek($fp, -1, SEEK_SET); } return; } $dummy = fgetc($fp); } } protected function _loadChar($fp) { $char = array(); for ($i = 0; $i &lt; $this-&gt;charHeight; $i++) { if (feof($fp)) { return false; } $line = rtrim(fgets($fp, 2048), "\r\n"); if (preg_match('#(.)\\1?$#', $line, $result) === 1) { $line = str_replace($result[1], '', $line); } $char[] = $line; } return $char; } protected function _uniOrd($c) { $h = ord($c[0]); if ($h &lt;= 0x7F) { $ord = $h; } elseif ($h &lt; 0xC2) { $ord = 0; } elseif ($h &lt;= 0xDF) { $ord = (($h &amp; 0x1F) &lt;&lt; 6 | (ord($c[1]) &amp; 0x3F)); } elseif ($h &lt;= 0xEF) { $ord = (($h &amp; 0x0F) &lt;&lt; 12 | (ord($c[1]) &amp; 0x3F) &lt;&lt; 6 | (ord($c[2]) &amp; 0x3F)); } elseif ($h &lt;= 0xF4) { $ord = (($h &amp; 0x0F) &lt;&lt; 18 | (ord($c[1]) &amp; 0x3F) &lt;&lt; 12 | (ord($c[2]) &amp; 0x3F) &lt;&lt; 6 | (ord($c[3]) &amp; 0x3F)); } else { $ord = 0; } return $ord; } } &lt;?php
 namespace Zend\Text\Figlet\Exception; use Zend\Text\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Figlet\Exception; use Zend\Text\Exception; class UnexpectedValueException extends Exception\UnexpectedValueException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Figlet\Exception; use Zend\Text\Exception\ExceptionInterface as Exception; interface ExceptionInterface extends Exception {} &lt;?php
 namespace Zend\Text\Figlet\Exception; use Zend\Text\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Exception; use Zend\Text\Exception; class OutOfBoundsException extends \OutOfBoundsException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Exception; use Zend\Text\Exception; class OverflowException extends \OverflowException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Exception; class UnexpectedValueException extends \UnexpectedValueException implements ExceptionInterface { } &lt;?php
 namespace Zend\Text\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Text\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Table\Exception; use Zend\Text\Exception; class OutOfBoundsException extends Exception\OutOfBoundsException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Table\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Text\Table\Exception; use Zend\Text\Exception; class OverflowException extends Exception\OverflowException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Table\Exception; use DomainException; class InvalidDecoratorException extends DomainException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Table\Exception; use Zend\Text\Exception; class UnexpectedValueException extends Exception\UnexpectedValueException implements ExceptionInterface {} &lt;?php
 namespace Zend\Text\Table\Exception; use Zend\Text\Exception\ExceptionInterface as Exception; interface ExceptionInterface extends Exception {} &lt;?php
 namespace Zend\Text\Table; use Zend\Stdlib\StringUtils; use Zend\Text; class Column { const ALIGN_LEFT = 'left'; const ALIGN_CENTER = 'center'; const ALIGN_RIGHT = 'right'; protected $content = ''; protected $align = self::ALIGN_LEFT; protected $colSpan = 1; protected $allowedAligns = array(self::ALIGN_LEFT, self::ALIGN_CENTER, self::ALIGN_RIGHT); public function __construct($content = null, $align = null, $colSpan = null, $charset = null) { if ($content !== null) { $this-&gt;setContent($content, $charset); } if ($align !== null) { $this-&gt;setAlign($align); } if ($colSpan !== null) { $this-&gt;setColSpan($colSpan); } } public function setContent($content, $charset = null) { if (is_string($content) === false) { throw new Exception\InvalidArgumentException('$content must be a string'); } if ($charset === null) { $inputCharset = Table::getInputCharset(); } else { $inputCharset = strtolower($charset); } $outputCharset = Table::getOutputCharset(); if ($inputCharset !== $outputCharset) { if (PHP_OS !== 'AIX') { $strWrapper = StringUtils::getWrapper($inputCharset, $outputCharset); $content = $strWrapper-&gt;convert($content); } } $this-&gt;content = $content; return $this; } public function setAlign($align) { if (in_array($align, $this-&gt;allowedAligns) === false) { throw new Exception\OutOfBoundsException('Invalid align supplied'); } $this-&gt;align = $align; return $this; } public function setColSpan($colSpan) { if (is_int($colSpan) === false or $colSpan &lt; 1) { throw new Exception\InvalidArgumentException('$colSpan must be an integer and greater than 0'); } $this-&gt;colSpan = $colSpan; return $this; } public function getColSpan() { return $this-&gt;colSpan; } public function render($columnWidth, $padding = 0) { if (is_int($columnWidth) === false or $columnWidth &lt; 1) { throw new Exception\InvalidArgumentException('$columnWidth must be an integer and greater than 0'); } $columnWidth -= ($padding * 2); if ($columnWidth &lt; 1) { throw new Exception\OutOfBoundsException('Padding (' . $padding . ') is greater than column width'); } switch ($this-&gt;align) { case self::ALIGN_LEFT: $padMode = STR_PAD_RIGHT; break; case self::ALIGN_CENTER: $padMode = STR_PAD_BOTH; break; case self::ALIGN_RIGHT: $padMode = STR_PAD_LEFT; break; default: break; } $outputCharset = Table::getOutputCharset(); $strWrapper = StringUtils::getWrapper($outputCharset); $lines = explode("\n", $strWrapper-&gt;wordWrap($this-&gt;content, $columnWidth, "\n", true)); $paddedLines = array(); foreach ($lines as $line) { $paddedLines[] = str_repeat(' ', $padding) . $strWrapper-&gt;strPad($line, $columnWidth, ' ', $padMode) . str_repeat(' ', $padding); } $result = implode("\n", $paddedLines); return $result; } } &lt;?php
 namespace Zend\Text\Table; use Zend\ServiceManager\AbstractPluginManager; class DecoratorManager extends AbstractPluginManager { protected $invokableClasses = array( 'ascii' =&gt; 'Zend\Text\Table\Decorator\Ascii', 'blank' =&gt; 'Zend\Text\Table\Decorator\Blank', 'unicode' =&gt; 'Zend\Text\Table\Decorator\Unicode', ); protected $renderer; public function validatePlugin($plugin) { if ($plugin instanceof Decorator\DecoratorInterface) { return; } throw new Exception\InvalidDecoratorException(sprintf( 'Plugin of type %s is invalid; must implement %s\Decorator\DecoratorInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\Text\Table\Decorator; use Zend\Text\Table\Decorator\DecoratorInterface as Decorator; class Unicode implements Decorator { public function getTopLeft() { return $this-&gt;_uniChar(0x250C); } public function getTopRight() { return $this-&gt;_uniChar(0x2510); } public function getBottomLeft() { return $this-&gt;_uniChar(0x2514); } public function getBottomRight() { return $this-&gt;_uniChar(0x2518); } public function getVertical() { return $this-&gt;_uniChar(0x2502); } public function getHorizontal() { return $this-&gt;_uniChar(0x2500); } public function getCross() { return $this-&gt;_uniChar(0x253C); } public function getVerticalRight() { return $this-&gt;_uniChar(0x251C); } public function getVerticalLeft() { return $this-&gt;_uniChar(0x2524); } public function getHorizontalDown() { return $this-&gt;_uniChar(0x252C); } public function getHorizontalUp() { return $this-&gt;_uniChar(0x2534); } protected function _uniChar($code) { if ($code &lt;= 0x7F) { $char = chr($code); } elseif ($code &lt;= 0x7FF) { $char = chr(0xC0 | $code &gt;&gt; 6) . chr(0x80 | $code &amp; 0x3F); } elseif ($code &lt;= 0xFFFF) { $char = chr(0xE0 | $code &gt;&gt; 12) . chr(0x80 | $code &gt;&gt; 6 &amp; 0x3F) . chr(0x80 | $code &amp; 0x3F); } elseif ($code &lt;= 0x10FFFF) { $char = chr(0xF0 | $code &gt;&gt; 18) . chr(0x80 | $code &gt;&gt; 12 &amp; 0x3F) . chr(0x80 | $code &gt;&gt; 6 &amp; 0x3F) . chr(0x80 | $code &amp; 0x3F); } else { return false; } return $char; } } &lt;?php
 namespace Zend\Text\Table\Decorator; interface DecoratorInterface { public function getTopLeft(); public function getTopRight(); public function getBottomLeft(); public function getBottomRight(); public function getVertical(); public function getHorizontal(); public function getCross(); public function getVerticalRight(); public function getVerticalLeft(); public function getHorizontalDown(); public function getHorizontalUp(); } &lt;?php
 namespace Zend\Text\Table\Decorator; use Zend\Text\Table\Decorator\DecoratorInterface as Decorator; class Ascii implements Decorator { public function getTopLeft() { return '+'; } public function getTopRight() { return '+'; } public function getBottomLeft() { return '+'; } public function getBottomRight() { return '+'; } public function getVertical() { return '|'; } public function getHorizontal() { return '-'; } public function getCross() { return '+'; } public function getVerticalRight() { return '+'; } public function getVerticalLeft() { return '+'; } public function getHorizontalDown() { return '+'; } public function getHorizontalUp() { return '+'; } } &lt;?php
 namespace Zend\Text\Table\Decorator; use Zend\Text\Table\Decorator\DecoratorInterface as Decorator; class Blank implements Decorator { public function getTopLeft() { return ''; } public function getTopRight() { return ''; } public function getBottomLeft() { return ''; } public function getBottomRight() { return ''; } public function getVertical() { return ''; } public function getHorizontal() { return ''; } public function getCross() { return ''; } public function getVerticalRight() { return ''; } public function getVerticalLeft() { return ''; } public function getHorizontalDown() { return ''; } public function getHorizontalUp() { return ''; } } &lt;?php
 namespace Zend\Text\Table; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Text\Table\Decorator\DecoratorInterface as Decorator; class Table { const AUTO_SEPARATE_NONE = 0x0; const AUTO_SEPARATE_HEADER = 0x1; const AUTO_SEPARATE_FOOTER = 0x2; const AUTO_SEPARATE_ALL = 0x4; protected $decorator = null; protected $columnWidths = null; protected $rows = array(); protected $autoSeparate = self::AUTO_SEPARATE_ALL; protected $padding = 0; protected $defaultColumnAligns = array(); protected $decoratorManager = null; protected static $inputCharset = 'utf-8'; protected static $outputCharset = 'utf-8'; protected $skipOptions = array( 'options', 'config', 'defaultColumnAlign', ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (is_array($options)) { $this-&gt;setOptions($options); } if ($this-&gt;decorator === null) { if (static::getOutputCharset() === 'utf-8') { $this-&gt;setDecorator('unicode'); } else { $this-&gt;setDecorator('ascii'); } } } public function setOptions(array $options) { foreach ($options as $key =&gt; $value) { if (in_array(strtolower($key), $this-&gt;skipOptions)) { continue; } $method = 'set' . ucfirst($key); if (method_exists($this, $method)) { $this-&gt;$method($value); } } return $this; } public function setColumnWidths(array $columnWidths) { if (count($columnWidths) === 0) { throw new Exception\InvalidArgumentException('You must supply at least one column'); } foreach ($columnWidths as $columnNum =&gt; $columnWidth) { if (is_int($columnWidth) === false or $columnWidth &lt; 1) { throw new Exception\InvalidArgumentException('Column ' . $columnNum . ' has an invalid' . ' column width'); } } $this-&gt;columnWidths = $columnWidths; return $this; } public function setAutoSeparate($autoSeparate) { $this-&gt;autoSeparate = (int) $autoSeparate; return $this; } public function setDecorator($decorator) { if (!$decorator instanceof Decorator) { $decorator = $this-&gt;getDecoratorManager()-&gt;get($decorator); } $this-&gt;decorator = $decorator; return $this; } public function setPadding($padding) { $this-&gt;padding = max(0, (int) $padding); return $this; } public function getDecoratorManager() { if ($this-&gt;decoratorManager instanceof DecoratorManager) { return $this-&gt;decoratorManager; } $this-&gt;setDecoratorManager(new DecoratorManager()); return $this-&gt;decoratorManager; } public function setDecoratorManager(DecoratorManager $decoratorManager) { $this-&gt;decoratorManager = $decoratorManager; return $this; } public function setDefaultColumnAlign($columnNum, $align) { $this-&gt;defaultColumnAligns[$columnNum] = $align; return $this; } public static function setInputCharset($charset) { static::$inputCharset = strtolower($charset); } public static function getInputCharset() { return static::$inputCharset; } public static function setOutputCharset($charset) { static::$outputCharset = strtolower($charset); } public static function getOutputCharset() { return static::$outputCharset; } public function appendRow($row) { if (!is_array($row) &amp;&amp; !($row instanceof Row)) { throw new Exception\InvalidArgumentException('$row must be an array or instance of Zend\Text\Table\Row'); } if (is_array($row)) { if (count($row) &gt; count($this-&gt;columnWidths)) { throw new Exception\OverflowException('Row contains too many columns'); } $data = $row; $row = new Row(); $colNum = 0; foreach ($data as $columnData) { if (isset($this-&gt;defaultColumnAligns[$colNum])) { $align = $this-&gt;defaultColumnAligns[$colNum]; } else { $align = null; } $row-&gt;appendColumn(new Column($columnData, $align)); $colNum++; } } $this-&gt;rows[] = $row; return $this; } public function render() { if (count($this-&gt;rows) === 0) { throw new Exception\UnexpectedValueException('No rows were added to the table yet'); } $result = ''; $totalNumColumns = count($this-&gt;columnWidths); $hasHorizontal = $this-&gt;decorator-&gt;getHorizontal() !== ''; $numRows = count($this-&gt;rows); foreach ($this-&gt;rows as $rowNum =&gt; $row) { if (isset($columnWidths) === true) { $lastColumnWidths = $columnWidths; } $renderedRow = $row-&gt;render($this-&gt;columnWidths, $this-&gt;decorator, $this-&gt;padding); $columnWidths = $row-&gt;getColumnWidths(); $numColumns = count($columnWidths); if ($rowNum === 0 &amp;&amp; $hasHorizontal) { $result .= $this-&gt;decorator-&gt;getTopLeft(); foreach ($columnWidths as $columnNum =&gt; $columnWidth) { $result .= str_repeat($this-&gt;decorator-&gt;getHorizontal(), $columnWidth); if (($columnNum + 1) === $numColumns) { $result .= $this-&gt;decorator-&gt;getTopRight(); } else { $result .= $this-&gt;decorator-&gt;getHorizontalDown(); } } $result .= "\n"; } else { if (!$hasHorizontal) { $drawSeparator = false; } elseif ($this-&gt;autoSeparate &amp; self::AUTO_SEPARATE_ALL) { $drawSeparator = true; } elseif ($rowNum === 1 &amp;&amp; $this-&gt;autoSeparate &amp; self::AUTO_SEPARATE_HEADER) { $drawSeparator = true; } elseif ($rowNum === ($numRows - 1) &amp;&amp; $this-&gt;autoSeparate &amp; self::AUTO_SEPARATE_FOOTER) { $drawSeparator = true; } else { $drawSeparator = false; } if ($drawSeparator) { $result .= $this-&gt;decorator-&gt;getVerticalRight(); $currentUpperColumn = 0; $currentLowerColumn = 0; $currentUpperWidth = 0; $currentLowerWidth = 0; foreach ($this-&gt;columnWidths as $columnNum =&gt; $columnWidth) { $result .= str_repeat($this-&gt;decorator-&gt;getHorizontal(), $columnWidth); if (($columnNum + 1) === $totalNumColumns) { break; } $connector = 0x0; $currentUpperWidth += $columnWidth; $currentLowerWidth += $columnWidth; if ($lastColumnWidths[$currentUpperColumn] === $currentUpperWidth) { $connector |= 0x1; $currentUpperColumn += 1; $currentUpperWidth = 0; } else { $currentUpperWidth += 1; } if ($columnWidths[$currentLowerColumn] === $currentLowerWidth) { $connector |= 0x2; $currentLowerColumn += 1; $currentLowerWidth = 0; } else { $currentLowerWidth += 1; } switch ($connector) { case 0x0: $result .= $this-&gt;decorator-&gt;getHorizontal(); break; case 0x1: $result .= $this-&gt;decorator-&gt;getHorizontalUp(); break; case 0x2: $result .= $this-&gt;decorator-&gt;getHorizontalDown(); break; case 0x3: $result .= $this-&gt;decorator-&gt;getCross(); break; default: break; } } $result .= $this-&gt;decorator-&gt;getVerticalLeft() . "\n"; } } $result .= $renderedRow; if (($rowNum + 1) === $numRows &amp;&amp; $hasHorizontal) { $result .= $this-&gt;decorator-&gt;getBottomLeft(); foreach ($columnWidths as $columnNum =&gt; $columnWidth) { $result .= str_repeat($this-&gt;decorator-&gt;getHorizontal(), $columnWidth); if (($columnNum + 1) === $numColumns) { $result .= $this-&gt;decorator-&gt;getBottomRight(); } else { $result .= $this-&gt;decorator-&gt;getHorizontalUp(); } } $result .= "\n"; } } return $result; } public function __toString() { try { return $this-&gt;render(); } catch (\Exception $e) { trigger_error($e-&gt;getMessage(), E_USER_ERROR); } } } &lt;?php
 namespace Zend\Text\Table; use Zend\Text\Table\Decorator\DecoratorInterface as Decorator; class Row { protected $columns = array(); protected $columnWidths = null; public function createColumn($content, array $options = null) { $align = null; $colSpan = null; $encoding = null; if ($options !== null) { extract($options, EXTR_IF_EXISTS); } $column = new Column($content, $align, $colSpan, $encoding); $this-&gt;appendColumn($column); return $this; } public function appendColumn(Column $column) { $this-&gt;columns[] = $column; return $this; } public function getColumn($index) { if (!isset($this-&gt;columns[$index])) { return null; } return $this-&gt;columns[$index]; } public function getColumns() { return $this-&gt;columns; } public function getColumnWidths() { if ($this-&gt;columnWidths === null) { throw new Exception\UnexpectedValueException('render() must be called before columnWidths can be populated'); } return $this-&gt;columnWidths; } public function render(array $columnWidths, Decorator $decorator, $padding = 0) { $this-&gt;columnWidths = array(); if (count($this-&gt;columns) === 0) { $this-&gt;appendColumn(new Column(null, null, count($columnWidths))); } $renderedColumns = array(); $maxHeight = 0; $colNum = 0; foreach ($this-&gt;columns as $column) { $colSpan = $column-&gt;getColSpan(); if (($colNum + $colSpan) &gt; count($columnWidths)) { throw new Exception\OverflowException('Too many columns'); } $columnWidth = ($colSpan - 1 + array_sum(array_slice($columnWidths, $colNum, $colSpan))); $result = explode("\n", $column-&gt;render($columnWidth, $padding)); $this-&gt;columnWidths[] = $columnWidth; $renderedColumns[] = $result; $maxHeight = max($maxHeight, count($result)); $colNum += $colSpan; } if ($colNum &lt; count($columnWidths)) { $remainingWidth = (count($columnWidths) - $colNum - 1) + array_sum(array_slice($columnWidths, $colNum)); $renderedColumns[] = array(str_repeat(' ', $remainingWidth)); $this-&gt;columnWidths[] = $remainingWidth; } $result = ''; for ($line = 0; $line &lt; $maxHeight; $line++) { $result .= $decorator-&gt;getVertical(); foreach ($renderedColumns as $index =&gt; $renderedColumn) { if (isset($renderedColumn[$line]) === true) { $result .= $renderedColumn[$line]; } else { $result .= str_repeat(' ', $this-&gt;columnWidths[$index]); } $result .= $decorator-&gt;getVertical(); } $result .= "\n"; } return $result; } } &lt;?php
 namespace Zend\Di; use Closure; use ReflectionClass; class Di implements DependencyInjectionInterface { protected $definitions = null; protected $instanceManager = null; protected $instanceContext = array(); protected $currentDependencies = array(); protected $references = array(); public function __construct(DefinitionList $definitions = null, InstanceManager $instanceManager = null, Config $config = null) { $this-&gt;definitions = ($definitions) ?: new DefinitionList(new Definition\RuntimeDefinition()); $this-&gt;instanceManager = ($instanceManager) ?: new InstanceManager(); if ($config) { $this-&gt;configure($config); } } public function configure(Config $config) { $config-&gt;configure($this); } public function setDefinitionList(DefinitionList $definitions) { $this-&gt;definitions = $definitions; return $this; } public function definitions() { return $this-&gt;definitions; } public function setInstanceManager(InstanceManager $instanceManager) { $this-&gt;instanceManager = $instanceManager; return $this; } public function instanceManager() { return $this-&gt;instanceManager; } protected function getCallParameters($name, array $params, $method = "__construct") { $im = $this-&gt;instanceManager; $class = $im-&gt;hasAlias($name) ? $im-&gt;getClassFromAlias($name) : $name; if ($this-&gt;definitions-&gt;hasClass($class)) { $callParameters = array(); if ($this-&gt;definitions-&gt;hasMethod($class, $method)) { foreach ($this-&gt;definitions-&gt;getMethodParameters($class, $method) as $param) { if (isset($params[$param[0]])) { $callParameters[$param[0]] = $params[$param[0]]; } } } return $callParameters; } return $params; } public function get($name, array $params = array()) { array_push($this-&gt;instanceContext, array('GET', $name, null)); $im = $this-&gt;instanceManager; $callParameters = $this-&gt;getCallParameters($name, $params); if ($callParameters) { $fastHash = $im-&gt;hasSharedInstanceWithParameters($name, $callParameters, true); if ($fastHash) { array_pop($this-&gt;instanceContext); return $im-&gt;getSharedInstanceWithParameters(null, array(), $fastHash); } } if ($im-&gt;hasSharedInstance($name, $callParameters)) { array_pop($this-&gt;instanceContext); return $im-&gt;getSharedInstance($name, $callParameters); } $config = $im-&gt;getConfig($name); $instance = $this-&gt;newInstance($name, $params, $config['shared']); array_pop($this-&gt;instanceContext); return $instance; } public function newInstance($name, array $params = array(), $isShared = true) { $definitions = $this-&gt;definitions; $instanceManager = $this-&gt;instanceManager(); if ($instanceManager-&gt;hasAlias($name)) { $class = $instanceManager-&gt;getClassFromAlias($name); $alias = $name; } else { $class = $name; $alias = null; } array_push($this-&gt;instanceContext, array('NEW', $class, $alias)); if (!$definitions-&gt;hasClass($class)) { $aliasMsg = ($alias) ? '(specified by alias ' . $alias . ') ' : ''; throw new Exception\ClassNotFoundException( 'Class ' . $aliasMsg . $class . ' could not be located in provided definitions.' ); } $instantiator = $definitions-&gt;getInstantiator($class); $injectionMethods = array(); $injectionMethods[$class] = $definitions-&gt;getMethods($class); foreach ($definitions-&gt;getClassSupertypes($class) as $supertype) { $injectionMethods[$supertype] = $definitions-&gt;getMethods($supertype); } if ($instantiator === '__construct') { $instance = $this-&gt;createInstanceViaConstructor($class, $params, $alias); if (array_key_exists('__construct', $injectionMethods)) { unset($injectionMethods['__construct']); } } elseif (is_callable($instantiator, false)) { $instance = $this-&gt;createInstanceViaCallback($instantiator, $params, $alias); } else { if (is_array($instantiator)) { $msg = sprintf( 'Invalid instantiator: %s::%s() is not callable.', isset($instantiator[0]) ? $instantiator[0] : 'NoClassGiven', isset($instantiator[1]) ? $instantiator[1] : 'NoMethodGiven' ); } else { $msg = sprintf( 'Invalid instantiator of type "%s" for "%s".', gettype($instantiator), $name ); } throw new Exception\RuntimeException($msg); } if ($isShared) { if ($callParameters = $this-&gt;getCallParameters($name, $params)) { $this-&gt;instanceManager-&gt;addSharedInstanceWithParameters($instance, $name, $callParameters); } else { $this-&gt;instanceManager-&gt;addSharedInstance($instance, $name); } } $this-&gt;handleInjectDependencies($instance, $injectionMethods, $params, $class, $alias, $name); array_pop($this-&gt;instanceContext); return $instance; } public function injectDependencies($instance, array $params = array()) { $definitions = $this-&gt;definitions(); $class = $this-&gt;getClass($instance); $injectionMethods = array( $class =&gt; ($definitions-&gt;hasClass($class)) ? $definitions-&gt;getMethods($class) : array() ); $parent = $class; while ($parent = get_parent_class($parent)) { if ($definitions-&gt;hasClass($parent)) { $injectionMethods[$parent] = $definitions-&gt;getMethods($parent); } } foreach (class_implements($class) as $interface) { if ($definitions-&gt;hasClass($interface)) { $injectionMethods[$interface] = $definitions-&gt;getMethods($interface); } } $this-&gt;handleInjectDependencies($instance, $injectionMethods, $params, $class, null, null); } protected function handleInjectDependencies($instance, $injectionMethods, $params, $instanceClass, $instanceAlias, $requestedName) { $definitions = $this-&gt;definitions; $instanceManager = $this-&gt;instanceManager(); $calledMethods = array('__construct' =&gt; true); if ($injectionMethods) { foreach ($injectionMethods as $type =&gt; $typeInjectionMethods) { foreach ($typeInjectionMethods as $typeInjectionMethod =&gt; $methodIsRequired) { if (!isset($calledMethods[$typeInjectionMethod])) { if ($this-&gt;resolveAndCallInjectionMethodForInstance($instance, $typeInjectionMethod, $params, $instanceAlias, $methodIsRequired, $type)) { $calledMethods[$typeInjectionMethod] = true; } } } } if ($requestedName) { $instanceConfig = $instanceManager-&gt;getConfig($requestedName); if ($instanceConfig['injections']) { $objectsToInject = $methodsToCall = array(); foreach ($instanceConfig['injections'] as $injectName =&gt; $injectValue) { if (is_int($injectName) &amp;&amp; is_string($injectValue)) { $objectsToInject[] = $this-&gt;get($injectValue, $params); } elseif (is_string($injectName) &amp;&amp; is_array($injectValue)) { if (is_string(key($injectValue))) { $methodsToCall[] = array('method' =&gt; $injectName, 'args' =&gt; $injectValue); } else { foreach ($injectValue as $methodCallArgs) { $methodsToCall[] = array('method' =&gt; $injectName, 'args' =&gt; $methodCallArgs); } } } elseif (is_object($injectValue)) { $objectsToInject[] = $injectValue; } elseif (is_int($injectName) &amp;&amp; is_array($injectValue)) { throw new Exception\RuntimeException( 'An injection was provided with a keyed index and an array of data, try using' . ' the name of a particular method as a key for your injection data.' ); } } if ($objectsToInject) { foreach ($objectsToInject as $objectToInject) { $calledMethods = array('__construct' =&gt; true); foreach ($injectionMethods as $type =&gt; $typeInjectionMethods) { foreach ($typeInjectionMethods as $typeInjectionMethod =&gt; $methodIsRequired) { if (!isset($calledMethods[$typeInjectionMethod])) { $methodParams = $definitions-&gt;getMethodParameters($type, $typeInjectionMethod); if ($methodParams) { foreach ($methodParams as $methodParam) { $objectToInjectClass = $this-&gt;getClass($objectToInject); if ($objectToInjectClass == $methodParam[1] || self::isSubclassOf($objectToInjectClass, $methodParam[1])) { if ($this-&gt;resolveAndCallInjectionMethodForInstance($instance, $typeInjectionMethod, array($methodParam[0] =&gt; $objectToInject), $instanceAlias, true, $type)) { $calledMethods[$typeInjectionMethod] = true; } continue 3; } } } } } } } } if ($methodsToCall) { foreach ($methodsToCall as $methodInfo) { $this-&gt;resolveAndCallInjectionMethodForInstance($instance, $methodInfo['method'], $methodInfo['args'], $instanceAlias, true, $instanceClass); } } } } } } protected function createInstanceViaConstructor($class, $params, $alias = null) { $callParameters = array(); if ($this-&gt;definitions-&gt;hasMethod($class, '__construct')) { $callParameters = $this-&gt;resolveMethodParameters($class, '__construct', $params, $alias, true, true); } switch (count($callParameters)) { case 0: return new $class(); case 1: return new $class($callParameters[0]); case 2: return new $class($callParameters[0], $callParameters[1]); case 3: return new $class($callParameters[0], $callParameters[1], $callParameters[2]); default: $r = new \ReflectionClass($class); return $r-&gt;newInstanceArgs($callParameters); } } protected function createInstanceViaCallback($callback, $params, $alias) { if (!is_callable($callback)) { throw new Exception\InvalidCallbackException('An invalid constructor callback was provided'); } if (is_array($callback)) { $class = (is_object($callback[0])) ? $this-&gt;getClass($callback[0]) : $callback[0]; $method = $callback[1]; } elseif (is_string($callback) &amp;&amp; strpos($callback, '::') !== false) { list($class, $method) = explode('::', $callback, 2); } else { throw new Exception\RuntimeException('Invalid callback type provided to ' . __METHOD__); } $callParameters = array(); if ($this-&gt;definitions-&gt;hasMethod($class, $method)) { $callParameters = $this-&gt;resolveMethodParameters($class, $method, $params, $alias, true, true); } return call_user_func_array($callback, $callParameters); } protected function resolveAndCallInjectionMethodForInstance($instance, $method, $params, $alias, $methodIsRequired, $methodClass = null) { $methodClass = ($methodClass) ?: $this-&gt;getClass($instance); $callParameters = $this-&gt;resolveMethodParameters($methodClass, $method, $params, $alias, $methodIsRequired); if ($callParameters == false) { return false; } if ($callParameters !== array_fill(0, count($callParameters), null)) { call_user_func_array(array($instance, $method), $callParameters); return true; } return false; } protected function resolveMethodParameters($class, $method, array $callTimeUserParams, $alias, $methodIsRequired, $isInstantiator = false) { $resolvedParams = array(); $injectionMethodParameters = $this-&gt;definitions-&gt;getMethodParameters($class, $method); $computedParams = array( 'value' =&gt; array(), 'required' =&gt; array(), 'optional' =&gt; array() ); $iConfig = array(); $aliases = $this-&gt;instanceManager-&gt;getAliases(); if ($alias &amp;&amp; $this-&gt;instanceManager-&gt;hasConfig($alias)) { $iConfig['thisAlias'] = $this-&gt;instanceManager-&gt;getConfig($alias); } if ($this-&gt;instanceManager-&gt;hasConfig($class)) { $iConfig['thisClass'] = $this-&gt;instanceManager-&gt;getConfig($class); } if (isset($this-&gt;instanceContext[0])) { list($requestedClass, $requestedAlias) = ($this-&gt;instanceContext[0][0] == 'NEW') ? array($this-&gt;instanceContext[0][1], $this-&gt;instanceContext[0][2]) : array($this-&gt;instanceContext[1][1], $this-&gt;instanceContext[1][2]); } else { $requestedClass = $requestedAlias = null; } if ($requestedClass != $class &amp;&amp; $this-&gt;instanceManager-&gt;hasConfig($requestedClass)) { $iConfig['requestedClass'] = $this-&gt;instanceManager-&gt;getConfig($requestedClass); if ($requestedAlias) { $iConfig['requestedAlias'] = $this-&gt;instanceManager-&gt;getConfig($requestedAlias); } } foreach ($injectionMethodParameters as $fqParamPos =&gt; $info) { list($name, $type, $isRequired) = $info; $fqParamName = substr_replace($fqParamPos, ':' . $info[0], strrpos($fqParamPos, ':')); if (isset($callTimeUserParams[$fqParamPos]) || isset($callTimeUserParams[$name])) { if (isset($callTimeUserParams[$fqParamPos])) { $callTimeCurValue =&amp; $callTimeUserParams[$fqParamPos]; } elseif (isset($callTimeUserParams[$fqParamName])) { $callTimeCurValue =&amp; $callTimeUserParams[$fqParamName]; } else { $callTimeCurValue =&amp; $callTimeUserParams[$name]; } if ($type !== false &amp;&amp; is_string($callTimeCurValue)) { if ($this-&gt;instanceManager-&gt;hasAlias($callTimeCurValue)) { $computedParams['required'][$fqParamPos] = array( $callTimeUserParams[$name], $this-&gt;instanceManager-&gt;getClassFromAlias($callTimeCurValue) ); } elseif ($this-&gt;definitions-&gt;hasClass($callTimeUserParams[$name])) { $computedParams['required'][$fqParamPos] = array( $callTimeCurValue, $callTimeCurValue ); } else { $computedParams['value'][$fqParamPos] = $callTimeCurValue; } } else { $computedParams['value'][$fqParamPos] = $callTimeCurValue; } unset($callTimeCurValue); continue; } foreach (array('thisAlias', 'thisClass', 'requestedAlias', 'requestedClass') as $thisIndex) { if (isset($iConfig[$thisIndex]['parameters'][$fqParamPos]) || isset($iConfig[$thisIndex]['parameters'][$fqParamName]) || isset($iConfig[$thisIndex]['parameters'][$name])) { if (isset($iConfig[$thisIndex]['parameters'][$fqParamPos])) { $iConfigCurValue =&amp; $iConfig[$thisIndex]['parameters'][$fqParamPos]; } elseif (isset($iConfig[$thisIndex]['parameters'][$fqParamName])) { $iConfigCurValue =&amp; $iConfig[$thisIndex]['parameters'][$fqParamName]; } else { $iConfigCurValue =&amp; $iConfig[$thisIndex]['parameters'][$name]; } if ($type === false &amp;&amp; is_string($iConfigCurValue)) { $computedParams['value'][$fqParamPos] = $iConfigCurValue; } elseif (is_string($iConfigCurValue) &amp;&amp; isset($aliases[$iConfigCurValue])) { $computedParams['required'][$fqParamPos] = array( $iConfig[$thisIndex]['parameters'][$name], $this-&gt;instanceManager-&gt;getClassFromAlias($iConfigCurValue) ); } elseif (is_string($iConfigCurValue) &amp;&amp; $this-&gt;definitions-&gt;hasClass($iConfigCurValue)) { $computedParams['required'][$fqParamPos] = array( $iConfigCurValue, $iConfigCurValue ); } elseif (is_object($iConfigCurValue) &amp;&amp; $iConfigCurValue instanceof Closure &amp;&amp; $type !== 'Closure') { $computedParams['value'][$fqParamPos] = $iConfigCurValue(); } else { $computedParams['value'][$fqParamPos] = $iConfigCurValue; } unset($iConfigCurValue); continue 2; } } if ($alias &amp;&amp; $this-&gt;instanceManager-&gt;hasTypePreferences($alias)) { $pInstances = $this-&gt;instanceManager-&gt;getTypePreferences($alias); foreach ($pInstances as $pInstance) { if (is_object($pInstance)) { $computedParams['value'][$fqParamPos] = $pInstance; continue 2; } $pInstanceClass = ($this-&gt;instanceManager-&gt;hasAlias($pInstance)) ? $this-&gt;instanceManager-&gt;getClassFromAlias($pInstance) : $pInstance; if ($pInstanceClass === $type || self::isSubclassOf($pInstanceClass, $type)) { $computedParams['required'][$fqParamPos] = array($pInstance, $pInstanceClass); continue 2; } } } if ($type &amp;&amp; $this-&gt;instanceManager-&gt;hasTypePreferences($type)) { $pInstances = $this-&gt;instanceManager-&gt;getTypePreferences($type); foreach ($pInstances as $pInstance) { if (is_object($pInstance)) { $computedParams['value'][$fqParamPos] = $pInstance; continue 2; } $pInstanceClass = ($this-&gt;instanceManager-&gt;hasAlias($pInstance)) ? $this-&gt;instanceManager-&gt;getClassFromAlias($pInstance) : $pInstance; if ($pInstanceClass === $type || self::isSubclassOf($pInstanceClass, $type)) { $computedParams['required'][$fqParamPos] = array($pInstance, $pInstanceClass); continue 2; } } } if (!$isRequired) { $computedParams['optional'][$fqParamPos] = true; } if ($type &amp;&amp; $isRequired &amp;&amp; $methodIsRequired) { $computedParams['required'][$fqParamPos] = array($type, $type); } } $index = 0; foreach ($injectionMethodParameters as $fqParamPos =&gt; $value) { $name = $value[0]; if (isset($computedParams['value'][$fqParamPos])) { $resolvedParams[$index] = $computedParams['value'][$fqParamPos]; } elseif (isset($computedParams['required'][$fqParamPos])) { if ($isInstantiator &amp;&amp; in_array($computedParams['required'][$fqParamPos][1], $this-&gt;currentDependencies)) { throw new Exception\CircularDependencyException( "Circular dependency detected: $class depends on {$value[1]} and viceversa" ); } array_push($this-&gt;currentDependencies, $class); $dConfig = $this-&gt;instanceManager-&gt;getConfig($computedParams['required'][$fqParamPos][0]); if ($dConfig['shared'] === false) { $resolvedParams[$index] = $this-&gt;newInstance($computedParams['required'][$fqParamPos][0], $callTimeUserParams, false); } else { $resolvedParams[$index] = $this-&gt;get($computedParams['required'][$fqParamPos][0], $callTimeUserParams); } array_pop($this-&gt;currentDependencies); } elseif (!array_key_exists($fqParamPos, $computedParams['optional'])) { if ($methodIsRequired) { throw new Exception\MissingPropertyException(sprintf( 'Missing %s for parameter ' . $name . ' for ' . $class . '::' . $method, (($value[0] === null) ? 'value' : 'instance/object' ) )); } else { return false; } } else { $resolvedParams[$index] = $value[3]; } $index++; } return $resolvedParams; } protected function getClass($instance) { return get_class($instance); } protected static function isSubclassOf($className, $type) { if (is_subclass_of($className, $type)) { return true; } if (version_compare(PHP_VERSION, '5.3.7', '&gt;=')) { return false; } if (!interface_exists($type)) { return false; } $r = new ReflectionClass($className); return $r-&gt;implementsInterface($type); } } &lt;?php
 namespace Zend\Di; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Di\Definition\ArrayDefinition; use Zend\Di\Definition\RuntimeDefinition; class Config { protected $data = array(); public function __construct($options) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { throw new Exception\InvalidArgumentException( 'Config data must be of type Traversable or an array' ); } $this-&gt;data = $options; } public function configure(Di $di) { if (isset($this-&gt;data['definition'])) { $this-&gt;configureDefinition($di, $this-&gt;data['definition']); } if (isset($this-&gt;data['instance'])) { $this-&gt;configureInstance($di, $this-&gt;data['instance']); } } public function configureDefinition(Di $di, $definition) { foreach ($definition as $definitionType =&gt; $definitionData) { switch ($definitionType) { case 'compiler': foreach ($definitionData as $filename) { if (is_readable($filename)) { $di-&gt;definitions()-&gt;addDefinition(new ArrayDefinition(include $filename), false); } } break; case 'runtime': if (isset($definitionData['enabled']) &amp;&amp; !$definitionData['enabled']) { $definitions = array(); foreach ($di-&gt;definitions() as $definition) { if (!$definition instanceof RuntimeDefinition) { $definitions[] = $definition; } } $definitionList = new DefinitionList($definitions); $di-&gt;setDefinitionList($definitionList); } elseif (isset($definitionData['use_annotations']) &amp;&amp; $definitionData['use_annotations']) { $runtimeDefinition = $di -&gt;definitions() -&gt;getDefinitionByType('\Zend\Di\Definition\RuntimeDefinition'); $runtimeDefinition-&gt;getIntrospectionStrategy()-&gt;setUseAnnotations(true); } break; case 'class': foreach ($definitionData as $className =&gt; $classData) { $classDefinitions = $di-&gt;definitions()-&gt;getDefinitionsByType('Zend\Di\Definition\ClassDefinition'); foreach ($classDefinitions as $classDefinition) { if (!$classDefinition-&gt;hasClass($className)) { unset($classDefinition); } } if (!isset($classDefinition)) { $classDefinition = new Definition\ClassDefinition($className); $di-&gt;definitions()-&gt;addDefinition($classDefinition, false); } foreach ($classData as $classDefKey =&gt; $classDefData) { switch ($classDefKey) { case 'instantiator': $classDefinition-&gt;setInstantiator($classDefData); break; case 'supertypes': $classDefinition-&gt;setSupertypes($classDefData); break; case 'methods': case 'method': foreach ($classDefData as $methodName =&gt; $methodInfo) { if (isset($methodInfo['required'])) { $classDefinition-&gt;addMethod($methodName, $methodInfo['required']); unset($methodInfo['required']); } foreach ($methodInfo as $paramName =&gt; $paramInfo) { $classDefinition-&gt;addMethodParameter($methodName, $paramName, $paramInfo); } } break; default: $methodName = $classDefKey; $methodInfo = $classDefData; if (isset($classDefData['required'])) { $classDefinition-&gt;addMethod($methodName, $methodInfo['required']); unset($methodInfo['required']); } foreach ($methodInfo as $paramName =&gt; $paramInfo) { $classDefinition-&gt;addMethodParameter($methodName, $paramName, $paramInfo); } } } } } } } public function configureInstance(Di $di, $instanceData) { $im = $di-&gt;instanceManager(); foreach ($instanceData as $target =&gt; $data) { switch (strtolower($target)) { case 'aliases': case 'alias': foreach ($data as $n =&gt; $v) { $im-&gt;addAlias($n, $v); } break; case 'preferences': case 'preference': foreach ($data as $n =&gt; $v) { if (is_array($v)) { foreach ($v as $v2) { $im-&gt;addTypePreference($n, $v2); } } else { $im-&gt;addTypePreference($n, $v); } } break; default: foreach ($data as $n =&gt; $v) { switch ($n) { case 'parameters': case 'parameter': $im-&gt;setParameters($target, $v); break; case 'injections': case 'injection': $im-&gt;setInjections($target, $v); break; case 'shared': case 'share': $im-&gt;setShared($target, $v); break; } } } } } } &lt;?php
 namespace Zend\Di; use Closure; class ServiceLocator implements ServiceLocatorInterface { protected $map = array(); protected $services = array(); public function set($name, $service) { $this-&gt;services[$name] = $service; return $this; } public function get($name, array $params = array()) { if (!isset($this-&gt;services[$name])) { if (!isset($this-&gt;map[$name])) { return null; } $method = $this-&gt;map[$name]; return $this-&gt;$method($params); } $service = $this-&gt;services[$name]; if ($service instanceof Closure || (!is_object($service) &amp;&amp; is_callable($service)) ) { $this-&gt;services[$name] = $service = call_user_func_array($service, $params); } return $service; } } &lt;?php
 namespace Zend\Di; interface DependencyInjectionInterface extends LocatorInterface { public function newInstance($name, array $params = array()); } &lt;?php
 namespace Zend\Di\Exception; use DomainException; class MissingPropertyException extends DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Di\Exception; class InvalidCallbackException extends InvalidArgumentException { } &lt;?php
 namespace Zend\Di\Exception; class InvalidParamNameException extends InvalidArgumentException { } &lt;?php
 namespace Zend\Di\Exception; use DomainException; class CircularDependencyException extends DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Di\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Di\Exception; use DomainException; class UndefinedReferenceException extends DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Di\Exception; class InvalidPositionException extends InvalidArgumentException { } &lt;?php
 namespace Zend\Di\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\Di\Exception; use DomainException; class ClassNotFoundException extends DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\Di\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\Di\Definition; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Annotation\Parser\GenericAnnotationParser; class IntrospectionStrategy { protected $useAnnotations = false; protected $methodNameInclusionPatterns = array('/^set[A-Z]{1}\w*/'); protected $interfaceInjectionInclusionPatterns = array('/\w*Aware\w*/'); protected $annotationManager = null; public function __construct(AnnotationManager $annotationManager = null) { $this-&gt;annotationManager = ($annotationManager) ?: $this-&gt;createDefaultAnnotationManager(); } public function getAnnotationManager() { return $this-&gt;annotationManager; } public function createDefaultAnnotationManager() { $annotationManager = new AnnotationManager; $parser = new GenericAnnotationParser(); $parser-&gt;registerAnnotation(new Annotation\Inject()); $annotationManager-&gt;attach($parser); return $annotationManager; } public function setUseAnnotations($useAnnotations) { $this-&gt;useAnnotations = (bool) $useAnnotations; } public function getUseAnnotations() { return $this-&gt;useAnnotations; } public function setMethodNameInclusionPatterns(array $methodNameInclusionPatterns) { $this-&gt;methodNameInclusionPatterns = $methodNameInclusionPatterns; } public function getMethodNameInclusionPatterns() { return $this-&gt;methodNameInclusionPatterns; } public function setInterfaceInjectionInclusionPatterns(array $interfaceInjectionInclusionPatterns) { $this-&gt;interfaceInjectionInclusionPatterns = $interfaceInjectionInclusionPatterns; } public function getInterfaceInjectionInclusionPatterns() { return $this-&gt;interfaceInjectionInclusionPatterns; } } &lt;?php
 namespace Zend\Di\Definition; use Zend\Code\Annotation\AnnotationCollection; use Zend\Code\Reflection; use Zend\Code\Scanner\AggregateDirectoryScanner; use Zend\Code\Scanner\DerivedClassScanner; use Zend\Code\Scanner\DirectoryScanner; use Zend\Code\Scanner\FileScanner; use Zend\Di\Definition\Annotation; class CompilerDefinition implements DefinitionInterface { protected $isCompiled = false; protected $introspectionStrategy = null; protected $allowReflectionExceptions = false; protected $directoryScanner = null; protected $classes = array(); public function __construct(IntrospectionStrategy $introspectionStrategy = null) { $this-&gt;introspectionStrategy = ($introspectionStrategy) ?: new IntrospectionStrategy(); $this-&gt;directoryScanner = new AggregateDirectoryScanner(); } public function setIntrospectionStrategy(IntrospectionStrategy $introspectionStrategy) { $this-&gt;introspectionStrategy = $introspectionStrategy; } public function setAllowReflectionExceptions($allowReflectionExceptions = true) { $this-&gt;allowReflectionExceptions = (bool) $allowReflectionExceptions; } public function getIntrospectionStrategy() { return $this-&gt;introspectionStrategy; } public function addDirectory($directory) { $this-&gt;addDirectoryScanner(new DirectoryScanner($directory)); } public function addDirectoryScanner(DirectoryScanner $directoryScanner) { $this-&gt;directoryScanner-&gt;addDirectoryScanner($directoryScanner); } public function addCodeScannerFile(FileScanner $fileScanner) { if ($this-&gt;directoryScanner == null) { $this-&gt;directoryScanner = new DirectoryScanner(); } $this-&gt;directoryScanner-&gt;addFileScanner($fileScanner); } public function compile() { foreach ($this-&gt;directoryScanner-&gt;getClassNames() as $class) { $this-&gt;processClass($class); } } public function toArrayDefinition() { return new ArrayDefinition( $this-&gt;classes ); } protected function processClass($class) { $strategy = $this-&gt;introspectionStrategy; try { $rClass = new Reflection\ClassReflection($class); } catch (\ReflectionException $e) { if (!$this-&gt;allowReflectionExceptions) { throw $e; } return; } $className = $rClass-&gt;getName(); $matches = null; $this-&gt;classes[$className] = array( 'supertypes' =&gt; array(), 'instantiator' =&gt; null, 'methods' =&gt; array(), 'parameters' =&gt; array() ); $def = &amp;$this-&gt;classes[$className]; if ($strategy-&gt;getUseAnnotations() == true) { $annotations = $rClass-&gt;getAnnotations($strategy-&gt;getAnnotationManager()); if (($annotations instanceof AnnotationCollection) &amp;&amp; $annotations-&gt;hasAnnotation('Zend\Di\Definition\Annotation\Instantiator') ) { } } $rTarget = $rClass; $supertypes = array(); do { $supertypes = array_merge($supertypes, $rTarget-&gt;getInterfaceNames()); if (!($rTargetParent = $rTarget-&gt;getParentClass())) { break; } $supertypes[] = $rTargetParent-&gt;getName(); $rTarget = $rTargetParent; } while (true); $def['supertypes'] = $supertypes; if ($def['instantiator'] == null) { if ($rClass-&gt;isInstantiable()) { $def['instantiator'] = '__construct'; } } if ($rClass-&gt;hasMethod('__construct')) { $def['methods']['__construct'] = true; try { $this-&gt;processParams($def, $rClass, $rClass-&gt;getMethod('__construct')); } catch (\ReflectionException $e) { if (!$this-&gt;allowReflectionExceptions) { throw $e; } return; } } foreach ($rClass-&gt;getMethods(Reflection\MethodReflection::IS_PUBLIC) as $rMethod) { $methodName = $rMethod-&gt;getName(); if ($rMethod-&gt;getName() === '__construct' || $rMethod-&gt;isStatic()) { continue; } if ($strategy-&gt;getUseAnnotations() == true) { $annotations = $rMethod-&gt;getAnnotations($strategy-&gt;getAnnotationManager()); if (($annotations instanceof AnnotationCollection) &amp;&amp; $annotations-&gt;hasAnnotation('Zend\Di\Definition\Annotation\Inject') ) { $def['methods'][$methodName] = true; $this-&gt;processParams($def, $rClass, $rMethod); continue; } } $methodPatterns = $this-&gt;introspectionStrategy-&gt;getMethodNameInclusionPatterns(); foreach ($methodPatterns as $methodInjectorPattern) { preg_match($methodInjectorPattern, $methodName, $matches); if ($matches) { $def['methods'][$methodName] = false; $this-&gt;processParams($def, $rClass, $rMethod); continue 2; } } } $interfaceInjectorPatterns = $this-&gt;introspectionStrategy-&gt;getInterfaceInjectionInclusionPatterns(); foreach ($rClass-&gt;getInterfaces() as $rIface) { foreach ($interfaceInjectorPatterns as $interfaceInjectorPattern) { preg_match($interfaceInjectorPattern, $rIface-&gt;getName(), $matches); if ($matches) { foreach ($rIface-&gt;getMethods() as $rMethod) { if ($rMethod-&gt;getName() === '__construct') { continue; } $def['methods'][$rMethod-&gt;getName()] = true; $this-&gt;processParams($def, $rClass, $rMethod); } continue 2; } } } } protected function processParams(&amp;$def, Reflection\ClassReflection $rClass, Reflection\MethodReflection $rMethod) { if (count($rMethod-&gt;getParameters()) === 0) { return; } $methodName = $rMethod-&gt;getName(); $def['parameters'][$methodName] = array(); foreach ($rMethod-&gt;getParameters() as $p) { $actualParamName = $p-&gt;getName(); $fqName = $rClass-&gt;getName() . '::' . $rMethod-&gt;getName() . ':' . $p-&gt;getPosition(); $def['parameters'][$methodName][$fqName] = array(); $def['parameters'][$methodName][$fqName][] = $actualParamName; $def['parameters'][$methodName][$fqName][] = ($p-&gt;getClass() !== null) ? $p-&gt;getClass()-&gt;getName() : null; $def['parameters'][$methodName][$fqName][] = !($optional =$p-&gt;isOptional()); $def['parameters'][$methodName][$fqName][] = $optional &amp;&amp; $p-&gt;isDefaultValueAvailable() ? $p-&gt;getDefaultValue() : null; } } public function getClasses() { return array_keys($this-&gt;classes); } public function hasClass($class) { return (array_key_exists($class, $this-&gt;classes)); } public function getClassSupertypes($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['supertypes']; } public function getInstantiator($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['instantiator']; } public function hasMethods($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return (count($this-&gt;classes[$class]['methods']) &gt; 0); } public function hasMethod($class, $method) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return isset($this-&gt;classes[$class]['methods'][$method]); } public function getMethods($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['methods']; } public function hasMethodParameters($class, $method) { if (!isset($this-&gt;classes[$class])) { return false; } return (array_key_exists($method, $this-&gt;classes[$class])); } public function getMethodParameters($class, $method) { if (!is_array($this-&gt;classes[$class])) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['parameters'][$method]; } } &lt;?php
 namespace Zend\Di\Definition; interface PartialMarker { } &lt;?php
 namespace Zend\Di\Definition\Builder; class PhpClass { protected $defaultMethodBuilder = 'Zend\Di\Definition\Builder\InjectionMethod'; protected $name = null; protected $instantiator = '__construct'; protected $injectionMethods = array(); protected $superTypes = array(); public function setName($name) { $this-&gt;name = $name; return $this; } public function getName() { return $this-&gt;name; } public function setInstantiator($instantiator) { $this-&gt;instantiator = $instantiator; return $this; } public function getInstantiator() { return $this-&gt;instantiator; } public function addSuperType($superType) { $this-&gt;superTypes[] = $superType; return $this; } public function getSuperTypes() { return $this-&gt;superTypes; } public function addInjectionMethod(InjectionMethod $injectionMethod) { $this-&gt;injectionMethods[] = $injectionMethod; return $this; } public function createInjectionMethod($name = null) { $builder = $this-&gt;defaultMethodBuilder; $method = new $builder(); if (null !== $name) { $method-&gt;setName($name); } $this-&gt;addInjectionMethod($method); return $method; } public function setMethodBuilder($class) { $this-&gt;defaultMethodBuilder = $class; return $this; } public function getMethodBuilder() { return $this-&gt;defaultMethodBuilder; } public function getInjectionMethods() { return $this-&gt;injectionMethods; } } &lt;?php
 namespace Zend\Di\Definition\Builder; class InjectionMethod { protected $name = null; protected $parameters = array(); public function setName($name) { $this-&gt;name = $name; return $this; } public function getName() { return $this-&gt;name; } public function addParameter($name, $class = null, $isRequired = null, $default = null) { $this-&gt;parameters[] = array( $name, $class, ($isRequired == null) ? true : false, $default, ); return $this; } public function getParameters() { return $this-&gt;parameters; } } &lt;?php
 namespace Zend\Di\Definition; class ArrayDefinition implements DefinitionInterface { protected $dataArray = array(); public function __construct(array $dataArray) { foreach ($dataArray as $class =&gt; $value) { $dataArray[$class] = array_change_key_case($dataArray[$class], CASE_LOWER); } $this-&gt;dataArray = $dataArray; } public function getClasses() { return array_keys($this-&gt;dataArray); } public function hasClass($class) { return array_key_exists($class, $this-&gt;dataArray); } public function getClassSupertypes($class) { if (!isset($this-&gt;dataArray[$class])) { return array(); } if (!isset($this-&gt;dataArray[$class]['supertypes'])) { return array(); } return $this-&gt;dataArray[$class]['supertypes']; } public function getInstantiator($class) { if (!isset($this-&gt;dataArray[$class])) { return null; } if (!isset($this-&gt;dataArray[$class]['instantiator'])) { return '__construct'; } return $this-&gt;dataArray[$class]['instantiator']; } public function hasMethods($class) { if (!isset($this-&gt;dataArray[$class])) { return false; } if (!isset($this-&gt;dataArray[$class]['methods'])) { return false; } return (count($this-&gt;dataArray[$class]['methods']) &gt; 0); } public function hasMethod($class, $method) { if (!isset($this-&gt;dataArray[$class])) { return false; } if (!isset($this-&gt;dataArray[$class]['methods'])) { return false; } return array_key_exists($method, $this-&gt;dataArray[$class]['methods']); } public function getMethods($class) { if (!isset($this-&gt;dataArray[$class])) { return array(); } if (!isset($this-&gt;dataArray[$class]['methods'])) { return array(); } return $this-&gt;dataArray[$class]['methods']; } public function hasMethodParameters($class, $method) { return isset($this-&gt;dataArray[$class]['parameters'][$method]); } public function getMethodParameters($class, $method) { if (!isset($this-&gt;dataArray[$class])) { return array(); } if (!isset($this-&gt;dataArray[$class]['parameters'])) { return array(); } if (!isset($this-&gt;dataArray[$class]['parameters'][$method])) { return array(); } return $this-&gt;dataArray[$class]['parameters'][$method]; } public function toArray() { return $this-&gt;dataArray; } } &lt;?php
 namespace Zend\Di\Definition; interface DefinitionInterface { public function getClasses(); public function hasClass($class); public function getClassSupertypes($class); public function getInstantiator($class); public function hasMethods($class); public function getMethods($class); public function hasMethod($class, $method); public function hasMethodParameters($class, $method); public function getMethodParameters($class, $method); } &lt;?php
 namespace Zend\Di\Definition\Annotation; use Zend\Code\Annotation\AnnotationInterface; class Inject implements AnnotationInterface { protected $content = null; public function initialize($content) { $this-&gt;content = $content; } } &lt;?php
 namespace Zend\Di\Definition\Annotation; use Zend\Code\Annotation\AnnotationInterface; class Instantiator implements AnnotationInterface { protected $content = null; public function initialize($content) { $this-&gt;content = $content; } } &lt;?php
 namespace Zend\Di\Definition; use Zend\Di\Exception; class BuilderDefinition implements DefinitionInterface { protected $defaultClassBuilder = 'Zend\Di\Definition\Builder\PhpClass'; protected $classes = array(); public function createClassesFromArray(array $builderData) { foreach ($builderData as $className =&gt; $classInfo) { $class = new Builder\PhpClass(); $class-&gt;setName($className); foreach ($classInfo as $type =&gt; $typeData) { switch (strtolower($type)) { case 'supertypes': foreach ($typeData as $superType) { $class-&gt;addSuperType($superType); } break; case 'instantiator': $class-&gt;setInstantiator($typeData); break; case 'methods': case 'method': foreach ($typeData as $injectionMethodName =&gt; $injectionMethodData) { $injectionMethod = new Builder\InjectionMethod(); $injectionMethod-&gt;setName($injectionMethodName); foreach ($injectionMethodData as $parameterName =&gt; $parameterType) { $parameterType = ($parameterType) ?: null; $injectionMethod-&gt;addParameter($parameterName, $parameterType); } $class-&gt;addInjectionMethod($injectionMethod); } break; } } $this-&gt;addClass($class); } } public function addClass(Builder\PhpClass $phpClass) { $this-&gt;classes[] = $phpClass; return $this; } public function createClass($name = null) { $builderClass = $this-&gt;defaultClassBuilder; $class = new $builderClass(); if (null !== $name) { $class-&gt;setName($name); } $this-&gt;addClass($class); return $class; } public function setClassBuilder($class) { $this-&gt;defaultClassBuilder = $class; return $this; } public function getClassBuilder() { return $this-&gt;defaultClassBuilder; } public function getClasses() { $classNames = array(); foreach ($this-&gt;classes as $class) { $classNames[] = $class-&gt;getName(); } return $classNames; } public function hasClass($class) { foreach ($this-&gt;classes as $classObj) { if ($classObj-&gt;getName() === $class) { return true; } } return false; } protected function getClass($name) { foreach ($this-&gt;classes as $classObj) { if ($classObj-&gt;getName() === $name) { return $classObj; } } return false; } public function getClassSupertypes($class) { $class = $this-&gt;getClass($class); if ($class === false) { throw new Exception\RuntimeException('Cannot find class object in this builder definition.'); } return $class-&gt;getSuperTypes(); } public function getInstantiator($class) { $class = $this-&gt;getClass($class); if ($class === false) { throw new Exception\RuntimeException('Cannot find class object in this builder definition.'); } return $class-&gt;getInstantiator(); } public function hasMethods($class) { $class = $this-&gt;getClass($class); if ($class === false) { throw new Exception\RuntimeException('Cannot find class object in this builder definition.'); } return (count($class-&gt;getInjectionMethods()) &gt; 0); } public function getMethods($class) { $class = $this-&gt;getClass($class); if ($class === false) { throw new Exception\RuntimeException('Cannot find class object in this builder definition.'); } $methods = $class-&gt;getInjectionMethods(); $methodNames = array(); foreach ($methods as $methodObj) { $methodNames[] = $methodObj-&gt;getName(); } return $methodNames; } public function hasMethod($class, $method) { $class = $this-&gt;getClass($class); if ($class === false) { throw new Exception\RuntimeException('Cannot find class object in this builder definition.'); } $methods = $class-&gt;getInjectionMethods(); foreach ($methods as $methodObj) { if ($methodObj-&gt;getName() === $method) { return true; } } return false; } public function hasMethodParameters($class, $method) { $class = $this-&gt;getClass($class); if ($class === false) { return false; } $methods = $class-&gt;getInjectionMethods(); foreach ($methods as $methodObj) { if ($methodObj-&gt;getName() === $method) { $method = $methodObj; } } if (!$method instanceof Builder\InjectionMethod) { return false; } return (count($method-&gt;getParameters()) &gt; 0); } public function getMethodParameters($class, $method) { $class = $this-&gt;getClass($class); if ($class === false) { throw new Exception\RuntimeException('Cannot find class object in this builder definition.'); } $methods = $class-&gt;getInjectionMethods(); foreach ($methods as $methodObj) { if ($methodObj-&gt;getName() === $method) { $method = $methodObj; } } if (!$method instanceof Builder\InjectionMethod) { throw new Exception\RuntimeException('Cannot find method object for method ' . $method . ' in this builder definition.'); } $methodParameters = array(); foreach ($method-&gt;getParameters() as $name =&gt; $info) { $methodParameters[$class-&gt;getName() . '::' . $method-&gt;getName() . ':' . $name] = $info; } return $methodParameters; } } &lt;?php
 namespace Zend\Di\Definition; use Zend\Code\Annotation\AnnotationCollection; use Zend\Code\Reflection; use Zend\Di\Definition\Annotation; class RuntimeDefinition implements DefinitionInterface { protected $classes = array(); protected $explicitLookups = false; protected $introspectionStrategy = null; protected $injectionMethods = array(); public function __construct(IntrospectionStrategy $introspectionStrategy = null, array $explicitClasses = null) { $this-&gt;introspectionStrategy = ($introspectionStrategy) ?: new IntrospectionStrategy(); if ($explicitClasses) { $this-&gt;setExplicitClasses($explicitClasses); } } public function setIntrospectionStrategy(IntrospectionStrategy $introspectionStrategy) { $this-&gt;introspectionStrategy = $introspectionStrategy; } public function getIntrospectionStrategy() { return $this-&gt;introspectionStrategy; } public function setExplicitClasses(array $explicitClasses) { $this-&gt;explicitLookups = true; foreach ($explicitClasses as $eClass) { $this-&gt;classes[$eClass] = true; } $this-&gt;classes = $explicitClasses; } public function forceLoadClass($class) { $this-&gt;processClass($class); } public function getClasses() { return array_keys($this-&gt;classes); } public function hasClass($class) { if ($this-&gt;explicitLookups === true) { return (array_key_exists($class, $this-&gt;classes)); } return class_exists($class) || interface_exists($class); } public function getClassSupertypes($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['supertypes']; } public function getInstantiator($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['instantiator']; } public function hasMethods($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return (count($this-&gt;classes[$class]['methods']) &gt; 0); } public function hasMethod($class, $method) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return isset($this-&gt;classes[$class]['methods'][$method]); } public function getMethods($class) { if (!array_key_exists($class, $this-&gt;classes)) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['methods']; } public function hasMethodParameters($class, $method) { if (!isset($this-&gt;classes[$class])) { return false; } return (array_key_exists($method, $this-&gt;classes[$class]['parameters'])); } public function getMethodParameters($class, $method) { if (!is_array($this-&gt;classes[$class])) { $this-&gt;processClass($class); } return $this-&gt;classes[$class]['parameters'][$method]; } protected function processClass($class) { $strategy = $this-&gt;introspectionStrategy; $rClass = new Reflection\ClassReflection($class); $className = $rClass-&gt;getName(); $matches = null; $this-&gt;classes[$className] = array( 'supertypes' =&gt; array(), 'instantiator' =&gt; null, 'methods' =&gt; array(), 'parameters' =&gt; array() ); $def = &amp;$this-&gt;classes[$className]; if ($strategy-&gt;getUseAnnotations() == true) { $annotations = $rClass-&gt;getAnnotations($strategy-&gt;getAnnotationManager()); if (($annotations instanceof AnnotationCollection) &amp;&amp; $annotations-&gt;hasAnnotation('Zend\Di\Definition\Annotation\Instantiator')) { } } $rTarget = $rClass; $supertypes = array(); do { $supertypes = array_merge($supertypes, $rTarget-&gt;getInterfaceNames()); if (!($rTargetParent = $rTarget-&gt;getParentClass())) { break; } $supertypes[] = $rTargetParent-&gt;getName(); $rTarget = $rTargetParent; } while (true); $def['supertypes'] = $supertypes; if ($def['instantiator'] == null) { if ($rClass-&gt;isInstantiable()) { $def['instantiator'] = '__construct'; } } if ($rClass-&gt;hasMethod('__construct')) { $def['methods']['__construct'] = true; $this-&gt;processParams($def, $rClass, $rClass-&gt;getMethod('__construct')); } foreach ($rClass-&gt;getMethods(Reflection\MethodReflection::IS_PUBLIC) as $rMethod) { $methodName = $rMethod-&gt;getName(); if ($rMethod-&gt;getName() === '__construct' || $rMethod-&gt;isStatic()) { continue; } if ($strategy-&gt;getUseAnnotations() == true) { $annotations = $rMethod-&gt;getAnnotations($strategy-&gt;getAnnotationManager()); if (($annotations instanceof AnnotationCollection) &amp;&amp; $annotations-&gt;hasAnnotation('Zend\Di\Definition\Annotation\Inject')) { $def['methods'][$methodName] = true; $this-&gt;processParams($def, $rClass, $rMethod); continue; } } $methodPatterns = $this-&gt;introspectionStrategy-&gt;getMethodNameInclusionPatterns(); foreach ($methodPatterns as $methodInjectorPattern) { preg_match($methodInjectorPattern, $methodName, $matches); if ($matches) { $def['methods'][$methodName] = false; $this-&gt;processParams($def, $rClass, $rMethod); continue 2; } } } $interfaceInjectorPatterns = $this-&gt;introspectionStrategy-&gt;getInterfaceInjectionInclusionPatterns(); foreach ($rClass-&gt;getInterfaces() as $rIface) { foreach ($interfaceInjectorPatterns as $interfaceInjectorPattern) { preg_match($interfaceInjectorPattern, $rIface-&gt;getName(), $matches); if ($matches) { foreach ($rIface-&gt;getMethods() as $rMethod) { if ($rMethod-&gt;getName() === '__construct') { continue; } $def['methods'][$rMethod-&gt;getName()] = true; $this-&gt;processParams($def, $rClass, $rMethod); } continue 2; } } } } protected function processParams(&amp;$def, Reflection\ClassReflection $rClass, Reflection\MethodReflection $rMethod) { if (count($rMethod-&gt;getParameters()) === 0) { return; } $methodName = $rMethod-&gt;getName(); $def['parameters'][$methodName] = array(); foreach ($rMethod-&gt;getParameters() as $p) { $actualParamName = $p-&gt;getName(); $fqName = $rClass-&gt;getName() . '::' . $rMethod-&gt;getName() . ':' . $p-&gt;getPosition(); $def['parameters'][$methodName][$fqName] = array(); $def['parameters'][$methodName][$fqName][] = $actualParamName; $def['parameters'][$methodName][$fqName][] = ($p-&gt;getClass() !== null) ? $p-&gt;getClass()-&gt;getName() : null; $def['parameters'][$methodName][$fqName][] = !($optional = $p-&gt;isOptional() &amp;&amp; $p-&gt;isDefaultValueAvailable()); $def['parameters'][$methodName][$fqName][] = $optional ? $p-&gt;getDefaultValue() : null; } } } &lt;?php
 namespace Zend\Di\Definition; class ClassDefinition implements DefinitionInterface, PartialMarker { protected $class = null; protected $supertypes = array(); protected $instantiator = null; protected $methods = array(); protected $methodParameters = array(); public function __construct($class) { $this-&gt;class = $class; } public function setInstantiator($instantiator) { $this-&gt;instantiator = $instantiator; return $this; } public function setSupertypes(array $supertypes) { $this-&gt;supertypes = $supertypes; return $this; } public function addMethod($method, $isRequired = null) { if ($isRequired === null) { $isRequired = ($method === '__construct') ? true : false; } $this-&gt;methods[$method] = (bool) $isRequired; return $this; } public function addMethodParameter($method, $parameterName, array $parameterInfo) { if (!array_key_exists($method, $this-&gt;methods)) { $this-&gt;methods[$method] = ($method === '__construct') ? true : false; } if (!array_key_exists($method, $this-&gt;methodParameters)) { $this-&gt;methodParameters[$method] = array(); } $type = (isset($parameterInfo['type'])) ? $parameterInfo['type'] : null; $required = (isset($parameterInfo['required'])) ? (bool) $parameterInfo['required'] : false; $default = (isset($parameterInfo['default'])) ? $parameterInfo['default'] : null; $fqName = $this-&gt;class . '::' . $method . ':' . $parameterName; $this-&gt;methodParameters[$method][$fqName] = array( $parameterName, $type, $required, $default ); return $this; } public function getClasses() { return array($this-&gt;class); } public function hasClass($class) { return ($class === $this-&gt;class); } public function getClassSupertypes($class) { if ($this-&gt;class !== $class) { return array(); } return $this-&gt;supertypes; } public function getInstantiator($class) { if ($this-&gt;class !== $class) { return null; } return $this-&gt;instantiator; } public function hasMethods($class) { return (count($this-&gt;methods) &gt; 0); } public function getMethods($class) { if ($this-&gt;class !== $class) { return array(); } return $this-&gt;methods; } public function hasMethod($class, $method) { if ($this-&gt;class !== $class) { return null; } if (is_array($this-&gt;methods)) { return array_key_exists($method, $this-&gt;methods); } return null; } public function hasMethodParameters($class, $method) { if ($this-&gt;class !== $class) { return false; } return (array_key_exists($method, $this-&gt;methodParameters)); } public function getMethodParameters($class, $method) { if ($this-&gt;class !== $class) { return null; } if (array_key_exists($method, $this-&gt;methodParameters)) { return $this-&gt;methodParameters[$method]; } return null; } } &lt;?php
 namespace Zend\Di; interface ServiceLocatorInterface extends LocatorInterface { public function set($name, $service); } &lt;?php
 namespace Zend\Di; use SplDoublyLinkedList; class DefinitionList extends SplDoublyLinkedList implements Definition\DefinitionInterface { public function __construct($definitions) { if (!is_array($definitions)) { $definitions = array($definitions); } foreach ($definitions as $definition) { $this-&gt;push($definition); } } public function addDefinition(Definition\DefinitionInterface $definition, $addToBackOfList = true) { if ($addToBackOfList) { $this-&gt;push($definition); } else { $this-&gt;unshift($definition); } } public function getDefinitionsByType($type) { $definitions = array(); foreach ($this as $definition) { if ($definition instanceof $type) { $definitions[] = $definition; } } return $definitions; } public function getDefinitionByType($type) { foreach ($this as $definition) { if ($definition instanceof $type) { return $definition; } } return false; } public function getDefinitionForClass($class) { foreach ($this as $definition) { if ($definition-&gt;hasClass($class)) { return $definition; } } return false; } public function forClass($class) { return $this-&gt;getDefinitionForClass($class); } public function getClasses() { $classes = array(); foreach ($this as $definition) { $classes = array_merge($classes, $definition-&gt;getClasses()); } return $classes; } public function hasClass($class) { foreach ($this as $definition) { if ($definition-&gt;hasClass($class)) { return true; } } return false; } public function getClassSupertypes($class) { $supertypes = array(); foreach ($this as $definition) { if ($definition-&gt;hasClass($class)) { $supertypes = array_merge($supertypes, $definition-&gt;getClassSupertypes($class)); if ($definition instanceof Definition\PartialMarker) { continue; } return $supertypes; } } return $supertypes; } public function getInstantiator($class) { foreach ($this as $definition) { if ($definition-&gt;hasClass($class)) { $value = $definition-&gt;getInstantiator($class); if ($value === null &amp;&amp; $definition instanceof Definition\PartialMarker) { continue; } return $value; } } return false; } public function hasMethods($class) { foreach ($this as $definition) { if ($definition-&gt;hasClass($class)) { if ($definition-&gt;hasMethods($class) === false &amp;&amp; $definition instanceof Definition\PartialMarker) { continue; } return $definition-&gt;hasMethods($class); } } return false; } public function hasMethod($class, $method) { if (!$this-&gt;hasMethods($class)) { return false; } foreach ($this as $definition) { if ($definition-&gt;hasMethod($class, $method)) { return true; } } return false; } public function getMethods($class) { $methods = array(); foreach ($this as $definition) { if ($definition-&gt;hasClass($class)) { if (!$definition instanceof Definition\PartialMarker) { return array_merge($definition-&gt;getMethods($class), $methods); } $methods = array_merge($definition-&gt;getMethods($class), $methods); } } return $methods; } public function hasMethodParameters($class, $method) { $methodParameters = $this-&gt;getMethodParameters($class, $method); return ($methodParameters !== array()); } public function getMethodParameters($class, $method) { foreach ($this as $definition) { if ($definition-&gt;hasClass($class) &amp;&amp; $definition-&gt;hasMethod($class, $method) &amp;&amp; $definition-&gt;hasMethodParameters($class, $method)) { return $definition-&gt;getMethodParameters($class, $method); } } return array(); } } &lt;?php
 namespace Zend\Di\ServiceLocator; use Zend\Di\Di; use Zend\Di\Exception; class DependencyInjectorProxy extends Di { protected $di; public function __construct(Di $di) { $this-&gt;di = $di; $this-&gt;definitions = $di-&gt;definitions(); $this-&gt;instanceManager = $di-&gt;instanceManager(); } public function get($name, array $params = array()) { return parent::get($name, $params); } public function newInstance($name, array $params = array(), $isShared = true) { $instance = parent::newInstance($name, $params, $isShared); if ($instance instanceof GeneratorInstance) { $instance-&gt;setShared($isShared); if (null === $instance-&gt;getName()) { $instance-&gt;setAlias($name); } } return $instance; } public function createInstanceViaConstructor($class, $params, $alias = null) { $callParameters = array(); if ($this-&gt;di-&gt;definitions-&gt;hasMethod($class, '__construct') &amp;&amp; (count($this-&gt;di-&gt;definitions-&gt;getMethodParameters($class, '__construct')) &gt; 0) ) { $callParameters = $this-&gt;resolveMethodParameters($class, '__construct', $params, $alias, true, true); $callParameters = $callParameters ?: array(); } return new GeneratorInstance($class, $alias, '__construct', $callParameters); } public function createInstanceViaCallback($callback, $params, $alias) { if (is_string($callback)) { $callback = explode('::', $callback); } if (!is_callable($callback)) { throw new Exception\InvalidCallbackException('An invalid constructor callback was provided'); } if (!is_array($callback) || is_object($callback[0])) { throw new Exception\InvalidCallbackException( 'For purposes of service locator generation, constructor callbacks must refer to static methods only' ); } $class = $callback[0]; $method = $callback[1]; $callParameters = array(); if ($this-&gt;di-&gt;definitions-&gt;hasMethod($class, $method)) { $callParameters = $this-&gt;resolveMethodParameters($class, $method, $params, $alias, true, true); } $callParameters = $callParameters ?: array(); return new GeneratorInstance(null, $alias, $callback, $callParameters); } public function handleInjectionMethodForObject($class, $method, $params, $alias, $isRequired) { return array( 'method' =&gt; $method, 'params' =&gt; $this-&gt;resolveMethodParameters($class, $method, $params, $alias, $isRequired), ); } protected function resolveAndCallInjectionMethodForInstance($instance, $method, $params, $alias, $methodIsRequired, $methodClass = null) { if (!$instance instanceof GeneratorInstance) { return parent::resolveAndCallInjectionMethodForInstance($instance, $method, $params, $alias, $methodIsRequired, $methodClass); } $methodClass = $instance-&gt;getClass(); $callParameters = $this-&gt;resolveMethodParameters($methodClass, $method, $params, $alias, $methodIsRequired); if ($callParameters !== false) { $instance-&gt;addMethod(array( 'method' =&gt; $method, 'params' =&gt; $callParameters, )); return true; } return false; } protected function getClass($instance) { if ($instance instanceof GeneratorInstance) { return $instance-&gt;getClass(); } return parent::getClass($instance); } } &lt;?php
 namespace Zend\Di\ServiceLocator; class GeneratorInstance { protected $class; protected $alias; protected $constructor; protected $params; protected $methods = array(); protected $shared = true; public function __construct($class, $alias, $constructor, array $params) { $this-&gt;class = $class; $this-&gt;alias = $alias; $this-&gt;constructor = $constructor; $this-&gt;params = $params; } public function getName() { return $this-&gt;alias ? $this-&gt;alias : $this-&gt;class; } public function getClass() { return $this-&gt;class; } public function getAlias() { return $this-&gt;alias; } public function setClass($class) { $this-&gt;class = $class; return $this; } public function setAlias($alias) { $this-&gt;alias = $alias; return $this; } public function getConstructor() { return $this-&gt;constructor; } public function getParams() { return $this-&gt;params; } public function setMethods(array $methods) { $this-&gt;methods = $methods; return $this; } public function addMethod($method) { $this-&gt;methods[] = $method; return $this; } public function getMethods() { return $this-&gt;methods; } public function setShared($shared) { $this-&gt;shared = (bool) $shared; } public function isShared() { return $this-&gt;shared; } } &lt;?php
 namespace Zend\Di\ServiceLocator; use Zend\Code\Generator\ClassGenerator; use Zend\Code\Generator\FileGenerator; use Zend\Code\Generator\MethodGenerator; use Zend\Code\Generator\ParameterGenerator; use Zend\Di\Di; use Zend\Di\Exception; class Generator { protected $containerClass = 'ApplicationContext'; protected $injector; protected $namespace; public function __construct(Di $injector) { $this-&gt;injector = new DependencyInjectorProxy($injector); } public function setContainerClass($name) { $this-&gt;containerClass = $name; return $this; } public function setNamespace($namespace) { $this-&gt;namespace = $namespace; return $this; } public function getCodeGenerator($filename = null) { $injector = $this-&gt;injector; $im = $injector-&gt;instanceManager(); $indent = '    '; $aliases = $this-&gt;reduceAliases($im-&gt;getAliases()); $caseStatements = array(); $getters = array(); $definitions = $injector-&gt;definitions(); $fetched = array_unique(array_merge($definitions-&gt;getClasses(), $im-&gt;getAliases())); foreach ($fetched as $name) { $getter = $this-&gt;normalizeAlias($name); $meta = $injector-&gt;get($name); $params = $meta-&gt;getParams(); foreach ($params as $key =&gt; $param) { if (null === $param || is_scalar($param) || is_array($param)) { $string = var_export($param, 1); if (strstr($string, '::__set_state(')) { throw new Exception\RuntimeException('Arguments in definitions may not contain objects'); } $params[$key] = $string; } elseif ($param instanceof GeneratorInstance) { $params[$key] = sprintf('$this-&gt;%s()', $this-&gt;normalizeAlias($param-&gt;getName())); } else { $message = sprintf('Unable to use object arguments when building containers. Encountered with "%s", parameter of type "%s"', $name, get_class($param)); throw new Exception\RuntimeException($message); } } $reverseParams = array_reverse($params, true); foreach ($reverseParams as $key =&gt; $param) { if ('NULL' === $param) { unset($params[$key]); continue; } break; } $constructor = $meta-&gt;getConstructor(); if ('__construct' != $constructor) { $callback = var_export($constructor, 1); if (strstr($callback, '::__set_state(')) { throw new Exception\RuntimeException('Unable to build containers that use callbacks requiring object instances'); } if (count($params)) { $creation = sprintf('$object = call_user_func(%s, %s);', $callback, implode(', ', $params)); } else { $creation = sprintf('$object = call_user_func(%s);', $callback); } } else { $className = '\\' . ltrim($name, '\\'); $creation = sprintf('$object = new %s(%s);', $className, implode(', ', $params)); } $methods = ''; foreach ($meta-&gt;getMethods() as $methodData) { if (!isset($methodData['name']) &amp;&amp; !isset($methodData['method'])) { continue; } $methodName = isset($methodData['name']) ? $methodData['name'] : $methodData['method']; $methodParams = $methodData['params']; foreach ($methodParams as $key =&gt; $param) { if (null === $param || is_scalar($param) || is_array($param)) { $string = var_export($param, 1); if (strstr($string, '::__set_state(')) { throw new Exception\RuntimeException('Arguments in definitions may not contain objects'); } $methodParams[$key] = $string; } elseif ($param instanceof GeneratorInstance) { $methodParams[$key] = sprintf('$this-&gt;%s()', $this-&gt;normalizeAlias($param-&gt;getName())); } else { $message = sprintf('Unable to use object arguments when generating method calls. Encountered with class "%s", method "%s", parameter of type "%s"', $name, $methodName, get_class($param)); throw new Exception\RuntimeException($message); } } $reverseParams = array_reverse($methodParams, true); foreach ($reverseParams as $key =&gt; $param) { if ('NULL' === $param) { unset($methodParams[$key]); continue; } break; } $methods .= sprintf("\$object-&gt;%s(%s);\n", $methodName, implode(', ', $methodParams)); } $storage = ''; if ($im-&gt;hasSharedInstance($name, $params)) { $storage = sprintf("\$this-&gt;services['%s'] = \$object;\n", $name); } $getterBody = ''; if ($im-&gt;hasSharedInstance($name, $params)) { $getterBody .= sprintf("if (isset(\$this-&gt;services['%s'])) {\n", $name); $getterBody .= sprintf("%sreturn \$this-&gt;services['%s'];\n}\n\n", $indent, $name); } $getterBody .= sprintf("%s\n", $creation); $getterBody .= $methods; $getterBody .= $storage; $getterBody .= "return \$object;\n"; $getterDef = new MethodGenerator(); $getterDef-&gt;setName($getter); $getterDef-&gt;setBody($getterBody); $getters[] = $getterDef; $cases = array($name); if (isset($aliases[$name])) { $cases = array_merge($aliases[$name], $cases); } $statement = ''; foreach ($cases as $value) { $statement .= sprintf("%scase '%s':\n", $indent, $value); } $statement .= sprintf("%sreturn \$this-&gt;%s();\n", str_repeat($indent, 2), $getter); $caseStatements[] = $statement; } $switch = sprintf("switch (%s) {\n%s\n", '$name', implode("\n", $caseStatements)); $switch .= sprintf("%sdefault:\n%sreturn parent::get(%s, %s);\n", $indent, str_repeat($indent, 2), '$name', '$params'); $switch .= "}\n\n"; $nameParam = new ParameterGenerator(); $nameParam-&gt;setName('name'); $paramsParam = new ParameterGenerator(); $paramsParam-&gt;setName('params') -&gt;setType('array') -&gt;setDefaultValue(array()); $get = new MethodGenerator(); $get-&gt;setName('get'); $get-&gt;setParameters(array( $nameParam, $paramsParam, )); $get-&gt;setBody($switch); $aliasMethods = array(); foreach ($aliases as $class =&gt; $classAliases) { foreach ($classAliases as $alias) { $aliasMethods[] = $this-&gt;getCodeGenMethodFromAlias($alias, $class); } } $container = new ClassGenerator(); $container-&gt;setName($this-&gt;containerClass) -&gt;setExtendedClass('ServiceLocator') -&gt;addMethodFromGenerator($get) -&gt;addMethods($getters) -&gt;addMethods($aliasMethods); $classFile = new FileGenerator(); $classFile-&gt;setUse('Zend\Di\ServiceLocator') -&gt;setClass($container); if (null !== $this-&gt;namespace) { $classFile-&gt;setNamespace($this-&gt;namespace); } if (null !== $filename) { $classFile-&gt;setFilename($filename); } return $classFile; } protected function reduceAliases(array $aliasList) { $reduced = array(); $aliases = array_keys($aliasList); foreach ($aliasList as $alias =&gt; $service) { if (in_array($service, $aliases)) { do { $service = $aliasList[$service]; } while (in_array($service, $aliases)); } if (!isset($reduced[$service])) { $reduced[$service] = array(); } $reduced[$service][] = $alias; } return $reduced; } protected function getCodeGenMethodFromAlias($alias, $class) { $alias = $this-&gt;normalizeAlias($alias); $method = new MethodGenerator(); $method-&gt;setName($alias); $method-&gt;setBody(sprintf('return $this-&gt;get(\'%s\');', $class)); return $method; } protected function normalizeAlias($alias) { $normalized = preg_replace('/[^a-zA-Z0-9]/', ' ', $alias); $normalized = 'get' . str_replace(' ', '', ucwords($normalized)); return $normalized; } } &lt;?php
 namespace Zend\Di; interface LocatorInterface { public function get($name, array $params = array()); } &lt;?php
 namespace Zend\Di; class InstanceManager { protected $sharedInstances = array(); protected $sharedInstancesWithParams = array('hashShort' =&gt; array(), 'hashLong' =&gt; array()); protected $aliases = array(); protected $configurationTemplate = array( 'parameters' =&gt; array(), 'injections' =&gt; array(), 'shared' =&gt; true ); protected $configurations = array(); protected $typePreferences = array(); public function hasSharedInstance($classOrAlias) { return isset($this-&gt;sharedInstances[$classOrAlias]); } public function getSharedInstance($classOrAlias) { return $this-&gt;sharedInstances[$classOrAlias]; } public function addSharedInstance($instance, $classOrAlias) { if (!is_object($instance)) { throw new Exception\InvalidArgumentException('This method requires an object to be shared. Class or Alias given: ' . $classOrAlias); } $this-&gt;sharedInstances[$classOrAlias] = $instance; } public function hasSharedInstanceWithParameters($classOrAlias, array $params, $returnFastHashLookupKey = false) { ksort($params); $hashKey = $this-&gt;createHashForKeys($classOrAlias, array_keys($params)); if (isset($this-&gt;sharedInstancesWithParams['hashShort'][$hashKey])) { $hashValue = $this-&gt;createHashForValues($classOrAlias, $params); if (isset($this-&gt;sharedInstancesWithParams['hashLong'][$hashKey . '/' . $hashValue])) { return ($returnFastHashLookupKey) ? $hashKey . '/' . $hashValue : true; } } return false; } public function addSharedInstanceWithParameters($instance, $classOrAlias, array $params) { ksort($params); $hashKey = $this-&gt;createHashForKeys($classOrAlias, array_keys($params)); $hashValue = $this-&gt;createHashForValues($classOrAlias, $params); if (!isset($this-&gt;sharedInstancesWithParams[$hashKey]) || !is_array($this-&gt;sharedInstancesWithParams[$hashKey])) { $this-&gt;sharedInstancesWithParams[$hashKey] = array(); } $this-&gt;sharedInstancesWithParams['hashShort'][$hashKey] = true; $this-&gt;sharedInstancesWithParams['hashLong'][$hashKey . '/' . $hashValue] = $instance; } public function getSharedInstanceWithParameters($classOrAlias, array $params, $fastHashFromHasLookup = null) { if ($fastHashFromHasLookup) { return $this-&gt;sharedInstancesWithParams['hashLong'][$fastHashFromHasLookup]; } ksort($params); $hashKey = $this-&gt;createHashForKeys($classOrAlias, array_keys($params)); if (isset($this-&gt;sharedInstancesWithParams['hashShort'][$hashKey])) { $hashValue = $this-&gt;createHashForValues($classOrAlias, $params); if (isset($this-&gt;sharedInstancesWithParams['hashLong'][$hashKey . '/' . $hashValue])) { return $this-&gt;sharedInstancesWithParams['hashLong'][$hashKey . '/' . $hashValue]; } } return false; } public function hasAlias($alias) { return (isset($this-&gt;aliases[$alias])); } public function getAliases() { return $this-&gt;aliases; } public function getClassFromAlias($alias) { if (!isset($this-&gt;aliases[$alias])) { return false; } $r = 0; while (isset($this-&gt;aliases[$alias])) { $alias = $this-&gt;aliases[$alias]; $r++; if ($r &gt; 100) { throw new Exception\RuntimeException( sprintf('Possible infinite recursion in DI alias! Max recursion of 100 levels reached at alias "%s".', $alias) ); } } return $alias; } protected function getBaseAlias($alias) { if (!$this-&gt;hasAlias($alias)) { return false; } $lastAlias = false; $r = 0; while (isset($this-&gt;aliases[$alias])) { $lastAlias = $alias; $alias = $this-&gt;aliases[$alias]; $r++; if ($r &gt; 100) { throw new Exception\RuntimeException( sprintf('Possible infinite recursion in DI alias! Max recursion of 100 levels reached at alias "%s".', $alias) ); } } return $lastAlias; } public function addAlias($alias, $class, array $parameters = array()) { if (!preg_match('#^[a-zA-Z0-9-_]+$#', $alias)) { throw new Exception\InvalidArgumentException( 'Aliases must be alphanumeric and can contain dashes and underscores only.' ); } $this-&gt;aliases[$alias] = $class; if ($parameters) { $this-&gt;setParameters($alias, $parameters); } } public function hasConfig($aliasOrClass) { $key = ($this-&gt;hasAlias($aliasOrClass)) ? 'alias:' . $this-&gt;getBaseAlias($aliasOrClass) : $aliasOrClass; if (!isset($this-&gt;configurations[$key])) { return false; } if ($this-&gt;configurations[$key] === $this-&gt;configurationTemplate) { return false; } return true; } public function setConfig($aliasOrClass, array $configuration, $append = false) { $key = ($this-&gt;hasAlias($aliasOrClass)) ? 'alias:' . $this-&gt;getBaseAlias($aliasOrClass) : $aliasOrClass; if (!isset($this-&gt;configurations[$key]) || !$append) { $this-&gt;configurations[$key] = $this-&gt;configurationTemplate; } $configuration = array( 'parameters' =&gt; isset($configuration['parameters']) ? $configuration['parameters'] : array(), 'injections' =&gt; isset($configuration['injections']) ? $configuration['injections'] : array(), 'shared' =&gt; isset($configuration['shared']) ? $configuration['shared'] : true ); $this-&gt;configurations[$key] = array_replace_recursive($this-&gt;configurations[$key], $configuration); } public function getClasses() { $classes = array(); foreach ($this-&gt;configurations as $name =&gt; $data) { if (strpos($name, 'alias') === 0) continue; $classes[] = $name; } return $classes; } public function getConfig($aliasOrClass) { $key = ($this-&gt;hasAlias($aliasOrClass)) ? 'alias:' . $this-&gt;getBaseAlias($aliasOrClass) : $aliasOrClass; if (isset($this-&gt;configurations[$key])) { return $this-&gt;configurations[$key]; } return $this-&gt;configurationTemplate; } public function setParameters($aliasOrClass, array $parameters) { $this-&gt;setConfig($aliasOrClass, array('parameters' =&gt; $parameters), true); } public function setInjections($aliasOrClass, array $injections) { $this-&gt;setConfig($aliasOrClass, array('injections' =&gt; $injections), true); } public function setShared($aliasOrClass, $isShared) { $this-&gt;setConfig($aliasOrClass, array('shared' =&gt; (bool) $isShared), true); } public function hasTypePreferences($interfaceOrAbstract) { $key = ($this-&gt;hasAlias($interfaceOrAbstract)) ? 'alias:' . $interfaceOrAbstract : $interfaceOrAbstract; return (isset($this-&gt;typePreferences[$key]) &amp;&amp; $this-&gt;typePreferences[$key]); } public function setTypePreference($interfaceOrAbstract, array $preferredImplementations) { $key = ($this-&gt;hasAlias($interfaceOrAbstract)) ? 'alias:' . $interfaceOrAbstract : $interfaceOrAbstract; foreach ($preferredImplementations as $preferredImplementation) { $this-&gt;addTypePreference($key, $preferredImplementation); } return $this; } public function getTypePreferences($interfaceOrAbstract) { $key = ($this-&gt;hasAlias($interfaceOrAbstract)) ? 'alias:' . $interfaceOrAbstract : $interfaceOrAbstract; if (isset($this-&gt;typePreferences[$key])) { return $this-&gt;typePreferences[$key]; } return array(); } public function unsetTypePreferences($interfaceOrAbstract) { $key = ($this-&gt;hasAlias($interfaceOrAbstract)) ? 'alias:' . $interfaceOrAbstract : $interfaceOrAbstract; unset($this-&gt;typePreferences[$key]); } public function addTypePreference($interfaceOrAbstract, $preferredImplementation) { $key = ($this-&gt;hasAlias($interfaceOrAbstract)) ? 'alias:' . $interfaceOrAbstract : $interfaceOrAbstract; if (!isset($this-&gt;typePreferences[$key])) { $this-&gt;typePreferences[$key] = array(); } $this-&gt;typePreferences[$key][] = $preferredImplementation; return $this; } public function removeTypePreference($interfaceOrAbstract, $preferredType) { $key = ($this-&gt;hasAlias($interfaceOrAbstract)) ? 'alias:' . $interfaceOrAbstract : $interfaceOrAbstract; if (!isset($this-&gt;typePreferences[$key]) || !in_array($preferredType, $this-&gt;typePreferences[$key])) { return false; } unset($this-&gt;typePreferences[$key][array_search($key, $this-&gt;typePreferences)]); return $this; } protected function createHashForKeys($classOrAlias, $paramKeys) { return $classOrAlias . ':' . implode('|', $paramKeys); } protected function createHashForValues($classOrAlias, $paramValues) { $hashValue = ''; foreach ($paramValues as $param) { switch (gettype($param)) { case 'object': $hashValue .= spl_object_hash($param) . '|'; break; case 'integer': case 'string': case 'boolean': case 'NULL': case 'double': $hashValue .= $param . '|'; break; case 'array': $hashValue .= 'Array|'; break; case 'resource': $hashValue .= 'resource|'; break; } } return $hashValue; } } &lt;?php
 namespace Zend\Di\Display; use Zend\Di\Di; class Console { protected $di = null; protected $runtimeClasses = array(); public static function export(Di $di, array $runtimeClasses = array()) { $console = new static($di); $console-&gt;addRuntimeClasses($runtimeClasses); $console-&gt;render($di); } public function __construct(Di $di = null) { $this-&gt;di = ($di) ?: new Di; } public function addRuntimeClasses(array $runtimeClasses) { foreach ($runtimeClasses as $runtimeClass) { $this-&gt;addRuntimeClass($runtimeClass); } } public function addRuntimeClass($runtimeClass) { $this-&gt;runtimeClasses[] = $runtimeClass; } public function render() { $knownClasses = array(); echo 'Definitions' . PHP_EOL . PHP_EOL; foreach ($this-&gt;di-&gt;definitions() as $definition) { $this-&gt;renderDefinition($definition); foreach ($definition-&gt;getClasses() as $class) { $knownClasses[] = $class; $this-&gt;renderClassDefinition($definition, $class); } if (count($definition-&gt;getClasses()) == 0) { echo PHP_EOL .'    No Classes Found' . PHP_EOL . PHP_EOL; } } if ($this-&gt;runtimeClasses) echo '  Runtime classes:' . PHP_EOL; $unknownRuntimeClasses = array_diff($this-&gt;runtimeClasses, $knownClasses); foreach ($unknownRuntimeClasses as $runtimeClass) { $definition = $this-&gt;di-&gt;definitions()-&gt;getDefinitionForClass($runtimeClass); $this-&gt;renderClassDefinition($definition, $runtimeClass); } echo PHP_EOL . 'Instance Configuration Info:' . PHP_EOL; echo PHP_EOL . '  Aliases:' . PHP_EOL; $configuredTypes = array(); foreach ($this-&gt;di-&gt;instanceManager()-&gt;getAliases() as $alias =&gt; $class) { echo '    ' . $alias . ' [type: ' . $class . ']' . PHP_EOL; $configuredTypes[] = $alias; } echo PHP_EOL . '  Classes:' . PHP_EOL; foreach ($this-&gt;di-&gt;instanceManager()-&gt;getClasses() as $class) { echo '    ' . $class . PHP_EOL; $configuredTypes[] = $class; } echo PHP_EOL . '  Configurations:' . PHP_EOL; foreach ($configuredTypes as $type) { $info = $this-&gt;di-&gt;instanceManager()-&gt;getConfig($type); echo '    ' . $type . PHP_EOL; if ($info['parameters']) { echo '      parameters:' . PHP_EOL; foreach ($info['parameters'] as $param =&gt; $value) { echo '        ' . $param . ' = ' . $value . PHP_EOL; } } if ($info['injections']) { echo '      injections:' . PHP_EOL; foreach ($info['injections'] as $injection =&gt; $value) { var_dump($injection, $value); } } } } protected function renderDefinition($definition) { echo '  Definition Type: ' . get_class($definition) . PHP_EOL; $r = new \ReflectionClass($definition); foreach ($r-&gt;getProperties(\ReflectionProperty::IS_PUBLIC | \ReflectionProperty::IS_PROTECTED) as $property) { $property-&gt;setAccessible(true); echo '    internal property: ' . $property-&gt;getName(); $value = $property-&gt;getValue($definition); if (is_object($value)) { echo ' instance of ' . get_class($value); } else { echo ' = ' . $value; } echo PHP_EOL; } } protected function renderClassDefinition($definition, $class) { echo PHP_EOL . '    Parameters For Class: ' . $class . PHP_EOL; foreach ($definition-&gt;getMethods($class) as $methodName =&gt; $methodIsRequired) { foreach ($definition-&gt;getMethodParameters($class, $methodName) as $fqName =&gt; $pData) { echo '      ' . $pData[0] . ' [type: '; echo ($pData[1]) ? $pData[1] : 'scalar'; echo ($pData[2] === true &amp;&amp; $methodIsRequired) ? ', required' : ', not required'; echo ', injection-method: ' . $methodName; echo ' fq-name: ' . $fqName; echo ']' . PHP_EOL; } } echo PHP_EOL; } } &lt;?php
 namespace Zend\Console\Charset; class AsciiExtended implements CharsetInterface { const ACTIVATE = ""; const DEACTIVATE = ""; const BLOCK = "\xdb"; const SHADE_LIGHT = "\xb0"; const SHADE_MEDIUM = "\xb1"; const SHADE_DARK = "\xb2"; const LINE_SINGLE_EW = "\xc4"; const LINE_SINGLE_NS = "\xb3"; const LINE_SINGLE_NW = "\xda"; const LINE_SINGLE_NE = "\xbf"; const LINE_SINGLE_SE = "\xd9"; const LINE_SINGLE_SW = "\xc0"; const LINE_SINGLE_CROSS = "\xc5"; const LINE_DOUBLE_EW = "\xcd"; const LINE_DOUBLE_NS = "\xba"; const LINE_DOUBLE_NW = "\xc9"; const LINE_DOUBLE_NE = "\xbb"; const LINE_DOUBLE_SE = "\xbc"; const LINE_DOUBLE_SW = "\xc8"; const LINE_DOUBLE_CROSS = "\xce"; const LINE_BLOCK_EW = "\xdb"; const LINE_BLOCK_NS = "\xdb"; const LINE_BLOCK_NW = "\xdb"; const LINE_BLOCK_NE = "\xdb"; const LINE_BLOCK_SE = "\xdb"; const LINE_BLOCK_SW = "\xdb"; const LINE_BLOCK_CROSS = "\xdb"; } &lt;?php
 namespace Zend\Console\Charset; class Utf8Heavy extends Utf8 { const LINE_SINGLE_EW = "━"; const LINE_SINGLE_NS = "┃"; const LINE_SINGLE_NW = "┏"; const LINE_SINGLE_NE = "┓"; const LINE_SINGLE_SE = "┛"; const LINE_SINGLE_SW = "┗"; const LINE_SINGLE_CROSS = "╋"; } &lt;?php
 namespace Zend\Console\Charset; class DECSG implements CharsetInterface { const ACTIVATE = "\x1b(0"; const DEACTIVATE = "\x1b(B"; const BLOCK = "\x61"; const SHADE_LIGHT = "\x61"; const SHADE_MEDIUM = "\x61"; const SHADE_DARK = "\x61"; const LINE_SINGLE_EW = "\x71"; const LINE_SINGLE_NS = "\x78"; const LINE_SINGLE_NW = "\x6c"; const LINE_SINGLE_NE = "\x6b"; const LINE_SINGLE_SE = "\x6a"; const LINE_SINGLE_SW = "\x6d"; const LINE_SINGLE_CROSS = "\x6e"; const LINE_DOUBLE_EW = "\x73"; const LINE_DOUBLE_NS = "\x78"; const LINE_DOUBLE_NW = "\x6c"; const LINE_DOUBLE_NE = "\x5b"; const LINE_DOUBLE_SE = "\x6a"; const LINE_DOUBLE_SW = "\x6d"; const LINE_DOUBLE_CROSS = "\x6e"; const LINE_BLOCK_EW = "\x61"; const LINE_BLOCK_NS = "\x61"; const LINE_BLOCK_NW = "\x61"; const LINE_BLOCK_NE = "\x61"; const LINE_BLOCK_SE = "\x61"; const LINE_BLOCK_SW = "\x61"; const LINE_BLOCK_CROSS = "\x61"; } &lt;?php
 namespace Zend\Console\Charset; interface CharsetInterface { } &lt;?php
 namespace Zend\Console\Charset; class Utf8 implements CharsetInterface { const ACTIVATE = ""; const DEACTIVATE = ""; const BLOCK = "█"; const SHADE_LIGHT = "░"; const SHADE_MEDIUM = "▒"; const SHADE_DARK = "▓"; const LINE_SINGLE_EW = "─"; const LINE_SINGLE_NS = "│"; const LINE_SINGLE_NW = "┌"; const LINE_SINGLE_NE = "┐"; const LINE_SINGLE_SE = "┘"; const LINE_SINGLE_SW = "└"; const LINE_SINGLE_CROSS = "┼"; const LINE_DOUBLE_EW = "═"; const LINE_DOUBLE_NS = "║"; const LINE_DOUBLE_NW = "╔"; const LINE_DOUBLE_NE = "╗"; const LINE_DOUBLE_SE = "╝"; const LINE_DOUBLE_SW = "╚"; const LINE_DOUBLE_CROSS = "╬"; const LINE_BLOCK_EW = "█"; const LINE_BLOCK_NS = "█"; const LINE_BLOCK_NW = "█"; const LINE_BLOCK_NE = "█"; const LINE_BLOCK_SE = "█"; const LINE_BLOCK_SW = "█"; const LINE_BLOCK_CROSS = "█"; } &lt;?php
 namespace Zend\Console\Charset; class Ascii implements CharsetInterface { const ACTIVATE = ""; const DEACTIVATE = ""; const BLOCK = "#"; const SHADE_LIGHT = " "; const SHADE_MEDIUM = "#"; const SHADE_DARK = "#"; const LINE_SINGLE_EW = "-"; const LINE_SINGLE_NS = "|"; const LINE_SINGLE_NW = "+"; const LINE_SINGLE_NE = "+"; const LINE_SINGLE_SE = "+"; const LINE_SINGLE_SW = "+"; const LINE_SINGLE_CROSS = "+"; const LINE_DOUBLE_EW = "="; const LINE_DOUBLE_NS = "|"; const LINE_DOUBLE_NW = "+"; const LINE_DOUBLE_NE = "+"; const LINE_DOUBLE_SE = "+"; const LINE_DOUBLE_SW = "+"; const LINE_DOUBLE_CROSS = "+"; const LINE_BLOCK_EW = "="; const LINE_BLOCK_NS = "#"; const LINE_BLOCK_NW = "+"; const LINE_BLOCK_NE = "+"; const LINE_BLOCK_SE = "+"; const LINE_BLOCK_SW = "+"; const LINE_BLOCK_CROSS = "+"; } &lt;?php
 namespace Zend\Console\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Console\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\Console\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { protected $usage = ''; public function __construct($message, $usage = '') { $this-&gt;usage = $usage; parent::__construct($message); } public function getUsageMessage() { return $this-&gt;usage; } } &lt;?php
 namespace Zend\Console\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface { } &lt;?php
 namespace Zend\Console\Prompt; use ReflectionClass; use Zend\Console\Console; use Zend\Console\Adapter\AdapterInterface as ConsoleAdapter; use Zend\Console\Exception; abstract class AbstractPrompt implements PromptInterface { protected $console; protected $lastResponse; public function getLastResponse() { return $this-&gt;lastResponse; } public function getConsole() { if (!$this-&gt;console) { $this-&gt;console = Console::getInstance(); } return $this-&gt;console; } public function setConsole(ConsoleAdapter $adapter) { $this-&gt;console = $adapter; } public static function prompt() { if (get_called_class() === __CLASS__) { throw new Exception\BadMethodCallException( 'Cannot call prompt() on AbstractPrompt class. Use one of the Zend\Console\Prompt\ subclasses.' ); } $refl = new ReflectionClass(get_called_class()); $instance = $refl-&gt;newInstanceArgs(func_get_args()); return $instance-&gt;show(); } } &lt;?php
 namespace Zend\Console\Prompt; class Char extends AbstractPrompt { protected $promptText = 'Please select one option '; protected $allowEmpty = false; protected $allowedChars = 'yn'; protected $ignoreCase = true; protected $echo = true; public function __construct( $promptText = 'Please hit a key', $allowedChars = 'abc', $ignoreCase = true, $allowEmpty = false, $echo = true ) { if ($promptText !== null) { $this-&gt;setPromptText($promptText); } if ($allowEmpty !== null) { $this-&gt;setAllowEmpty($allowEmpty); } if ($ignoreCase !== null) { $this-&gt;setIgnoreCase($ignoreCase); } if ($allowedChars !== null) { if ($this-&gt;ignoreCase) { $this-&gt;setAllowedChars(strtolower($allowedChars)); } else { $this-&gt;setAllowedChars($allowedChars); } } if ($echo !== null) { $this-&gt;setEcho($echo); } } public function show() { $this-&gt;getConsole()-&gt;write($this-&gt;promptText); $mask = $this-&gt;getAllowedChars(); if ($this-&gt;ignoreCase) { $mask = strtolower($mask); $mask .= strtoupper($mask); $mask = str_split($mask); $mask = array_unique($mask); $mask = implode("", $mask); } do { $char = $this-&gt;getConsole()-&gt;readChar($mask); if ($this-&gt;ignoreCase) { $char = strtolower($char); } if (stristr($this-&gt;allowedChars, $char) !== false) { if ($this-&gt;echo) { echo trim($char)."\n"; } else { if ($this-&gt;promptText) { echo "\n"; } } break; } } while (true); return $this-&gt;lastResponse = $char; } public function setAllowEmpty($allowEmpty) { $this-&gt;allowEmpty = $allowEmpty; } public function getAllowEmpty() { return $this-&gt;allowEmpty; } public function setPromptText($promptText) { $this-&gt;promptText = $promptText; } public function getPromptText() { return $this-&gt;promptText; } public function setAllowedChars($allowedChars) { $this-&gt;allowedChars = $allowedChars; } public function getAllowedChars() { return $this-&gt;allowedChars; } public function setIgnoreCase($ignoreCase) { $this-&gt;ignoreCase = $ignoreCase; } public function getIgnoreCase() { return $this-&gt;ignoreCase; } public function setEcho($echo) { $this-&gt;echo = $echo; } public function getEcho() { return $this-&gt;echo; } } &lt;?php
 namespace Zend\Console\Prompt; class Confirm extends Char { protected $promptText = 'Are you sure?'; protected $allowedChars = 'yn'; protected $yesChar = 'y'; protected $noChar = 'n'; protected $ignoreCase = true; public function __construct( $promptText = 'Are you sure?', $yesChar = 'y', $noChar = 'n' ) { if ($promptText !== null) { $this-&gt;setPromptText($promptText); } if ($yesChar !== null) { $this-&gt;setYesChar($yesChar); } if ($noChar !== null) { $this-&gt;setNoChar($noChar); } } public function show() { $response = parent::show() === $this-&gt;yesChar; return $this-&gt;lastResponse = $response; } public function setNoChar($noChar) { $this-&gt;noChar = $noChar; $this-&gt;setAllowedChars($this-&gt;yesChar . $this-&gt;noChar); } public function getNoChar() { return $this-&gt;noChar; } public function setYesChar($yesChar) { $this-&gt;yesChar = $yesChar; $this-&gt;setAllowedChars($this-&gt;yesChar . $this-&gt;noChar); } public function getYesChar() { return $this-&gt;yesChar; } } &lt;?php
 namespace Zend\Console\Prompt; use Zend\Console\Adapter\AdapterInterface as ConsoleAdapter; interface PromptInterface { public function show(); public function getLastResponse(); public function getConsole(); public function setConsole(ConsoleAdapter $adapter); } &lt;?php
 namespace Zend\Console\Prompt; class Line extends AbstractPrompt { protected $promptText = 'Please enter value: '; protected $allowEmpty = false; protected $maxLength = 2048; public function __construct($promptText = 'Please enter value: ', $allowEmpty = false, $maxLength = 2048) { if ($promptText !== null) { $this-&gt;setPromptText($promptText); } if ($allowEmpty !== null) { $this-&gt;setAllowEmpty($allowEmpty); } if ($maxLength !== null) { $this-&gt;setMaxLength($maxLength); } } public function show() { do { $this-&gt;getConsole()-&gt;write($this-&gt;promptText); $line = $this-&gt;getConsole()-&gt;readLine($this-&gt;maxLength); } while (!$this-&gt;allowEmpty &amp;&amp; !$line); return $this-&gt;lastResponse = $line; } public function setAllowEmpty($allowEmpty) { $this-&gt;allowEmpty = $allowEmpty; } public function getAllowEmpty() { return $this-&gt;allowEmpty; } public function setMaxLength($maxLength) { $this-&gt;maxLength = $maxLength; } public function getMaxLength() { return $this-&gt;maxLength; } public function setPromptText($promptText) { $this-&gt;promptText = $promptText; } public function getPromptText() { return $this-&gt;promptText; } } &lt;?php
 namespace Zend\Console\Prompt; use Zend\Console\Exception; class Select extends Char { protected $promptText = 'Please select an option'; protected $ignoreCase = true; protected $options = array(); public function __construct( $promptText = 'Please select one option', $options = array(), $allowEmpty = false, $echo = false ) { if ($promptText !== null) { $this-&gt;setPromptText($promptText); } if (!count($options)) { throw new Exception\BadMethodCallException( 'Cannot construct a "select" prompt without any options' ); } $this-&gt;setOptions($options); if ($allowEmpty !== null) { $this-&gt;setAllowEmpty($allowEmpty); } if ($echo !== null) { $this-&gt;setEcho($echo); } } public function show() { $console = $this-&gt;getConsole(); $console-&gt;writeLine($this-&gt;promptText); foreach ($this-&gt;options as $k =&gt; $v) { $console-&gt;writeLine('  ' . $k . ') ' . $v); } $mask = implode("", array_keys($this-&gt;options)); if ($this-&gt;allowEmpty) { $mask .= "\r\n"; } $this-&gt;setAllowedChars($mask); $oldPrompt = $this-&gt;promptText; $oldEcho = $this-&gt;echo; $this-&gt;echo = false; $this-&gt;promptText = null; $response = parent::show(); $this-&gt;promptText = $oldPrompt; $this-&gt;echo = $oldEcho; if ($this-&gt;echo) { if (isset($this-&gt;options[$response])) { $console-&gt;writeLine($this-&gt;options[$response]); } else { $console-&gt;writeLine(); } } $this-&gt;lastResponse = $response; return $response; } public function setOptions($options) { if (!is_array($options) &amp;&amp; !$options instanceof \Traversable) { throw new Exception\BadMethodCallException( 'Please specify an array or Traversable object as options' ); } if (!is_array($options)) { $this-&gt;options = array(); foreach ($options as $k =&gt; $v) { $this-&gt;options[$k] = $v; } } else { $this-&gt;options = $options; } } public function getOptions() { return $this-&gt;options; } } &lt;?php
 namespace Zend\Console\Prompt; class Number extends Line { protected $promptText = 'Please enter a number: '; protected $allowFloat = false; protected $min; protected $max; public function __construct( $promptText = 'Please enter a number: ', $allowEmpty = false, $allowFloat = false, $min = null, $max = null ) { if ($promptText !== null) { $this-&gt;setPromptText($promptText); } if ($allowEmpty !== null) { $this-&gt;setAllowEmpty($allowEmpty); } if ($min !== null) { $this-&gt;setMin($min); } if ($max !== null) { $this-&gt;setMax($max); } if ($allowFloat !== null) { $this-&gt;setAllowFloat($allowFloat); } } public function show() { do { $valid = true; $number = parent::show(); if ($number === "" &amp;&amp; !$this-&gt;allowEmpty) { $valid = false; } elseif ($number === "") { $number = null; } elseif (!is_numeric($number)) { $this-&gt;getConsole()-&gt;writeLine("$number is not a number\n"); $valid = false; } elseif (!$this-&gt;allowFloat &amp;&amp; (round($number) != $number) ) { $this-&gt;getConsole()-&gt;writeLine("Please enter a non-floating number, i.e. " . round($number) . "\n"); $valid = false; } elseif ($this-&gt;max !== null &amp;&amp; $number &gt; $this-&gt;max) { $this-&gt;getConsole()-&gt;writeLine("Please enter a number not greater than " . $this-&gt;max . "\n"); $valid = false; } elseif ($this-&gt;min !== null &amp;&amp; $number &lt; $this-&gt;min) { $this-&gt;getConsole()-&gt;writeLine("Please enter a number not smaller than " . $this-&gt;min . "\n"); $valid = false; } } while (!$valid); if ($number !== null) { $number = $this-&gt;allowFloat ? (double) $number : (int) $number; } return $this-&gt;lastResponse = $number; } public function setAllowEmpty($allowEmpty) { $this-&gt;allowEmpty = $allowEmpty; } public function getAllowEmpty() { return $this-&gt;allowEmpty; } public function setMaxLength($maxLength) { $this-&gt;maxLength = $maxLength; } public function getMaxLength() { return $this-&gt;maxLength; } public function setPromptText($promptText) { $this-&gt;promptText = $promptText; } public function getPromptText() { return $this-&gt;promptText; } public function setMax($max) { $this-&gt;max = $max; } public function getMax() { return $this-&gt;max; } public function setMin($min) { $this-&gt;min = $min; } public function getMin() { return $this-&gt;min; } public function setAllowFloat($allowFloat) { $this-&gt;allowFloat = $allowFloat; } public function getAllowFloat() { return $this-&gt;allowFloat; } } &lt;?php
 namespace Zend\Console; use Zend\Stdlib\Message; use Zend\Stdlib\ResponseInterface; class Response extends Message implements ResponseInterface { protected $contentSent = false; public function contentSent() { return $this-&gt;contentSent; } public function setErrorLevel($errorLevel) { $this-&gt;setMetadata('errorLevel', $errorLevel); return $this; } public function getErrorLevel() { return $this-&gt;getMetadata('errorLevel', 0); } public function sendContent() { if ($this-&gt;contentSent()) { return $this; } echo $this-&gt;getContent(); $this-&gt;contentSent = true; return $this; } public function send() { $this-&gt;sendContent(); $errorLevel = (int) $this-&gt;getMetadata('errorLevel',0); exit($errorLevel); } } &lt;?php
 namespace Zend\Console\Adapter; use Zend\Console\Charset\CharsetInterface; use Zend\Console\Exception; use Zend\Console\Charset; class WindowsAnsicon extends Posix { protected static $hasMBString; protected $modeResult; public function getWidth() { static $width; if ($width &gt; 0) { return $width; } if (preg_match('/\((\d+)x/', getenv('ANSICON'), $matches)) { $width = $matches[1]; } else { $width = AbstractAdapter::getWidth(); } return $width; } public function getHeight() { static $height; if ($height &gt; 0) { return $height; } if (preg_match('/\(\d+x(\d+)/', getenv('ANSICON'), $matches)) { $height = $matches[1]; } else { $height = AbstractAdapter::getHeight(); } return $height; } protected function runModeCommand() { exec('mode', $output, $return); if ($return || !count($output)) { $this-&gt;modeResult = ''; } else { $this-&gt;modeResult = trim(implode('', $output)); } } public function isUtf8() { if ($this-&gt;modeResult === null) { $this-&gt;runModeCommand(); } if (preg_match('/Code page\:\s+(\d+)/', $this-&gt;modeResult, $matches)) { return (int) $matches[1] == 65001; } return false; } public function getTitle() { exec('powershell -command "write $Host.UI.RawUI.WindowTitle"', $output, $result); if ($result || !$output) { return ''; } return trim($output, "\r\n"); } public function clear() { echo chr(27) . '[1J' . chr(27) . '[u'; } public function clearLine() { echo chr(27) . '[1K'; } public function setCharset(CharsetInterface $charset) { $this-&gt;charset = $charset; } public function getCharset() { if ($this-&gt;charset === null) { $this-&gt;charset = $this-&gt;getDefaultCharset(); } return $this-&gt;charset; } public function getDefaultCharset() { return new Charset\AsciiExtended(); } public function readChar($mask = null) { $useChoice = $mask !== null &amp;&amp; preg_match('/^[a-zA-Z0-9]+$/D', $mask); if ($useChoice) { do { exec('choice /n /cs /c:' . $mask, $output, $return); if ($return == 255 || $return &lt; 1 || $return &gt; strlen($mask)) { throw new Exception\RuntimeException('"choice" command failed to run. Are you using Windows XP or newer?'); } $char = substr($mask, $return - 1, 1); } while (!$char || ($mask !== null &amp;&amp; !stristr($mask, $char))); return $char; } if ($mask === null) { exec( 'powershell -NonInteractive -NoProfile -NoLogo -OutputFormat Text -Command "' . 'while ($Host.UI.RawUI.KeyAvailable) {$key = $Host.UI.RawUI.ReadKey(\'NoEcho,IncludeKeyDown\');}' . 'write $key.VirtualKeyCode;' . '"', $result, $return ); $char = !empty($result) ? implode('', $result) : null; if (!empty($char) &amp;&amp; !$return) { $char = chr($char); return $char; } } else { $mask = strtr($mask, "\n", "\r"); $asciiMask = array_map(function ($char) { return ord($char); }, str_split($mask)); $asciiMask = array_unique($asciiMask); $result = $return = null; exec( 'powershell -NonInteractive -NoProfile -NoLogo -OutputFormat Text -Command "' . '[int[]] $mask = '.join(',', $asciiMask).';' . 'do {' . '$key = $Host.UI.RawUI.ReadKey(\'NoEcho,IncludeKeyDown\').VirtualKeyCode;' . '} while( !($mask -contains $key) );' . 'write $key;' . '"', $result, $return ); $char = !empty($result) ? trim(implode('', $result)) : null; if (!$return &amp;&amp; $char &amp;&amp; ($mask === null || in_array($char, $asciiMask))) { if ($char == 13) { $char = 10; } $char = chr($char); return $char; } } $stream = fopen('php://stdin', 'rb'); do { $char = fgetc($stream); $char = substr(trim($char), 0, 1); } while (!$char || ($mask !== null &amp;&amp; !stristr($mask, $char))); fclose($stream); return $char; } } &lt;?php
 namespace Zend\Console\Adapter; use Zend\Console\Charset\CharsetInterface; interface AdapterInterface { const LINE_NONE = 1; const LINE_SINGLE = 2; const LINE_DOUBLE = 3; const LINE_BLOCK = 4; const FILL_NONE = 0; const FILL_SHADE_LIGHT = 1; const FILL_SHADE_MEDIUM = 2; const FILL_SHADE_DARK = 3; const FILL_BLOCK = 10; public function write($text, $color = null, $bgColor = null); public function writeText($text, $color = null, $bgColor = null); public function writeLine($text = "", $color = null, $bgColor = null); public function writeAt($text, $x, $y, $color = null, $bgColor = null); public function writeBox( $x1, $y1, $x2, $y2, $lineStyle = self::LINE_SINGLE, $fillStyle = self::FILL_NONE, $color = null, $bgColor = null, $fillColor = null, $fillBgColor = null ); public function writeTextBlock( $text, $width, $height = null, $x = 0, $y = 0, $color = null, $bgColor = null ); public function getWidth(); public function getHeight(); public function getSize(); public function isUtf8(); public function setPos($x, $y); public function hideCursor(); public function showCursor(); public function getTitle(); public function setTitle($title); public function resetTitle(); public function colorize($string, $color = null, $bgColor = null); public function setColor($color); public function setBgColor($color); public function resetColor(); public function setCharset(CharsetInterface $charset); public function getCharset(); public function getDefaultCharset(); public function clear(); public function clearLine(); public function clearScreen(); public function readLine($maxLength = 2048); public function readChar($mask = null); } &lt;?php
 namespace Zend\Console\Adapter; use Zend\Console\Charset; class Virtual extends AbstractAdapter { protected static $hasMBString; protected $modeResult; public function getWidth() { static $width; if ($width &gt; 0) { return $width; } if ($this-&gt;modeResult === null) { $this-&gt;runProbeCommand(); } if (preg_match('/Columns\:\s+(\d+)/', $this-&gt;modeResult, $matches)) { $width = $matches[1]; } else { $width = parent::getWidth(); } return $width; } public function getHeight() { static $height; if ($height &gt; 0) { return $height; } if ($this-&gt;modeResult === null) { $this-&gt;runProbeCommand(); } if (preg_match('/Rows\:\s+(\d+)/', $this-&gt;modeResult, $matches)) { $height = $matches[1]; } else { $height = parent::getHeight(); } return $height; } protected function runProbeCommand() { exec('mode', $output, $return); if ($return || !count($output)) { $this-&gt;modeResult = ''; } else { $this-&gt;modeResult = trim(implode('', $output)); } } public function isUtf8() { if ($this-&gt;modeResult === null) { $this-&gt;runProbeCommand(); } if (preg_match('/Code page\:\s+(\d+)/', $this-&gt;modeResult, $matches)) { return (int) $matches[1] == 65001; } return false; } public function setPos($x, $y) { } public function getTitle() { exec('powershell -command "write $Host.UI.RawUI.WindowTitle"', $output, $result); if ($result || !$output) { return ''; } return trim($output, "\r\n"); } public function setCharset(Charset\CharsetInterface $charset) { $this-&gt;charset = $charset; } public function getCharset() { if ($this-&gt;charset === null) { $this-&gt;charset = $this-&gt;getDefaultCharset(); } return $this-&gt;charset; } public function getDefaultCharset() { return new Charset\AsciiExtended; } protected function switchToUtf8() { shell_exec('mode con cp select=65001'); } } &lt;?php
 namespace Zend\Console\Adapter; use ReflectionClass; use Zend\Console\Charset; use Zend\Console\Exception; use Zend\Console\Color\Xterm256; use Zend\Console\ColorInterface as Color; class Posix extends AbstractAdapter { protected static $hasMBString; protected $charset; protected static $ansiColorMap = array( 'fg' =&gt; array( Color::NORMAL =&gt; '22;39', Color::RESET =&gt; '22;39', Color::BLACK =&gt; '0;30', Color::RED =&gt; '0;31', Color::GREEN =&gt; '0;32', Color::YELLOW =&gt; '0;33', Color::BLUE =&gt; '0;34', Color::MAGENTA =&gt; '0;35', Color::CYAN =&gt; '0;36', Color::WHITE =&gt; '0;37', Color::GRAY =&gt; '1;30', Color::LIGHT_RED =&gt; '1;31', Color::LIGHT_GREEN =&gt; '1;32', Color::LIGHT_YELLOW =&gt; '1;33', Color::LIGHT_BLUE =&gt; '1;34', Color::LIGHT_MAGENTA =&gt; '1;35', Color::LIGHT_CYAN =&gt; '1;36', Color::LIGHT_WHITE =&gt; '1;37', ), 'bg' =&gt; array( Color::NORMAL =&gt; '0;49', Color::RESET =&gt; '0;49', Color::BLACK =&gt; '40', Color::RED =&gt; '41', Color::GREEN =&gt; '42', Color::YELLOW =&gt; '43', Color::BLUE =&gt; '44', Color::MAGENTA =&gt; '45', Color::CYAN =&gt; '46', Color::WHITE =&gt; '47', Color::GRAY =&gt; '40', Color::LIGHT_RED =&gt; '41', Color::LIGHT_GREEN =&gt; '42', Color::LIGHT_YELLOW =&gt; '43', Color::LIGHT_BLUE =&gt; '44', Color::LIGHT_MAGENTA =&gt; '45', Color::LIGHT_CYAN =&gt; '46', Color::LIGHT_WHITE =&gt; '47', ), ); protected $lastTTYMode = null; public function getWidth() { static $width; if ($width &gt; 0) { return $width; } if (($result = getenv('COLUMNS')) !== false) { return $width = (int) $result; } $result = exec('tput cols', $output, $return); if (!$return &amp;&amp; is_numeric($result)) { return $width = (int) $result; } return $width = parent::getWidth(); } public function getHeight() { static $height; if ($height &gt; 0) { return $height; } if (($result = getenv('LINES')) !== false) { return $height = (int) $result; } $result = exec('tput lines', $output, $return); if (!$return &amp;&amp; is_numeric($result)) { return $height = (int) $result; } return $height = parent::getHeight(); } protected function runModeCommand() { exec('mode', $output, $return); if ($return || !count($output)) { $this-&gt;modeResult = ''; } else { $this-&gt;modeResult = trim(implode('', $output)); } } public function isUtf8() { if (($lang = getenv('LANG')) !== false) { return stristr($lang, 'utf-8') || stristr($lang, 'utf8'); } return false; } public function showCursor() { echo "\x1b[?25h"; } public function hideCursor() { echo "\x1b[?25l"; } public function setPos($x, $y) { echo "\x1b[" . $y . ';' . $x . 'f'; } public function colorize($string, $color = null, $bgColor = null) { $color = $this-&gt;getColorCode($color, 'fg'); $bgColor = $this-&gt;getColorCode($bgColor, 'bg'); return ($color !== null ? "\x1b[" . $color . 'm' : '') . ($bgColor !== null ? "\x1b[" . $bgColor . 'm' : '') . $string . "\x1b[22;39m\x1b[0;49m"; } public function setColor($color) { $color = $this-&gt;getColorCode($color, 'fg'); echo "\x1b[" . $color . 'm'; } public function setBgColor($bgColor) { $bgColor = $this-&gt;getColorCode($bgColor, 'bg'); echo "\x1b[" . ($bgColor) . 'm'; } public function resetColor() { echo "\x1b[0;49m"; echo "\x1b[22;39m"; echo "\x1b[25;39m"; echo "\x1b[24;39m"; } public function getTitle() { } public function setCharset(Charset\CharsetInterface $charset) { $this-&gt;charset = $charset; } public function getCharset() { if ($this-&gt;charset === null) { $this-&gt;charset = $this-&gt;getDefaultCharset(); } return $this-&gt;charset; } public function getDefaultCharset() { if ($this-&gt;isUtf8()) { return new Charset\Utf8; } return new Charset\DECSG(); } public function readChar($mask = null) { $this-&gt;setTTYMode('-icanon -echo'); $stream = fopen('php://stdin', 'rb'); do { $char = fgetc($stream); } while (strlen($char) !== 1 || ($mask !== null &amp;&amp; stristr($mask, $char) === false)); fclose($stream); $this-&gt;restoreTTYMode(); return $char; } public function clear() { echo "\x1b[2J"; $this-&gt;setPos(1, 1); } protected function restoreTTYMode() { if ($this-&gt;lastTTYMode === null) { return; } shell_exec('stty ' . escapeshellarg($this-&gt;lastTTYMode)); } protected function setTTYMode($mode) { $this-&gt;lastTTYMode = trim(`stty -g`); shell_exec('stty '.escapeshellcmd($mode)); } protected function getColorCode($color, $type = 'fg') { if ($color instanceof Xterm256) { $r = new ReflectionClass($color); $code = $r-&gt;getStaticPropertyValue('color'); if ($type == 'fg') { $code = sprintf($code, $color::FOREGROUND); } else { $code = sprintf($code, $color::BACKGROUND); } return $code; } if ($color !== null) { if (!isset(static::$ansiColorMap[$type][$color])) { throw new Exception\BadMethodCallException(sprintf( 'Unknown color "%s". Please use one of the Zend\Console\ColorInterface constants or use Zend\Console\Color\Xterm256::calculate', $color )); } return static::$ansiColorMap[$type][$color]; } return null; } } &lt;?php
 namespace Zend\Console\Adapter; use Zend\Console\Charset; use Zend\Console\Exception; abstract class AbstractAdapter implements AdapterInterface { protected static $hasMBString; protected $charset; protected $posX; protected $posY; public function write($text, $color = null, $bgColor = null) { if ($color !== null || $bgColor !== null) { echo $this-&gt;colorize($text, $color, $bgColor); } else { echo $text; } } public function writeText($text, $color = null, $bgColor = null) { return $this-&gt;write($text, $color, $bgColor); } public function writeLine($text = "", $color = null, $bgColor = null) { $width = $this-&gt;getStringWidth($text); $text = trim($text, "\r\n"); $test = str_replace("\n", " ", $text); $consoleWidth = $this-&gt;getWidth(); if ($width &gt; $consoleWidth) { $text = $this-&gt;stringTrim($text, $consoleWidth); $this-&gt;write($text, $color, $bgColor); } elseif ($width == $consoleWidth) { $this-&gt;write($text, $color, $bgColor); } else { $this-&gt;write($text, $color, $bgColor); $this-&gt;write("\n"); } } public function writeAt($text, $x, $y, $color = null, $bgColor = null) { $this-&gt;setPos( $x, $y ); $this-&gt;write( $text, $color, $bgColor ); } public function writeBox( $x1, $y1, $x2, $y2, $lineStyle = self::LINE_SINGLE, $fillStyle = self::FILL_NONE, $color = null, $bgColor = null, $fillColor = null, $fillBgColor = null ) { $x1 = (int) $x1; $y1 = (int) $y1; $x2 = (int) $x2; $y2 = (int) $y2; if ($x2 &lt; 0) { $x2 = $this-&gt;getWidth() - $x2; } if ($y2 &lt; 0) { $y2 = $this-&gt;getHeight() - $y2; } if ($x1 &lt; 0 || $y1 &lt; 0 || $x2 &lt; $x1 || $y2 &lt; $y1 ) { throw new Exception\BadMethodCallException('Supplied X,Y coordinates are invalid.'); } $charset = $this-&gt;getCharset(); $width = $x2 - $x1 + 1; $height = $y2 - $y1 + 1; if ($width &lt;= 2) { $lineStyle = static::LINE_NONE; } $this-&gt;write($charset::ACTIVATE); if ($lineStyle !== static::LINE_NONE) { switch ($lineStyle) { case static::LINE_SINGLE: $lineChar = $charset::LINE_SINGLE_EW; break; case static::LINE_DOUBLE: $lineChar = $charset::LINE_DOUBLE_EW; break; case static::LINE_BLOCK: default: $lineChar = $charset::LINE_BLOCK_EW; break; } $this-&gt;setPos($x1 + 1, $y1); $this-&gt;write(str_repeat($lineChar, $width - 2), $color, $bgColor); $this-&gt;setPos($x1 + 1, $y2); $this-&gt;write(str_repeat($lineChar, $width - 2), $color, $bgColor); } if (is_numeric($fillStyle) &amp;&amp; $fillStyle !== static::FILL_NONE) { switch ($fillStyle) { case static::FILL_SHADE_LIGHT: $fillChar = $charset::SHADE_LIGHT; break; case static::FILL_SHADE_MEDIUM: $fillChar = $charset::SHADE_MEDIUM; break; case static::FILL_SHADE_DARK: $fillChar = $charset::SHADE_DARK; break; case static::FILL_BLOCK: default: $fillChar = $charset::BLOCK; break; } } elseif ($fillStyle) { $fillChar = $this-&gt;stringTrim($fillStyle, 1); } else { $fillChar = ' '; } if ($lineStyle === static::LINE_NONE) { for ($y = $y1; $y &lt;= $y2; $y++) { $this-&gt;setPos($x1, $y); $this-&gt;write(str_repeat($fillChar, $width), $fillColor, $fillBgColor); } } else { switch ($lineStyle) { case static::LINE_DOUBLE: $lineChar = $charset::LINE_DOUBLE_NS; break; case static::LINE_BLOCK: $lineChar = $charset::LINE_BLOCK_NS; break; case static::LINE_SINGLE: default: $lineChar = $charset::LINE_SINGLE_NS; break; } for ($y = $y1 + 1; $y &lt; $y2; $y++) { $this-&gt;setPos($x1, $y); $this-&gt;write($lineChar, $color, $bgColor); $this-&gt;write(str_repeat($fillChar, $width - 2), $fillColor, $fillBgColor); $this-&gt;write($lineChar, $color, $bgColor); } } if ($lineStyle !== static::LINE_NONE) { if ($color !== null) { $this-&gt;setColor($color); } if ($bgColor !== null) { $this-&gt;setBgColor($bgColor); } if ($lineStyle === static::LINE_SINGLE) { $this-&gt;writeAt($charset::LINE_SINGLE_NW, $x1, $y1); $this-&gt;writeAt($charset::LINE_SINGLE_NE, $x2, $y1); $this-&gt;writeAt($charset::LINE_SINGLE_SE, $x2, $y2); $this-&gt;writeAt($charset::LINE_SINGLE_SW, $x1, $y2); } elseif ($lineStyle === static::LINE_DOUBLE) { $this-&gt;writeAt($charset::LINE_DOUBLE_NW, $x1, $y1); $this-&gt;writeAt($charset::LINE_DOUBLE_NE, $x2, $y1); $this-&gt;writeAt($charset::LINE_DOUBLE_SE, $x2, $y2); $this-&gt;writeAt($charset::LINE_DOUBLE_SW, $x1, $y2); } elseif ($lineStyle === static::LINE_BLOCK) { $this-&gt;writeAt($charset::LINE_BLOCK_NW, $x1, $y1); $this-&gt;writeAt($charset::LINE_BLOCK_NE, $x2, $y1); $this-&gt;writeAt($charset::LINE_BLOCK_SE, $x2, $y2); $this-&gt;writeAt($charset::LINE_BLOCK_SW, $x1, $y2); } } $this-&gt;write($charset::DEACTIVATE); $this-&gt;resetColor(); } public function writeTextBlock( $text, $width, $height = null, $x = 0, $y = 0, $color = null, $bgColor = null ) { } public function getWidth() { return 80; } public function getHeight() { return 25; } public function getSize() { return array( $this-&gt;getWidth(), $this-&gt;getHeight(), ); } public function isUtf8() { return true; } public function getPos() { } public function setPos($x, $y) { } public function showCursor() { } public function hideCursor() { } public function getTitle() { return ''; } public function setTitle($title) { } public function resetTitle() { } public function colorize($string, $color = null, $bgColor = null) { return $string; } public function setColor($color) { } public function setBgColor($color) { } public function resetColor() { } public function setCharset(Charset\CharsetInterface $charset) { $this-&gt;charset = $charset; } public function getCharset() { if ($this-&gt;charset === null) { $this-&gt;charset = $this-&gt;getDefaultCharset(); } return $this-&gt;charset; } public function getDefaultCharset() { return new Charset\Utf8; } public function clear() { echo "\f"; } public function clearLine() { echo "\r" . str_repeat( " ", $this-&gt;getWidth() ) . "\r"; } public function clearScreen() { return $this-&gt;clear(); } protected function getStringWidth($string) { $width = strlen($string); if (!$this-&gt;isUtf8()) { return $width; } if (static::$hasMBString === null) { static::$hasMBString = extension_loaded( 'mbstring' ); } $width = (static::$hasMBString) ? mb_strlen($string, 'UTF-8' ) : strlen(utf8_decode($string)); return $width; } protected function stringTrim($string, $length) { if ($this-&gt;isUtf8()) { if (static::$hasMBString === null) { static::$hasMBString = extension_loaded('mbstring'); } if (static::$hasMBString) { return mb_strlen($string, 'UTF-8'); } return strlen(utf8_decode($string)); } return strlen($string); } public function readLine($maxLength = 2048) { $f = fopen('php://stdin','r'); $line = stream_get_line($f, $maxLength, PHP_EOL); fclose($f); return rtrim($line,"\n\r"); } public function readChar($mask = null) { $f = fopen('php://stdin','r'); do { $char = fread($f,1); } while ($mask === null || stristr($mask, $char)); fclose($f); return $char; } } &lt;?php
 namespace Zend\Console\Adapter; use Zend\Console\Charset; use Zend\Console\Exception; class Windows extends Virtual { protected static $hasMBString; protected $probeResult; protected $modeResult; public function getWidth() { static $width; if ($width &gt; 0) { return $width; } if ($this-&gt;probeResult === null) { $this-&gt;runProbeCommand(); } if (count($this-&gt;probeResult) &amp;&amp; (int) $this-&gt;probeResult[0]) { $width = (int) $this-&gt;probeResult[0]; } else { $width = parent::getWidth(); } return $width; } public function getHeight() { static $height; if ($height &gt; 0) { return $height; } if ($this-&gt;probeResult === null) { $this-&gt;runProbeCommand(); } if (count($this-&gt;probeResult) &amp;&amp; (int) $this-&gt;probeResult[1]) { $height = (int) $this-&gt;probeResult[1]; } else { $height = parent::getheight(); } return $height; } protected function runProbeCommand() { exec( 'echo $size = $Host.ui.rawui.windowsize; write $($size.width) $($size.height) | powershell -NonInteractive -NoProfile -NoLogo -OutputFormat Text -Command -', $output, $return ); if ($return || empty($output)) { $this-&gt;probeResult = ''; } else { $this-&gt;probeResult = $output; } } protected function runModeCommand() { exec('mode', $output, $return); if ($return || !count($output)) { $this-&gt;modeResult = ''; } else { $this-&gt;modeResult = trim(implode('', $output)); } } public function isUtf8() { if ($this-&gt;modeResult === null) { $this-&gt;runModeCommand(); } if (preg_match('/Code page\:\s+(\d+)/', $this-&gt;modeResult, $matches)) { return (int) $matches[1] == 65001; } return false; } public function setPos($x, $y) { } public function getTitle() { exec('powershell -command "write $Host.UI.RawUI.WindowTitle"', $output, $result); if ($result || !$output) { return ''; } return trim($output, "\r\n"); } public function setCharset(Charset\CharsetInterface $charset) { $this-&gt;charset = $charset; } public function getCharset() { if ($this-&gt;charset === null) { $this-&gt;charset = $this-&gt;getDefaultCharset(); } return $this-&gt;charset; } public function getDefaultCharset() { return new Charset\AsciiExtended; } protected function switchToUtf8() { shell_exec('mode con cp select=65001'); } public function clear() { exec("powershell -NonInteractive -NoProfile -NoLogo -OutputFormat Text -Command Clear-Host", $output, $return); if ($return) { echo str_repeat("\r\n", $this-&gt;getHeight()); } } public function clearLine() { echo "\r" . str_repeat(' ', $this-&gt;getWidth()) . "\r"; } public function readChar($mask = null) { $useChoice = $mask !== null &amp;&amp; preg_match('/^[a-zA-Z0-9]+$/D', $mask); if ($useChoice) { do { exec('choice /n /cs /c:' . $mask, $output, $return); if ($return == 255 || $return &lt; 1 || $return &gt; strlen($mask)) { throw new Exception\RuntimeException('"choice" command failed to run. Are you using Windows XP or newer?'); } $char = substr($mask, $return - 1, 1); } while (!$char || ($mask !== null &amp;&amp; !stristr($mask, $char))); return $char; } if ($mask === null) { exec( 'powershell -NonInteractive -NoProfile -NoLogo -OutputFormat Text -Command "' . 'while ($Host.UI.RawUI.KeyAvailable) {$key = $Host.UI.RawUI.ReadKey(\'NoEcho,IncludeKeyDown\');}' . 'write $key.VirtualKeyCode;' . '"', $result, $return ); $char = !empty($result) ? implode('', $result) : null; if (!empty($char) &amp;&amp; !$return) { $char = chr($char); return $char; } } else { $mask = strtr($mask, "\n", "\r"); $asciiMask = array_map(function ($char) { return ord($char); }, str_split($mask)); $asciiMask = array_unique($asciiMask); $result = $return = null; exec( 'powershell -NonInteractive -NoProfile -NoLogo -OutputFormat Text -Command "' . '[int[]] $mask = ' . join(',', $asciiMask) . ';' . 'do {' . '$key = $Host.UI.RawUI.ReadKey(\'NoEcho,IncludeKeyDown\').VirtualKeyCode;' . '} while( !($mask -contains $key) );' . 'write $key;' . '"', $result, $return ); $char = !empty($result) ? trim(implode('', $result)) : null; if (!$return &amp;&amp; $char &amp;&amp; ($mask === null || in_array($char, $asciiMask))) { if ($char == 13) { $char = 10; } $char = chr($char); return $char; } } $stream = fopen('php://stdin', 'rb'); do { $char = fgetc($stream); $char = substr(trim($char), 0, 1); } while (!$char || ($mask !== null &amp;&amp; !stristr($mask, $char))); fclose($stream); return $char; } public function readLine($maxLength = 2048) { $f = fopen('php://stdin','r'); $line = rtrim(fread($f, $maxLength),"\r\n"); fclose($f); return $line; } } &lt;?php
 namespace Zend\Console; interface ColorInterface { const NORMAL = 0; const RESET = 0; const BLACK = 1; const RED = 2; const GREEN = 3; const YELLOW = 4; const BLUE = 5; const MAGENTA = 6; const CYAN = 7; const WHITE = 8; const GRAY = 9; const LIGHT_RED = 10; const LIGHT_GREEN = 11; const LIGHT_YELLOW = 12; const LIGHT_BLUE = 13; const LIGHT_MAGENTA = 14; const LIGHT_CYAN = 15; const LIGHT_WHITE = 16; } &lt;?php
 namespace Zend\Console; class Getopt { const MODE_ZEND = 'zend'; const MODE_GNU = 'gnu'; const PARAM_REQUIRED = '='; const PARAM_OPTIONAL = '-'; const TYPE_STRING = 's'; const TYPE_WORD = 'w'; const TYPE_INTEGER = 'i'; const TYPE_NUMERIC_FLAG = '#'; const CONFIG_RULEMODE = 'ruleMode'; const CONFIG_DASHDASH = 'dashDash'; const CONFIG_IGNORECASE = 'ignoreCase'; const CONFIG_PARSEALL = 'parseAll'; const CONFIG_CUMULATIVE_PARAMETERS = 'cumulativeParameters'; const CONFIG_CUMULATIVE_FLAGS = 'cumulativeFlags'; const CONFIG_PARAMETER_SEPARATOR = 'parameterSeparator'; const CONFIG_FREEFORM_FLAGS = 'freeformFlags'; const CONFIG_NUMERIC_FLAGS = 'numericFlags'; protected $getoptConfig = array( self::CONFIG_RULEMODE =&gt; self::MODE_ZEND, self::CONFIG_DASHDASH =&gt; true, self::CONFIG_IGNORECASE =&gt; false, self::CONFIG_PARSEALL =&gt; true, self::CONFIG_CUMULATIVE_PARAMETERS =&gt; false, self::CONFIG_CUMULATIVE_FLAGS =&gt; false, self::CONFIG_PARAMETER_SEPARATOR =&gt; null, self::CONFIG_FREEFORM_FLAGS =&gt; false, self::CONFIG_NUMERIC_FLAGS =&gt; false ); protected $argv = array(); protected $progname = ''; protected $rules = array(); protected $ruleMap = array(); protected $options = array(); protected $remainingArgs = array(); protected $parsed = false; public function __construct($rules, $argv = null, $getoptConfig = array()) { if (!isset($_SERVER['argv'])) { $errorDescription = (ini_get('register_argc_argv') == false) ? "argv is not available, because ini option 'register_argc_argv' is set Off" : '$_SERVER["argv"] is not set, but Zend_Console_Getopt cannot work without this information.'; throw new Exception\InvalidArgumentException($errorDescription); } $this-&gt;progname = $_SERVER['argv'][0]; $this-&gt;setOptions($getoptConfig); $this-&gt;addRules($rules); if (!is_array($argv)) { $argv = array_slice($_SERVER['argv'], 1); } if (isset($argv)) { $this-&gt;addArguments((array) $argv); } } public function __get($key) { return $this-&gt;getOption($key); } public function __isset($key) { $this-&gt;parse(); if (isset($this-&gt;ruleMap[$key])) { $key = $this-&gt;ruleMap[$key]; return isset($this-&gt;options[$key]); } return false; } public function __set($key, $value) { $this-&gt;parse(); if (isset($this-&gt;ruleMap[$key])) { $key = $this-&gt;ruleMap[$key]; $this-&gt;options[$key] = $value; } } public function __toString() { return $this-&gt;toString(); } public function __unset($key) { $this-&gt;parse(); if (isset($this-&gt;ruleMap[$key])) { $key = $this-&gt;ruleMap[$key]; unset($this-&gt;options[$key]); } } public function addArguments($argv) { if (!is_array($argv)) { throw new Exception\InvalidArgumentException("Parameter #1 to addArguments should be an array"); } $this-&gt;argv = array_merge($this-&gt;argv, $argv); $this-&gt;parsed = false; return $this; } public function setArguments($argv) { if (!is_array($argv)) { throw new Exception\InvalidArgumentException("Parameter #1 to setArguments should be an array"); } $this-&gt;argv = $argv; $this-&gt;parsed = false; return $this; } public function setOptions($getoptConfig) { if (isset($getoptConfig)) { foreach ($getoptConfig as $key =&gt; $value) { $this-&gt;setOption($key, $value); } } return $this; } public function setOption($configKey, $configValue) { if ($configKey !== null) { $this-&gt;getoptConfig[$configKey] = $configValue; } return $this; } public function addRules($rules) { $ruleMode = $this-&gt;getoptConfig['ruleMode']; switch ($this-&gt;getoptConfig['ruleMode']) { case self::MODE_ZEND: if (is_array($rules)) { $this-&gt;_addRulesModeZend($rules); break; } case self::MODE_GNU: $this-&gt;_addRulesModeGnu($rules); break; default: $method = '_addRulesMode' . ucfirst($ruleMode); $this-&gt;$method($rules); } $this-&gt;parsed = false; return $this; } public function toString() { $this-&gt;parse(); $s = array(); foreach ($this-&gt;options as $flag =&gt; $value) { $s[] = $flag . '=' . ($value === true ? 'true' : $value); } return implode(' ', $s); } public function toArray() { $this-&gt;parse(); $s = array(); foreach ($this-&gt;options as $flag =&gt; $value) { $s[] = $flag; if ($value !== true) { $s[] = $value; } } return $s; } public function toJson() { $this-&gt;parse(); $j = array(); foreach ($this-&gt;options as $flag =&gt; $value) { $j['options'][] = array( 'option' =&gt; array( 'flag' =&gt; $flag, 'parameter' =&gt; $value ) ); } $json = \Zend\Json\Json::encode($j); return $json; } public function toXml() { $this-&gt;parse(); $doc = new \DomDocument('1.0', 'utf-8'); $optionsNode = $doc-&gt;createElement('options'); $doc-&gt;appendChild($optionsNode); foreach ($this-&gt;options as $flag =&gt; $value) { $optionNode = $doc-&gt;createElement('option'); $optionNode-&gt;setAttribute('flag', utf8_encode($flag)); if ($value !== true) { $optionNode-&gt;setAttribute('parameter', utf8_encode($value)); } $optionsNode-&gt;appendChild($optionNode); } $xml = $doc-&gt;saveXML(); return $xml; } public function getOptions() { $this-&gt;parse(); return array_keys($this-&gt;options); } public function getOption($flag) { $this-&gt;parse(); if ($this-&gt;getoptConfig[self::CONFIG_IGNORECASE]) { $flag = strtolower($flag); } if (isset($this-&gt;ruleMap[$flag])) { $flag = $this-&gt;ruleMap[$flag]; if (isset($this-&gt;options[$flag])) { return $this-&gt;options[$flag]; } } return null; } public function getRemainingArgs() { $this-&gt;parse(); return $this-&gt;remainingArgs; } public function getArguments() { $result = $this-&gt;getRemainingArgs(); foreach ($this-&gt;getOptions() as $option) { $result[$option] = $this-&gt;getOption($option); } return $result; } public function getUsageMessage() { $usage = "Usage: {$this-&gt;progname} [ options ]\n"; $maxLen = 20; $lines = array(); foreach ($this-&gt;rules as $rule) { if (isset($rule['isFreeformFlag'])) { continue; } $flags = array(); if (is_array($rule['alias'])) { foreach ($rule['alias'] as $flag) { $flags[] = (strlen($flag) == 1 ? '-' : '--') . $flag; } } $linepart['name'] = implode('|', $flags); if (isset($rule['param']) &amp;&amp; $rule['param'] != 'none') { $linepart['name'] .= ' '; switch ($rule['param']) { case 'optional': $linepart['name'] .= "[ &lt;{$rule['paramType']}&gt; ]"; break; case 'required': $linepart['name'] .= "&lt;{$rule['paramType']}&gt;"; break; } } if (strlen($linepart['name']) &gt; $maxLen) { $maxLen = strlen($linepart['name']); } $linepart['help'] = ''; if (isset($rule['help'])) { $linepart['help'] .= $rule['help']; } $lines[] = $linepart; } foreach ($lines as $linepart) { $usage .= sprintf("%s %s\n", str_pad($linepart['name'], $maxLen), $linepart['help']); } return $usage; } public function setAliases($aliasMap) { foreach ($aliasMap as $flag =&gt; $alias) { if ($this-&gt;getoptConfig[self::CONFIG_IGNORECASE]) { $flag = strtolower($flag); $alias = strtolower($alias); } if (!isset($this-&gt;ruleMap[$flag])) { continue; } $flag = $this-&gt;ruleMap[$flag]; if (isset($this-&gt;rules[$alias]) || isset($this-&gt;ruleMap[$alias])) { $o = (strlen($alias) == 1 ? '-' : '--') . $alias; throw new Exception\InvalidArgumentException("Option \"$o\" is being defined more than once."); } $this-&gt;rules[$flag]['alias'][] = $alias; $this-&gt;ruleMap[$alias] = $flag; } return $this; } public function setHelp($helpMap) { foreach ($helpMap as $flag =&gt; $help) { if (!isset($this-&gt;ruleMap[$flag])) { continue; } $flag = $this-&gt;ruleMap[$flag]; $this-&gt;rules[$flag]['help'] = $help; } return $this; } public function parse() { if ($this-&gt;parsed === true) { return; } $argv = $this-&gt;argv; $this-&gt;options = array(); $this-&gt;remainingArgs = array(); while (count($argv) &gt; 0) { if ($argv[0] == '--') { array_shift($argv); if ($this-&gt;getoptConfig[self::CONFIG_DASHDASH]) { $this-&gt;remainingArgs = array_merge($this-&gt;remainingArgs, $argv); break; } } if (substr($argv[0], 0, 2) == '--') { $this-&gt;_parseLongOption($argv); } elseif (substr($argv[0], 0, 1) == '-' &amp;&amp; ('-' != $argv[0] || count($argv) &gt;1)) { $this-&gt;_parseShortOptionCluster($argv); } elseif ($this-&gt;getoptConfig[self::CONFIG_PARSEALL]) { $this-&gt;remainingArgs[] = array_shift($argv); } else { $this-&gt;remainingArgs = array_merge($this-&gt;remainingArgs, $argv); break; } } $this-&gt;parsed = true; return $this; } protected function _parseLongOption(&amp;$argv) { $optionWithParam = ltrim(array_shift($argv), '-'); $l = explode('=', $optionWithParam, 2); $flag = array_shift($l); $param = array_shift($l); if (isset($param)) { array_unshift($argv, $param); } $this-&gt;_parseSingleOption($flag, $argv); } protected function _parseShortOptionCluster(&amp;$argv) { $flagCluster = ltrim(array_shift($argv), '-'); foreach (str_split($flagCluster) as $flag) { $this-&gt;_parseSingleOption($flag, $argv); } } protected function _parseSingleOption($flag, &amp;$argv) { if ($this-&gt;getoptConfig[self::CONFIG_IGNORECASE]) { $flag = strtolower($flag); } if (preg_match('/^\d+$/', $flag)) { return $this-&gt;_setNumericOptionValue($flag); } if (!isset($this-&gt;ruleMap[$flag])) { if (!$this-&gt;getoptConfig[self::CONFIG_FREEFORM_FLAGS]) { throw new Exception\RuntimeException( "Option \"$flag\" is not recognized.", $this-&gt;getUsageMessage() ); } $this-&gt;ruleMap[$flag] = $flag; $realFlag = $flag; $this-&gt;rules[$realFlag] = array( 'param' =&gt; 'optional', 'isFreeformFlag' =&gt; true ); } else { $realFlag = $this-&gt;ruleMap[$flag]; } switch ($this-&gt;rules[$realFlag]['param']) { case 'required': if (count($argv) &gt; 0) { $param = array_shift($argv); $this-&gt;_checkParameterType($realFlag, $param); } else { throw new Exception\RuntimeException( "Option \"$flag\" requires a parameter.", $this-&gt;getUsageMessage() ); } break; case 'optional': if (count($argv) &gt; 0 &amp;&amp; substr($argv[0], 0, 1) != '-') { $param = array_shift($argv); $this-&gt;_checkParameterType($realFlag, $param); } else { $param = true; } break; default: $param = true; } $this-&gt;_setSingleOptionValue($realFlag, $param); } protected function _setNumericOptionValue($value) { if (!$this-&gt;getoptConfig[self::CONFIG_NUMERIC_FLAGS]) { throw new Exception\RuntimeException("Using of numeric flags are deny by configuration"); } if (empty($this-&gt;getoptConfig['numericFlagsOption'])) { throw new Exception\RuntimeException("Any option for handling numeric flags are specified"); } return $this-&gt;_setSingleOptionValue($this-&gt;getoptConfig['numericFlagsOption'], $value); } protected function _setSingleOptionValue($flag, $value) { if (true === $value &amp;&amp; $this-&gt;getoptConfig[self::CONFIG_CUMULATIVE_FLAGS]) { return $this-&gt;_setBooleanFlagValue($flag); } $separator = $this-&gt;getoptConfig[self::CONFIG_PARAMETER_SEPARATOR]; if (is_string($value) &amp;&amp; !empty($separator) &amp;&amp; is_string($separator) &amp;&amp; substr_count($value, $separator)) { $value = array_filter(explode($separator, $value)); } if (!array_key_exists($flag, $this-&gt;options)) { $this-&gt;options[$flag] = $value; } elseif ($this-&gt;getoptConfig[self::CONFIG_CUMULATIVE_PARAMETERS]) { $this-&gt;options[$flag] = (array) $this-&gt;options[$flag]; array_push($this-&gt;options[$flag], $value); } else { $this-&gt;options[$flag] = $value; } } protected function _setBooleanFlagValue($flag) { $this-&gt;options[$flag] = array_key_exists($flag, $this-&gt;options) ? (int) $this-&gt;options[$flag] + 1 : true; } protected function _checkParameterType($flag, $param) { $type = 'string'; if (isset($this-&gt;rules[$flag]['paramType'])) { $type = $this-&gt;rules[$flag]['paramType']; } switch ($type) { case 'word': if (preg_match('/\W/', $param)) { throw new Exception\RuntimeException( "Option \"$flag\" requires a single-word parameter, but was given \"$param\".", $this-&gt;getUsageMessage()); } break; case 'integer': if (preg_match('/\D/', $param)) { throw new Exception\RuntimeException( "Option \"$flag\" requires an integer parameter, but was given \"$param\".", $this-&gt;getUsageMessage()); } break; case 'string': default: break; } return true; } protected function _addRulesModeGnu($rules) { $ruleArray = array(); preg_match_all('/([a-zA-Z0-9]:?)/', $rules, $ruleArray); foreach ($ruleArray[1] as $rule) { $r = array(); $flag = substr($rule, 0, 1); if ($this-&gt;getoptConfig[self::CONFIG_IGNORECASE]) { $flag = strtolower($flag); } $r['alias'][] = $flag; if (substr($rule, 1, 1) == ':') { $r['param'] = 'required'; $r['paramType'] = 'string'; } else { $r['param'] = 'none'; } $this-&gt;rules[$flag] = $r; $this-&gt;ruleMap[$flag] = $flag; } } protected function _addRulesModeZend($rules) { foreach ($rules as $ruleCode =&gt; $helpMessage) { if (in_array(substr($ruleCode, -2, 1), array('-', '='))) { $flagList = substr($ruleCode, 0, -2); $delimiter = substr($ruleCode, -2, 1); $paramType = substr($ruleCode, -1); } else { $flagList = $ruleCode; $delimiter = $paramType = null; } if ($this-&gt;getoptConfig[self::CONFIG_IGNORECASE]) { $flagList = strtolower($flagList); } $flags = explode('|', $flagList); $rule = array(); $mainFlag = $flags[0]; foreach ($flags as $flag) { if (empty($flag)) { throw new Exception\InvalidArgumentException("Blank flag not allowed in rule \"$ruleCode\"."); } if (strlen($flag) == 1) { if (isset($this-&gt;ruleMap[$flag])) { throw new Exception\InvalidArgumentException( "Option \"-$flag\" is being defined more than once."); } $this-&gt;ruleMap[$flag] = $mainFlag; $rule['alias'][] = $flag; } else { if (isset($this-&gt;rules[$flag]) || isset($this-&gt;ruleMap[$flag])) { throw new Exception\InvalidArgumentException( "Option \"--$flag\" is being defined more than once."); } $this-&gt;ruleMap[$flag] = $mainFlag; $rule['alias'][] = $flag; } } if (isset($delimiter)) { switch ($delimiter) { case self::PARAM_REQUIRED: $rule['param'] = 'required'; break; case self::PARAM_OPTIONAL: default: $rule['param'] = 'optional'; } switch (substr($paramType, 0, 1)) { case self::TYPE_WORD: $rule['paramType'] = 'word'; break; case self::TYPE_INTEGER: $rule['paramType'] = 'integer'; break; case self::TYPE_NUMERIC_FLAG: $rule['paramType'] = 'numericFlag'; $this-&gt;getoptConfig['numericFlagsOption'] = $mainFlag; break; case self::TYPE_STRING: default: $rule['paramType'] = 'string'; } } else { $rule['param'] = 'none'; } $rule['help'] = $helpMessage; $this-&gt;rules[$mainFlag] = $rule; } } } &lt;?php
 namespace Zend\Console\Color; class Xterm256 { const FOREGROUND = 38; const BACKGROUND = 48; public static $color; protected function __construct($color = null) { static::$color = $color !== null ? sprintf('%%s;5;%s', $color) : null; } public static function calculate($hexColor) { $hex = str_split($hexColor, 2); if (count($hex) !== 3 || !preg_match('#[0-9A-F]{6}#i', $hexColor)) { return new static(); } $ahex = array_map(function ($hex) { $val = round(((hexdec($hex) - 55)/40), 0); return $val &gt; 0 ? (int) $val : 0; }, $hex); $dhex = array_map('hexdec', $hex); if (array_fill(0, 3, $dhex[0]) === $dhex &amp;&amp; (int) substr($dhex[0], -1) === 8) { $x11 = 232 + (int) floor($dhex[0]/10); return new static($x11); } $x11 = $ahex[0] * 36 + $ahex[1] * 6 + $ahex[2] + 16; return new static($x11); } } &lt;?php
 namespace Zend\Console; abstract class Console { protected static $instance; protected static $isConsole; public static function getInstance($forceAdapter = null, $forceCharset = null) { if (static::$instance instanceof Adapter\AdapterInterface) { return static::$instance; } if ($forceAdapter !== null) { if (substr($forceAdapter, 0, 1) == '\\') { $className = $forceAdapter; } elseif (stristr($forceAdapter, '\\')) { $className = __NAMESPACE__ . '\\' . ltrim($forceAdapter, '\\'); } else { $className = __NAMESPACE__ . '\\Adapter\\' . $forceAdapter; } if (!class_exists($className)) { throw new Exception\InvalidArgumentException(sprintf( 'Cannot find Console adapter class "%s"', $className )); } } else { $className = static::detectBestAdapter(); if (!$className) { throw new Exception\RuntimeException('Cannot create Console adapter - am I running in a console?'); } } static::$instance = new $className(); if ($forceCharset !== null) { if (substr($forceCharset, 0, 1) == '\\') { $className = $forceCharset; } elseif (stristr($forceAdapter, '\\')) { $className = __NAMESPACE__ . '\\' . ltrim($forceCharset, '\\'); } else { $className = __NAMESPACE__ . '\\Charset\\' . $forceCharset; } if (!class_exists($className)) { throw new Exception\InvalidArgumentException(sprintf( 'Cannot find Charset class "%s"', $className )); } static::$instance-&gt;setCharset(new $className()); } return static::$instance; } public static function isWindows() { return ( defined('PHP_OS') &amp;&amp; ( substr_compare(PHP_OS,'win',0,3,true) === 0) ) || (getenv('OS') != false &amp;&amp; substr_compare(getenv('OS'),'windows',0,7,true)) ; } public static function isAnsicon() { return getenv('ANSICON') !== false; } public static function isConsole() { if (null !== static::$isConsole &amp;&amp; is_bool(static::$isConsole)) { return static::$isConsole; } return PHP_SAPI == 'cli'; } public static function overrideIsConsole($flag) { static::$isConsole = $flag; } public static function detectBestAdapter() { if (!static::isConsole()) { return null; } if (static::isWindows()) { if (static::isAnsicon()) { $className = __NAMESPACE__ . '\Adapter\WindowsAnsicon'; } else { $className = __NAMESPACE__ . '\Adapter\Windows'; } return $className; } $className = __NAMESPACE__ . '\Adapter\Posix'; return $className; } public static function __callStatic($funcName, $arguments) { $instance = static::getInstance(); return call_user_func_array(array($instance, $funcName), $arguments); } } &lt;?php
 namespace Zend\Console; use Zend\Stdlib\Message; use Zend\Stdlib\Parameters; use Zend\Stdlib\RequestInterface; class Request extends Message implements RequestInterface { protected $params = null; protected $envParams = null; protected $scriptName = null; public function __construct(array $args = null, array $env = null) { if ($args === null) { if (!isset($_SERVER['argv'])) { $errorDescription = (ini_get('register_argc_argv') == false) ? "Cannot create Console\\Request because PHP ini option 'register_argc_argv' is set Off" : 'Cannot create Console\\Request because $_SERVER["argv"] is not set for unknown reason.'; throw new Exception\RuntimeException($errorDescription); } $args = $_SERVER['argv']; } if ($env === null) { $env = $_ENV; } if (count($args) &gt; 0) { $this-&gt;setScriptName(array_shift($args)); } $this-&gt;params()-&gt;fromArray($args); $this-&gt;setContent($args); $this-&gt;env()-&gt;fromArray($env); } public function setParams(Parameters $params) { $this-&gt;params = $params; $this-&gt;setContent($params); return $this; } public function getParams() { if ($this-&gt;params === null) { $this-&gt;params = new Parameters(); } return $this-&gt;params; } public function getParam($name, $default = null) { return $this-&gt;params()-&gt;get($name, $default); } public function params() { if ($this-&gt;params === null) { $this-&gt;params = new Parameters(); } return $this-&gt;params; } public function setEnv(Parameters $env) { $this-&gt;envParams = $env; return $this; } public function env() { if ($this-&gt;envParams === null) { $this-&gt;envParams = new Parameters(); } return $this-&gt;envParams; } public function toString() { return trim(implode(' ', $this-&gt;params()-&gt;toArray())); } public function __toString() { return $this-&gt;toString(); } public function setScriptName($scriptName) { $this-&gt;scriptName = $scriptName; } public function getScriptName() { return $this-&gt;scriptName; } } &lt;?php
 namespace Zend\EventManager; use SplStack; class ResponseCollection extends SplStack { protected $stopped = false; public function stopped() { return $this-&gt;stopped; } public function setStopped($flag) { $this-&gt;stopped = (bool) $flag; return $this; } public function first() { return parent::bottom(); } public function last() { if (count($this) === 0) { return null; } return parent::top(); } public function contains($value) { foreach ($this as $response) { if ($response === $value) { return true; } } return false; } } &lt;?php
 namespace Zend\EventManager\Exception; class InvalidCallbackException extends DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\EventManager\Exception; class DomainException extends \DomainException implements ExceptionInterface { } &lt;?php
 namespace Zend\EventManager\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\EventManager\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\EventManager\Filter; use Zend\EventManager\ResponseCollection; use Zend\Stdlib\CallbackHandler; interface FilterInterface { public function run($context, array $params = array()); public function attach($callback); public function detach(CallbackHandler $filter); public function getFilters(); public function clearFilters(); public function getResponses(); } &lt;?php
 namespace Zend\EventManager\Filter; use Zend\Stdlib\CallbackHandler; use Zend\Stdlib\SplPriorityQueue; class FilterIterator extends SplPriorityQueue { public function contains($datum) { $chain = clone $this; foreach ($chain as $item) { if ($item === $datum) { return true; } } return false; } public function remove($datum) { $this-&gt;setExtractFlags(self::EXTR_BOTH); $removed = false; $items = array(); $this-&gt;rewind(); while (!$this-&gt;isEmpty()) { $item = $this-&gt;extract(); if ($item['data'] === $datum) { $removed = true; continue; } $items[] = $item; } foreach ($items as $item) { $this-&gt;insert($item['data'], $item['priority']); } $this-&gt;setExtractFlags(self::EXTR_DATA); return $removed; } public function next($context = null, array $params = array(), $chain = null) { if (empty($context) || $chain-&gt;isEmpty()) { return; } $next = $this-&gt;extract(); if (!$next instanceof CallbackHandler) { return; } $return = call_user_func($next-&gt;getCallback(), $context, $params, $chain); return $return; } } &lt;?php
 namespace Zend\EventManager; interface SharedEventManagerAwareInterface { public function setSharedManager(SharedEventManagerInterface $sharedEventManager); public function getSharedManager(); public function unsetSharedManager(); } &lt;?php
 namespace Zend\EventManager; interface EventManagerAwareInterface extends EventsCapableInterface { public function setEventManager(EventManagerInterface $eventManager); } &lt;?php
 namespace Zend\EventManager; use ArrayAccess; class Event implements EventInterface { protected $name; protected $target; protected $params = array(); protected $stopPropagation = false; public function __construct($name = null, $target = null, $params = null) { if (null !== $name) { $this-&gt;setName($name); } if (null !== $target) { $this-&gt;setTarget($target); } if (null !== $params) { $this-&gt;setParams($params); } } public function getName() { return $this-&gt;name; } public function getTarget() { return $this-&gt;target; } public function setParams($params) { if (!is_array($params) &amp;&amp; !is_object($params)) { throw new Exception\InvalidArgumentException(sprintf( 'Event parameters must be an array or object; received "%s"', gettype($params) )); } $this-&gt;params = $params; return $this; } public function getParams() { return $this-&gt;params; } public function getParam($name, $default = null) { if (is_array($this-&gt;params) || $this-&gt;params instanceof ArrayAccess) { if (!isset($this-&gt;params[$name])) { return $default; } return $this-&gt;params[$name]; } if (!isset($this-&gt;params-&gt;{$name})) { return $default; } return $this-&gt;params-&gt;{$name}; } public function setName($name) { $this-&gt;name = (string) $name; return $this; } public function setTarget($target) { $this-&gt;target = $target; return $this; } public function setParam($name, $value) { if (is_array($this-&gt;params) || $this-&gt;params instanceof ArrayAccess) { $this-&gt;params[$name] = $value; } else { $this-&gt;params-&gt;{$name} = $value; } return $this; } public function stopPropagation($flag = true) { $this-&gt;stopPropagation = (bool) $flag; } public function propagationIsStopped() { return $this-&gt;stopPropagation; } } &lt;?php
 namespace Zend\EventManager; interface EventsCapableInterface { public function getEventManager(); } &lt;?php
 namespace Zend\EventManager; use Zend\Stdlib\CallbackHandler; use Zend\Stdlib\PriorityQueue; interface SharedEventManagerInterface { public function getListeners($id, $event); public function attach($id, $event, $callback, $priority = 1); public function detach($id, CallbackHandler $listener); public function getEvents($id); public function clearListeners($id, $event = null); } &lt;?php
 namespace Zend\EventManager; class StaticEventManager extends SharedEventManager { protected static $instance; protected function __construct() { } private function __clone() { } public static function getInstance() { if (null === static::$instance) { static::setInstance(new static()); } return static::$instance; } public static function setInstance(SharedEventManagerInterface $instance) { static::$instance = $instance; } public static function hasInstance() { return (static::$instance instanceof SharedEventManagerInterface); } public static function resetInstance() { static::$instance = null; } } &lt;?php
 namespace Zend\EventManager; use Zend\Stdlib\CallbackHandler; use Zend\Stdlib\PriorityQueue; class SharedEventManager implements SharedEventAggregateAwareInterface, SharedEventManagerInterface { protected $identifiers = array(); public function attach($id, $event, $callback, $priority = 1) { $ids = (array) $id; $listeners = array(); foreach ($ids as $id) { if (!array_key_exists($id, $this-&gt;identifiers)) { $this-&gt;identifiers[$id] = new EventManager(); } $listeners[] = $this-&gt;identifiers[$id]-&gt;attach($event, $callback, $priority); } if (count($listeners) &gt; 1) { return $listeners; } return $listeners[0]; } public function attachAggregate(SharedListenerAggregateInterface $aggregate, $priority = 1) { return $aggregate-&gt;attachShared($this, $priority); } public function detach($id, CallbackHandler $listener) { if (!array_key_exists($id, $this-&gt;identifiers)) { return false; } return $this-&gt;identifiers[$id]-&gt;detach($listener); } public function detachAggregate(SharedListenerAggregateInterface $aggregate) { return $aggregate-&gt;detachShared($this); } public function getEvents($id) { if (!array_key_exists($id, $this-&gt;identifiers)) { if ('*' != $id &amp;&amp; array_key_exists('*', $this-&gt;identifiers)) { return $this-&gt;identifiers['*']-&gt;getEvents(); } return false; } return $this-&gt;identifiers[$id]-&gt;getEvents(); } public function getListeners($id, $event) { if (!array_key_exists($id, $this-&gt;identifiers)) { return false; } return $this-&gt;identifiers[$id]-&gt;getListeners($event); } public function clearListeners($id, $event = null) { if (!array_key_exists($id, $this-&gt;identifiers)) { return false; } if (null === $event) { unset($this-&gt;identifiers[$id]); return true; } return $this-&gt;identifiers[$id]-&gt;clearListeners($event); } } &lt;?php
 namespace Zend\EventManager; use \Zend\EventManager\ProvidesEvents; trait EventManagerAwareTrait { use ProvidesEvents; } &lt;?php
 namespace Zend\EventManager; use ArrayAccess; use ArrayObject; use Traversable; use Zend\Stdlib\CallbackHandler; use Zend\Stdlib\PriorityQueue; class EventManager implements EventManagerInterface { protected $events = array(); protected $eventClass = 'Zend\EventManager\Event'; protected $identifiers = array(); protected $sharedManager = null; public function __construct($identifiers = null) { $this-&gt;setIdentifiers($identifiers); } public function setEventClass($class) { $this-&gt;eventClass = $class; return $this; } public function setSharedManager(SharedEventManagerInterface $sharedEventManager) { $this-&gt;sharedManager = $sharedEventManager; StaticEventManager::setInstance($sharedEventManager); return $this; } public function unsetSharedManager() { $this-&gt;sharedManager = false; } public function getSharedManager() { if (false === $this-&gt;sharedManager || $this-&gt;sharedManager instanceof SharedEventManagerInterface ) { return $this-&gt;sharedManager; } if (!StaticEventManager::hasInstance()) { return false; } $this-&gt;sharedManager = StaticEventManager::getInstance(); return $this-&gt;sharedManager; } public function getIdentifiers() { return $this-&gt;identifiers; } public function setIdentifiers($identifiers) { if (is_array($identifiers) || $identifiers instanceof Traversable) { $this-&gt;identifiers = array_unique((array) $identifiers); } elseif ($identifiers !== null) { $this-&gt;identifiers = array($identifiers); } return $this; } public function addIdentifiers($identifiers) { if (is_array($identifiers) || $identifiers instanceof Traversable) { $this-&gt;identifiers = array_unique($this-&gt;identifiers + (array) $identifiers); } elseif ($identifiers !== null) { $this-&gt;identifiers = array_unique(array_merge($this-&gt;identifiers, array($identifiers))); } return $this; } public function trigger($event, $target = null, $argv = array(), $callback = null) { if ($event instanceof EventInterface) { $e = $event; $event = $e-&gt;getName(); $callback = $target; } elseif ($target instanceof EventInterface) { $e = $target; $e-&gt;setName($event); $callback = $argv; } elseif ($argv instanceof EventInterface) { $e = $argv; $e-&gt;setName($event); $e-&gt;setTarget($target); } else { $e = new $this-&gt;eventClass(); $e-&gt;setName($event); $e-&gt;setTarget($target); $e-&gt;setParams($argv); } if ($callback &amp;&amp; !is_callable($callback)) { throw new Exception\InvalidCallbackException('Invalid callback provided'); } return $this-&gt;triggerListeners($event, $e, $callback); } public function triggerUntil($event, $target, $argv = null, $callback = null) { if ($event instanceof EventInterface) { $e = $event; $event = $e-&gt;getName(); $callback = $target; } elseif ($target instanceof EventInterface) { $e = $target; $e-&gt;setName($event); $callback = $argv; } elseif ($argv instanceof EventInterface) { $e = $argv; $e-&gt;setName($event); $e-&gt;setTarget($target); } else { $e = new $this-&gt;eventClass(); $e-&gt;setName($event); $e-&gt;setTarget($target); $e-&gt;setParams($argv); } if (!is_callable($callback)) { throw new Exception\InvalidCallbackException('Invalid callback provided'); } return $this-&gt;triggerListeners($event, $e, $callback); } public function attach($event, $callback = null, $priority = 1) { if ($event instanceof ListenerAggregateInterface) { return $this-&gt;attachAggregate($event, $callback); } if (null === $callback) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects a callback; none provided', __METHOD__ )); } if (is_array($event)) { $listeners = array(); foreach ($event as $name) { $listeners[] = $this-&gt;attach($name, $callback, $priority); } return $listeners; } if (empty($this-&gt;events[$event])) { $this-&gt;events[$event] = new PriorityQueue(); } $listener = new CallbackHandler($callback, array('event' =&gt; $event, 'priority' =&gt; $priority)); $this-&gt;events[$event]-&gt;insert($listener, $priority); return $listener; } public function attachAggregate(ListenerAggregateInterface $aggregate, $priority = 1) { return $aggregate-&gt;attach($this, $priority); } public function detach($listener) { if ($listener instanceof ListenerAggregateInterface) { return $this-&gt;detachAggregate($listener); } if (!$listener instanceof CallbackHandler) { throw new Exception\InvalidArgumentException(sprintf( '%s: expected a ListenerAggregateInterface or CallbackHandler; received "%s"', __METHOD__, (is_object($listener) ? get_class($listener) : gettype($listener)) )); } $event = $listener-&gt;getMetadatum('event'); if (!$event || empty($this-&gt;events[$event])) { return false; } $return = $this-&gt;events[$event]-&gt;remove($listener); if (!$return) { return false; } if (!count($this-&gt;events[$event])) { unset($this-&gt;events[$event]); } return true; } public function detachAggregate(ListenerAggregateInterface $aggregate) { return $aggregate-&gt;detach($this); } public function getEvents() { return array_keys($this-&gt;events); } public function getListeners($event) { if (!array_key_exists($event, $this-&gt;events)) { return new PriorityQueue(); } return $this-&gt;events[$event]; } public function clearListeners($event) { if (!empty($this-&gt;events[$event])) { unset($this-&gt;events[$event]); } } public function prepareArgs(array $args) { return new ArrayObject($args); } protected function triggerListeners($event, EventInterface $e, $callback = null) { $responses = new ResponseCollection; $listeners = $this-&gt;getListeners($event); $sharedListeners = $this-&gt;getSharedListeners($event); $sharedWildcardListeners = $this-&gt;getSharedListeners('*'); $wildcardListeners = $this-&gt;getListeners('*'); if (count($sharedListeners) || count($sharedWildcardListeners) || count($wildcardListeners)) { $listeners = clone $listeners; $this-&gt;insertListeners($listeners, $sharedListeners); $this-&gt;insertListeners($listeners, $sharedWildcardListeners); $this-&gt;insertListeners($listeners, $wildcardListeners); } foreach ($listeners as $listener) { $responses-&gt;push(call_user_func($listener-&gt;getCallback(), $e)); if ($e-&gt;propagationIsStopped()) { $responses-&gt;setStopped(true); break; } if ($callback &amp;&amp; call_user_func($callback, $responses-&gt;last())) { $responses-&gt;setStopped(true); break; } } return $responses; } protected function getSharedListeners($event) { if (!$sharedManager = $this-&gt;getSharedManager()) { return array(); } $identifiers = $this-&gt;getIdentifiers(); if (!in_array('*', $identifiers)) { $identifiers[] = '*'; } $sharedListeners = array(); foreach ($identifiers as $id) { if (!$listeners = $sharedManager-&gt;getListeners($id, $event)) { continue; } if (!is_array($listeners) &amp;&amp; !($listeners instanceof Traversable)) { continue; } foreach ($listeners as $listener) { if (!$listener instanceof CallbackHandler) { continue; } $sharedListeners[] = $listener; } } return $sharedListeners; } protected function insertListeners($masterListeners, $listeners) { foreach ($listeners as $listener) { $priority = $listener-&gt;getMetadatum('priority'); if (null === $priority) { $priority = 1; } elseif (is_array($priority)) { $priority = array_shift($priority); } $masterListeners-&gt;insert($listener, $priority); } } } &lt;?php
 namespace Zend\EventManager; use Traversable; use Zend\Stdlib\CallbackHandler; interface EventManagerInterface extends SharedEventManagerAwareInterface { public function trigger($event, $target = null, $argv = array(), $callback = null); public function triggerUntil($event, $target, $argv = null, $callback = null); public function attach($event, $callback = null, $priority = 1); public function detach($listener); public function getEvents(); public function getListeners($event); public function clearListeners($event); public function setEventClass($class); public function getIdentifiers(); public function setIdentifiers($identifiers); public function addIdentifiers($identifiers); public function attachAggregate(ListenerAggregateInterface $aggregate, $priority = 1); public function detachAggregate(ListenerAggregateInterface $aggregate); } &lt;?php
 namespace Zend\EventManager; interface SharedEventAggregateAwareInterface { public function attachAggregate(SharedListenerAggregateInterface $aggregate, $priority = 1); public function detachAggregate(SharedListenerAggregateInterface $aggregate); } &lt;?php
 namespace Zend\EventManager; use Zend\Stdlib\CallbackHandler; class FilterChain implements Filter\FilterInterface { protected $filters; public function __construct() { $this-&gt;filters = new Filter\FilterIterator(); } public function run($context, array $argv = array()) { $chain = clone $this-&gt;getFilters(); if ($chain-&gt;isEmpty()) { return; } $next = $chain-&gt;extract(); if (!$next instanceof CallbackHandler) { return; } return call_user_func($next-&gt;getCallback(), $context, $argv, $chain); } public function attach($callback, $priority = 1) { if (empty($callback)) { throw new Exception\InvalidCallbackException('No callback provided'); } $filter = new CallbackHandler($callback, array('priority' =&gt; $priority)); $this-&gt;filters-&gt;insert($filter, $priority); return $filter; } public function detach(CallbackHandler $filter) { return $this-&gt;filters-&gt;remove($filter); } public function getFilters() { return $this-&gt;filters; } public function clearFilters() { $this-&gt;filters = new Filter\FilterIterator(); } public function getResponses() { return null; } } &lt;?php
 namespace Zend\EventManager; use Traversable; trait ProvidesEvents { protected $events; public function setEventManager(EventManagerInterface $events) { $identifiers = array(__CLASS__, get_called_class()); if (isset($this-&gt;eventIdentifier)) { if ((is_string($this-&gt;eventIdentifier)) || (is_array($this-&gt;eventIdentifier)) || ($this-&gt;eventIdentifier instanceof Traversable) ) { $identifiers = array_unique(array_merge($identifiers, (array) $this-&gt;eventIdentifier)); } elseif (is_object($this-&gt;eventIdentifier)) { $identifiers[] = $this-&gt;eventIdentifier; } } $events-&gt;setIdentifiers($identifiers); $this-&gt;events = $events; return $this; } public function getEventManager() { if (!$this-&gt;events instanceof EventManagerInterface) { $this-&gt;setEventManager(new EventManager()); } return $this-&gt;events; } } &lt;?php
 namespace Zend\EventManager; use Zend\Stdlib\CallbackHandler; use Zend\Stdlib\PriorityQueue; class GlobalEventManager { protected static $events; public static function setEventCollection(EventManagerInterface $events = null) { static::$events = $events; } public static function getEventCollection() { if (null === static::$events) { static::setEventCollection(new EventManager()); } return static::$events; } public static function trigger($event, $context, $argv = array()) { return static::getEventCollection()-&gt;trigger($event, $context, $argv); } public static function triggerUntil($event, $context, $argv, $callback) { return static::getEventCollection()-&gt;triggerUntil($event, $context, $argv, $callback); } public static function attach($event, $callback, $priority = 1) { return static::getEventCollection()-&gt;attach($event, $callback, $priority); } public static function detach(CallbackHandler $listener) { return static::getEventCollection()-&gt;detach($listener); } public static function getEvents() { return static::getEventCollection()-&gt;getEvents(); } public static function getListeners($event) { return static::getEventCollection()-&gt;getListeners($event); } public static function clearListeners($event) { static::getEventCollection()-&gt;clearListeners($event); } } &lt;?php
 namespace Zend\EventManager; use ArrayAccess; interface EventInterface { public function getName(); public function getTarget(); public function getParams(); public function getParam($name, $default = null); public function setName($name); public function setTarget($target); public function setParams($params); public function setParam($name, $value); public function stopPropagation($flag = true); public function propagationIsStopped(); } &lt;?php
 namespace Zend\EventManager; interface SharedListenerAggregateInterface { public function attachShared(SharedEventManagerInterface $events); public function detachShared(SharedEventManagerInterface $events); } &lt;?php
 namespace Zend\EventManager; interface ListenerAggregateInterface { public function attach(EventManagerInterface $events); public function detach(EventManagerInterface $events); } &lt;?php
 namespace Zend\Config; use ArrayAccess; use Countable; use Iterator; class Config implements Countable, Iterator, ArrayAccess { protected $allowModifications; protected $count; protected $data = array(); protected $skipNextIteration; public function __construct(array $array, $allowModifications = false) { $this-&gt;allowModifications = (bool) $allowModifications; foreach ($array as $key =&gt; $value) { if (is_array($value)) { $this-&gt;data[$key] = new static($value, $this-&gt;allowModifications); } else { $this-&gt;data[$key] = $value; } $this-&gt;count++; } } public function get($name, $default = null) { if (array_key_exists($name, $this-&gt;data)) { return $this-&gt;data[$name]; } return $default; } public function __get($name) { return $this-&gt;get($name); } public function __set($name, $value) { if ($this-&gt;allowModifications) { if (is_array($value)) { $value = new static($value, true); } if (null === $name) { $this-&gt;data[] = $value; } else { $this-&gt;data[$name] = $value; } $this-&gt;count++; } else { throw new Exception\RuntimeException('Config is read only'); } } public function __clone() { $array = array(); foreach ($this-&gt;data as $key =&gt; $value) { if ($value instanceof self) { $array[$key] = clone $value; } else { $array[$key] = $value; } } $this-&gt;data = $array; } public function toArray() { $array = array(); $data = $this-&gt;data; foreach ($data as $key =&gt; $value) { if ($value instanceof self) { $array[$key] = $value-&gt;toArray(); } else { $array[$key] = $value; } } return $array; } public function __isset($name) { return isset($this-&gt;data[$name]); } public function __unset($name) { if (!$this-&gt;allowModifications) { throw new Exception\InvalidArgumentException('Config is read only'); } elseif (isset($this-&gt;data[$name])) { unset($this-&gt;data[$name]); $this-&gt;count--; $this-&gt;skipNextIteration = true; } } public function count() { return $this-&gt;count; } public function current() { $this-&gt;skipNextIteration = false; return current($this-&gt;data); } public function key() { return key($this-&gt;data); } public function next() { if ($this-&gt;skipNextIteration) { $this-&gt;skipNextIteration = false; return; } next($this-&gt;data); } public function rewind() { $this-&gt;skipNextIteration = false; reset($this-&gt;data); } public function valid() { return ($this-&gt;key() !== null); } public function offsetExists($offset) { return $this-&gt;__isset($offset); } public function offsetGet($offset) { return $this-&gt;__get($offset); } public function offsetSet($offset, $value) { $this-&gt;__set($offset, $value); } public function offsetUnset($offset) { $this-&gt;__unset($offset); } public function merge(Config $merge) { foreach ($merge as $key =&gt; $value) { if (array_key_exists($key, $this-&gt;data)) { if (is_int($key)) { $this-&gt;data[] = $value; } elseif ($value instanceof self &amp;&amp; $this-&gt;data[$key] instanceof self) { $this-&gt;data[$key]-&gt;merge($value); } else { if ($value instanceof self) { $this-&gt;data[$key] = new static($value-&gt;toArray(), $this-&gt;allowModifications); } else { $this-&gt;data[$key] = $value; } } } else { if ($value instanceof self) { $this-&gt;data[$key] = new static($value-&gt;toArray(), $this-&gt;allowModifications); } else { $this-&gt;data[$key] = $value; } $this-&gt;count++; } } return $this; } public function setReadOnly() { $this-&gt;allowModifications = false; foreach ($this-&gt;data as $value) { if ($value instanceof self) { $value-&gt;setReadOnly(); } } } public function isReadOnly() { return !$this-&gt;allowModifications; } } &lt;?php
 namespace Zend\Config\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Config\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Config\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Config\Writer; use Traversable; use Zend\Config\Exception; use Zend\Stdlib\ArrayUtils; abstract class AbstractWriter implements WriterInterface { public function toFile($filename, $config, $exclusiveLock = true) { if (empty($filename)) { throw new Exception\InvalidArgumentException('No file name specified'); } $flags = 0; if ($exclusiveLock) { $flags |= LOCK_EX; } set_error_handler( function ($error, $message = '', $file = '', $line = 0) use ($filename) { throw new Exception\RuntimeException(sprintf( 'Error writing to "%s": %s', $filename, $message ), $error); }, E_WARNING ); try { file_put_contents($filename, $this-&gt;toString($config), $flags); } catch( \Exception $e ) { restore_error_handler(); throw $e; } restore_error_handler(); } public function toString($config) { if ($config instanceof Traversable) { $config = ArrayUtils::iteratorToArray($config); } elseif (!is_array($config)) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable config'); } return $this-&gt;processConfig($config); } abstract protected function processConfig(array $config); } &lt;?php
 namespace Zend\Config\Writer; use Zend\Config\Exception; class Yaml extends AbstractWriter { protected $yamlEncoder; public function __construct($yamlEncoder = null) { if ($yamlEncoder !== null) { $this-&gt;setYamlEncoder($yamlEncoder); } else { if (function_exists('yaml_emit')) { $this-&gt;setYamlEncoder('yaml_emit'); } } } public function getYamlEncoder() { return $this-&gt;yamlEncoder; } public function setYamlEncoder($yamlEncoder) { if (!is_callable($yamlEncoder)) { throw new Exception\InvalidArgumentException('Invalid parameter to setYamlEncoder() - must be callable'); } $this-&gt;yamlEncoder = $yamlEncoder; return $this; } public function processConfig(array $config) { if (null === $this-&gt;getYamlEncoder()) { throw new Exception\RuntimeException("You didn't specify a Yaml callback encoder"); } $config = call_user_func($this-&gt;getYamlEncoder(), $config); if (null === $config) { throw new Exception\RuntimeException("Error generating YAML data"); } return $config; } } &lt;?php
 namespace Zend\Config\Writer; use Zend\Json\Json as JsonFormat; class Json extends AbstractWriter { public function processConfig(array $config) { return JsonFormat::encode($config); } } &lt;?php
 namespace Zend\Config\Writer; use XMLWriter; use Zend\Config\Exception; class Xml extends AbstractWriter { public function processConfig(array $config) { $writer = new XMLWriter('UTF-8'); $writer-&gt;openMemory(); $writer-&gt;setIndent(true); $writer-&gt;setIndentString(str_repeat(' ', 4)); $writer-&gt;startDocument('1.0', 'UTF-8'); $writer-&gt;startElement('zend-config'); foreach ($config as $sectionName =&gt; $data) { if (!is_array($data)) { $writer-&gt;writeElement($sectionName, (string) $data); } else { $this-&gt;addBranch($sectionName, $data, $writer); } } $writer-&gt;endElement(); $writer-&gt;endDocument(); return $writer-&gt;outputMemory(); } protected function addBranch($branchName, array $config, XMLWriter $writer) { $branchType = null; foreach ($config as $key =&gt; $value) { if ($branchType === null) { if (is_numeric($key)) { $branchType = 'numeric'; } else { $writer-&gt;startElement($branchName); $branchType = 'string'; } } elseif ($branchType !== (is_numeric($key) ? 'numeric' : 'string')) { throw new Exception\RuntimeException('Mixing of string and numeric keys is not allowed'); } if ($branchType === 'numeric') { if (is_array($value)) { $this-&gt;addBranch($value, $value, $writer); } else { $writer-&gt;writeElement($branchName, (string) $value); } } else { if (is_array($value)) { $this-&gt;addBranch($key, $value, $writer); } else { $writer-&gt;writeElement($key, (string) $value); } } } if ($branchType === 'string') { $writer-&gt;endElement(); } } } &lt;?php
 namespace Zend\Config\Writer; interface WriterInterface { public function toFile($filename, $config, $exclusiveLock = true); public function toString($config); } &lt;?php
 namespace Zend\Config\Writer; class PhpArray extends AbstractWriter { public function processConfig(array $config) { $arrayString = "&lt;?php\n" . "return " . var_export($config, true) . ";\n"; return $arrayString; } } &lt;?php
 namespace Zend\Config\Writer; use Zend\Config\Exception; class Ini extends AbstractWriter { protected $nestSeparator = '.'; protected $renderWithoutSections = false; public function setNestSeparator($separator) { $this-&gt;nestSeparator = $separator; return $this; } public function getNestSeparator() { return $this-&gt;nestSeparator; } public function setRenderWithoutSectionsFlags($withoutSections) { $this-&gt;renderWithoutSections = (bool) $withoutSections; return $this; } public function shouldRenderWithoutSections() { return $this-&gt;renderWithoutSections; } public function processConfig(array $config) { $iniString = ''; if ($this-&gt;shouldRenderWithoutSections()) { $iniString .= $this-&gt;addBranch($config); } else { $config = $this-&gt;sortRootElements($config); foreach ($config as $sectionName =&gt; $data) { if (!is_array($data)) { $iniString .= $sectionName . ' = ' . $this-&gt;prepareValue($data) . "\n"; } else { $iniString .= '[' . $sectionName . ']' . "\n" . $this-&gt;addBranch($data) . "\n"; } } } return $iniString; } protected function addBranch(array $config, $parents = array()) { $iniString = ''; foreach ($config as $key =&gt; $value) { $group = array_merge($parents, array($key)); if (is_array($value)) { $iniString .= $this-&gt;addBranch($value, $group); } else { $iniString .= implode($this-&gt;nestSeparator, $group) . ' = ' . $this-&gt;prepareValue($value) . "\n"; } } return $iniString; } protected function prepareValue($value) { if (is_integer($value) || is_float($value)) { return $value; } elseif (is_bool($value)) { return ($value ? 'true' : 'false'); } elseif (false === strpos($value, '"')) { return '"' . $value . '"'; } else { throw new Exception\RuntimeException('Value can not contain double quotes'); } } protected function sortRootElements(array $config) { $sections = array(); foreach ($config as $key =&gt; $value) { if (is_array($value)) { $sections[$key] = $value; unset($config[$key]); } } foreach ($sections as $key =&gt; $value) { $config[$key] = $value; } return $config; } } &lt;?php
 namespace Zend\Config\Reader; use Zend\Config\Exception; class Yaml implements ReaderInterface { protected $directory; protected $yamlDecoder; public function __construct($yamlDecoder = null) { if ($yamlDecoder !== null) { $this-&gt;setYamlDecoder($yamlDecoder); } else { if (function_exists('yaml_parse')) { $this-&gt;setYamlDecoder('yaml_parse'); } } } public function setYamlDecoder($yamlDecoder) { if (!is_callable($yamlDecoder)) { throw new Exception\RuntimeException( 'Invalid parameter to setYamlDecoder() - must be callable' ); } $this-&gt;yamlDecoder = $yamlDecoder; return $this; } public function getYamlDecoder() { return $this-&gt;yamlDecoder; } public function fromFile($filename) { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\RuntimeException(sprintf( "File '%s' doesn't exist or not readable", $filename )); } if (null === $this-&gt;getYamlDecoder()) { throw new Exception\RuntimeException("You didn't specify a Yaml callback decoder"); } $this-&gt;directory = dirname($filename); $config = call_user_func($this-&gt;getYamlDecoder(), file_get_contents($filename)); if (null === $config) { throw new Exception\RuntimeException("Error parsing YAML data"); } return $this-&gt;process($config); } public function fromString($string) { if (null === $this-&gt;getYamlDecoder()) { throw new Exception\RuntimeException("You didn't specify a Yaml callback decoder"); } if (empty($string)) { return array(); } $this-&gt;directory = null; $config = call_user_func($this-&gt;getYamlDecoder(), $string); if (null === $config) { throw new Exception\RuntimeException("Error parsing YAML data"); } return $this-&gt;process($config); } protected function process(array $data) { foreach ($data as $key =&gt; $value) { if (is_array($value)) { $data[$key] = $this-&gt;process($value); } if (trim($key) === '@include') { if ($this-&gt;directory === null) { throw new Exception\RuntimeException('Cannot process @include statement for a json string'); } $reader = clone $this; unset($data[$key]); $data = array_replace_recursive($data, $reader-&gt;fromFile($this-&gt;directory . '/' . $value)); } } return $data; } } &lt;?php
 namespace Zend\Config\Reader; use Zend\Config\Exception; use Zend\Json\Exception as JsonException; use Zend\Json\Json as JsonFormat; class Json implements ReaderInterface { protected $directory; public function fromFile($filename) { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\RuntimeException(sprintf( "File '%s' doesn't exist or not readable", $filename )); } $this-&gt;directory = dirname($filename); try { $config = JsonFormat::decode(file_get_contents($filename), JsonFormat::TYPE_ARRAY); } catch (JsonException\RuntimeException $e) { throw new Exception\RuntimeException($e-&gt;getMessage()); } return $this-&gt;process($config); } public function fromString($string) { if (empty($string)) { return array(); } $this-&gt;directory = null; try { $config = JsonFormat::decode($string, JsonFormat::TYPE_ARRAY); } catch (JsonException\RuntimeException $e) { throw new Exception\RuntimeException($e-&gt;getMessage()); } return $this-&gt;process($config); } protected function process(array $data) { foreach ($data as $key =&gt; $value) { if (is_array($value)) { $data[$key] = $this-&gt;process($value); } if (trim($key) === '@include') { if ($this-&gt;directory === null) { throw new Exception\RuntimeException('Cannot process @include statement for a JSON string'); } $reader = clone $this; unset($data[$key]); $data = array_replace_recursive($data, $reader-&gt;fromFile($this-&gt;directory . '/' . $value)); } } return $data; } } &lt;?php
 namespace Zend\Config\Reader; use XMLReader; use Zend\Config\Exception; class Xml implements ReaderInterface { protected $reader; protected $directory; protected $textNodes = array( XMLReader::TEXT, XMLReader::CDATA, XMLReader::WHITESPACE, XMLReader::SIGNIFICANT_WHITESPACE ); public function fromFile($filename) { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\RuntimeException(sprintf( "File '%s' doesn't exist or not readable", $filename )); } $this-&gt;reader = new XMLReader(); $this-&gt;reader-&gt;open($filename, null, LIBXML_XINCLUDE); $this-&gt;directory = dirname($filename); set_error_handler( function ($error, $message = '', $file = '', $line = 0) use ($filename) { throw new Exception\RuntimeException(sprintf( 'Error reading XML file "%s": %s', $filename, $message ), $error); }, E_WARNING ); $return = $this-&gt;process(); restore_error_handler(); return $return; } public function fromString($string) { if (empty($string)) { return array(); } $this-&gt;reader = new XMLReader(); $this-&gt;reader-&gt;xml($string, null, LIBXML_XINCLUDE); $this-&gt;directory = null; set_error_handler( function ($error, $message = '', $file = '', $line = 0) { throw new Exception\RuntimeException(sprintf( 'Error reading XML string: %s', $message ), $error); }, E_WARNING ); $return = $this-&gt;process(); restore_error_handler(); return $return; } protected function process() { return $this-&gt;processNextElement(); } protected function processNextElement() { $children = array(); $text = ''; while ($this-&gt;reader-&gt;read()) { if ($this-&gt;reader-&gt;nodeType === XMLReader::ELEMENT) { if ($this-&gt;reader-&gt;depth === 0) { return $this-&gt;processNextElement(); } $attributes = $this-&gt;getAttributes(); $name = $this-&gt;reader-&gt;name; if ($this-&gt;reader-&gt;isEmptyElement) { $child = array(); } else { $child = $this-&gt;processNextElement(); } if ($attributes) { if (!is_array($child)) { $child = array(); } $child = array_merge($child, $attributes); } if (isset($children[$name])) { if (!is_array($children[$name]) || !array_key_exists(0, $children[$name])) { $children[$name] = array($children[$name]); } $children[$name][] = $child; } else { $children[$name] = $child; } } elseif ($this-&gt;reader-&gt;nodeType === XMLReader::END_ELEMENT) { break; } elseif (in_array($this-&gt;reader-&gt;nodeType, $this-&gt;textNodes)) { $text .= $this-&gt;reader-&gt;value; } } return $children ?: $text; } protected function getAttributes() { $attributes = array(); if ($this-&gt;reader-&gt;hasAttributes) { while ($this-&gt;reader-&gt;moveToNextAttribute()) { $attributes[$this-&gt;reader-&gt;localName] = $this-&gt;reader-&gt;value; } $this-&gt;reader-&gt;moveToElement(); } return $attributes; } } &lt;?php
 namespace Zend\Config\Reader; interface ReaderInterface { public function fromFile($filename); public function fromString($string); } &lt;?php
 namespace Zend\Config\Reader; use Zend\Config\Exception; class Ini implements ReaderInterface { protected $nestSeparator = '.'; protected $directory; public function setNestSeparator($separator) { $this-&gt;nestSeparator = $separator; return $this; } public function getNestSeparator() { return $this-&gt;nestSeparator; } public function fromFile($filename) { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\RuntimeException(sprintf( "File '%s' doesn't exist or not readable", $filename )); } $this-&gt;directory = dirname($filename); set_error_handler( function ($error, $message = '', $file = '', $line = 0) use ($filename) { throw new Exception\RuntimeException(sprintf( 'Error reading INI file "%s": %s', $filename, $message ), $error); }, E_WARNING ); $ini = parse_ini_file($filename, true); restore_error_handler(); return $this-&gt;process($ini); } public function fromString($string) { if (empty($string)) { return array(); } $this-&gt;directory = null; set_error_handler( function ($error, $message = '', $file = '', $line = 0) { throw new Exception\RuntimeException(sprintf( 'Error reading INI string: %s', $message ), $error); }, E_WARNING ); $ini = parse_ini_string($string, true); restore_error_handler(); return $this-&gt;process($ini); } protected function process(array $data) { $config = array(); foreach ($data as $section =&gt; $value) { if (is_array($value)) { if (strpos($section, $this-&gt;nestSeparator) !== false) { $sections = explode($this-&gt;nestSeparator, $section); $config = array_merge_recursive($config, $this-&gt;buildNestedSection($sections, $value)); } else { $config[$section] = $this-&gt;processSection($value); } } else { $this-&gt;processKey($section, $value, $config); } } return $config; } private function buildNestedSection($sections, $value) { if(count($sections) == 0) { return $this-&gt;processSection($value); } $nestedSection = array(); $first = array_shift($sections); $nestedSection[$first] = $this-&gt;buildNestedSection($sections, $value); return $nestedSection; } protected function processSection(array $section) { $config = array(); foreach ($section as $key =&gt; $value) { $this-&gt;processKey($key, $value, $config); } return $config; } protected function processKey($key, $value, array &amp;$config) { if (strpos($key, $this-&gt;nestSeparator) !== false) { $pieces = explode($this-&gt;nestSeparator, $key, 2); if (!strlen($pieces[0]) || !strlen($pieces[1])) { throw new Exception\RuntimeException(sprintf('Invalid key "%s"', $key)); } elseif (!isset($config[$pieces[0]])) { if ($pieces[0] === '0' &amp;&amp; !empty($config)) { $config = array($pieces[0] =&gt; $config); } else { $config[$pieces[0]] = array(); } } elseif (!is_array($config[$pieces[0]])) { throw new Exception\RuntimeException(sprintf( 'Cannot create sub-key for "%s", as key already exists', $pieces[0] )); } $this-&gt;processKey($pieces[1], $value, $config[$pieces[0]]); } else { if ($key === '@include') { if ($this-&gt;directory === null) { throw new Exception\RuntimeException('Cannot process @include statement for a string config'); } $reader = clone $this; $include = $reader-&gt;fromFile($this-&gt;directory . '/' . $value); $config = array_replace_recursive($config, $include); } else { $config[$key] = $value; } } } } &lt;?php
 namespace Zend\Config; use Zend\ServiceManager\AbstractPluginManager; class ReaderPluginManager extends AbstractPluginManager { protected $invokableClasses = array( 'ini' =&gt; 'Zend\Config\Reader\Ini', 'json' =&gt; 'Zend\Config\Reader\Json', 'xml' =&gt; 'Zend\Config\Reader\Xml', 'yaml' =&gt; 'Zend\Config\Reader\Yaml', ); public function validatePlugin($plugin) { if ($plugin instanceof Reader\ReaderInterface) { return; } throw new Exception\InvalidArgumentException(sprintf( 'Plugin of type %s is invalid; must implement %s\Reader\ReaderInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\Config\Processor; use Traversable; use Zend\Config\Config; use Zend\Config\Exception; class Token implements ProcessorInterface { protected $prefix = ''; protected $suffix = ''; protected $tokens = array(); protected $map = null; public function __construct($tokens = array(), $prefix = '', $suffix = '') { $this-&gt;setTokens($tokens); $this-&gt;setPrefix($prefix); $this-&gt;setSuffix($suffix); } public function setPrefix($prefix) { $this-&gt;map = null; $this-&gt;prefix = $prefix; return $this; } public function getPrefix() { return $this-&gt;prefix; } public function setSuffix($suffix) { $this-&gt;map = null; $this-&gt;suffix = $suffix; return $this; } public function getSuffix() { return $this-&gt;suffix; } public function setTokens($tokens) { if (is_array($tokens)) { $this-&gt;tokens = $tokens; } elseif ($tokens instanceof Config) { $this-&gt;tokens = $tokens-&gt;toArray(); } elseif ($tokens instanceof Traversable) { $this-&gt;tokens = array(); foreach ($tokens as $key =&gt; $val) { $this-&gt;tokens[$key] = $val; } } else { throw new Exception\InvalidArgumentException('Cannot use ' . gettype($tokens) . ' as token registry.'); } $this-&gt;map = null; return $this; } public function getTokens() { return $this-&gt;tokens; } public function addToken($token, $value) { if (!is_scalar($token)) { throw new Exception\InvalidArgumentException('Cannot use ' . gettype($token) . ' as token name.'); } $this-&gt;tokens[$token] = $value; $this-&gt;map = null; return $this; } public function setToken($token, $value) { return $this-&gt;addToken($token, $value); } protected function buildMap() { if (!$this-&gt;suffix &amp;&amp; !$this-&gt;prefix) { $this-&gt;map = $this-&gt;tokens; } else { $this-&gt;map = array(); foreach ($this-&gt;tokens as $token =&gt; $value) { $this-&gt;map[$this-&gt;prefix . $token . $this-&gt;suffix] = $value; } } } public function process(Config $config) { if ($config-&gt;isReadOnly()) { throw new Exception\InvalidArgumentException('Cannot process config because it is read-only'); } if ($this-&gt;map === null) { $this-&gt;buildMap(); } $keys = array_keys($this-&gt;map); $values = array_values($this-&gt;map); foreach ($config as $key =&gt; $val) { if ($val instanceof Config) { $this-&gt;process($val); } else { $config-&gt;$key = str_replace($keys, $values, $val); } } return $config; } public function processValue($value) { if ($this-&gt;map === null) { $this-&gt;buildMap(); } $keys = array_keys($this-&gt;map); $values = array_values($this-&gt;map); return str_replace($keys, $values, $value); } } &lt;?php
 namespace Zend\Config\Processor; class Constant extends Token implements ProcessorInterface { protected $userOnly = true; public function __construct($userOnly = true, $prefix = '', $suffix = '') { $this-&gt;setUserOnly($userOnly); $this-&gt;setPrefix($prefix); $this-&gt;setSuffix($suffix); $this-&gt;loadConstants(); } public function getUserOnly() { return $this-&gt;userOnly; } public function setUserOnly($userOnly) { $this-&gt;userOnly = (bool) $userOnly; return $this; } public function loadConstants() { if ($this-&gt;userOnly) { $constants = get_defined_constants(true); $constants = isset($constants['user']) ? $constants['user'] : array(); $this-&gt;setTokens($constants); } else { $this-&gt;setTokens(get_defined_constants()); } } public function getTokens() { return $this-&gt;tokens; } } &lt;?php
 namespace Zend\Config\Processor; use Zend\Config\Config; use Zend\Config\Exception; use Zend\Stdlib\PriorityQueue; class Queue extends PriorityQueue implements ProcessorInterface { public function process(Config $config) { if ($config-&gt;isReadOnly()) { throw new Exception\InvalidArgumentException('Cannot process config because it is read-only'); } foreach ($this as $parser) { $parser-&gt;process($config); } } public function processValue($value) { foreach ($this as $parser) { $value = $parser-&gt;processValue($value); } return $value; } } &lt;?php
 namespace Zend\Config\Processor; use Zend\Config\Config; interface ProcessorInterface { public function process(Config $value); public function processValue($value); } &lt;?php
 namespace Zend\Config\Processor; use Zend\Config\Config; use Zend\Config\Exception; use Zend\I18n\Translator\Translator as ZendTranslator; class Translator implements ProcessorInterface { protected $translator; protected $locale = null; protected $textDomain = 'default'; public function __construct(ZendTranslator $translator, $textDomain = 'default', $locale = null) { $this-&gt;setTranslator($translator); $this-&gt;setTextDomain($textDomain); $this-&gt;setLocale($locale); } public function setTranslator(ZendTranslator $translator) { $this-&gt;translator = $translator; return $this; } public function getTranslator() { return $this-&gt;translator; } public function setLocale($locale) { $this-&gt;locale = $locale; return $this; } public function getLocale() { return $this-&gt;locale; } public function setTextDomain($textDomain) { $this-&gt;textDomain = $textDomain; return $this; } public function getTextDomain() { return $this-&gt;textDomain; } public function process(Config $config) { if ($config-&gt;isReadOnly()) { throw new Exception\InvalidArgumentException('Cannot process config because it is read-only'); } foreach ($config as $key =&gt; $val) { if ($val instanceof Config) { $this-&gt;process($val); } else { $config-&gt;{$key} = $this-&gt;translator-&gt;translate($val, $this-&gt;textDomain, $this-&gt;locale); } } return $config; } public function processValue($value) { return $this-&gt;translator-&gt;translate($value, $this-&gt;textDomain, $this-&gt;locale); } } &lt;?php
 namespace Zend\Config\Processor; use Zend\Config\Config; use Zend\Config\Exception; use Zend\Filter\FilterInterface as ZendFilter; class Filter implements ProcessorInterface { protected $filter; public function __construct(ZendFilter $filter) { $this-&gt;setFilter($filter); } public function setFilter(ZendFilter $filter) { $this-&gt;filter = $filter; return $this; } public function getFilter() { return $this-&gt;filter; } public function process(Config $config) { if ($config-&gt;isReadOnly()) { throw new Exception\InvalidArgumentException('Cannot process config because it is read-only'); } foreach ($config as $key =&gt; $val) { if ($val instanceof Config) { $this-&gt;process($val); } else { $config-&gt;$key = $this-&gt;filter-&gt;filter($val); } } return $config; } public function processValue($value) { return $this-&gt;filter-&gt;filter($value); } } &lt;?php
 namespace Zend\Config; use Zend\Stdlib\ArrayUtils; class Factory { public static $readers = null; public static $writers = null; protected static $extensions = array( 'ini' =&gt; 'ini', 'json' =&gt; 'json', 'xml' =&gt; 'xml', 'yaml' =&gt; 'yaml', ); protected static $writerExtensions = array( 'php' =&gt; 'php', 'ini' =&gt; 'ini', 'json' =&gt; 'json', 'xml' =&gt; 'xml', 'yaml' =&gt; 'yaml', ); public static function fromFile($filename, $returnConfigObject = false) { $pathinfo = pathinfo($filename); if (!isset($pathinfo['extension'])) { throw new Exception\RuntimeException(sprintf( 'Filename "%s" is missing an extension and cannot be auto-detected', $filename )); } $extension = strtolower($pathinfo['extension']); if ($extension === 'php') { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\RuntimeException(sprintf( "File '%s' doesn't exist or not readable", $filename )); } $config = include $filename; } elseif (isset(static::$extensions[$extension])) { $reader = static::$extensions[$extension]; if (!$reader instanceof Reader\ReaderInterface) { $reader = static::getReaderPluginManager()-&gt;get($reader); static::$extensions[$extension] = $reader; } $config = $reader-&gt;fromFile($filename); } else { throw new Exception\RuntimeException(sprintf( 'Unsupported config file extension: .%s', $pathinfo['extension'] )); } return ($returnConfigObject) ? new Config($config) : $config; } public static function fromFiles(array $files, $returnConfigObject = false) { $config = array(); foreach ($files as $file) { $config = ArrayUtils::merge($config, static::fromFile($file)); } return ($returnConfigObject) ? new Config($config) : $config; } public static function toFile($filename, $config) { if ( (is_object($config) &amp;&amp; !($config instanceOf Config)) || (!is_object($config) &amp;&amp; !is_array($config)) ) { throw new Exception\InvalidArgumentException( __METHOD__." \$config should be an array or instance of Zend\\Config\\Config" ); } $extension = substr(strrchr($filename, '.'), 1); $directory = dirname($filename); if (!is_dir($directory)) { throw new Exception\RuntimeException( "Directory '{$directory}' does not exists!" ); } if (!is_writable($directory)) { throw new Exception\RuntimeException( "Cannot write in directory '{$directory}'" ); } if(!isset(self::$writerExtensions[$extension])) { throw new Exception\RuntimeException( "Unsupported config file extension: '.{$extension}' for writing." ); } $writer = self::$writerExtensions[$extension]; if (($writer instanceOf Writer\AbstractWriter) === false) { $writer = self::getWriterPluginManager()-&gt;get($writer); self::$writerExtensions[$extension] = $writer; } if (is_object($config)) { $config = $config-&gt;toArray(); } $content = $writer-&gt;processConfig($config); return (bool) (file_put_contents($filename, $content) !== false); } public static function setReaderPluginManager(ReaderPluginManager $readers) { static::$readers = $readers; } public static function getReaderPluginManager() { if (static::$readers === null) { static::$readers = new ReaderPluginManager(); } return static::$readers; } public static function setWriterPluginManager(WriterPluginManager $writers) { self::$writers = $writers; } public static function getWriterPluginManager() { if (static::$writers === null) { static::$writers = new WriterPluginManager(); } return static::$writers; } public static function registerReader($extension, $reader) { $extension = strtolower($extension); if (!is_string($reader) &amp;&amp; !$reader instanceof Reader\ReaderInterface) { throw new Exception\InvalidArgumentException(sprintf( 'Reader should be plugin name, class name or ' . 'instance of %s\Reader\ReaderInterface; received "%s"', __NAMESPACE__, (is_object($reader) ? get_class($reader) : gettype($reader)) )); } static::$extensions[$extension] = $reader; } public static function registerWriter($extension, $writer) { $extension = strtolower($extension); if (!is_string($writer) &amp;&amp; !$writer instanceof Writer\AbstractWriter) { throw new Exception\InvalidArgumentException(sprintf( 'Writer should be plugin name, class name or ' . 'instance of %s\Writer\AbstractWriter; received "%s"', __NAMESPACE__, (is_object($writer) ? get_class($writer) : gettype($writer)) )); } self::$writerExtensions[$extension] = $writer; } } &lt;?php
namespace Zend\Config; use Zend\ServiceManager\AbstractPluginManager; class WriterPluginManager extends AbstractPluginManager { protected $invokableClasses = array( 'php' =&gt; 'Zend\Config\Writer\PhpArray', 'ini' =&gt; 'Zend\Config\Writer\Ini', 'json' =&gt; 'Zend\Config\Writer\Json', 'yaml' =&gt; 'Zend\Config\Writer\Yaml', 'xml' =&gt; 'Zend\Config\Writer\Xml', ); public function validatePlugin($plugin) { if ($plugin instanceOf Writer\AbstractWriter) { return; } $type = is_object($plugin) ? get_class($plugin) : gettype($plugin); throw new Exception\InvalidArgumentException( "Plugin of type {$type} is invalid. Plugin must extend ". __NAMESPACE__.'\Writer\AbstractWriter' ); } } &lt;?php
 namespace Zend\Uri; use Zend\Validator\EmailAddress as EmailValidator; use Zend\Validator\ValidatorInterface; class Mailto extends Uri { protected static $validSchemes = array('mailto'); protected $emailValidator; public function isValid() { if ($this-&gt;host || $this-&gt;userInfo || $this-&gt;port) { return false; } if (empty($this-&gt;path)) { return false; } if (0 === strpos($this-&gt;path, '/')) { return false; } $validator = $this-&gt;getValidator(); return $validator-&gt;isValid($this-&gt;path); } public function setEmail($email) { return $this-&gt;setPath($email); } public function getEmail() { return $this-&gt;getPath(); } public function setValidator(ValidatorInterface $validator) { $this-&gt;emailValidator = $validator; return $this; } public function getValidator() { if (null === $this-&gt;emailValidator) { $this-&gt;setValidator(new EmailValidator()); } return $this-&gt;emailValidator; } } &lt;?php
 namespace Zend\Uri\Exception; class InvalidUriPartException extends InvalidArgumentException { const INVALID_SCHEME = 1; const INVALID_USER = 2; const INVALID_PASSWORD = 4; const INVALID_USERINFO = 6; const INVALID_HOSTNAME = 8; const INVALID_PORT = 16; const INVALID_AUTHORITY = 30; const INVALID_PATH = 32; const INVALID_QUERY = 64; const INVALID_FRAGMENT = 128; } &lt;?php
 namespace Zend\Uri\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Uri\Exception; class InvalidUriException extends InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Uri\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Uri; use Zend\Escaper\Escaper; use Zend\Validator; class Uri implements UriInterface { const CHAR_UNRESERVED = 'a-zA-Z0-9_\-\.~'; const CHAR_GEN_DELIMS = ':\/\?#\[\]@'; const CHAR_SUB_DELIMS = '!\$&amp;\'\(\)\*\+,;='; const CHAR_RESERVED = ':\/\?#\[\]@!\$&amp;\'\(\)\*\+,;='; const HOST_IPV4 = 0x01; const HOST_IPV6 = 0x02; const HOST_IPVFUTURE = 0x04; const HOST_IPVANY = 0x07; const HOST_DNS = 0x08; const HOST_DNS_OR_IPV4 = 0x09; const HOST_DNS_OR_IPV6 = 0x0A; const HOST_DNS_OR_IPV4_OR_IPV6 = 0x0B; const HOST_DNS_OR_IPVANY = 0x0F; const HOST_REGNAME = 0x10; const HOST_ALL = 0x1F; protected $scheme; protected $userInfo; protected $host; protected $port; protected $path; protected $query; protected $fragment; protected $validHostTypes = self::HOST_ALL; protected static $validSchemes = array(); protected static $defaultPorts = array(); protected static $escaper; public function __construct($uri = null) { if (is_string($uri)) { $this-&gt;parse($uri); } elseif ($uri instanceof UriInterface) { $this-&gt;setScheme($uri-&gt;getScheme()); $this-&gt;setUserInfo($uri-&gt;getUserInfo()); $this-&gt;setHost($uri-&gt;getHost()); $this-&gt;setPort($uri-&gt;getPort()); $this-&gt;setPath($uri-&gt;getPath()); $this-&gt;setQuery($uri-&gt;getQuery()); $this-&gt;setFragment($uri-&gt;getFragment()); } elseif ($uri !== null) { throw new Exception\InvalidArgumentException(sprintf( 'Expecting a string or a URI object, received "%s"', (is_object($uri) ? get_class($uri) : gettype($uri)) )); } } public static function setEscaper(Escaper $escaper) { static::$escaper = $escaper; } public static function getEscaper() { if (null === static::$escaper) { static::setEscaper(new Escaper()); } return static::$escaper; } public function isValid() { if ($this-&gt;host) { if (strlen($this-&gt;path) &gt; 0 &amp;&amp; substr($this-&gt;path, 0, 1) != '/') { return false; } return true; } if ($this-&gt;userInfo || $this-&gt;port) { return false; } if ($this-&gt;path) { if (substr($this-&gt;path, 0, 2) == '//') { return false; } return true; } if (! ($this-&gt;query || $this-&gt;fragment)) { return false; } return true; } public function isValidRelative() { if ($this-&gt;scheme || $this-&gt;host || $this-&gt;userInfo || $this-&gt;port) { return false; } if ($this-&gt;path) { if (substr($this-&gt;path, 0, 2) == '//') { return false; } return true; } if (! ($this-&gt;query || $this-&gt;fragment)) { return false; } return true; } public function isAbsolute() { return ($this-&gt;scheme !== null); } public function parse($uri) { if (($scheme = self::parseScheme($uri)) !== null) { $this-&gt;setScheme($scheme); $uri = substr($uri, strlen($scheme) + 1); } if (preg_match('|^//([^/\?#]*)|', $uri, $match)) { $authority = $match[1]; $uri = substr($uri, strlen($match[0])); if (strpos($authority, '@') !== false) { $segments = explode('@', $authority); $authority = array_pop($segments); $userInfo = implode('@', $segments); unset($segments); $this-&gt;setUserInfo($userInfo); } $nMatches = preg_match('/:[\d]{1,5}$/', $authority, $matches); if ($nMatches === 1) { $portLength = strlen($matches[0]); $port = substr($matches[0], 1); $this-&gt;setPort((int) $port); $authority = substr($authority, 0, -$portLength); } $this-&gt;setHost($authority); } if (!$uri) { return $this; } if (preg_match('|^[^\?#]*|', $uri, $match)) { $this-&gt;setPath($match[0]); $uri = substr($uri, strlen($match[0])); } if (!$uri) { return $this; } if (preg_match('|^\?([^#]*)|', $uri, $match)) { $this-&gt;setQuery($match[1]); $uri = substr($uri, strlen($match[0])); } if (!$uri) { return $this; } if ($uri &amp;&amp; substr($uri, 0, 1) == '#') { $this-&gt;setFragment(substr($uri, 1)); } return $this; } public function toString() { if (!$this-&gt;isValid()) { if ($this-&gt;isAbsolute() || !$this-&gt;isValidRelative()) { throw new Exception\InvalidUriException( 'URI is not valid and cannot be converted into a string' ); } } $uri = ''; if ($this-&gt;scheme) { $uri .= $this-&gt;scheme . ':'; } if ($this-&gt;host !== null) { $uri .= '//'; if ($this-&gt;userInfo) { $uri .= $this-&gt;userInfo . '@'; } $uri .= $this-&gt;host; if ($this-&gt;port) { $uri .= ':' . $this-&gt;port; } } if ($this-&gt;path) { $uri .= self::encodePath($this-&gt;path); } elseif ($this-&gt;host &amp;&amp; ($this-&gt;query || $this-&gt;fragment)) { $uri .= '/'; } if ($this-&gt;query) { $uri .= "?" . self::encodeQueryFragment($this-&gt;query); } if ($this-&gt;fragment) { $uri .= "#" . self::encodeQueryFragment($this-&gt;fragment); } return $uri; } public function normalize() { if ($this-&gt;scheme) { $this-&gt;scheme = static::normalizeScheme($this-&gt;scheme); } if ($this-&gt;host) { $this-&gt;host = static::normalizeHost($this-&gt;host); } if ($this-&gt;port) { $this-&gt;port = static::normalizePort($this-&gt;port, $this-&gt;scheme); } if ($this-&gt;path) { $this-&gt;path = static::normalizePath($this-&gt;path); } if ($this-&gt;query) { $this-&gt;query = static::normalizeQuery($this-&gt;query); } if ($this-&gt;fragment) { $this-&gt;fragment = static::normalizeFragment($this-&gt;fragment); } if ($this-&gt;host &amp;&amp; empty($this-&gt;path)) { $this-&gt;path = '/'; } return $this; } public function resolve($baseUri) { if ($this-&gt;isAbsolute()) { return $this; } if (is_string($baseUri)) { $baseUri = new static($baseUri); } elseif (!$baseUri instanceof Uri) { throw new Exception\InvalidArgumentException( 'Provided base URI must be a string or a Uri object' ); } if ($this-&gt;getHost()) { $this-&gt;setPath(static::removePathDotSegments($this-&gt;getPath())); } else { $basePath = $baseUri-&gt;getPath(); $relPath = $this-&gt;getPath(); if (!$relPath) { $this-&gt;setPath($basePath); if (!$this-&gt;getQuery()) { $this-&gt;setQuery($baseUri-&gt;getQuery()); } } else { if (substr($relPath, 0, 1) == '/') { $this-&gt;setPath(static::removePathDotSegments($relPath)); } else { if ($baseUri-&gt;getHost() &amp;&amp; !$basePath) { $mergedPath = '/'; } else { $mergedPath = substr($basePath, 0, strrpos($basePath, '/') + 1); } $this-&gt;setPath(static::removePathDotSegments($mergedPath . $relPath)); } } $this-&gt;setUserInfo($baseUri-&gt;getUserInfo()); $this-&gt;setHost($baseUri-&gt;getHost()); $this-&gt;setPort($baseUri-&gt;getPort()); } $this-&gt;setScheme($baseUri-&gt;getScheme()); return $this; } public function makeRelative($baseUri) { $baseUri = new static($baseUri); $this-&gt;normalize(); $baseUri-&gt;normalize(); $host = $this-&gt;getHost(); $baseHost = $baseUri-&gt;getHost(); if ($host &amp;&amp; $baseHost &amp;&amp; ($host != $baseHost)) { return $this; } $port = $this-&gt;getPort(); $basePort = $baseUri-&gt;getPort(); if ($port &amp;&amp; $basePort &amp;&amp; ($port != $basePort)) { return $this; } $scheme = $this-&gt;getScheme(); $baseScheme = $baseUri-&gt;getScheme(); if ($scheme &amp;&amp; $baseScheme &amp;&amp; ($scheme != $baseScheme)) { return $this; } $this-&gt;setHost(null) -&gt;setPort(null) -&gt;setScheme(null); if ($this-&gt;getPath() == $baseUri-&gt;getPath()) { $this-&gt;setPath(''); return $this; } $pathParts = preg_split('|(/)|', $this-&gt;getPath(), null, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY); $baseParts = preg_split('|(/)|', $baseUri-&gt;getPath(), null, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY); $matchingParts = array_intersect_assoc($pathParts, $baseParts); foreach ($matchingParts as $index =&gt; $segment) { if ($index &amp;&amp; !isset($matchingParts[$index - 1])) { array_unshift($pathParts, '../'); continue; } unset($pathParts[$index]); } $this-&gt;setPath(implode($pathParts)); return $this; } public function getScheme() { return $this-&gt;scheme; } public function getUserInfo() { return $this-&gt;userInfo; } public function getHost() { return $this-&gt;host; } public function getPort() { return $this-&gt;port; } public function getPath() { return $this-&gt;path; } public function getQuery() { return $this-&gt;query; } public function getQueryAsArray() { $query = array(); if ($this-&gt;query) { parse_str($this-&gt;query, $query); } return $query; } public function getFragment() { return $this-&gt;fragment; } public function setScheme($scheme) { if (($scheme !== null) &amp;&amp; (!self::validateScheme($scheme))) { throw new Exception\InvalidUriPartException(sprintf( 'Scheme "%s" is not valid or is not accepted by %s', $scheme, get_called_class() ), Exception\InvalidUriPartException::INVALID_SCHEME); } $this-&gt;scheme = $scheme; return $this; } public function setUserInfo($userInfo) { $this-&gt;userInfo = $userInfo; return $this; } public function setHost($host) { if (($host !== '') &amp;&amp; ($host !== null) &amp;&amp; !self::validateHost($host, $this-&gt;validHostTypes) ) { throw new Exception\InvalidUriPartException(sprintf( 'Host "%s" is not valid or is not accepted by %s', $host, get_called_class() ), Exception\InvalidUriPartException::INVALID_HOSTNAME); } $this-&gt;host = $host; return $this; } public function setPort($port) { $this-&gt;port = $port; return $this; } public function setPath($path) { $this-&gt;path = $path; return $this; } public function setQuery($query) { if (is_array($query)) { $query = str_replace('+', '%20', http_build_query($query)); } $this-&gt;query = $query; return $this; } public function setFragment($fragment) { $this-&gt;fragment = $fragment; return $this; } public function __toString() { try { return $this-&gt;toString(); } catch (\Exception $e) { return ''; } } public static function validateScheme($scheme) { if (!empty(static::$validSchemes) &amp;&amp; !in_array(strtolower($scheme), static::$validSchemes) ) { return false; } return (bool) preg_match('/^[A-Za-z][A-Za-z0-9\-\.+]*$/', $scheme); } public static function validateUserInfo($userInfo) { $regex = '/^(?:[' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . ':]+|%[A-Fa-f0-9]{2})*$/'; return (bool) preg_match($regex, $userInfo); } public static function validateHost($host, $allowed = self::HOST_ALL) { if ($allowed &amp; self::HOST_IPVANY) { if (static::isValidIpAddress($host, $allowed)) { return true; } } if ($allowed &amp; self::HOST_REGNAME) { if (static::isValidRegName($host)) { return true; } } if ($allowed &amp; self::HOST_DNS) { if (static::isValidDnsHostname($host)) { return true; } } return false; } public static function validatePort($port) { if ($port === 0) { return false; } if ($port) { $port = (int) $port; if ($port &lt; 1 || $port &gt; 0xffff) { return false; } } return true; } public static function validatePath($path) { $pchar = '(?:[' . self::CHAR_UNRESERVED . ':@&amp;=\+\$,]+|%[A-Fa-f0-9]{2})*'; $segment = $pchar . "(?:;{$pchar})*"; $regex = "/^{$segment}(?:\/{$segment})*$/"; return (bool) preg_match($regex, $path); } public static function validateQueryFragment($input) { $regex = '/^(?:[' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . ':@\/\?]+|%[A-Fa-f0-9]{2})*$/'; return (bool) preg_match($regex, $input); } public static function encodeUserInfo($userInfo) { if (!is_string($userInfo)) { throw new Exception\InvalidArgumentException(sprintf( 'Expecting a string, got %s', (is_object($userInfo) ? get_class($userInfo) : gettype($userInfo)) )); } $regex = '/(?:[^' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . '%:]|%(?![A-Fa-f0-9]{2}))/'; $escaper = static::getEscaper(); $replace = function ($match) use ($escaper) { return $escaper-&gt;escapeUrl($match[0]); }; return preg_replace_callback($regex, $replace, $userInfo); } public static function encodePath($path) { if (!is_string($path)) { throw new Exception\InvalidArgumentException(sprintf( 'Expecting a string, got %s', (is_object($path) ? get_class($path) : gettype($path)) )); } $regex = '/(?:[^' . self::CHAR_UNRESERVED . ':@&amp;=\+\$,\/;%]+|%(?![A-Fa-f0-9]{2}))/'; $escaper = static::getEscaper(); $replace = function ($match) use ($escaper) { return $escaper-&gt;escapeUrl($match[0]); }; return preg_replace_callback($regex, $replace, $path); } public static function encodeQueryFragment($input) { if (!is_string($input)) { throw new Exception\InvalidArgumentException(sprintf( 'Expecting a string, got %s', (is_object($input) ? get_class($input) : gettype($input)) )); } $regex = '/(?:[^' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . '%:@\/\?]+|%(?![A-Fa-f0-9]{2}))/'; $escaper = static::getEscaper(); $replace = function ($match) use ($escaper) { return $escaper-&gt;escapeUrl($match[0]); }; return preg_replace_callback($regex, $replace, $input); } public static function parseScheme($uriString) { if (! is_string($uriString)) { throw new Exception\InvalidArgumentException(sprintf( 'Expecting a string, got %s', (is_object($uriString) ? get_class($uriString) : gettype($uriString)) )); } if (preg_match('/^([A-Za-z][A-Za-z0-9\.\+\-]*):/', $uriString, $match)) { return $match[1]; } return null; } public static function removePathDotSegments($path) { $output = ''; while ($path) { if ($path == '..' || $path == '.') { break; } switch (true) { case ($path == '/.'): $path = '/'; break; case ($path == '/..'): $path = '/'; $output = substr($output, 0, strrpos($output, '/', -1)); break; case (substr($path, 0, 4) == '/../'): $path = '/' . substr($path, 4); $output = substr($output, 0, strrpos($output, '/', -1)); break; case (substr($path, 0, 3) == '/./'): $path = substr($path, 2); break; case (substr($path, 0, 2) == './'): $path = substr($path, 2); break; case (substr($path, 0, 3) == '../'): $path = substr($path, 3); break; default: $slash = strpos($path, '/', 1); if ($slash === false) { $seg = $path; } else { $seg = substr($path, 0, $slash); } $output .= $seg; $path = substr($path, strlen($seg)); break; } } return $output; } public static function merge($baseUri, $relativeUri) { $uri = new static($relativeUri); return $uri-&gt;resolve($baseUri); } protected static function isValidIpAddress($host, $allowed) { $validatorParams = array( 'allowipv4' =&gt; (bool) ($allowed &amp; self::HOST_IPV4), 'allowipv6' =&gt; false, 'allowipvfuture' =&gt; false, 'allowliteral' =&gt; false, ); $validator = new Validator\Ip($validatorParams); $return = $validator-&gt;isValid($host); if ($return) { return true; } $validatorParams = array( 'allowipv4' =&gt; false, 'allowipv6' =&gt; (bool) ($allowed &amp; self::HOST_IPV6), 'allowipvfuture' =&gt; (bool) ($allowed &amp; self::HOST_IPVFUTURE), 'allowliteral' =&gt; true, ); static $regex = '/^\[.*\]$/'; $validator-&gt;setOptions($validatorParams); return (preg_match($regex, $host) &amp;&amp; $validator-&gt;isValid($host)); } protected static function isValidDnsHostname($host) { $validator = new Validator\Hostname(array( 'allow' =&gt; Validator\Hostname::ALLOW_DNS | Validator\Hostname::ALLOW_LOCAL, )); return $validator-&gt;isValid($host); } protected static function isValidRegName($host) { $regex = '/^(?:[' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . ':@\/\?]+|%[A-Fa-f0-9]{2})+$/'; return (bool) preg_match($regex, $host); } protected static function normalizeScheme($scheme) { return strtolower($scheme); } protected static function normalizeHost($host) { return strtolower($host); } protected static function normalizePort($port, $scheme = null) { if ($scheme &amp;&amp; isset(static::$defaultPorts[$scheme]) &amp;&amp; ($port == static::$defaultPorts[$scheme]) ) { return null; } return $port; } protected static function normalizePath($path) { $path = self::encodePath( self::decodeUrlEncodedChars( self::removePathDotSegments($path), '/[' . self::CHAR_UNRESERVED . ':@&amp;=\+\$,\/;%]/' ) ); return $path; } protected static function normalizeQuery($query) { $query = self::encodeQueryFragment( self::decodeUrlEncodedChars( $query, '/[' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . '%:@\/\?]/' ) ); return $query; } protected static function normalizeFragment($fragment) { return static::normalizeQuery($fragment); } protected static function decodeUrlEncodedChars($input, $allowed = '') { $decodeCb = function ($match) use ($allowed) { $char = rawurldecode($match[0]); if (preg_match($allowed, $char)) { return $char; } return strtoupper($match[0]); }; return preg_replace_callback('/%[A-Fa-f0-9]{2}/', $decodeCb, $input); } } &lt;?php
 namespace Zend\Uri; class Http extends Uri { protected static $validSchemes = array( 'http', 'https' ); protected static $defaultPorts = array( 'http' =&gt; 80, 'https' =&gt; 443, ); protected $validHostTypes = self::HOST_DNS_OR_IPV4_OR_IPV6; protected $user; protected $password; public function isValid() { return parent::isValid(); } public function getUser() { if (null !== $this-&gt;user) { return $this-&gt;user; } $this-&gt;parseUserInfo(); return $this-&gt;user; } public function getPassword() { if (null !== $this-&gt;password) { return $this-&gt;password; } $this-&gt;parseUserInfo(); return $this-&gt;password; } public function setUser($user) { $this-&gt;user = $user; return $this; } public function setPassword($password) { $this-&gt;password = $password; return $this; } public static function validateHost($host, $allowed = self::HOST_DNS_OR_IPV4_OR_IPV6) { return parent::validateHost($host, $allowed); } protected function parseUserInfo() { if (null === $this-&gt;userInfo) { return; } if (false === strpos($this-&gt;userInfo, ':')) { $this-&gt;setUser($this-&gt;userInfo); return; } list($user, $password) = explode(':', $this-&gt;userInfo, 2); $this-&gt;setUser($user); $this-&gt;setPassword($password); } public function getPort() { if (empty($this-&gt;port)) { if (array_key_exists($this-&gt;scheme, static::$defaultPorts)) { return static::$defaultPorts[$this-&gt;scheme]; } } return $this-&gt;port; } public function parse($uri) { parent::parse($uri); if (empty($this-&gt;path)) { $this-&gt;path = '/'; } return $this; } } &lt;?php
 namespace Zend\Uri; class File extends Uri { protected static $validSchemes = array('file'); public function isValid() { if ($this-&gt;query) { return false; } return parent::isValid(); } public function setUserInfo($userInfo) { return $this; } public function setFragment($fragment) { return $this; } public static function fromUnixPath($path) { $url = new static('file:'); if (substr($path, 0, 1) == '/') { $url-&gt;setHost(''); } $url-&gt;setPath($path); return $url; } public static function fromWindowsPath($path) { $url = new static('file:'); $path = str_replace(array('/', '\\'), array('%2F', '/'), $path); if (preg_match('|^([a-zA-Z]:)?/|', $path)) { $url-&gt;setHost(''); } $url-&gt;setPath($path); return $url; } } &lt;?php
 namespace Zend\Uri; interface UriInterface { public function __construct($uri = null); public function isValid(); public function isValidRelative(); public function isAbsolute(); public function parse($uri); public function toString(); public function normalize(); public function makeRelative($baseUri); public function getScheme(); public function getUserInfo(); public function getHost(); public function getPort(); public function getPath(); public function getQuery(); public function getQueryAsArray(); public function getFragment(); public function setScheme($scheme); public function setUserInfo($userInfo); public function setHost($host); public function setPort($port); public function setPath($path); public function setQuery($query); public function setFragment($fragment); public function __toString(); } &lt;?php
 namespace Zend\Uri; use Zend\Uri\Uri; abstract class UriFactory { protected static $schemeClasses = array( 'http' =&gt; 'Zend\Uri\Http', 'https' =&gt; 'Zend\Uri\Http', 'mailto' =&gt; 'Zend\Uri\Mailto', 'file' =&gt; 'Zend\Uri\File', 'urn' =&gt; 'Zend\Uri\Uri', 'tag' =&gt; 'Zend\Uri\Uri', ); public static function registerScheme($scheme, $class) { $scheme = strtolower($scheme); static::$schemeClasses[$scheme] = $class; } public static function unregisterScheme($scheme) { $scheme = strtolower($scheme); if (isset(static::$schemeClasses[$scheme])) { unset(static::$schemeClasses[$scheme]); } } public static function getRegisteredSchemeClass($scheme) { if (isset(static::$schemeClasses[$scheme])) { return static::$schemeClasses[$scheme]; } else { return null; } } public static function factory($uriString, $defaultScheme = null) { if (!is_string($uriString)) { throw new Exception\InvalidArgumentException(sprintf( 'Expecting a string, received "%s"', (is_object($uriString) ? get_class($uriString) : gettype($uriString)) )); } $uri = new Uri($uriString); $scheme = strtolower($uri-&gt;getScheme()); if (!$scheme &amp;&amp; $defaultScheme) { $scheme = $defaultScheme; } if ($scheme &amp;&amp; ! isset(static::$schemeClasses[$scheme])) { throw new Exception\InvalidArgumentException(sprintf( 'no class registered for scheme "%s"', $scheme )); } if ($scheme &amp;&amp; isset(static::$schemeClasses[$scheme])) { $class = static::$schemeClasses[$scheme]; $uri = new $class($uri); if (! $uri instanceof UriInterface) { throw new Exception\InvalidArgumentException(sprintf( 'class "%s" registered for scheme "%s" does not implement Zend\Uri\UriInterface', $class, $scheme )); } } return $uri; } } &lt;?php
 namespace Zend\Validator; class Isbn extends AbstractValidator { const AUTO = 'auto'; const ISBN10 = '10'; const ISBN13 = '13'; const INVALID = 'isbnInvalid'; const NO_ISBN = 'isbnNoIsbn'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String or integer expected", self::NO_ISBN =&gt; "The input is not a valid ISBN number", ); protected $options = array( 'type' =&gt; self::AUTO, 'separator' =&gt; '', ); protected function detectFormat() { $sep = quotemeta($this-&gt;getSeparator()); $patterns = array(); $lengths = array(); $type = $this-&gt;getType(); if ($type == self::ISBN10 || $type == self::AUTO) { if (empty($sep)) { $pattern = '/^[0-9]{9}[0-9X]{1}$/'; $length = 10; } else { $pattern = "/^[0-9]{1,7}[{$sep}]{1}[0-9]{1,7}[{$sep}]{1}[0-9]{1,7}[{$sep}]{1}[0-9X]{1}$/"; $length = 13; } $patterns[$pattern] = self::ISBN10; $lengths[$pattern] = $length; } if ($type == self::ISBN13 || $type == self::AUTO) { if (empty($sep)) { $pattern = '/^[0-9]{13}$/'; $length = 13; } else { $pattern = "/^[0-9]{1,9}[{$sep}]{1}[0-9]{1,5}[{$sep}]{1}[0-9]{1,9}[{$sep}]{1}[0-9]{1,9}[{$sep}]{1}[0-9]{1}$/"; $length = 17; } $patterns[$pattern] = self::ISBN13; $lengths[$pattern] = $length; } foreach ($patterns as $pattern =&gt; $type) { if ((strlen($this-&gt;getValue()) == $lengths[$pattern]) &amp;&amp; preg_match($pattern, $this-&gt;getValue())) { return $type; } } return null; } public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value)) { $this-&gt;error(self::INVALID); return false; } $value = (string) $value; $this-&gt;setValue($value); switch ($this-&gt;detectFormat()) { case self::ISBN10: $isbn10 = str_replace($this-&gt;getSeparator(), '', $value); $sum = 0; for ($i = 0; $i &lt; 9; $i++) { $sum += (10 - $i) * $isbn10{$i}; } $checksum = 11 - ($sum % 11); if ($checksum == 11) { $checksum = '0'; } elseif ($checksum == 10) { $checksum = 'X'; } break; case self::ISBN13: $isbn13 = str_replace($this-&gt;getSeparator(), '', $value); $sum = 0; for ($i = 0; $i &lt; 12; $i++) { if ($i % 2 == 0) { $sum += $isbn13{$i}; } else { $sum += 3 * $isbn13{$i}; } } $checksum = 10 - ($sum % 10); if ($checksum == 10) { $checksum = '0'; } break; default: $this-&gt;error(self::NO_ISBN); return false; } if (substr($this-&gt;getValue(), -1) != $checksum) { $this-&gt;error(self::NO_ISBN); return false; } return true; } public function setSeparator($separator) { if (!in_array($separator, array('-', ' ', ''))) { throw new Exception\InvalidArgumentException('Invalid ISBN separator.'); } $this-&gt;options['separator'] = $separator; return $this; } public function getSeparator() { return $this-&gt;options['separator']; } public function setType($type) { if (!in_array($type, array(self::AUTO, self::ISBN10, self::ISBN13))) { throw new Exception\InvalidArgumentException('Invalid ISBN type'); } $this-&gt;options['type'] = $type; return $this; } public function getType() { return $this-&gt;options['type']; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; class NotEmpty extends AbstractValidator { const BOOLEAN = 1; const INTEGER = 2; const FLOAT = 4; const STRING = 8; const ZERO = 16; const EMPTY_ARRAY = 32; const NULL = 64; const PHP = 127; const SPACE = 128; const OBJECT = 256; const OBJECT_STRING = 512; const OBJECT_COUNT = 1024; const ALL = 2047; const INVALID = 'notEmptyInvalid'; const IS_EMPTY = 'isEmpty'; protected $constants = array( self::BOOLEAN =&gt; 'boolean', self::INTEGER =&gt; 'integer', self::FLOAT =&gt; 'float', self::STRING =&gt; 'string', self::ZERO =&gt; 'zero', self::EMPTY_ARRAY =&gt; 'array', self::NULL =&gt; 'null', self::PHP =&gt; 'php', self::SPACE =&gt; 'space', self::OBJECT =&gt; 'object', self::OBJECT_STRING =&gt; 'objectstring', self::OBJECT_COUNT =&gt; 'objectcount', self::ALL =&gt; 'all', ); protected $messageTemplates = array( self::IS_EMPTY =&gt; "Value is required and can't be empty", self::INVALID =&gt; "Invalid type given. String, integer, float, boolean or array expected", ); protected $options = array( 'type' =&gt; 493, ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = func_get_args(); $temp = array(); if (!empty($options)) { $temp['type'] = array_shift($options); } $options = $temp; } if (is_array($options)) { if (!array_key_exists('type', $options)) { $detected = 0; $found = false; foreach ($options as $option) { if (in_array($option, $this-&gt;constants)) { $found = true; $detected += array_search($option, $this-&gt;constants); } } if ($found) { $options['type'] = $detected; } } } parent::__construct($options); } public function getType() { return $this-&gt;options['type']; } public function setType($type = null) { if (is_array($type)) { $detected = 0; foreach ($type as $value) { if (is_int($value)) { $detected += $value; } elseif (in_array($value, $this-&gt;constants)) { $detected += array_search($value, $this-&gt;constants); } } $type = $detected; } elseif (is_string($type) &amp;&amp; in_array($type, $this-&gt;constants)) { $type = array_search($type, $this-&gt;constants); } if (!is_int($type) || ($type &lt; 0) || ($type &gt; self::ALL)) { throw new Exception\InvalidArgumentException('Unknown type'); } $this-&gt;options['type'] = $type; return $this; } public function isValid($value) { if ($value !== null &amp;&amp; !is_string($value) &amp;&amp; !is_int($value) &amp;&amp; !is_float($value) &amp;&amp; !is_bool($value) &amp;&amp; !is_array($value) &amp;&amp; !is_object($value) ) { $this-&gt;error(self::INVALID); return false; } $type = $this-&gt;getType(); $this-&gt;setValue($value); $object = false; if ($type &gt;= self::OBJECT_COUNT) { $type -= self::OBJECT_COUNT; $object = true; if (is_object($value) &amp;&amp; ($value instanceof \Countable) &amp;&amp; (count($value) == 0)) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::OBJECT_STRING) { $type -= self::OBJECT_STRING; $object = true; if ((is_object($value) &amp;&amp; (!method_exists($value, '__toString'))) || (is_object($value) &amp;&amp; (method_exists($value, '__toString')) &amp;&amp; (((string) $value) == ""))) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::OBJECT) { $type -= self::OBJECT; } elseif ($object === false) { if (is_object($value)) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::SPACE) { $type -= self::SPACE; if (is_string($value) &amp;&amp; (preg_match('/^\s+$/s', $value))) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::NULL) { $type -= self::NULL; if ($value === null) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::EMPTY_ARRAY) { $type -= self::EMPTY_ARRAY; if (is_array($value) &amp;&amp; ($value == array())) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::ZERO) { $type -= self::ZERO; if (is_string($value) &amp;&amp; ($value == '0')) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::STRING) { $type -= self::STRING; if (is_string($value) &amp;&amp; ($value == '')) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::FLOAT) { $type -= self::FLOAT; if (is_float($value) &amp;&amp; ($value == 0.0)) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::INTEGER) { $type -= self::INTEGER; if (is_int($value) &amp;&amp; ($value == 0)) { $this-&gt;error(self::IS_EMPTY); return false; } } if ($type &gt;= self::BOOLEAN) { $type -= self::BOOLEAN; if (is_bool($value) &amp;&amp; ($value == false)) { $this-&gt;error(self::IS_EMPTY); return false; } } return true; } } &lt;?php
 namespace Zend\Validator\Exception; class InvalidMagicMimeFileException extends InvalidArgumentException {} &lt;?php
 namespace Zend\Validator\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Validator\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Validator\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Validator\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface {} &lt;?php
 namespace Zend\Validator\Exception; class ExtensionNotLoadedException extends RuntimeException {} &lt;?php
 namespace Zend\Validator; use Traversable; class Ip extends AbstractValidator { const INVALID = 'ipInvalid'; const NOT_IP_ADDRESS = 'notIpAddress'; protected $messageTemplates = array( self::INVALID =&gt; 'Invalid type given. String expected', self::NOT_IP_ADDRESS =&gt; "The input does not appear to be a valid IP address", ); protected $options = array( 'allowipv4' =&gt; true, 'allowipv6' =&gt; true, 'allowipvfuture' =&gt; false, 'allowliteral' =&gt; true, ); public function setOptions($options = array()) { parent::setOptions($options); if (!$this-&gt;options['allowipv4'] &amp;&amp; !$this-&gt;options['allowipv6'] &amp;&amp; !$this-&gt;options['allowipvfuture']) { throw new Exception\InvalidArgumentException('Nothing to validate. Check your options'); } return $this; } public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); if ($this-&gt;options['allowipv4'] &amp;&amp; $this-&gt;validateIPv4($value)) { return true; } else { if ((bool) $this-&gt;options['allowliteral']) { static $regex = '/^\[(.*)\]$/'; if ((bool) preg_match($regex, $value, $matches)) { $value = $matches[1]; } } if (($this-&gt;options['allowipv6'] &amp;&amp; $this-&gt;validateIPv6($value)) || ($this-&gt;options['allowipvfuture'] &amp;&amp; $this-&gt;validateIPvFuture($value)) ) { return true; } } $this-&gt;error(self::NOT_IP_ADDRESS); return false; } protected function validateIPv4($value) { if (preg_match('/^([01]{8}.){3}[01]{8}$/i', $value)) { $value = bindec(substr($value, 0, 8)) . '.' . bindec(substr($value, 9, 8)) . '.' . bindec(substr($value, 18, 8)) . '.' . bindec(substr($value, 27, 8)); } elseif (preg_match('/^([0-9]{3}.){3}[0-9]{3}$/i', $value)) { $value = (int) substr($value, 0, 3) . '.' . (int) substr($value, 4, 3) . '.' . (int) substr($value, 8, 3) . '.' . (int) substr($value, 12, 3); } elseif (preg_match('/^([0-9a-f]{2}.){3}[0-9a-f]{2}$/i', $value)) { $value = hexdec(substr($value, 0, 2)) . '.' . hexdec(substr($value, 3, 2)) . '.' . hexdec(substr($value, 6, 2)) . '.' . hexdec(substr($value, 9, 2)); } $ip2long = ip2long($value); if ($ip2long === false) { return false; } return ($value == long2ip($ip2long)); } protected function validateIPv6($value) { if (strlen($value) &lt; 3) { return $value == '::'; } if (strpos($value, '.')) { $lastcolon = strrpos($value, ':'); if (!($lastcolon &amp;&amp; $this-&gt;validateIPv4(substr($value, $lastcolon + 1)))) { return false; } $value = substr($value, 0, $lastcolon) . ':0:0'; } if (strpos($value, '::') === false) { return preg_match('/\A(?:[a-f0-9]{1,4}:){7}[a-f0-9]{1,4}\z/i', $value); } $colonCount = substr_count($value, ':'); if ($colonCount &lt; 8) { return preg_match('/\A(?::|(?:[a-f0-9]{1,4}:)+):(?:(?:[a-f0-9]{1,4}:)*[a-f0-9]{1,4})?\z/i', $value); } if ($colonCount == 8) { return preg_match('/\A(?:::)?(?:[a-f0-9]{1,4}:){6}[a-f0-9]{1,4}(?:::)?\z/i', $value); } return false; } protected function validateIPvFuture($value) { static $regex = '/^v([[:xdigit:]]+)\.[[:alnum:]\-\._~!\$&amp;\'\(\)\*\+,;=:]+$/'; $result = (bool) preg_match($regex, $value, $matches); return ($result &amp;&amp; $matches[1] != 4 &amp;&amp; $matches[1] != 6); } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Math\Rand; use Zend\Session\Container as SessionContainer; use Zend\Stdlib\ArrayUtils; class Csrf extends AbstractValidator { const NOT_SAME = 'notSame'; protected $messageTemplates = array( self::NOT_SAME =&gt; "The form submitted did not originate from the expected site", ); protected $hash; protected static $hashCache; protected $name = 'csrf'; protected $salt = 'salt'; protected $session; protected $timeout = 300; public function __construct($options = array()) { parent::__construct($options); if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = (array) $options; } foreach ($options as $key =&gt; $value) { switch (strtolower($key)) { case 'name': $this-&gt;setName($value); break; case 'salt': $this-&gt;setSalt($value); break; case 'session': $this-&gt;setSession($value); break; case 'timeout': $this-&gt;setTimeout($value); break; default: break; } } } public function isValid($value, $context = null) { $this-&gt;setValue((string) $value); $hash = $this-&gt;getValidationToken(); if ($value !== $hash) { $this-&gt;error(self::NOT_SAME); return false; } return true; } public function setName($name) { $this-&gt;name = (string) $name; return $this; } public function getName() { return $this-&gt;name; } public function setSession(SessionContainer $session) { $this-&gt;session = $session; if ($this-&gt;hash) { $this-&gt;initCsrfToken(); } return $this; } public function getSession() { if (null === $this-&gt;session) { $this-&gt;session = new SessionContainer($this-&gt;getSessionName()); } return $this-&gt;session; } public function setSalt($salt) { $this-&gt;salt = (string) $salt; return $this; } public function getSalt() { return $this-&gt;salt; } public function getHash($regenerate = false) { if ((null === $this-&gt;hash) || $regenerate) { if ($regenerate) { $this-&gt;hash = null; } else { $this-&gt;hash = $this-&gt;getValidationToken(); } if (null === $this-&gt;hash) { $this-&gt;generateHash(); } } return $this-&gt;hash; } public function getSessionName() { return str_replace('\\', '_', __CLASS__) . '_' . $this-&gt;getSalt() . '_' . strtr($this-&gt;getName(), array('[' =&gt; '_', ']' =&gt; '')); } public function setTimeout($ttl) { $this-&gt;timeout = ($ttl !== null) ? (int) $ttl : null; return $this; } public function getTimeout() { return $this-&gt;timeout; } protected function initCsrfToken() { $session = $this-&gt;getSession(); $timeout = $this-&gt;getTimeout(); if (null !== $timeout) { $session-&gt;setExpirationSeconds($timeout); } $session-&gt;hash = $this-&gt;getHash(); } protected function generateHash() { if (isset(static::$hashCache[$this-&gt;getSessionName()])) { $this-&gt;hash = static::$hashCache[$this-&gt;getSessionName()]; } else { $this-&gt;hash = md5($this-&gt;getSalt() . Rand::getBytes(32) . $this-&gt;getName()); static::$hashCache[$this-&gt;getSessionName()] = $this-&gt;hash; } $this-&gt;setValue($this-&gt;hash); $this-&gt;initCsrfToken(); } protected function getValidationToken() { $session = $this-&gt;getSession(); if (isset($session-&gt;hash)) { return $session-&gt;hash; } return null; } } &lt;?php
 namespace Zend\Validator; use RecursiveArrayIterator; use RecursiveIteratorIterator; class InArray extends AbstractValidator { const NOT_IN_ARRAY = 'notInArray'; const COMPARE_STRICT = 1; const COMPARE_NOT_STRICT_AND_PREVENT_STR_TO_INT_VULNERABILITY = 0; const COMPARE_NOT_STRICT = -1; protected $messageTemplates = array( self::NOT_IN_ARRAY =&gt; 'The input was not found in the haystack', ); protected $haystack; protected $strict = self::COMPARE_NOT_STRICT_AND_PREVENT_STR_TO_INT_VULNERABILITY; protected $recursive = false; public function getHaystack() { if ($this-&gt;haystack == null) { throw new Exception\RuntimeException('haystack option is mandatory'); } return $this-&gt;haystack; } public function setHaystack(array $haystack) { $this-&gt;haystack = $haystack; return $this; } public function getStrict() { if ($this-&gt;strict == self::COMPARE_NOT_STRICT_AND_PREVENT_STR_TO_INT_VULNERABILITY || $this-&gt;strict == self::COMPARE_STRICT ) { return (bool) $this-&gt;strict; } return $this-&gt;strict; } public function setStrict($strict) { $checkTypes = array( self::COMPARE_NOT_STRICT_AND_PREVENT_STR_TO_INT_VULNERABILITY, self::COMPARE_STRICT, self::COMPARE_NOT_STRICT ); if (!in_array($strict, $checkTypes)) { throw new Exception\InvalidArgumentException('Strict option must be one of the COMPARE_ constants'); } $this-&gt;strict = $strict; return $this; } public function getRecursive() { return $this-&gt;recursive; } public function setRecursive($recursive) { $this-&gt;recursive = (bool) $recursive; return $this; } public function isValid($value) { $haystack = $this-&gt;getHaystack(); if (self::COMPARE_NOT_STRICT_AND_PREVENT_STR_TO_INT_VULNERABILITY == $this-&gt;strict &amp;&amp; (is_int($value) || is_float($value))) { $value =(string) $value; } $this-&gt;setValue($value); if ($this-&gt;getRecursive()) { $iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack)); foreach ($iterator as $element) { if (self::COMPARE_STRICT == $this-&gt;strict) { if ($element === $value) { return true; } } else { $el = $element; if (self::COMPARE_NOT_STRICT_AND_PREVENT_STR_TO_INT_VULNERABILITY == $this-&gt;strict &amp;&amp; is_string($value) &amp;&amp; (is_int($el) || is_float($el)) ) { $el = (string) $el; } if ($el == $value) { return true; } } } } else { if (self::COMPARE_NOT_STRICT_AND_PREVENT_STR_TO_INT_VULNERABILITY == $this-&gt;strict &amp;&amp; is_string($value) ) { foreach ($haystack as &amp;$h) { if (is_int($h) || is_float($h)) { $h = (string) $h; } } } if (in_array($value, $haystack, $this-&gt;strict == self::COMPARE_STRICT ? true : false)) { return true; } } $this-&gt;error(self::NOT_IN_ARRAY); return false; } } &lt;?php
 namespace Zend\Validator; class Callback extends AbstractValidator { const INVALID_CALLBACK = 'callbackInvalid'; const INVALID_VALUE = 'callbackValue'; protected $messageTemplates = array( self::INVALID_VALUE =&gt; "The input is not valid", self::INVALID_CALLBACK =&gt; "An exception has been raised within the callback", ); protected $options = array( 'callback' =&gt; null, 'callbackOptions' =&gt; array(), ); public function __construct($options = null) { if (is_callable($options)) { $options = array('callback' =&gt; $options); } parent::__construct($options); } public function getCallback() { return $this-&gt;options['callback']; } public function setCallback($callback) { if (!is_callable($callback)) { throw new Exception\InvalidArgumentException('Invalid callback given'); } $this-&gt;options['callback'] = $callback; return $this; } public function getCallbackOptions() { return $this-&gt;options['callbackOptions']; } public function setCallbackOptions($options) { $this-&gt;options['callbackOptions'] = (array) $options; return $this; } public function isValid($value, $context = null) { $this-&gt;setValue($value); $options = $this-&gt;getCallbackOptions(); $callback = $this-&gt;getCallback(); if (empty($callback)) { throw new Exception\InvalidArgumentException('No callback given'); } $args = array($value); if (empty($options) &amp;&amp; !empty($context)) { $args[] = $context; } if (!empty($options) &amp;&amp; empty($context)) { $args = array_merge($args, $options); } if (!empty($options) &amp;&amp; !empty($context)) { $args[] = $context; $args = array_merge($args, $options); } try { if (!call_user_func_array($callback, $args)) { $this-&gt;error(self::INVALID_VALUE); return false; } } catch (\Exception $e) { $this-&gt;error(self::INVALID_CALLBACK); return false; } return true; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; class Between extends AbstractValidator { const NOT_BETWEEN = 'notBetween'; const NOT_BETWEEN_STRICT = 'notBetweenStrict'; protected $messageTemplates = array( self::NOT_BETWEEN =&gt; "The input is not between '%min%' and '%max%', inclusively", self::NOT_BETWEEN_STRICT =&gt; "The input is not strictly between '%min%' and '%max%'" ); protected $messageVariables = array( 'min' =&gt; array('options' =&gt; 'min'), 'max' =&gt; array('options' =&gt; 'max'), ); protected $options = array( 'inclusive' =&gt; true, 'min' =&gt; 0, 'max' =&gt; PHP_INT_MAX, ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = func_get_args(); $temp['min'] = array_shift($options); if (!empty($options)) { $temp['max'] = array_shift($options); } if (!empty($options)) { $temp['inclusive'] = array_shift($options); } $options = $temp; } if (!array_key_exists('min', $options) || !array_key_exists('max', $options)) { } parent::__construct($options); } public function getMin() { return $this-&gt;options['min']; } public function setMin($min) { $this-&gt;options['min'] = $min; return $this; } public function getMax() { return $this-&gt;options['max']; } public function setMax($max) { $this-&gt;options['max'] = $max; return $this; } public function getInclusive() { return $this-&gt;options['inclusive']; } public function setInclusive($inclusive) { $this-&gt;options['inclusive'] = $inclusive; return $this; } public function isValid($value) { $this-&gt;setValue($value); if ($this-&gt;getInclusive()) { if ($this-&gt;getMin() &gt; $value || $value &gt; $this-&gt;getMax()) { $this-&gt;error(self::NOT_BETWEEN); return false; } } else { if ($this-&gt;getMin() &gt;= $value || $value &gt;= $this-&gt;getMax()) { $this-&gt;error(self::NOT_BETWEEN_STRICT); return false; } } return true; } } &lt;?php
 namespace Zend\Validator\Sitemap; use Zend\Validator\AbstractValidator; class Priority extends AbstractValidator { const NOT_VALID = 'sitemapPriorityNotValid'; const INVALID = 'sitemapPriorityInvalid'; protected $messageTemplates = array( self::NOT_VALID =&gt; "The input is not a valid sitemap priority", self::INVALID =&gt; "Invalid type given. Numeric string, integer or float expected", ); public function isValid($value) { if (!is_numeric($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); $value = (float) $value; if ($value &lt; 0 || $value &gt; 1) { $this-&gt;error(self::NOT_VALID); return false; } return true; } } &lt;?php
 namespace Zend\Validator\Sitemap; use Zend\Validator\AbstractValidator; class Changefreq extends AbstractValidator { const NOT_VALID = 'sitemapChangefreqNotValid'; const INVALID = 'sitemapChangefreqInvalid'; protected $messageTemplates = array( self::NOT_VALID =&gt; "The input is not a valid sitemap changefreq", self::INVALID =&gt; "Invalid type given. String expected", ); protected $changeFreqs = array( 'always', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'never' ); public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); if (!is_string($value)) { return false; } if (!in_array($value, $this-&gt;changeFreqs, true)) { $this-&gt;error(self::NOT_VALID); return false; } return true; } } &lt;?php
 namespace Zend\Validator\Sitemap; use Zend\Uri; use Zend\Validator\AbstractValidator; class Loc extends AbstractValidator { const NOT_VALID = 'sitemapLocNotValid'; const INVALID = 'sitemapLocInvalid'; protected $messageTemplates = array( self::NOT_VALID =&gt; "The input is not a valid sitemap location", self::INVALID =&gt; "Invalid type given. String expected", ); public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); $uri = Uri\UriFactory::factory($value); if (!$uri-&gt;isValid()) { $this-&gt;error(self::NOT_VALID); return false; } return true; } } &lt;?php
 namespace Zend\Validator\Sitemap; use Zend\Stdlib\ErrorHandler; use Zend\Validator\AbstractValidator; class Lastmod extends AbstractValidator { const LASTMOD_REGEX = '/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T([0-1][0-9]|2[0-3])(:[0-5][0-9])(:[0-5][0-9])?(\\+|-)([0-1][0-9]|2[0-3]):[0-5][0-9])?$/'; const NOT_VALID = 'sitemapLastmodNotValid'; const INVALID = 'sitemapLastmodInvalid'; protected $messageTemplates = array( self::NOT_VALID =&gt; "The input is not a valid sitemap lastmod", self::INVALID =&gt; "Invalid type given. String expected", ); public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); ErrorHandler::start(); $result = preg_match(self::LASTMOD_REGEX, $value); ErrorHandler::stop(); if ($result != 1) { $this-&gt;error(self::NOT_VALID); return false; } return true; } } &lt;?php
 namespace Zend\Validator; use Traversable; class Step extends AbstractValidator { const INVALID = 'typeInvalid'; const NOT_STEP = 'stepInvalid'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid value given. Scalar expected", self::NOT_STEP =&gt; "The input is not a valid step" ); protected $baseValue = 0; protected $step = 1; public function __construct($options = array()) { if ($options instanceof Traversable) { $options = iterator_to_array($options); } elseif (!is_array($options)) { $options = func_get_args(); $temp['baseValue'] = array_shift($options); if (!empty($options)) { $temp['step'] = array_shift($options); } $options = $temp; } if (isset($options['baseValue'])) { $this-&gt;setBaseValue($options['baseValue']); } if (isset($options['step'])) { $this-&gt;setStep($options['step']); } parent::__construct($options); } public function setBaseValue($baseValue) { $this-&gt;baseValue = $baseValue; return $this; } public function getBaseValue() { return $this-&gt;baseValue; } public function setStep($step) { $this-&gt;step = (float) $step; return $this; } public function getStep() { return $this-&gt;step; } public function isValid($value) { if (!is_numeric($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); $fmod = $this-&gt;fmod($value - $this-&gt;baseValue, $this-&gt;step); if ($fmod !== 0.0 &amp;&amp; $fmod !== $this-&gt;step) { $this-&gt;error(self::NOT_STEP); return false; } return true; } protected function fmod($x, $y) { if ($y == 0.0) { return 1.0; } $precision = strlen(substr($x, strpos($x, '.')+1)) + strlen(substr($y, strpos($y, '.')+1)); return round($x - $y * floor($x / $y), $precision); } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Uri\Exception\ExceptionInterface as UriException; use Zend\Uri\Uri as UriHandler; use Zend\Validator\Exception\InvalidArgumentException; class Uri extends AbstractValidator { const INVALID = 'uriInvalid'; const NOT_URI = 'notUri'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String expected", self::NOT_URI =&gt; "The input does not appear to be a valid Uri", ); protected $uriHandler; protected $allowRelative = true; protected $allowAbsolute = true; public function __construct($options = array()) { if ($options instanceof Traversable) { $options = iterator_to_array($options); } elseif (!is_array($options)) { $options = func_get_args(); $temp['uriHandler'] = array_shift($options); if (!empty($options)) { $temp['allowRelative'] = array_shift($options); } if (!empty($options)) { $temp['allowAbsolute'] = array_shift($options); } $options = $temp; } if (isset($options['uriHandler'])) { $this-&gt;setUriHandler($options['uriHandler']); } if (isset($options['allowRelative'])) { $this-&gt;setAllowRelative($options['allowRelative']); } if (isset($options['allowAbsolute'])) { $this-&gt;setAllowAbsolute($options['allowAbsolute']); } parent::__construct($options); } public function getUriHandler() { if (null === $this-&gt;uriHandler) { $this-&gt;uriHandler = new UriHandler(); } elseif (is_string($this-&gt;uriHandler) &amp;&amp; class_exists($this-&gt;uriHandler)) { $this-&gt;uriHandler = new $this-&gt;uriHandler; } if (! $this-&gt;uriHandler instanceof UriHandler) { throw new InvalidArgumentException('URI handler is expected to be a Zend\Uri\Uri object'); } return $this-&gt;uriHandler; } public function setUriHandler($uriHandler) { if (! is_subclass_of($uriHandler, 'Zend\Uri\Uri')) { throw new InvalidArgumentException('Expecting a subclass name or instance of Zend\Uri\Uri as $uriHandler'); } $this-&gt;uriHandler = $uriHandler; return $this; } public function getAllowAbsolute() { return $this-&gt;allowAbsolute; } public function setAllowAbsolute($allowAbsolute) { $this-&gt;allowAbsolute = (bool) $allowAbsolute; return $this; } public function getAllowRelative() { return $this-&gt;allowRelative; } public function setAllowRelative($allowRelative) { $this-&gt;allowRelative = (bool) $allowRelative; return $this; } public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $uriHandler = $this-&gt;getUriHandler(); try { $uriHandler-&gt;parse($value); if ($uriHandler-&gt;isValid()) { if (($this-&gt;allowRelative &amp;&amp; $this-&gt;allowAbsolute) || ($this-&gt;allowAbsolute &amp;&amp; $uriHandler-&gt;isAbsolute()) || ($this-&gt;allowRelative &amp;&amp; $uriHandler-&gt;isValidRelative()) ) { return true; } } } catch (UriException $ex) { } $this-&gt;error(self::NOT_URI); return false; } } &lt;?php
 namespace Zend\Validator; use Countable; class ValidatorChain implements Countable, ValidatorInterface { protected $plugins; protected $validators = array(); protected $messages = array(); public function count() { return count($this-&gt;validators); } public function getPluginManager() { if (!$this-&gt;plugins) { $this-&gt;setPluginManager(new ValidatorPluginManager()); } return $this-&gt;plugins; } public function setPluginManager(ValidatorPluginManager $plugins) { $this-&gt;plugins = $plugins; return $this; } public function plugin($name, array $options = null) { $plugins = $this-&gt;getPluginManager(); return $plugins-&gt;get($name, $options); } public function attach(ValidatorInterface $validator, $breakChainOnFailure = false) { $this-&gt;validators[] = array( 'instance' =&gt; $validator, 'breakChainOnFailure' =&gt; (bool) $breakChainOnFailure, ); return $this; } public function addValidator(ValidatorInterface $validator, $breakChainOnFailure = false) { return $this-&gt;attach($validator, $breakChainOnFailure); } public function prependValidator(ValidatorInterface $validator, $breakChainOnFailure = false) { array_unshift( $this-&gt;validators, array( 'instance' =&gt; $validator, 'breakChainOnFailure' =&gt; (bool) $breakChainOnFailure, ) ); return $this; } public function attachByName($name, $options = array(), $breakChainOnFailure = false) { $validator = $this-&gt;plugin($name, $options); $this-&gt;attach($validator, $breakChainOnFailure); return $this; } public function addByName($name, $options = array(), $breakChainOnFailure = false) { return $this-&gt;attachByName($name, $options, $breakChainOnFailure); } public function prependByName($name, $options = array(), $breakChainOnFailure = false) { $validator = $this-&gt;plugin($name, $options); $this-&gt;prependValidator($validator, $breakChainOnFailure); return $this; } public function isValid($value, $context = null) { $this-&gt;messages = array(); $result = true; foreach ($this-&gt;validators as $element) { $validator = $element['instance']; if ($validator-&gt;isValid($value, $context)) { continue; } $result = false; $messages = $validator-&gt;getMessages(); $this-&gt;messages = array_replace_recursive($this-&gt;messages, $messages); if ($element['breakChainOnFailure']) { break; } } return $result; } public function merge(ValidatorChain $validatorChain) { foreach ($validatorChain-&gt;validators as $validator) { $this-&gt;validators[] = $validator; } return $this; } public function getMessages() { return $this-&gt;messages; } public function getValidators() { return $this-&gt;validators; } public function __invoke($value) { return $this-&gt;isValid($value); } public function __sleep() { return array('validators','messages'); } } &lt;?php
 namespace Zend\Validator; use Zend\Stdlib\ErrorHandler; use Zend\Stdlib\StringUtils; class Hostname extends AbstractValidator { const CANNOT_DECODE_PUNYCODE = 'hostnameCannotDecodePunycode'; const INVALID = 'hostnameInvalid'; const INVALID_DASH = 'hostnameDashCharacter'; const INVALID_HOSTNAME = 'hostnameInvalidHostname'; const INVALID_HOSTNAME_SCHEMA = 'hostnameInvalidHostnameSchema'; const INVALID_LOCAL_NAME = 'hostnameInvalidLocalName'; const INVALID_URI = 'hostnameInvalidUri'; const IP_ADDRESS_NOT_ALLOWED = 'hostnameIpAddressNotAllowed'; const LOCAL_NAME_NOT_ALLOWED = 'hostnameLocalNameNotAllowed'; const UNDECIPHERABLE_TLD = 'hostnameUndecipherableTld'; const UNKNOWN_TLD = 'hostnameUnknownTld'; protected $messageTemplates = array( self::CANNOT_DECODE_PUNYCODE =&gt; "The input appears to be a DNS hostname but the given punycode notation cannot be decoded", self::INVALID =&gt; "Invalid type given. String expected", self::INVALID_DASH =&gt; "The input appears to be a DNS hostname but contains a dash in an invalid position", self::INVALID_HOSTNAME =&gt; "The input does not match the expected structure for a DNS hostname", self::INVALID_HOSTNAME_SCHEMA =&gt; "The input appears to be a DNS hostname but cannot match against hostname schema for TLD '%tld%'", self::INVALID_LOCAL_NAME =&gt; "The input does not appear to be a valid local network name", self::INVALID_URI =&gt; "The input does not appear to be a valid URI hostname", self::IP_ADDRESS_NOT_ALLOWED =&gt; "The input appears to be an IP address, but IP addresses are not allowed", self::LOCAL_NAME_NOT_ALLOWED =&gt; "The input appears to be a local network name but local network names are not allowed", self::UNDECIPHERABLE_TLD =&gt; "The input appears to be a DNS hostname but cannot extract TLD part", self::UNKNOWN_TLD =&gt; "The input appears to be a DNS hostname but cannot match TLD against known list", ); protected $messageVariables = array( 'tld' =&gt; 'tld', ); const ALLOW_DNS = 1; const ALLOW_IP = 2; const ALLOW_LOCAL = 4; const ALLOW_URI = 8; const ALLOW_ALL = 15; protected $validTlds = array( 'ac', 'ad', 'ae', 'aero', 'af', 'ag', 'ai', 'al', 'am', 'an', 'ao', 'aq', 'ar', 'arpa', 'as', 'asia', 'at', 'au', 'aw', 'ax', 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'biz', 'bj', 'bm', 'bn', 'bo', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz', 'ca', 'cat', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'com', 'coop', 'cr', 'cu', 'cv', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'edu', 'ee', 'eg', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gov', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'info', 'int', 'io', 'iq', 'ir', 'is', 'it', 'je', 'jm', 'jo', 'jobs', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mg', 'mh', 'mil', 'mk', 'ml', 'mm', 'mn', 'mo', 'mobi', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'museum', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'name', 'nc', 'ne', 'net', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om', 'org', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'pro', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'st', 'su', 'sv', 'sy', 'sz', 'tc', 'td', 'tel', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tp', 'tr', 'travel', 'tt', 'tv', 'tw', 'tz', 'ua', 'ug', 'uk', 'um', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'xxx', 'ye', 'yt', 'yu', 'za', 'zm', 'zw' ); protected $validIdns = array( 'AC' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿāăąćĉċčďđēėęěĝġģĥħīįĵķĺļľŀłńņňŋőœŕŗřśŝşšţťŧūŭůűųŵŷźżž]{1,63}$/iu'), 'AR' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-ãç-êìíñ-õü]{1,63}$/iu'), 'AS' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĵķĸĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźż]{1,63}$/iu'), 'AT' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿœšž]{1,63}$/iu'), 'BIZ' =&gt; 'Hostname/Biz.php', 'BR' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-ãçéíó-õúü]{1,63}$/iu'), 'BV' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zàáä-éêñ-ôöøüčđńŋšŧž]{1,63}$/iu'), 'CAT' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-z·àç-éíïòóúü]{1,63}$/iu'), 'CH' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿœ]{1,63}$/iu'), 'CL' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-záéíñóúü]{1,63}$/iu'), 'CN' =&gt; 'Hostname/Cn.php', 'COM' =&gt; 'Hostname/Com.php', 'DE' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿăąāćĉčċďđĕěėęēğĝġģĥħĭĩįīıĵķĺľļłńňņŋŏőōœĸŕřŗśŝšşťţŧŭůűũųūŵŷźžż]{1,63}$/iu'), 'DK' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zäéöü]{1,63}$/iu'), 'ES' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zàáçèéíïñòóúü·]{1,63}$/iu'), 'EU' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿ]{1,63}$/iu', 2 =&gt; '/^[\x{002d}0-9a-zāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĵķĺļľŀłńņňŉŋōŏőœŕŗřśŝšťŧũūŭůűųŵŷźżž]{1,63}$/iu', 3 =&gt; '/^[\x{002d}0-9a-zșț]{1,63}$/iu', 4 =&gt; '/^[\x{002d}0-9a-zΐάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ]{1,63}$/iu', 5 =&gt; '/^[\x{002d}0-9a-zабвгдежзийклмнопрстуфхцчшщъыьэюя]{1,63}$/iu', 6 =&gt; '/^[\x{002d}0-9a-zἀ-ἇἐ-ἕἠ-ἧἰ-ἷὀ-ὅὐ-ὗὠ-ὧὰ-ὼώᾀ-ᾇᾐ-ᾗᾠ-ᾧᾰ-ᾴᾶᾷῂῃῄῆῇῐ-ῒΐῖῗῠ-ῧῲῳῴῶῷ]{1,63}$/iu'), 'FI' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zäåö]{1,63}$/iu'), 'GR' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zΆΈΉΊΌΎ-ΡΣ-ώἀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼῂῃῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲῳῴῶ-ῼ]{1,63}$/iu'), 'HK' =&gt; 'Hostname/Cn.php', 'HU' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-záéíóöúüőű]{1,63}$/iu'), 'INFO'=&gt; array(1 =&gt; '/^[\x{002d}0-9a-zäåæéöøü]{1,63}$/iu', 2 =&gt; '/^[\x{002d}0-9a-záéíóöúüőű]{1,63}$/iu', 3 =&gt; '/^[\x{002d}0-9a-záæéíðóöúýþ]{1,63}$/iu', 4 =&gt; '/^[\x{AC00}-\x{D7A3}]{1,17}$/iu', 5 =&gt; '/^[\x{002d}0-9a-zāčēģīķļņōŗšūž]{1,63}$/iu', 6 =&gt; '/^[\x{002d}0-9a-ząčėęįšūųž]{1,63}$/iu', 7 =&gt; '/^[\x{002d}0-9a-zóąćęłńśźż]{1,63}$/iu', 8 =&gt; '/^[\x{002d}0-9a-záéíñóúü]{1,63}$/iu'), 'IO' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿăąāćĉčċďđĕěėęēğĝġģĥħĭĩįīıĵķĺľļłńňņŋŏőōœĸŕřŗśŝšşťţŧŭůűũųūŵŷźžż]{1,63}$/iu'), 'IS' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-záéýúíóþæöð]{1,63}$/iu'), 'IT' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zàâäèéêëìîïòôöùûüæœçÿß-]{1,63}$/iu'), 'JP' =&gt; 'Hostname/Jp.php', 'KR' =&gt; array(1 =&gt; '/^[\x{AC00}-\x{D7A3}]{1,17}$/iu'), 'LI' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿœ]{1,63}$/iu'), 'LT' =&gt; array(1 =&gt; '/^[\x{002d}0-9ąčęėįšųūž]{1,63}$/iu'), 'MD' =&gt; array(1 =&gt; '/^[\x{002d}0-9ăâîşţ]{1,63}$/iu'), 'MUSEUM' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿāăąćċčďđēėęěğġģħīįıķĺļľłńņňŋōőœŕŗřśşšţťŧūůűųŵŷźżžǎǐǒǔ\x{01E5}\x{01E7}\x{01E9}\x{01EF}ə\x{0292}ẁẃẅỳ]{1,63}$/iu'), 'NET' =&gt; 'Hostname/Com.php', 'NO' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zàáä-éêñ-ôöøüčđńŋšŧž]{1,63}$/iu'), 'NU' =&gt; 'Hostname/Com.php', 'ORG' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-záéíñóúü]{1,63}$/iu', 2 =&gt; '/^[\x{002d}0-9a-zóąćęłńśźż]{1,63}$/iu', 3 =&gt; '/^[\x{002d}0-9a-záäåæéëíðóöøúüýþ]{1,63}$/iu', 4 =&gt; '/^[\x{002d}0-9a-záéíóöúüőű]{1,63}$/iu', 5 =&gt; '/^[\x{002d}0-9a-ząčėęįšūųž]{1,63}$/iu', 6 =&gt; '/^[\x{AC00}-\x{D7A3}]{1,17}$/iu', 7 =&gt; '/^[\x{002d}0-9a-zāčēģīķļņōŗšūž]{1,63}$/iu'), 'PE' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zñáéíóúü]{1,63}$/iu'), 'PL' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zāčēģīķļņōŗšūž]{1,63}$/iu', 2 =&gt; '/^[\x{002d}а-ик-ш\x{0450}ѓѕјљњќџ]{1,63}$/iu', 3 =&gt; '/^[\x{002d}0-9a-zâîăşţ]{1,63}$/iu', 4 =&gt; '/^[\x{002d}0-9а-яё\x{04C2}]{1,63}$/iu', 5 =&gt; '/^[\x{002d}0-9a-zàáâèéêìíîòóôùúûċġħż]{1,63}$/iu', 6 =&gt; '/^[\x{002d}0-9a-zàäåæéêòóôöøü]{1,63}$/iu', 7 =&gt; '/^[\x{002d}0-9a-zóąćęłńśźż]{1,63}$/iu', 8 =&gt; '/^[\x{002d}0-9a-zàáâãçéêíòóôõúü]{1,63}$/iu', 9 =&gt; '/^[\x{002d}0-9a-zâîăşţ]{1,63}$/iu', 10=&gt; '/^[\x{002d}0-9a-záäéíóôúýčďĺľňŕšťž]{1,63}$/iu', 11=&gt; '/^[\x{002d}0-9a-zçë]{1,63}$/iu', 12=&gt; '/^[\x{002d}0-9а-ик-шђјљњћџ]{1,63}$/iu', 13=&gt; '/^[\x{002d}0-9a-zćčđšž]{1,63}$/iu', 14=&gt; '/^[\x{002d}0-9a-zâçöûüğış]{1,63}$/iu', 15=&gt; '/^[\x{002d}0-9a-záéíñóúü]{1,63}$/iu', 16=&gt; '/^[\x{002d}0-9a-zäõöüšž]{1,63}$/iu', 17=&gt; '/^[\x{002d}0-9a-zĉĝĥĵŝŭ]{1,63}$/iu', 18=&gt; '/^[\x{002d}0-9a-zâäéëîô]{1,63}$/iu', 19=&gt; '/^[\x{002d}0-9a-zàáâäåæçèéêëìíîïðñòôöøùúûüýćčłńřśš]{1,63}$/iu', 20=&gt; '/^[\x{002d}0-9a-zäåæõöøüšž]{1,63}$/iu', 21=&gt; '/^[\x{002d}0-9a-zàáçèéìíòóùú]{1,63}$/iu', 22=&gt; '/^[\x{002d}0-9a-zàáéíóöúüőű]{1,63}$/iu', 23=&gt; '/^[\x{002d}0-9ΐά-ώ]{1,63}$/iu', 24=&gt; '/^[\x{002d}0-9a-zàáâåæçèéêëðóôöøüþœ]{1,63}$/iu', 25=&gt; '/^[\x{002d}0-9a-záäéíóöúüýčďěňřšťůž]{1,63}$/iu', 26=&gt; '/^[\x{002d}0-9a-z·àçèéíïòóúü]{1,63}$/iu', 27=&gt; '/^[\x{002d}0-9а-ъьюя\x{0450}\x{045D}]{1,63}$/iu', 28=&gt; '/^[\x{002d}0-9а-яёіў]{1,63}$/iu', 29=&gt; '/^[\x{002d}0-9a-ząčėęįšūųž]{1,63}$/iu', 30=&gt; '/^[\x{002d}0-9a-záäåæéëíðóöøúüýþ]{1,63}$/iu', 31=&gt; '/^[\x{002d}0-9a-zàâæçèéêëîïñôùûüÿœ]{1,63}$/iu', 32=&gt; '/^[\x{002d}0-9а-щъыьэюяёєіїґ]{1,63}$/iu', 33=&gt; '/^[\x{002d}0-9א-ת]{1,63}$/iu'), 'PR' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-záéíóúñäëïüöâêîôûàèùæçœãõ]{1,63}$/iu'), 'PT' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-záàâãçéêíóôõú]{1,63}$/iu'), 'RU' =&gt; array(1 =&gt; '/^[\x{002d}0-9а-яё]{1,63}$/iu'), 'SA' =&gt; array(1 =&gt; '/^[\x{002d}.0-9\x{0621}-\x{063A}\x{0641}-\x{064A}\x{0660}-\x{0669}]{1,63}$/iu'), 'SE' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zäåéöü]{1,63}$/iu'), 'SH' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿăąāćĉčċďđĕěėęēğĝġģĥħĭĩįīıĵķĺľļłńňņŋŏőōœĸŕřŗśŝšşťţŧŭůűũųūŵŷźžż]{1,63}$/iu'), 'SI' =&gt; array( 1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿ]{1,63}$/iu', 2 =&gt; '/^[\x{002d}0-9a-zāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĵķĺļľŀłńņňŉŋōŏőœŕŗřśŝšťŧũūŭůűųŵŷźżž]{1,63}$/iu', 3 =&gt; '/^[\x{002d}0-9a-zșț]{1,63}$/iu'), 'SJ' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zàáä-éêñ-ôöøüčđńŋšŧž]{1,63}$/iu'), 'TH' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-z\x{0E01}-\x{0E3A}\x{0E40}-\x{0E4D}\x{0E50}-\x{0E59}]{1,63}$/iu'), 'TM' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zà-öø-ÿāăąćĉċčďđēėęěĝġģĥħīįĵķĺļľŀłńņňŋőœŕŗřśŝşšţťŧūŭůűųŵŷźżž]{1,63}$/iu'), 'TW' =&gt; 'Hostname/Cn.php', 'TR' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-zğıüşöç]{1,63}$/iu'), 'VE' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-záéíóúüñ]{1,63}$/iu'), 'VN' =&gt; array(1 =&gt; '/^[ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚÝàáâãèéêìíòóôõùúýĂăĐđĨĩŨũƠơƯư\x{1EA0}-\x{1EF9}]{1,63}$/iu'), '中国' =&gt; 'Hostname/Cn.php', '中國' =&gt; 'Hostname/Cn.php', 'ලංකා' =&gt; array(1 =&gt; '/^[\x{0d80}-\x{0dff}]{1,63}$/iu'), '香港' =&gt; 'Hostname/Cn.php', '台湾' =&gt; 'Hostname/Cn.php', '台灣' =&gt; 'Hostname/Cn.php', 'امارات' =&gt; array(1 =&gt; '/^[\x{0621}-\x{0624}\x{0626}-\x{063A}\x{0641}\x{0642}\x{0644}-\x{0648}\x{067E}\x{0686}\x{0698}\x{06A9}\x{06AF}\x{06CC}\x{06F0}-\x{06F9}]{1,30}$/iu'), 'الاردن' =&gt; array(1 =&gt; '/^[\x{0621}-\x{0624}\x{0626}-\x{063A}\x{0641}\x{0642}\x{0644}-\x{0648}\x{067E}\x{0686}\x{0698}\x{06A9}\x{06AF}\x{06CC}\x{06F0}-\x{06F9}]{1,30}$/iu'), 'السعودية' =&gt; array(1 =&gt; '/^[\x{0621}-\x{0624}\x{0626}-\x{063A}\x{0641}\x{0642}\x{0644}-\x{0648}\x{067E}\x{0686}\x{0698}\x{06A9}\x{06AF}\x{06CC}\x{06F0}-\x{06F9}]{1,30}$/iu'), 'ไทย' =&gt; array(1 =&gt; '/^[\x{002d}0-9a-z\x{0E01}-\x{0E3A}\x{0E40}-\x{0E4D}\x{0E50}-\x{0E59}]{1,63}$/iu'), 'рф' =&gt; array(1 =&gt; '/^[\x{002d}0-9а-яё]{1,63}$/iu'), 'تونس' =&gt; array(1 =&gt; '/^[\x{0621}-\x{0624}\x{0626}-\x{063A}\x{0641}\x{0642}\x{0644}-\x{0648}\x{067E}\x{0686}\x{0698}\x{06A9}\x{06AF}\x{06CC}\x{06F0}-\x{06F9}]{1,30}$/iu'), 'مصر' =&gt; array(1 =&gt; '/^[\x{0621}-\x{0624}\x{0626}-\x{063A}\x{0641}\x{0642}\x{0644}-\x{0648}\x{067E}\x{0686}\x{0698}\x{06A9}\x{06AF}\x{06CC}\x{06F0}-\x{06F9}]{1,30}$/iu'), 'இலங்கை' =&gt; array(1 =&gt; '/^[\x{0b80}-\x{0bff}]{1,63}$/iu'), 'فلسطين' =&gt; array(1 =&gt; '/^[\x{0621}-\x{0624}\x{0626}-\x{063A}\x{0641}\x{0642}\x{0644}-\x{0648}\x{067E}\x{0686}\x{0698}\x{06A9}\x{06AF}\x{06CC}\x{06F0}-\x{06F9}]{1,30}$/iu'), ); protected $idnLength = array( 'BIZ' =&gt; array(5 =&gt; 17, 11 =&gt; 15, 12 =&gt; 20), 'CN' =&gt; array(1 =&gt; 20), 'COM' =&gt; array(3 =&gt; 17, 5 =&gt; 20), 'HK' =&gt; array(1 =&gt; 15), 'INFO'=&gt; array(4 =&gt; 17), 'KR' =&gt; array(1 =&gt; 17), 'NET' =&gt; array(3 =&gt; 17, 5 =&gt; 20), 'ORG' =&gt; array(6 =&gt; 17), 'TW' =&gt; array(1 =&gt; 20), 'امارات' =&gt; array(1 =&gt; 30), 'الاردن' =&gt; array(1 =&gt; 30), 'السعودية' =&gt; array(1 =&gt; 30), 'تونس' =&gt; array(1 =&gt; 30), 'مصر' =&gt; array(1 =&gt; 30), 'فلسطين' =&gt; array(1 =&gt; 30), '中国' =&gt; array(1 =&gt; 20), '中國' =&gt; array(1 =&gt; 20), '香港' =&gt; array(1 =&gt; 20), '台湾' =&gt; array(1 =&gt; 20), '台灣' =&gt; array(1 =&gt; 20), ); protected $tld; protected $options = array( 'allow' =&gt; self::ALLOW_DNS, 'useIdnCheck' =&gt; true, 'useTldCheck' =&gt; true, 'ipValidator' =&gt; null, ); public function __construct($options = array()) { if (!is_array($options)) { $options = func_get_args(); $temp['allow'] = array_shift($options); if (!empty($options)) { $temp['useIdnCheck'] = array_shift($options); } if (!empty($options)) { $temp['useTldCheck'] = array_shift($options); } if (!empty($options)) { $temp['ipValidator'] = array_shift($options); } $options = $temp; } if (!array_key_exists('ipValidator', $options)) { $options['ipValidator'] = null; } parent::__construct($options); } public function getIpValidator() { return $this-&gt;options['ipValidator']; } public function setIpValidator(Ip $ipValidator = null) { if ($ipValidator === null) { $ipValidator = new Ip(); } $this-&gt;options['ipValidator'] = $ipValidator; return $this; } public function getAllow() { return $this-&gt;options['allow']; } public function setAllow($allow) { $this-&gt;options['allow'] = $allow; return $this; } public function getIdnCheck() { return $this-&gt;options['useIdnCheck']; } public function useIdnCheck ($useIdnCheck) { $this-&gt;options['useIdnCheck'] = (bool) $useIdnCheck; return $this; } public function getTldCheck() { return $this-&gt;options['useTldCheck']; } public function useTldCheck ($useTldCheck) { $this-&gt;options['useTldCheck'] = (bool) $useTldCheck; return $this; } public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); if (preg_match('/^[0-9a-f:.]*$/i', $value) &amp;&amp; $this-&gt;getIpValidator()-&gt;setTranslator($this-&gt;getTranslator())-&gt;isValid($value)) { if (!($this-&gt;getAllow() &amp; self::ALLOW_IP)) { $this-&gt;error(self::IP_ADDRESS_NOT_ALLOWED); return false; } else { return true; } } if ($this-&gt;getAllow() &amp; self::ALLOW_LOCAL) { if (substr($value, -1) === '.') { $value = substr($value, 0, -1); if (substr($value, -1) === '.') { $this-&gt;error(self::INVALID_LOCAL_NAME); return false; } } } $domainParts = explode('.', $value); if ((count($domainParts) == 4) &amp;&amp; preg_match('/^[0-9.a-e:.]*$/i', $value) &amp;&amp; $this-&gt;getIpValidator()-&gt;setTranslator($this-&gt;getTranslator())-&gt;isValid($value)) { $this-&gt;error(self::INVALID_LOCAL_NAME); } if ((count($domainParts) &gt; 1) &amp;&amp; (strlen($value) &gt;= 4) &amp;&amp; (strlen($value) &lt;= 254)) { $utf8StrWrapper = StringUtils::getWrapper('UTF-8'); $status = false; do { $matches = array(); if (preg_match('/([^.]{2,10})$/i', end($domainParts), $matches) || (array_key_exists(end($domainParts), $this-&gt;validIdns))) { reset($domainParts); $this-&gt;tld = strtolower($matches[1]); if ($this-&gt;getTldCheck()) { if (!in_array($this-&gt;tld, $this-&gt;validTlds)) { $this-&gt;error(self::UNKNOWN_TLD); $status = false; break; } } $regexChars = array(0 =&gt; '/^[a-z0-9\x2d]{1,63}$/i'); if ($this-&gt;getIdnCheck() &amp;&amp; isset($this-&gt;validIdns[strtoupper($this-&gt;tld)])) { if (is_string($this-&gt;validIdns[strtoupper($this-&gt;tld)])) { $regexChars += include __DIR__ .'/'. $this-&gt;validIdns[strtoupper($this-&gt;tld)]; } else { $regexChars += $this-&gt;validIdns[strtoupper($this-&gt;tld)]; } } $check = 0; foreach ($domainParts as $domainPart) { if (strpos($domainPart, 'xn--') === 0) { $domainPart = $this-&gt;decodePunycode(substr($domainPart, 4)); if ($domainPart === false) { return false; } } if ((strpos($domainPart, '-') === 0) || ((strlen($domainPart) &gt; 2) &amp;&amp; (strpos($domainPart, '-', 2) == 2) &amp;&amp; (strpos($domainPart, '-', 3) == 3)) || (strpos($domainPart, '-') === (strlen($domainPart) - 1))) { $this-&gt;error(self::INVALID_DASH); $status = false; break 2; } $checked = false; foreach ($regexChars as $regexKey =&gt; $regexChar) { ErrorHandler::start(); $status = preg_match($regexChar, $domainPart); ErrorHandler::stop(); if ($status &gt; 0) { $length = 63; if (array_key_exists(strtoupper($this-&gt;tld), $this-&gt;idnLength) &amp;&amp; (array_key_exists($regexKey, $this-&gt;idnLength[strtoupper($this-&gt;tld)]))) { $length = $this-&gt;idnLength[strtoupper($this-&gt;tld)]; } if ($utf8StrWrapper-&gt;strlen($domainPart) &gt; $length) { $this-&gt;error(self::INVALID_HOSTNAME); } else { $checked = true; break; } } } if ($checked) { ++$check; } } if ($check !== count($domainParts)) { $this-&gt;error(self::INVALID_HOSTNAME_SCHEMA); $status = false; } } else { $this-&gt;error(self::UNDECIPHERABLE_TLD); $status = false; } } while (false); if ($status &amp;&amp; ($this-&gt;getAllow() &amp; self::ALLOW_DNS)) { return true; } } elseif ($this-&gt;getAllow() &amp; self::ALLOW_DNS) { $this-&gt;error(self::INVALID_HOSTNAME); } if ($this-&gt;getAllow() &amp; self::ALLOW_URI) { if (preg_match("/^([a-zA-Z0-9-._~!$&amp;\'()*+,;=]|%[[:xdigit:]]{2}){1,254}$/i", $value)) { return true; } else { $this-&gt;error(self::INVALID_URI); } } ErrorHandler::start(); $regexLocal = '/^(([a-zA-Z0-9\x2d]{1,63}\x2e)*[a-zA-Z0-9\x2d]{1,63}[\x2e]{0,1}){1,254}$/'; $status = preg_match($regexLocal, $value); ErrorHandler::stop(); $allowLocal = $this-&gt;getAllow() &amp; self::ALLOW_LOCAL; if ($status &amp;&amp; $allowLocal) { return true; } if (!$status) { $this-&gt;error(self::INVALID_LOCAL_NAME); } if ($status &amp;&amp; !$allowLocal) { $this-&gt;error(self::LOCAL_NAME_NOT_ALLOWED); } return false; } protected function decodePunycode($encoded) { $found = preg_match('/([^a-z0-9\x2d]{1,10})$/i', $encoded); if (empty($encoded) || ($found &gt; 0)) { $this-&gt;error(self::CANNOT_DECODE_PUNYCODE); return false; } $separator = strrpos($encoded, '-'); if ($separator &gt; 0) { for ($x = 0; $x &lt; $separator; ++$x) { $decoded[] = ord($encoded[$x]); } } else { $this-&gt;error(self::CANNOT_DECODE_PUNYCODE); return false; } $lengthd = count($decoded); $lengthe = strlen($encoded); $init = true; $base = 72; $index = 0; $char = 0x80; for ($indexe = ($separator) ? ($separator + 1) : 0; $indexe &lt; $lengthe; ++$lengthd) { for ($oldIndex = $index, $pos = 1, $key = 36; 1; $key += 36) { $hex = ord($encoded[$indexe++]); $digit = ($hex - 48 &lt; 10) ? $hex - 22 : (($hex - 65 &lt; 26) ? $hex - 65 : (($hex - 97 &lt; 26) ? $hex - 97 : 36)); $index += $digit * $pos; $tag = ($key &lt;= $base) ? 1 : (($key &gt;= $base + 26) ? 26 : ($key - $base)); if ($digit &lt; $tag) { break; } $pos = (int) ($pos * (36 - $tag)); } $delta = intval($init ? (($index - $oldIndex) / 700) : (($index - $oldIndex) / 2)); $delta += intval($delta / ($lengthd + 1)); for ($key = 0; $delta &gt; 910 / 2; $key += 36) { $delta = intval($delta / 35); } $base = intval($key + 36 * $delta / ($delta + 38)); $init = false; $char += (int) ($index / ($lengthd + 1)); $index %= ($lengthd + 1); if ($lengthd &gt; 0) { for ($i = $lengthd; $i &gt; $index; $i--) { $decoded[$i] = $decoded[($i - 1)]; } } $decoded[$index++] = $char; } foreach ($decoded as $key =&gt; $value) { if ($value &lt; 128) { $decoded[$key] = chr($value); } elseif ($value &lt; (1 &lt;&lt; 11)) { $decoded[$key] = chr(192 + ($value &gt;&gt; 6)); $decoded[$key] .= chr(128 + ($value &amp; 63)); } elseif ($value &lt; (1 &lt;&lt; 16)) { $decoded[$key] = chr(224 + ($value &gt;&gt; 12)); $decoded[$key] .= chr(128 + (($value &gt;&gt; 6) &amp; 63)); $decoded[$key] .= chr(128 + ($value &amp; 63)); } elseif ($value &lt; (1 &lt;&lt; 21)) { $decoded[$key] = chr(240 + ($value &gt;&gt; 18)); $decoded[$key] .= chr(128 + (($value &gt;&gt; 12) &amp; 63)); $decoded[$key] .= chr(128 + (($value &gt;&gt; 6) &amp; 63)); $decoded[$key] .= chr(128 + ($value &amp; 63)); } else { $this-&gt;error(self::CANNOT_DECODE_PUNYCODE); return false; } } return implode($decoded); } } &lt;?php
 namespace Zend\Validator; use DateTime; use Traversable; class Date extends AbstractValidator { const INVALID = 'dateInvalid'; const INVALID_DATE = 'dateInvalidDate'; const FALSEFORMAT = 'dateFalseFormat'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String, integer, array or DateTime expected", self::INVALID_DATE =&gt; "The input does not appear to be a valid date", self::FALSEFORMAT =&gt; "The input does not fit the date format '%format%'", ); protected $messageVariables = array( 'format' =&gt; 'format' ); protected $format; public function __construct($options = array()) { if ($options instanceof Traversable) { $options = iterator_to_array($options); } elseif (!is_array($options)) { $options = func_get_args(); $temp['format'] = array_shift($options); $options = $temp; } if (array_key_exists('format', $options)) { $this-&gt;setFormat($options['format']); } parent::__construct($options); } public function getFormat() { return $this-&gt;format; } public function setFormat($format = null) { $this-&gt;format = $format; return $this; } public function isValid($value) { if (!is_string($value) &amp;&amp; !is_array($value) &amp;&amp; !is_int($value) &amp;&amp; !($value instanceof DateTime) ) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); $format = $this-&gt;getFormat(); if ($value instanceof DateTime) { return true; } elseif (is_int($value) || (is_string($value) &amp;&amp; null !== $format) ) { $date = (is_int($value)) ? date_create("@$value") : DateTime::createFromFormat($format, $value); $errors = DateTime::getLastErrors(); if ($errors['warning_count'] &gt; 0) { $this-&gt;error(self::INVALID_DATE); return false; } if ($date === false) { $this-&gt;error(self::INVALID_DATE); return false; } } else { if (is_array($value)) { $value = implode('-', $value); } if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $value)) { $this-&gt;format = 'Y-m-d'; $this-&gt;error(self::FALSEFORMAT); $this-&gt;format = null; return false; } list($year, $month, $day) = sscanf($value, '%d-%d-%d'); if (!checkdate($month, $day, $year)) { $this-&gt;error(self::INVALID_DATE); return false; } } return true; } } &lt;?php
 namespace Zend\Validator; interface ValidatorInterface { public function isValid($value); public function getMessages(); } &lt;?php
 namespace Zend\Validator; use Zend\Stdlib\StringUtils; use Zend\Stdlib\StringWrapper\StringWrapperInterface as StringWrapper; class StringLength extends AbstractValidator { const INVALID = 'stringLengthInvalid'; const TOO_SHORT = 'stringLengthTooShort'; const TOO_LONG = 'stringLengthTooLong'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String expected", self::TOO_SHORT =&gt; "The input is less than %min% characters long", self::TOO_LONG =&gt; "The input is more than %max% characters long", ); protected $messageVariables = array( 'min' =&gt; array('options' =&gt; 'min'), 'max' =&gt; array('options' =&gt; 'max'), ); protected $options = array( 'min' =&gt; 0, 'max' =&gt; null, 'encoding' =&gt; 'UTF-8', ); protected $stringWrapper; public function __construct($options = array()) { if (!is_array($options)) { $options = func_get_args(); $temp['min'] = array_shift($options); if (!empty($options)) { $temp['max'] = array_shift($options); } if (!empty($options)) { $temp['encoding'] = array_shift($options); } $options = $temp; } parent::__construct($options); } public function getMin() { return $this-&gt;options['min']; } public function setMin($min) { if (null !== $this-&gt;getMax() &amp;&amp; $min &gt; $this-&gt;getMax()) { throw new Exception\InvalidArgumentException("The minimum must be less than or equal to the maximum length, but $min &gt;" . " " . $this-&gt;getMax()); } $this-&gt;options['min'] = max(0, (integer) $min); return $this; } public function getMax() { return $this-&gt;options['max']; } public function setMax($max) { if (null === $max) { $this-&gt;options['max'] = null; } elseif ($max &lt; $this-&gt;getMin()) { throw new Exception\InvalidArgumentException("The maximum must be greater than or equal to the minimum length, but " . "$max &lt; " . $this-&gt;getMin()); } else { $this-&gt;options['max'] = (integer) $max; } return $this; } public function getStringWrapper() { if (!$this-&gt;stringWrapper) { $this-&gt;stringWrapper = StringUtils::getWrapper($this-&gt;getEncoding()); } return $this-&gt;stringWrapper; } public function setStringWrapper(StringWrapper $stringWrapper) { $stringWrapper-&gt;setEncoding($this-&gt;getEncoding()); $this-&gt;stringWrapper = $stringWrapper; } public function getEncoding() { return $this-&gt;options['encoding']; } public function setEncoding($encoding) { $this-&gt;stringWrapper = StringUtils::getWrapper($encoding); $this-&gt;options['encoding'] = $encoding; return $this; } public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); $length = $this-&gt;getStringWrapper()-&gt;strlen($value); if ($length &lt; $this-&gt;getMin()) { $this-&gt;error(self::TOO_SHORT); } if (null !== $this-&gt;getMax() &amp;&amp; $this-&gt;getMax() &lt; $length) { $this-&gt;error(self::TOO_LONG); } if (count($this-&gt;getMessages())) { return false; } return true; } } &lt;?php
 namespace Zend\Validator; class Hex extends AbstractValidator { const INVALID = 'hexInvalid'; const NOT_HEX = 'notHex'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String expected", self::NOT_HEX =&gt; "The input contains non-hexadecimal characters", ); public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); if (!ctype_xdigit((string) $value)) { $this-&gt;error(self::NOT_HEX); return false; } return true; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; class Identical extends AbstractValidator { const NOT_SAME = 'notSame'; const MISSING_TOKEN = 'missingToken'; protected $messageTemplates = array( self::NOT_SAME =&gt; "The two given tokens do not match", self::MISSING_TOKEN =&gt; 'No token was provided to match against', ); protected $messageVariables = array( 'token' =&gt; 'tokenString' ); protected $tokenString; protected $token; protected $strict = true; public function __construct($token = null) { if ($token instanceof Traversable) { $token = ArrayUtils::iteratorToArray($token); } if (is_array($token) &amp;&amp; array_key_exists('token', $token)) { if (array_key_exists('strict', $token)) { $this-&gt;setStrict($token['strict']); } $this-&gt;setToken($token['token']); } elseif (null !== $token) { $this-&gt;setToken($token); } parent::__construct(is_array($token) ? $token : null); } public function getToken() { return $this-&gt;token; } public function setToken($token) { $this-&gt;tokenString = (is_array($token) ? var_export($token, true) : (string) $token); $this-&gt;token = $token; return $this; } public function getStrict() { return $this-&gt;strict; } public function setStrict($strict) { $this-&gt;strict = (bool) $strict; return $this; } public function isValid($value, $context = null) { $this-&gt;setValue($value); $token = $this-&gt;getToken(); if ($context !== null) { if (!is_array($context)) { throw new Exception\InvalidArgumentException(sprintf( 'Context passed to %s must be an array or null; received "%s"', __METHOD__, (is_object($context) ? get_class($context) : gettype($context)) )); } if (is_array($token)) { while (is_array($token)){ $key = key($token); if (!isset($context[$key])) { break; } $context = $context[$key]; $token = $token[$key]; } } if (is_array($token) || !isset($context[$token])) { throw new Exception\RuntimeException("The token doesn't exist in the context"); } else { $token = $context[$token]; } } if ($token === null) { $this-&gt;error(self::MISSING_TOKEN); return false; } $strict = $this-&gt;getStrict(); if (($strict &amp;&amp; ($value !== $token)) || (!$strict &amp;&amp; ($value != $token))) { $this-&gt;error(self::NOT_SAME); return false; } return true; } } &lt;?php
 namespace Zend\Validator; use Traversable; class Barcode extends AbstractValidator { const INVALID = 'barcodeInvalid'; const FAILED = 'barcodeFailed'; const INVALID_CHARS = 'barcodeInvalidChars'; const INVALID_LENGTH = 'barcodeInvalidLength'; protected $messageTemplates = array( self::FAILED =&gt; "The input failed checksum validation", self::INVALID_CHARS =&gt; "The input contains invalid characters", self::INVALID_LENGTH =&gt; "The input should have a length of %length% characters", self::INVALID =&gt; "Invalid type given. String expected", ); protected $messageVariables = array( 'length' =&gt; array('options' =&gt; 'length'), ); protected $options = array( 'adapter' =&gt; null, 'options' =&gt; null, 'length' =&gt; null, 'useChecksum' =&gt; null, ); public function __construct($options = null) { if (!is_array($options) &amp;&amp; !($options instanceof Traversable)) { $options = array('adapter' =&gt; $options); } if (array_key_exists('options', $options)) { $options['options'] = array('options' =&gt; $options['options']); } parent::__construct($options); } public function getAdapter() { if (!($this-&gt;options['adapter'] instanceof Barcode\AdapterInterface)) { $this-&gt;setAdapter('Ean13'); } return $this-&gt;options['adapter']; } public function setAdapter($adapter, $options = null) { if (is_string($adapter)) { $adapter = ucfirst(strtolower($adapter)); $adapter = 'Zend\\Validator\\Barcode\\' . $adapter; if (!class_exists($adapter)) { throw new Exception\InvalidArgumentException('Barcode adapter matching "' . $adapter . '" not found'); } $this-&gt;options['adapter'] = new $adapter($options); } if (!$this-&gt;options['adapter'] instanceof Barcode\AdapterInterface) { throw new Exception\InvalidArgumentException( "Adapter $adapter does not implement Zend\\Validate\\Barcode\\AdapterInterface" ); } return $this; } public function getChecksum() { return $this-&gt;getAdapter()-&gt;getChecksum(); } public function useChecksum($checksum = null) { return $this-&gt;getAdapter()-&gt;useChecksum($checksum); } public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); $adapter = $this-&gt;getAdapter(); $this-&gt;options['length'] = $adapter-&gt;getLength(); $result = $adapter-&gt;hasValidLength($value); if (!$result) { if (is_array($this-&gt;options['length'])) { $temp = $this-&gt;options['length']; $this-&gt;options['length'] = ""; foreach ($temp as $length) { $this-&gt;options['length'] .= "/"; $this-&gt;options['length'] .= $length; } $this-&gt;options['length'] = substr($this-&gt;options['length'], 1); } $this-&gt;error(self::INVALID_LENGTH); return false; } $result = $adapter-&gt;hasValidCharacters($value); if (!$result) { $this-&gt;error(self::INVALID_CHARS); return false; } if ($this-&gt;useChecksum(null)) { $result = $adapter-&gt;hasValidChecksum($value); if (!$result) { $this-&gt;error(self::FAILED); return false; } } return true; } } &lt;?php
 namespace Zend\Validator; class StaticValidator { protected static $plugins; public static function setPluginManager(ValidatorPluginManager $plugins = null) { if ($plugins instanceof ValidatorPluginManager) { $plugins-&gt;setShareByDefault(false); } static::$plugins = $plugins; } public static function getPluginManager() { if (null === static::$plugins) { static::setPluginManager(new ValidatorPluginManager()); } return static::$plugins; } public static function execute($value, $classBaseName, array $args = array()) { $plugins = static::getPluginManager(); $validator = $plugins-&gt;get($classBaseName, $args); return $validator-&gt;isValid($value); } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\ErrorHandler; class Regex extends AbstractValidator { const INVALID = 'regexInvalid'; const NOT_MATCH = 'regexNotMatch'; const ERROROUS = 'regexErrorous'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String, integer or float expected", self::NOT_MATCH =&gt; "The input does not match against pattern '%pattern%'", self::ERROROUS =&gt; "There was an internal error while using the pattern '%pattern%'", ); protected $messageVariables = array( 'pattern' =&gt; 'pattern' ); protected $pattern; public function __construct($pattern) { if (is_string($pattern)) { $this-&gt;setPattern($pattern); parent::__construct(array()); return; } if ($pattern instanceof Traversable) { $pattern = ArrayUtils::iteratorToArray($pattern); } if (!is_array($pattern)) { throw new Exception\InvalidArgumentException('Invalid options provided to constructor'); } if (!array_key_exists('pattern', $pattern)) { throw new Exception\InvalidArgumentException("Missing option 'pattern'"); } $this-&gt;setPattern($pattern['pattern']); unset($pattern['pattern']); parent::__construct($pattern); } public function getPattern() { return $this-&gt;pattern; } public function setPattern($pattern) { ErrorHandler::start(); $this-&gt;pattern = (string) $pattern; $status = preg_match($this-&gt;pattern, "Test"); $error = ErrorHandler::stop(); if (false === $status) { throw new Exception\InvalidArgumentException("Internal error parsing the pattern '{$this-&gt;pattern}'", 0, $error); } return $this; } public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value) &amp;&amp; !is_float($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); ErrorHandler::start(); $status = preg_match($this-&gt;pattern, $value); ErrorHandler::stop(); if (false === $status) { $this-&gt;error(self::ERROROUS); return false; } if (!$status) { $this-&gt;error(self::NOT_MATCH); return false; } return true; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Iban extends AbstractValidator { const NOTSUPPORTED = 'ibanNotSupported'; const SEPANOTSUPPORTED = 'ibanSepaNotSupported'; const FALSEFORMAT = 'ibanFalseFormat'; const CHECKFAILED = 'ibanCheckFailed'; protected $messageTemplates = array( self::NOTSUPPORTED =&gt; "Unknown country within the IBAN", self::SEPANOTSUPPORTED =&gt; "Countries outside the Single Euro Payments Area (SEPA) are not supported", self::FALSEFORMAT =&gt; "The input has a false IBAN format", self::CHECKFAILED =&gt; "The input has failed the IBAN check", ); protected $countryCode; protected $allowNonSepa = true; protected static $sepaCountries = array( 'AT', 'BE', 'BG', 'CY', 'CZ', 'DK', 'FO', 'GL', 'EE', 'FI', 'FR', 'DE', 'GI', 'GR', 'HU', 'IS', 'IE', 'IT', 'LV', 'LI', 'LT', 'LU', 'MT', 'MC', 'NL', 'NO', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'CH', 'GB' ); protected static $ibanRegex = array( 'AD' =&gt; 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}', 'AE' =&gt; 'AE[0-9]{2}[0-9]{3}[0-9]{16}', 'AL' =&gt; 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}', 'AT' =&gt; 'AT[0-9]{2}[0-9]{5}[0-9]{11}', 'AZ' =&gt; 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}', 'BA' =&gt; 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}', 'BE' =&gt; 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}', 'BG' =&gt; 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}', 'BH' =&gt; 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}', 'CH' =&gt; 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}', 'CR' =&gt; 'CR[0-9]{2}[0-9]{3}[0-9]{14}', 'CY' =&gt; 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}', 'CZ' =&gt; 'CZ[0-9]{2}[0-9]{20}', 'DE' =&gt; 'DE[0-9]{2}[0-9]{8}[0-9]{10}', 'DO' =&gt; 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}', 'DK' =&gt; 'DK[0-9]{2}[0-9]{14}', 'EE' =&gt; 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}', 'ES' =&gt; 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}', 'FI' =&gt; 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}', 'FO' =&gt; 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}', 'FR' =&gt; 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}', 'GB' =&gt; 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}', 'GE' =&gt; 'GE[0-9]{2}[A-Z]{2}[0-9]{16}', 'GI' =&gt; 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}', 'GL' =&gt; 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}', 'GR' =&gt; 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}', 'GT' =&gt; 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}', 'HR' =&gt; 'HR[0-9]{2}[0-9]{7}[0-9]{10}', 'HU' =&gt; 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}', 'IE' =&gt; 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}', 'IL' =&gt; 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}', 'IS' =&gt; 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}', 'IT' =&gt; 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}', 'KW' =&gt; 'KW[0-9]{2}[A-Z]{4}[0-9]{22}', 'KZ' =&gt; 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}', 'LB' =&gt; 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}', 'LI' =&gt; 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}', 'LT' =&gt; 'LT[0-9]{2}[0-9]{5}[0-9]{11}', 'LU' =&gt; 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}', 'LV' =&gt; 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}', 'MC' =&gt; 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}', 'MD' =&gt; 'MD[0-9]{2}[A-Z0-9]{20}', 'ME' =&gt; 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}', 'MK' =&gt; 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}', 'MR' =&gt; 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}', 'MT' =&gt; 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}', 'MU' =&gt; 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}', 'NL' =&gt; 'NL[0-9]{2}[A-Z]{4}[0-9]{10}', 'NO' =&gt; 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}', 'PK' =&gt; 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}', 'PL' =&gt; 'PL[0-9]{2}[0-9]{8}[0-9]{16}', 'PS' =&gt; 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}', 'PT' =&gt; 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}', 'RO' =&gt; 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}', 'RS' =&gt; 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}', 'SA' =&gt; 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}', 'SE' =&gt; 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}', 'SI' =&gt; 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}', 'SK' =&gt; 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}', 'SM' =&gt; 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}', 'TN' =&gt; 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}', 'TR' =&gt; 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}', 'VG' =&gt; 'VG[0-9]{2}[A-Z]{4}[0-9]{16}', ); public function __construct($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (array_key_exists('country_code', $options)) { $this-&gt;setCountryCode($options['country_code']); } if (array_key_exists('allow_non_sepa', $options)) { $this-&gt;setAllowNonSepa($options['allow_non_sepa']); } parent::__construct($options); } public function getCountryCode() { return $this-&gt;countryCode; } public function setCountryCode($countryCode = null) { if ($countryCode !== null) { $countryCode = (string) $countryCode; if (!isset(static::$ibanRegex[$countryCode])) { throw new Exception\InvalidArgumentException( "Country code '{$countryCode}' invalid by ISO 3166-1 or not supported" ); } } $this-&gt;countryCode = $countryCode; return $this; } public function allowNonSepa() { return $this-&gt;allowNonSepa; } public function setAllowNonSepa($allowNonSepa) { $this-&gt;allowNonSepa = (bool) $allowNonSepa; return $this; } public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::FALSEFORMAT); return false; } $value = str_replace(' ', '', strtoupper($value)); $this-&gt;setValue($value); $countryCode = $this-&gt;getCountryCode(); if ($countryCode === null) { $countryCode = substr($value, 0, 2); } if (!array_key_exists($countryCode, static::$ibanRegex)) { $this-&gt;setValue($countryCode); $this-&gt;error(self::NOTSUPPORTED); return false; } if (!$this-&gt;allowNonSepa &amp;&amp; !in_array($countryCode, static::$sepaCountries)) { $this-&gt;setValue($countryCode); $this-&gt;error(self::SEPANOTSUPPORTED); return false; } if (!preg_match('/^' . static::$ibanRegex[$countryCode] . '$/', $value)) { $this-&gt;error(self::FALSEFORMAT); return false; } $format = substr($value, 4) . substr($value, 0, 4); $format = str_replace( array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'), array('10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35'), $format ); $temp = intval(substr($format, 0, 1)); $len = strlen($format); for ($x = 1; $x &lt; $len; ++$x) { $temp *= 10; $temp += intval(substr($format, $x, 1)); $temp %= 97; } if ($temp != 1) { $this-&gt;error(self::CHECKFAILED); return false; } return true; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; class Explode extends AbstractValidator { const INVALID = 'explodeInvalid'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given.", ); protected $messageVariables = array(); protected $valueDelimiter = ','; protected $validator; protected $breakOnFirstFailure = false; public function setValueDelimiter($delimiter) { $this-&gt;valueDelimiter = $delimiter; return $this; } public function getValueDelimiter() { return $this-&gt;valueDelimiter; } public function setValidator(ValidatorInterface $validator) { $this-&gt;validator = $validator; return $this; } public function getValidator() { return $this-&gt;validator; } public function setBreakOnFirstFailure($break) { $this-&gt;breakOnFirstFailure = (bool) $break; return $this; } public function isBreakOnFirstFailure() { return $this-&gt;breakOnFirstFailure; } public function isValid($value) { $this-&gt;setValue($value); if ($value instanceof Traversable) { $value = ArrayUtils::iteratorToArray($value); } if (is_array($value)) { $values = $value; } elseif (is_string($value)) { $delimiter = $this-&gt;getValueDelimiter(); $values = (null !== $delimiter) ? explode($this-&gt;valueDelimiter, $value) : array($value); } else { $values = array($value); } $retval = true; $messages = array(); $validator = $this-&gt;getValidator(); if (!$validator) { throw new Exception\RuntimeException(sprintf( '%s expects a validator to be set; none given', __METHOD__ )); } foreach ($values as $value) { if (!$validator-&gt;isValid($value)) { $messages[] = $validator-&gt;getMessages(); $retval = false; if ($this-&gt;isBreakOnFirstFailure()) { break; } } } $this-&gt;abstractOptions['messages'] = $messages; return $retval; } } &lt;?php
 namespace Zend\Validator; use DateInterval; use DateTime; use DateTimeZone; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Validator\Exception; class DateStep extends Date { const NOT_STEP = 'dateStepNotStep'; protected $messageTemplates = array( self::NOT_STEP =&gt; "The input is not a valid step" ); protected $baseValue = '1970-01-01T00:00:00Z'; protected $step; protected $format = DateTime::ISO8601; protected $timezone; public function __construct($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { $options = func_get_args(); $temp['baseValue'] = array_shift($options); if (!empty($options)) { $temp['step'] = array_shift($options); } if (!empty($options)) { $temp['format'] = array_shift($options); } if (!empty($options)) { $temp['timezone'] = array_shift($options); } $options = $temp; } if (isset($options['baseValue'])) { $this-&gt;setBaseValue($options['baseValue']); } if (isset($options['step'])) { $this-&gt;setStep($options['step']); } else { $this-&gt;setStep(new DateInterval('P1D')); } if (array_key_exists('format', $options)) { $this-&gt;setFormat($options['format']); } if (isset($options['timezone'])) { $this-&gt;setTimezone($options['timezone']); } else { $this-&gt;setTimezone(new DateTimeZone(date_default_timezone_get())); } parent::__construct($options); } public function setBaseValue($baseValue) { $this-&gt;baseValue = $baseValue; return $this; } public function getBaseValue() { return $this-&gt;baseValue; } public function setStep(DateInterval $step) { $this-&gt;step = $step; return $this; } public function getStep() { return $this-&gt;step; } public function getTimezone() { return $this-&gt;timezone; } public function setTimezone(DateTimeZone $timezone) { $this-&gt;timezone = $timezone; return $this; } protected function convertToDateTime($param) { $dateObj = $param; if (is_int($param)) { $dateObj = date_create("@$param"); } elseif (is_string($param)) { if (strpos($this-&gt;getFormat(), 'Y-\WW') === 0 &amp;&amp; preg_match('/^([0-9]{4})\-W([0-9]{2})/', $param, $matches) ) { $dateObj = new DateTime(); $dateObj-&gt;setISODate($matches[1], $matches[2]); } else { $dateObj = DateTime::createFromFormat( $this-&gt;getFormat(), $param, $this-&gt;getTimezone() ); } } if (!($dateObj instanceof DateTime)) { throw new Exception\InvalidArgumentException('Invalid date param given'); } return $dateObj; } public function isValid($value) { parent::isValid($value); $this-&gt;setValue($value); $baseDate = $this-&gt;convertToDateTime($this-&gt;getBaseValue()); $step = $this-&gt;getStep(); try { $valueDate = $this-&gt;convertToDateTime($value); } catch (Exception\InvalidArgumentException $ex) { return false; } if ($valueDate == $baseDate) { return true; } $intervalParts = explode('|', $step-&gt;format('%y|%m|%d|%h|%i|%s')); $partCounts = array_count_values($intervalParts); if (5 === $partCounts["0"]) { $unitKeys = array('years', 'months', 'days', 'hours', 'minutes', 'seconds'); $intervalParts = array_combine($unitKeys, $intervalParts); $intervalUnit = null; $stepValue = null; foreach ($intervalParts as $key =&gt; $value) { if (0 != $value) { $intervalUnit = $key; $stepValue = (int) $value; break; } } $timeDiff = $valueDate-&gt;diff($baseDate, true); $diffParts = explode('|', $timeDiff-&gt;format('%y|%m|%d|%h|%i|%s')); $diffParts = array_combine($unitKeys, $diffParts); if (in_array($intervalUnit, array('years', 'months', 'days'))) { switch ($intervalUnit) { case 'years': if ( 0 == $diffParts['months'] &amp;&amp; 0 == $diffParts['days'] &amp;&amp; 0 == $diffParts['hours'] &amp;&amp; 0 == $diffParts['minutes'] &amp;&amp; 0 == $diffParts['seconds'] ) { if (($diffParts['years'] % $stepValue) === 0) { return true; } } break; case 'months': if ( 0 == $diffParts['days'] &amp;&amp; 0 == $diffParts['hours'] &amp;&amp; 0 == $diffParts['minutes'] &amp;&amp; 0 == $diffParts['seconds'] ) { $months = ($diffParts['years'] * 12) + $diffParts['months']; if (($months % $stepValue) === 0) { return true; } } break; case 'days': if ( 0 == $diffParts['hours'] &amp;&amp; 0 == $diffParts['minutes'] &amp;&amp; 0 == $diffParts['seconds'] ) { $days = $timeDiff-&gt;format('%a'); if (($days % $stepValue) === 0) { return true; } } break; } $this-&gt;error(self::NOT_STEP); return false; } if (in_array($intervalUnit, array('hours', 'minutes', 'seconds'))) { if (1 == $stepValue) { if ('hours' === $intervalUnit &amp;&amp; 0 == $diffParts['minutes'] &amp;&amp; 0 == $diffParts['seconds'] ) { return true; } elseif ('minutes' === $intervalUnit &amp;&amp; 0 == $diffParts['seconds']) { return true; } elseif ('seconds' === $intervalUnit) { return true; } } if ($baseDate-&gt;format('Y-m-d') == $valueDate-&gt;format('Y-m-d') &amp;&amp; $baseDate-&gt;format('Y-m-d') == '1970-01-01' ) { switch ($intervalUnit) { case 'hours': if (0 == $diffParts['minutes'] &amp;&amp; 0 == $diffParts['seconds']) { if (($diffParts['hours'] % $stepValue) === 0) { return true; } } break; case 'minutes': if (0 == $diffParts['seconds']) { $minutes = ($diffParts['hours'] * 60) + $diffParts['minutes']; if (($minutes % $stepValue) === 0) { return true; } } break; case 'seconds': $seconds = ($diffParts['hours'] * 60) + ($diffParts['minutes'] * 60) + $diffParts['seconds']; if (($seconds % $stepValue) === 0) { return true; } break; } $this-&gt;error(self::NOT_STEP); return false; } } } if ($baseDate &lt; $valueDate) { while ($baseDate &lt; $valueDate) { $baseDate-&gt;add($step); if ($baseDate == $valueDate) { return true; } } } else { while ($baseDate &gt; $valueDate) { $baseDate-&gt;sub($step); if ($baseDate == $valueDate) { return true; } } } $this-&gt;error(self::NOT_STEP); return false; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; class LessThan extends AbstractValidator { const NOT_LESS = 'notLessThan'; const NOT_LESS_INCLUSIVE = 'notLessThanInclusive'; protected $messageTemplates = array( self::NOT_LESS =&gt; "The input is not less than '%max%'", self::NOT_LESS_INCLUSIVE =&gt; "The input is not less or equal than '%max%'" ); protected $messageVariables = array( 'max' =&gt; 'max' ); protected $max; protected $inclusive; public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = func_get_args(); $temp['max'] = array_shift($options); if (!empty($options)) { $temp['inclusive'] = array_shift($options); } $options = $temp; } if (!array_key_exists('max', $options)) { throw new Exception\InvalidArgumentException("Missing option 'max'"); } if (!array_key_exists('inclusive', $options)) { $options['inclusive'] = false; } $this-&gt;setMax($options['max']) -&gt;setInclusive($options['inclusive']); parent::__construct($options); } public function getMax() { return $this-&gt;max; } public function setMax($max) { $this-&gt;max = $max; return $this; } public function getInclusive() { return $this-&gt;inclusive; } public function setInclusive($inclusive) { $this-&gt;inclusive = $inclusive; return $this; } public function isValid($value) { $this-&gt;setValue($value); if ($this-&gt;inclusive) { if ($value &gt; $this-&gt;max) { $this-&gt;error(self::NOT_LESS_INCLUSIVE); return false; } } else { if ($value &gt;= $this-&gt;max) { $this-&gt;error(self::NOT_LESS); return false; } } return true; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\Exception; class Crc32 extends Hash { const DOES_NOT_MATCH = 'fileCrc32DoesNotMatch'; const NOT_DETECTED = 'fileCrc32NotDetected'; const NOT_FOUND = 'fileCrc32NotFound'; protected $messageTemplates = array( self::DOES_NOT_MATCH =&gt; "File does not match the given crc32 hashes", self::NOT_DETECTED =&gt; "A crc32 hash could not be evaluated for the given file", self::NOT_FOUND =&gt; "File is not readable or does not exist", ); protected $options = array( 'algorithm' =&gt; 'crc32', 'hash' =&gt; null, ); public function getCrc32() { return $this-&gt;getHash(); } public function setCrc32($options) { $this-&gt;setHash($options); return $this; } public function addCrc32($options) { $this-&gt;addHash($options); return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } $hashes = array_unique(array_keys($this-&gt;getHash())); $filehash = hash_file('crc32', $file); if ($filehash === false) { $this-&gt;error(self::NOT_DETECTED); return false; } foreach ($hashes as $hash) { if ($filehash === $hash) { return true; } } $this-&gt;error(self::DOES_NOT_MATCH); return false; } } &lt;?php
 namespace Zend\Validator\File; use finfo; use Zend\Validator\Exception; class ExcludeMimeType extends MimeType { const FALSE_TYPE = 'fileExcludeMimeTypeFalse'; const NOT_DETECTED = 'fileExcludeMimeTypeNotDetected'; const NOT_READABLE = 'fileExcludeMimeTypeNotReadable'; public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $filetype = $file['type']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name']) || !isset($value['type'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; $filetype = $value['type']; } else { $file = $value; $filename = basename($file); $filetype = null; } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_READABLE); return false; } $mimefile = $this-&gt;getMagicFile(); if (class_exists('finfo', false)) { $const = defined('FILEINFO_MIME_TYPE') ? FILEINFO_MIME_TYPE : FILEINFO_MIME; if (!$this-&gt;isMagicFileDisabled() &amp;&amp; (!empty($mimefile) &amp;&amp; empty($this-&gt;finfo))) { $this-&gt;finfo = finfo_open($const, $mimefile); } if (empty($this-&gt;finfo)) { $this-&gt;finfo = finfo_open($const); } $this-&gt;type = null; if (!empty($this-&gt;finfo)) { $this-&gt;type = finfo_file($this-&gt;finfo, $file); } } if (empty($this-&gt;type) &amp;&amp; (function_exists('mime_content_type') &amp;&amp; ini_get('mime_magic.magicfile')) ) { $this-&gt;type = mime_content_type($file); } if (empty($this-&gt;type) &amp;&amp; $this-&gt;getHeaderCheck()) { $this-&gt;type = $filetype; } if (empty($this-&gt;type)) { $this-&gt;error(self::NOT_DETECTED); false; } $mimetype = $this-&gt;getMimeType(true); if (in_array($this-&gt;type, $mimetype)) { $this-&gt;error(self::FALSE_TYPE); return false; } $types = explode('/', $this-&gt;type); $types = array_merge($types, explode('-', $this-&gt;type)); $types = array_merge($types, explode(';', $this-&gt;type)); foreach ($mimetype as $mime) { if (in_array($mime, $types)) { $this-&gt;error(self::FALSE_TYPE); return false; } } return true; } } &lt;?php
 namespace Zend\Validator\File; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Extension extends AbstractValidator { const FALSE_EXTENSION = 'fileExtensionFalse'; const NOT_FOUND = 'fileExtensionNotFound'; protected $messageTemplates = array( self::FALSE_EXTENSION =&gt; "File has an incorrect extension", self::NOT_FOUND =&gt; "File is not readable or does not exist", ); protected $options = array( 'case' =&gt; false, 'extension' =&gt; '', ); protected $messageVariables = array( 'extension' =&gt; array('options' =&gt; 'extension'), ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } $case = null; if (1 &lt; func_num_args()) { $case = func_get_arg(1); } if (is_array($options)) { if (isset($options['case'])) { $case = $options['case']; unset($options['case']); } if (!array_key_exists('extension', $options)) { $options = array('extension' =&gt; $options); } } else { $options = array('extension' =&gt; $options); } if ($case !== null) { $options['case'] = $case; } parent::__construct($options); } public function getCase() { return $this-&gt;options['case']; } public function setCase($case) { $this-&gt;options['case'] = (bool) $case; return $this; } public function getExtension() { $extension = explode(',', $this-&gt;options['extension']); return $extension; } public function setExtension($extension) { $this-&gt;options['extension'] = null; $this-&gt;addExtension($extension); return $this; } public function addExtension($extension) { $extensions = $this-&gt;getExtension(); if (is_string($extension)) { $extension = explode(',', $extension); } foreach ($extension as $content) { if (empty($content) || !is_string($content)) { continue; } $extensions[] = trim($content); } $extensions = array_unique($extensions); foreach ($extensions as $key =&gt; $ext) { if (empty($ext)) { unset($extensions[$key]); } } $this-&gt;options['extension'] = implode(',', $extensions); return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } $extension = substr($filename, strrpos($filename, '.') + 1); $extensions = $this-&gt;getExtension(); if ($this-&gt;getCase() &amp;&amp; (in_array($extension, $extensions))) { return true; } elseif (!$this-&gt;getCase()) { foreach ($extensions as $ext) { if (strtolower($ext) == strtolower($extension)) { return true; } } } $this-&gt;error(self::FALSE_EXTENSION); return false; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Count extends AbstractValidator { const TOO_MANY = 'fileCountTooMany'; const TOO_FEW = 'fileCountTooFew'; protected $messageTemplates = array( self::TOO_MANY =&gt; "Too many files, maximum '%max%' are allowed but '%count%' are given", self::TOO_FEW =&gt; "Too few files, minimum '%min%' are expected but '%count%' are given", ); protected $messageVariables = array( 'min' =&gt; array('options' =&gt; 'min'), 'max' =&gt; array('options' =&gt; 'max'), 'count' =&gt; 'count' ); protected $count; protected $files; protected $options = array( 'min' =&gt; null, 'max' =&gt; null, ); public function __construct($options = null) { if (is_string($options) || is_numeric($options)) { $options = array('max' =&gt; $options); } if (1 &lt; func_num_args()) { $options['min'] = func_get_arg(0); $options['max'] = func_get_arg(1); } parent::__construct($options); } public function getMin() { return $this-&gt;options['min']; } public function setMin($min) { if (is_array($min) and isset($min['min'])) { $min = $min['min']; } if (!is_string($min) and !is_numeric($min)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } $min = (integer) $min; if (($this-&gt;getMax() !== null) &amp;&amp; ($min &gt; $this-&gt;getMax())) { throw new Exception\InvalidArgumentException("The minimum must be less than or equal to the maximum file count, but $min &gt;" . " {$this-&gt;getMax()}"); } $this-&gt;options['min'] = $min; return $this; } public function getMax() { return $this-&gt;options['max']; } public function setMax($max) { if (is_array($max) and isset($max['max'])) { $max = $max['max']; } if (!is_string($max) and !is_numeric($max)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } $max = (integer) $max; if (($this-&gt;getMin() !== null) &amp;&amp; ($max &lt; $this-&gt;getMin())) { throw new Exception\InvalidArgumentException("The maximum must be greater than or equal to the minimum file count, but " . "$max &lt; {$this-&gt;getMin()}"); } $this-&gt;options['max'] = $max; return $this; } public function addFile($file) { if (is_string($file)) { $file = array($file); } if (is_array($file)) { foreach ($file as $name) { if (!isset($this-&gt;files[$name]) &amp;&amp; !empty($name)) { $this-&gt;files[$name] = $name; } } } return $this; } public function isValid($value, $file = null) { if (($file !== null) &amp;&amp; !array_key_exists('destination', $file)) { $file['destination'] = dirname($value); } if (($file !== null) &amp;&amp; array_key_exists('tmp_name', $file)) { $value = $file['destination'] . DIRECTORY_SEPARATOR . $file['name']; } if (($file === null) || !empty($file['tmp_name'])) { $this-&gt;addFile($value); } $this-&gt;count = count($this-&gt;files); if (($this-&gt;getMax() !== null) &amp;&amp; ($this-&gt;count &gt; $this-&gt;getMax())) { return $this-&gt;throwError($file, self::TOO_MANY); } if (($this-&gt;getMin() !== null) &amp;&amp; ($this-&gt;count &lt; $this-&gt;getMin())) { return $this-&gt;throwError($file, self::TOO_FEW); } return true; } protected function throwError($file, $errorType) { if ($file !== null) { if (is_array($file)) { if (array_key_exists('name', $file)) { $this-&gt;value = $file['name']; } } elseif (is_string($file)) { $this-&gt;value = $file; } } $this-&gt;error($errorType); return false; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Upload extends AbstractValidator { const INI_SIZE = 'fileUploadErrorIniSize'; const FORM_SIZE = 'fileUploadErrorFormSize'; const PARTIAL = 'fileUploadErrorPartial'; const NO_FILE = 'fileUploadErrorNoFile'; const NO_TMP_DIR = 'fileUploadErrorNoTmpDir'; const CANT_WRITE = 'fileUploadErrorCantWrite'; const EXTENSION = 'fileUploadErrorExtension'; const ATTACK = 'fileUploadErrorAttack'; const FILE_NOT_FOUND = 'fileUploadErrorFileNotFound'; const UNKNOWN = 'fileUploadErrorUnknown'; protected $messageTemplates = array( self::INI_SIZE =&gt; "File '%value%' exceeds the defined ini size", self::FORM_SIZE =&gt; "File '%value%' exceeds the defined form size", self::PARTIAL =&gt; "File '%value%' was only partially uploaded", self::NO_FILE =&gt; "File '%value%' was not uploaded", self::NO_TMP_DIR =&gt; "No temporary directory was found for file '%value%'", self::CANT_WRITE =&gt; "File '%value%' can't be written", self::EXTENSION =&gt; "A PHP extension returned an error while uploading the file '%value%'", self::ATTACK =&gt; "File '%value%' was illegally uploaded. This could be a possible attack", self::FILE_NOT_FOUND =&gt; "File '%value%' was not found", self::UNKNOWN =&gt; "Unknown error while uploading file '%value%'" ); protected $options = array( 'files' =&gt; array(), ); public function __construct($options = array()) { if (is_array($options) &amp;&amp; !array_key_exists('files', $options)) { $options = array('files' =&gt; $options); } parent::__construct($options); } public function getFiles($file = null) { if ($file !== null) { $return = array(); foreach ($this-&gt;options['files'] as $name =&gt; $content) { if ($name === $file) { $return[$file] = $this-&gt;options['files'][$name]; } if ($content['name'] === $file) { $return[$name] = $this-&gt;options['files'][$name]; } } if (count($return) === 0) { throw new Exception\InvalidArgumentException("The file '$file' was not found"); } return $return; } return $this-&gt;options['files']; } public function setFiles($files = array()) { if (count($files) === 0) { $this-&gt;options['files'] = $_FILES; } else { $this-&gt;options['files'] = $files; } if ($this-&gt;options['files'] === NULL) { $this-&gt;options['files'] = array(); } foreach ($this-&gt;options['files'] as $file =&gt; $content) { if (!isset($content['error'])) { unset($this-&gt;options['files'][$file]); } } return $this; } public function isValid($value, $file = null) { $files = array(); $this-&gt;setValue($value); if (array_key_exists($value, $this-&gt;getFiles())) { $files = array_merge($files, $this-&gt;getFiles($value)); } else { foreach ($this-&gt;getFiles() as $file =&gt; $content) { if (isset($content['name']) &amp;&amp; ($content['name'] === $value)) { $files = array_merge($files, $this-&gt;getFiles($file)); } if (isset($content['tmp_name']) &amp;&amp; ($content['tmp_name'] === $value)) { $files = array_merge($files, $this-&gt;getFiles($file)); } } } if (empty($files)) { return $this-&gt;throwError($file, self::FILE_NOT_FOUND); } foreach ($files as $file =&gt; $content) { $this-&gt;value = $file; switch ($content['error']) { case 0: if (!is_uploaded_file($content['tmp_name'])) { $this-&gt;throwError($file, self::ATTACK); } break; case 1: $this-&gt;throwError($file, self::INI_SIZE); break; case 2: $this-&gt;throwError($file, self::FORM_SIZE); break; case 3: $this-&gt;throwError($file, self::PARTIAL); break; case 4: $this-&gt;throwError($file, self::NO_FILE); break; case 6: $this-&gt;throwError($file, self::NO_TMP_DIR); break; case 7: $this-&gt;throwError($file, self::CANT_WRITE); break; case 8: $this-&gt;throwError($file, self::EXTENSION); break; default: $this-&gt;throwError($file, self::UNKNOWN); break; } } if (count($this-&gt;getMessages()) &gt; 0) { return false; } return true; } protected function throwError($file, $errorType) { if ($file !== null) { if (is_array($file)) { if (array_key_exists('name', $file)) { $this-&gt;value = $file['name']; } } elseif (is_string($file)) { $this-&gt;value = $file; } } $this-&gt;error($errorType); return false; } } &lt;?php
 namespace Zend\Validator\File; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\ErrorHandler; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class MimeType extends AbstractValidator { const FALSE_TYPE = 'fileMimeTypeFalse'; const NOT_DETECTED = 'fileMimeTypeNotDetected'; const NOT_READABLE = 'fileMimeTypeNotReadable'; protected $messageTemplates = array( self::FALSE_TYPE =&gt; "File has an incorrect mimetype of '%type%'", self::NOT_DETECTED =&gt; "The mimetype could not be detected from the file", self::NOT_READABLE =&gt; "File is not readable or does not exist", ); protected $messageVariables = array( 'type' =&gt; 'type' ); protected $type; protected $finfo; protected $magicFiles = array( '/usr/share/misc/magic', '/usr/share/misc/magic.mime', '/usr/share/misc/magic.mgc', '/usr/share/mime/magic', '/usr/share/mime/magic.mime', '/usr/share/mime/magic.mgc', '/usr/share/file/magic', '/usr/share/file/magic.mime', '/usr/share/file/magic.mgc', ); protected $options = array( 'enableHeaderCheck' =&gt; false, 'disableMagicFile' =&gt; false, 'magicFile' =&gt; null, 'mimeType' =&gt; null, ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (is_string($options)) { $this-&gt;setMimeType($options); $options = array(); } if (isset($options['magicFile'])) { $this-&gt;setMagicFile($options['magicFile']); unset($options['magicFile']); } if (isset($options['enableHeaderCheck'])) { $this-&gt;enableHeaderCheck($options['enableHeaderCheck']); unset($options['enableHeaderCheck']); } if (array_key_exists('mimeType', $options)) { $this-&gt;setMimeType($options['mimeType']); unset($options['mimeType']); } foreach (array_keys($options) as $key) { if (!is_int($key)) { continue; } $this-&gt;addMimeType($options[$key]); unset($options[$key]); } parent::__construct($options); } public function getMagicFile() { if (null === $this-&gt;options['magicFile']) { $magic = getenv('magic'); if (!empty($magic)) { $this-&gt;setMagicFile($magic); if ($this-&gt;options['magicFile'] === null) { $this-&gt;options['magicFile'] = false; } return $this-&gt;options['magicFile']; } ErrorHandler::start(); $safeMode = ini_get('safe_mode'); ErrorHandler::stop(); if (!($safeMode == 'On' || $safeMode === 1)) { foreach ($this-&gt;magicFiles as $file) { try { $this-&gt;setMagicFile($file); if ($this-&gt;options['magicFile'] !== null) { break; } } catch (Exception\ExceptionInterface $e) { } } } if ($this-&gt;options['magicFile'] === null) { $this-&gt;options['magicFile'] = false; } } return $this-&gt;options['magicFile']; } public function setMagicFile($file) { if ($file === false) { $this-&gt;options['magicFile'] = false; } elseif (empty($file)) { $this-&gt;options['magicFile'] = null; } elseif (!(class_exists('finfo', false))) { $this-&gt;options['magicFile'] = null; throw new Exception\RuntimeException('Magicfile can not be set; there is no finfo extension installed'); } elseif (!is_file($file) || !is_readable($file)) { throw new Exception\InvalidArgumentException(sprintf( 'The given magicfile ("%s") could not be read', $file )); } else { $const = defined('FILEINFO_MIME_TYPE') ? FILEINFO_MIME_TYPE : FILEINFO_MIME; ErrorHandler::start(E_NOTICE|E_WARNING); $this-&gt;finfo = finfo_open($const, $file); $error = ErrorHandler::stop(); if (empty($this-&gt;finfo)) { $this-&gt;finfo = null; throw new Exception\InvalidMagicMimeFileException(sprintf( 'The given magicfile ("%s") could not be used by ext/finfo', $file ), 0, $error); } $this-&gt;options['magicFile'] = $file; } return $this; } public function disableMagicFile($disable) { $this-&gt;options['disableMagicFile'] = (bool) $disable; return $this; } public function isMagicFileDisabled() { return $this-&gt;options['disableMagicFile']; } public function getHeaderCheck() { return $this-&gt;options['enableHeaderCheck']; } public function enableHeaderCheck($headerCheck = true) { $this-&gt;options['enableHeaderCheck'] = (bool) $headerCheck; return $this; } public function getMimeType($asArray = false) { $asArray = (bool) $asArray; $mimetype = (string) $this-&gt;options['mimeType']; if ($asArray) { $mimetype = explode(',', $mimetype); } return $mimetype; } public function setMimeType($mimetype) { $this-&gt;options['mimeType'] = null; $this-&gt;addMimeType($mimetype); return $this; } public function addMimeType($mimetype) { $mimetypes = $this-&gt;getMimeType(true); if (is_string($mimetype)) { $mimetype = explode(',', $mimetype); } elseif (!is_array($mimetype)) { throw new Exception\InvalidArgumentException("Invalid options to validator provided"); } if (isset($mimetype['magicFile'])) { unset($mimetype['magicFile']); } foreach ($mimetype as $content) { if (empty($content) || !is_string($content)) { continue; } $mimetypes[] = trim($content); } $mimetypes = array_unique($mimetypes); foreach ($mimetypes as $key =&gt; $mt) { if (empty($mt)) { unset($mimetypes[$key]); } } $this-&gt;options['mimeType'] = implode(',', $mimetypes); return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $filetype = $file['type']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name']) || !isset($value['type'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; $filetype = $value['type']; } else { $file = $value; $filename = basename($file); $filetype = null; } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(static::NOT_READABLE); return false; } $mimefile = $this-&gt;getMagicFile(); if (class_exists('finfo', false)) { $const = defined('FILEINFO_MIME_TYPE') ? FILEINFO_MIME_TYPE : FILEINFO_MIME; if (!$this-&gt;isMagicFileDisabled() &amp;&amp; (!empty($mimefile) &amp;&amp; empty($this-&gt;finfo))) { ErrorHandler::start(E_NOTICE|E_WARNING); $this-&gt;finfo = finfo_open($const, $mimefile); ErrorHandler::stop(); } if (empty($this-&gt;finfo)) { ErrorHandler::start(E_NOTICE|E_WARNING); $this-&gt;finfo = finfo_open($const); ErrorHandler::stop(); } $this-&gt;type = null; if (!empty($this-&gt;finfo)) { $this-&gt;type = finfo_file($this-&gt;finfo, $file); } } if (empty($this-&gt;type) &amp;&amp; (function_exists('mime_content_type') &amp;&amp; ini_get('mime_magic.magicfile'))) { $this-&gt;type = mime_content_type($file); } if (empty($this-&gt;type) &amp;&amp; $this-&gt;getHeaderCheck()) { $this-&gt;type = $filetype; } if (empty($this-&gt;type)) { $this-&gt;error(static::NOT_DETECTED); return false; } $mimetype = $this-&gt;getMimeType(true); if (in_array($this-&gt;type, $mimetype)) { return true; } $types = explode('/', $this-&gt;type); $types = array_merge($types, explode('-', $this-&gt;type)); $types = array_merge($types, explode(';', $this-&gt;type)); foreach ($mimetype as $mime) { if (in_array($mime, $types)) { return true; } } $this-&gt;error(static::FALSE_TYPE); return false; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\Exception; class Md5 extends Hash { const DOES_NOT_MATCH = 'fileMd5DoesNotMatch'; const NOT_DETECTED = 'fileMd5NotDetected'; const NOT_FOUND = 'fileMd5NotFound'; protected $messageTemplates = array( self::DOES_NOT_MATCH =&gt; "File does not match the given md5 hashes", self::NOT_DETECTED =&gt; "An md5 hash could not be evaluated for the given file", self::NOT_FOUND =&gt; "File is not readable or does not exist", ); protected $options = array( 'algorithm' =&gt; 'md5', 'hash' =&gt; null, ); public function getMd5() { return $this-&gt;getHash(); } public function setMd5($options) { $this-&gt;setHash($options); return $this; } public function addMd5($options) { $this-&gt;addHash($options); return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } $hashes = array_unique(array_keys($this-&gt;getHash())); $filehash = hash_file('md5', $file); if ($filehash === false) { $this-&gt;error(self::NOT_DETECTED); return false; } foreach ($hashes as $hash) { if ($filehash === $hash) { return true; } } $this-&gt;error(self::DOES_NOT_MATCH); return false; } } &lt;?php
 namespace Zend\Validator\File; use Traversable; use Zend\Stdlib\ArrayUtils; class IsImage extends MimeType { const FALSE_TYPE = 'fileIsImageFalseType'; const NOT_DETECTED = 'fileIsImageNotDetected'; const NOT_READABLE = 'fileIsImageNotReadable'; protected $messageTemplates = array( self::FALSE_TYPE =&gt; "File is no image, '%type%' detected", self::NOT_DETECTED =&gt; "The mimetype could not be detected from the file", self::NOT_READABLE =&gt; "File is not readable or does not exist", ); public function __construct($options = array()) { $default = array( 'application/cdf', 'application/dicom', 'application/fractals', 'application/postscript', 'application/vnd.hp-hpgl', 'application/vnd.oasis.opendocument.graphics', 'application/x-cdf', 'application/x-cmu-raster', 'application/x-ima', 'application/x-inventor', 'application/x-koan', 'application/x-portable-anymap', 'application/x-world-x-3dmf', 'image/bmp', 'image/c', 'image/cgm', 'image/fif', 'image/gif', 'image/jpeg', 'image/jpm', 'image/jpx', 'image/jp2', 'image/naplps', 'image/pjpeg', 'image/png', 'image/svg', 'image/svg+xml', 'image/tiff', 'image/vnd.adobe.photoshop', 'image/vnd.djvu', 'image/vnd.fpx', 'image/vnd.net-fpx', 'image/x-cmu-raster', 'image/x-cmx', 'image/x-coreldraw', 'image/x-cpi', 'image/x-emf', 'image/x-ico', 'image/x-icon', 'image/x-jg', 'image/x-ms-bmp', 'image/x-niff', 'image/x-pict', 'image/x-pcx', 'image/x-png', 'image/x-portable-anymap', 'image/x-portable-bitmap', 'image/x-portable-greymap', 'image/x-portable-pixmap', 'image/x-quicktime', 'image/x-rgb', 'image/x-tiff', 'image/x-unknown', 'image/x-windows-bmp', 'image/x-xpmi', ); if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if ($options === null) { $options = array(); } parent::__construct($options); if (!$this-&gt;getMimeType()) { $this-&gt;setMimeType($default); } } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Exists extends AbstractValidator { const DOES_NOT_EXIST = 'fileExistsDoesNotExist'; protected $messageTemplates = array( self::DOES_NOT_EXIST =&gt; "File does not exist", ); protected $options = array( 'directory' =&gt; null, ); protected $messageVariables = array( 'directory' =&gt; array('options' =&gt; 'directory'), ); public function __construct($options = null) { if (is_string($options)) { $options = explode(',', $options); } if (is_array($options) &amp;&amp; !array_key_exists('directory', $options)) { $options = array('directory' =&gt; $options); } parent::__construct($options); } public function getDirectory($asArray = false) { $asArray = (bool) $asArray; $directory = $this-&gt;options['directory']; if ($asArray &amp;&amp; isset($directory)) { $directory = explode(',', (string)$directory); } return $directory; } public function setDirectory($directory) { $this-&gt;options['directory'] = null; $this-&gt;addDirectory($directory); return $this; } public function addDirectory($directory) { $directories = $this-&gt;getDirectory(true); if (!isset($directories)) { $directories = array(); } if (is_string($directory)) { $directory = explode(',', $directory); } elseif (!is_array($directory)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } foreach ($directory as $content) { if (empty($content) || !is_string($content)) { continue; } $directories[] = trim($content); } $directories = array_unique($directories); foreach ($directories as $key =&gt; $dir) { if (empty($dir)) { unset($directories[$key]); } } $this-&gt;options['directory'] = (!empty($directory)) ? implode(',', $directories) : null; return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; $this-&gt;setValue($filename); } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = basename($file); $this-&gt;setValue($value['name']); } else { $file = $value; $filename = basename($file); $this-&gt;setValue($filename); } $check = false; $directories = $this-&gt;getDirectory(true); if (!isset($directories)) { $check = true; if (!file_exists($file)) { $this-&gt;error(self::DOES_NOT_EXIST); return false; } } else { foreach ($directories as $directory) { if (!isset($directory) || '' === $directory) { continue; } $check = true; if (!file_exists($directory . DIRECTORY_SEPARATOR . $filename)) { $this-&gt;error(self::DOES_NOT_EXIST); return false; } } } if (!$check) { $this-&gt;error(self::DOES_NOT_EXIST); return false; } return true; } } &lt;?php
 namespace Zend\Validator\File; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\ErrorHandler; use Zend\Validator\Exception; class FilesSize extends Size { const TOO_BIG = 'fileFilesSizeTooBig'; const TOO_SMALL = 'fileFilesSizeTooSmall'; const NOT_READABLE = 'fileFilesSizeNotReadable'; protected $messageTemplates = array( self::TOO_BIG =&gt; "All files in sum should have a maximum size of '%max%' but '%size%' were detected", self::TOO_SMALL =&gt; "All files in sum should have a minimum size of '%min%' but '%size%' were detected", self::NOT_READABLE =&gt; "One or more files can not be read", ); protected $files; public function __construct($options = null) { $this-&gt;files = array(); $this-&gt;setSize(0); if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (is_scalar($options)) { $options = array('max' =&gt; $options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } if (1 &lt; func_num_args()) { $argv = func_get_args(); array_shift($argv); $options['max'] = array_shift($argv); if (!empty($argv)) { $options['useByteString'] = array_shift($argv); } } parent::__construct($options); } public function isValid($value, $file = null) { if (is_string($value)) { $value = array($value); } $min = $this-&gt;getMin(true); $max = $this-&gt;getMax(true); $size = $this-&gt;getSize(); foreach ($value as $files) { if (false === stream_resolve_include_path($files)) { $this-&gt;throwError($file, self::NOT_READABLE); continue; } if (!isset($this-&gt;files[$files])) { $this-&gt;files[$files] = $files; } else { continue; } ErrorHandler::start(); $size += filesize($files); ErrorHandler::stop(); $this-&gt;size = $size; if (($max !== null) &amp;&amp; ($max &lt; $size)) { if ($this-&gt;getByteString()) { $this-&gt;options['max'] = $this-&gt;toByteString($max); $this-&gt;size = $this-&gt;toByteString($size); $this-&gt;throwError($file, self::TOO_BIG); $this-&gt;options['max'] = $max; $this-&gt;size = $size; } else { $this-&gt;throwError($file, self::TOO_BIG); } } } if (($min !== null) &amp;&amp; ($size &lt; $min)) { if ($this-&gt;getByteString()) { $this-&gt;options['min'] = $this-&gt;toByteString($min); $this-&gt;size = $this-&gt;toByteString($size); $this-&gt;throwError($file, self::TOO_SMALL); $this-&gt;options['min'] = $min; $this-&gt;size = $size; } else { $this-&gt;throwError($file, self::TOO_SMALL); } } if (count($this-&gt;getMessages()) &gt; 0) { return false; } return true; } protected function throwError($file, $errorType) { if ($file !== null) { if (is_array($file)) { if (array_key_exists('name', $file)) { $this-&gt;value = $file['name']; } } elseif (is_string($file)) { $this-&gt;value = $file; } } $this-&gt;error($errorType); return false; } } &lt;?php
 namespace Zend\Validator\File; use Traversable; use Zend\Stdlib\ArrayUtils; class IsCompressed extends MimeType { const FALSE_TYPE = 'fileIsCompressedFalseType'; const NOT_DETECTED = 'fileIsCompressedNotDetected'; const NOT_READABLE = 'fileIsCompressedNotReadable'; protected $messageTemplates = array( self::FALSE_TYPE =&gt; "File is not compressed, '%type%' detected", self::NOT_DETECTED =&gt; "The mimetype could not be detected from the file", self::NOT_READABLE =&gt; "File is not readable or does not exist", ); public function __construct($options = array()) { $default = array( 'application/arj', 'application/gnutar', 'application/lha', 'application/lzx', 'application/vnd.ms-cab-compressed', 'application/x-ace-compressed', 'application/x-arc', 'application/x-archive', 'application/x-arj', 'application/x-bzip', 'application/x-bzip2', 'application/x-cab-compressed', 'application/x-compress', 'application/x-compressed', 'application/x-cpio', 'application/x-debian-package', 'application/x-eet', 'application/x-gzip', 'application/x-java-pack200', 'application/x-lha', 'application/x-lharc', 'application/x-lzh', 'application/x-lzma', 'application/x-lzx', 'application/x-rar', 'application/x-sit', 'application/x-stuffit', 'application/x-tar', 'application/zip', 'application/zoo', 'multipart/x-gzip', ); if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if ($options === null) { $options = array(); } parent::__construct($options); if (!$this-&gt;getMimeType()) { $this-&gt;setMimeType($default); } } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\Exception; class Sha1 extends Hash { const DOES_NOT_MATCH = 'fileSha1DoesNotMatch'; const NOT_DETECTED = 'fileSha1NotDetected'; const NOT_FOUND = 'fileSha1NotFound'; protected $messageTemplates = array( self::DOES_NOT_MATCH =&gt; "File does not match the given sha1 hashes", self::NOT_DETECTED =&gt; "A sha1 hash could not be evaluated for the given file", self::NOT_FOUND =&gt; "File is not readable or does not exist", ); protected $options = array( 'algorithm' =&gt; 'sha1', 'hash' =&gt; null, ); public function getSha1() { return $this-&gt;getHash(); } public function setSha1($options) { $this-&gt;setHash($options); return $this; } public function addSha1($options) { $this-&gt;addHash($options); return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } $hashes = array_unique(array_keys($this-&gt;getHash())); $filehash = hash_file('sha1', $file); if ($filehash === false) { $this-&gt;error(self::NOT_DETECTED); return false; } foreach ($hashes as $hash) { if ($filehash === $hash) { return true; } } $this-&gt;error(self::DOES_NOT_MATCH); return false; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Stdlib\ErrorHandler; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class ImageSize extends AbstractValidator { const WIDTH_TOO_BIG = 'fileImageSizeWidthTooBig'; const WIDTH_TOO_SMALL = 'fileImageSizeWidthTooSmall'; const HEIGHT_TOO_BIG = 'fileImageSizeHeightTooBig'; const HEIGHT_TOO_SMALL = 'fileImageSizeHeightTooSmall'; const NOT_DETECTED = 'fileImageSizeNotDetected'; const NOT_READABLE = 'fileImageSizeNotReadable'; protected $messageTemplates = array( self::WIDTH_TOO_BIG =&gt; "Maximum allowed width for image should be '%maxwidth%' but '%width%' detected", self::WIDTH_TOO_SMALL =&gt; "Minimum expected width for image should be '%minwidth%' but '%width%' detected", self::HEIGHT_TOO_BIG =&gt; "Maximum allowed height for image should be '%maxheight%' but '%height%' detected", self::HEIGHT_TOO_SMALL =&gt; "Minimum expected height for image should be '%minheight%' but '%height%' detected", self::NOT_DETECTED =&gt; "The size of image could not be detected", self::NOT_READABLE =&gt; "File is not readable or does not exist", ); protected $messageVariables = array( 'minwidth' =&gt; array('options' =&gt; 'minWidth'), 'maxwidth' =&gt; array('options' =&gt; 'maxWidth'), 'minheight' =&gt; array('options' =&gt; 'minHeight'), 'maxheight' =&gt; array('options' =&gt; 'maxHeight'), 'width' =&gt; 'width', 'height' =&gt; 'height' ); protected $width; protected $height; protected $options = array( 'minWidth' =&gt; null, 'maxWidth' =&gt; null, 'minHeight' =&gt; null, 'maxHeight' =&gt; null, ); public function __construct($options = null) { if (1 &lt; func_num_args()) { if (!is_array($options)) { $options = array('minWidth' =&gt; $options); } $argv = func_get_args(); array_shift($argv); $options['minHeight'] = array_shift($argv); if (!empty($argv)) { $options['maxWidth'] = array_shift($argv); if (!empty($argv)) { $options['maxHeight'] = array_shift($argv); } } } parent::__construct($options); } public function getMinWidth() { return $this-&gt;options['minWidth']; } public function setMinWidth($minWidth) { if (($this-&gt;getMaxWidth() !== null) &amp;&amp; ($minWidth &gt; $this-&gt;getMaxWidth())) { throw new Exception\InvalidArgumentException("The minimum image width must be less than or equal to the " . " maximum image width, but {$minWidth} &gt; {$this-&gt;getMaxWidth()}"); } $this-&gt;options['minWidth'] = (int) $minWidth; return $this; } public function getMaxWidth() { return $this-&gt;options['maxWidth']; } public function setMaxWidth($maxWidth) { if (($this-&gt;getMinWidth() !== null) &amp;&amp; ($maxWidth &lt; $this-&gt;getMinWidth())) { throw new Exception\InvalidArgumentException("The maximum image width must be greater than or equal to the " . "minimum image width, but {$maxWidth} &lt; {$this-&gt;getMinWidth()}"); } $this-&gt;options['maxWidth'] = (int) $maxWidth; return $this; } public function getMinHeight() { return $this-&gt;options['minHeight']; } public function setMinHeight($minHeight) { if (($this-&gt;getMaxHeight() !== null) &amp;&amp; ($minHeight &gt; $this-&gt;getMaxHeight())) { throw new Exception\InvalidArgumentException("The minimum image height must be less than or equal to the " . " maximum image height, but {$minHeight} &gt; {$this-&gt;getMaxHeight()}"); } $this-&gt;options['minHeight'] = (int) $minHeight; return $this; } public function getMaxHeight() { return $this-&gt;options['maxHeight']; } public function setMaxHeight($maxHeight) { if (($this-&gt;getMinHeight() !== null) &amp;&amp; ($maxHeight &lt; $this-&gt;getMinHeight())) { throw new Exception\InvalidArgumentException("The maximum image height must be greater than or equal to the " . "minimum image height, but {$maxHeight} &lt; {$this-&gt;getMinHeight()}"); } $this-&gt;options['maxHeight'] = (int) $maxHeight; return $this; } public function getImageMin() { return array('minWidth' =&gt; $this-&gt;getMinWidth(), 'minHeight' =&gt; $this-&gt;getMinHeight()); } public function getImageMax() { return array('maxWidth' =&gt; $this-&gt;getMaxWidth(), 'maxHeight' =&gt; $this-&gt;getMaxHeight()); } public function getImageWidth() { return array('minWidth' =&gt; $this-&gt;getMinWidth(), 'maxWidth' =&gt; $this-&gt;getMaxWidth()); } public function getImageHeight() { return array('minHeight' =&gt; $this-&gt;getMinHeight(), 'maxHeight' =&gt; $this-&gt;getMaxHeight()); } public function setImageMin($options) { $this-&gt;setOptions($options); return $this; } public function setImageMax($options) { $this-&gt;setOptions($options); return $this; } public function setImageWidth($options) { $this-&gt;setImageMin($options); $this-&gt;setImageMax($options); return $this; } public function setImageHeight($options) { $this-&gt;setImageMin($options); $this-&gt;setImageMax($options); return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_READABLE); return false; } ErrorHandler::start(); $size = getimagesize($file); ErrorHandler::stop(); if (empty($size) || ($size[0] === 0) || ($size[1] === 0)) { $this-&gt;error(self::NOT_DETECTED); return false; } $this-&gt;width = $size[0]; $this-&gt;height = $size[1]; if ($this-&gt;width &lt; $this-&gt;getMinWidth()) { $this-&gt;error(self::WIDTH_TOO_SMALL); } if (($this-&gt;getMaxWidth() !== null) &amp;&amp; ($this-&gt;getMaxWidth() &lt; $this-&gt;width)) { $this-&gt;error(self::WIDTH_TOO_BIG); } if ($this-&gt;height &lt; $this-&gt;getMinHeight()) { $this-&gt;error(self::HEIGHT_TOO_SMALL); } if (($this-&gt;getMaxHeight() !== null) &amp;&amp; ($this-&gt;getMaxHeight() &lt; $this-&gt;height)) { $this-&gt;error(self::HEIGHT_TOO_BIG); } if (count($this-&gt;getMessages()) &gt; 0) { return false; } return true; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Hash extends AbstractValidator { const DOES_NOT_MATCH = 'fileHashDoesNotMatch'; const NOT_DETECTED = 'fileHashHashNotDetected'; const NOT_FOUND = 'fileHashNotFound'; protected $messageTemplates = array( self::DOES_NOT_MATCH =&gt; "File does not match the given hashes", self::NOT_DETECTED =&gt; "A hash could not be evaluated for the given file", self::NOT_FOUND =&gt; "File is not readable or does not exist" ); protected $options = array( 'algorithm' =&gt; 'crc32', 'hash' =&gt; null, ); public function __construct($options = null) { if (is_scalar($options) || (is_array($options) &amp;&amp; !array_key_exists('hash', $options))) { $options = array('hash' =&gt; $options); } if (1 &lt; func_num_args()) { $options['algorithm'] = func_get_arg(1); } parent::__construct($options); } public function getHash() { return $this-&gt;options['hash']; } public function setHash($options) { $this-&gt;options['hash'] = null; $this-&gt;addHash($options); return $this; } public function addHash($options) { if (is_string($options)) { $options = array($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException("False parameter given"); } $known = hash_algos(); if (!isset($options['algorithm'])) { $algorithm = $this-&gt;options['algorithm']; } else { $algorithm = $options['algorithm']; unset($options['algorithm']); } if (!in_array($algorithm, $known)) { throw new Exception\InvalidArgumentException("Unknown algorithm '{$algorithm}'"); } foreach ($options as $value) { $this-&gt;options['hash'][$value] = $algorithm; } return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } $algos = array_unique(array_values($this-&gt;getHash())); $hashes = array_unique(array_keys($this-&gt;getHash())); foreach ($algos as $algorithm) { $filehash = hash_file($algorithm, $file); if ($filehash === false) { $this-&gt;error(self::NOT_DETECTED); return false; } foreach ($hashes as $hash) { if ($filehash === $hash) { return true; } } } $this-&gt;error(self::DOES_NOT_MATCH); return false; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class UploadFile extends AbstractValidator { const INI_SIZE = 'fileUploadFileErrorIniSize'; const FORM_SIZE = 'fileUploadFileErrorFormSize'; const PARTIAL = 'fileUploadFileErrorPartial'; const NO_FILE = 'fileUploadFileErrorNoFile'; const NO_TMP_DIR = 'fileUploadFileErrorNoTmpDir'; const CANT_WRITE = 'fileUploadFileErrorCantWrite'; const EXTENSION = 'fileUploadFileErrorExtension'; const ATTACK = 'fileUploadFileErrorAttack'; const FILE_NOT_FOUND = 'fileUploadFileErrorFileNotFound'; const UNKNOWN = 'fileUploadFileErrorUnknown'; protected $messageTemplates = array( self::INI_SIZE =&gt; "File exceeds the defined ini size", self::FORM_SIZE =&gt; "File exceeds the defined form size", self::PARTIAL =&gt; "File was only partially uploaded", self::NO_FILE =&gt; "File was not uploaded", self::NO_TMP_DIR =&gt; "No temporary directory was found for file", self::CANT_WRITE =&gt; "File can't be written", self::EXTENSION =&gt; "A PHP extension returned an error while uploading the file", self::ATTACK =&gt; "File was illegally uploaded. This could be a possible attack", self::FILE_NOT_FOUND =&gt; "File was not found", self::UNKNOWN =&gt; "Unknown error while uploading file", ); public function isValid($value) { if (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name']) || !isset($value['error'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; $error = $value['error']; } else { $file = $value; $filename = basename($file); $error = 0; } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::FILE_NOT_FOUND); return false; } switch ($error) { case UPLOAD_ERR_OK: if (!is_uploaded_file($file)) { $this-&gt;error(self::ATTACK); } break; case UPLOAD_ERR_INI_SIZE: $this-&gt;error(self::INI_SIZE); break; case UPLOAD_ERR_FORM_SIZE: $this-&gt;error(self::FORM_SIZE); break; case UPLOAD_ERR_PARTIAL: $this-&gt;error(self::PARTIAL); break; case UPLOAD_ERR_NO_FILE: $this-&gt;error(self::NO_FILE); break; case UPLOAD_ERR_NO_TMP_DIR: $this-&gt;error(self::NO_TMP_DIR); break; case UPLOAD_ERR_CANT_WRITE: $this-&gt;error(self::CANT_WRITE); break; case UPLOAD_ERR_EXTENSION: $this-&gt;error(self::EXTENSION); break; default: $this-&gt;error(self::UNKNOWN); break; } if (count($this-&gt;getMessages()) &gt; 0) { return false; } return true; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class WordCount extends AbstractValidator { const TOO_MUCH = 'fileWordCountTooMuch'; const TOO_LESS = 'fileWordCountTooLess'; const NOT_FOUND = 'fileWordCountNotFound'; protected $messageTemplates = array( self::TOO_MUCH =&gt; "Too many words, maximum '%max%' are allowed but '%count%' were counted.", self::TOO_LESS =&gt; "Too less words, minimum '%min%' are expected but '%count%' were counted", self::NOT_FOUND =&gt; "File is not readable or does not exist", ); protected $messageVariables = array( 'min' =&gt; array('options' =&gt; 'min'), 'max' =&gt; array('options' =&gt; 'max'), 'count' =&gt; 'count' ); protected $count; protected $options = array( 'min' =&gt; null, 'max' =&gt; null, ); public function __construct($options = null) { if (is_string($options) || is_numeric($options)) { $options = array('max' =&gt; $options); } if (1 &lt; func_num_args()) { $options['min'] = func_get_arg(0); $options['max'] = func_get_arg(1); } parent::__construct($options); } public function getMin() { return $this-&gt;options['min']; } public function setMin($min) { if (is_array($min) and isset($min['min'])) { $min = $min['min']; } if (!is_string($min) and !is_numeric($min)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } $min = (integer) $min; if (($this-&gt;getMax() !== null) &amp;&amp; ($min &gt; $this-&gt;getMax())) { throw new Exception\InvalidArgumentException( "The minimum must be less than or equal to the maximum word count, but $min &gt;" . " {$this-&gt;getMax()}"); } $this-&gt;options['min'] = $min; return $this; } public function getMax() { return $this-&gt;options['max']; } public function setMax($max) { if (is_array($max) and isset($max['max'])) { $max = $max['max']; } if (!is_string($max) and !is_numeric($max)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } $max = (integer) $max; if (($this-&gt;getMin() !== null) &amp;&amp; ($max &lt; $this-&gt;getMin())) { throw new Exception\InvalidArgumentException( "The maximum must be greater than or equal to the minimum word count, but " . "$max &lt; {$this-&gt;getMin()}"); } $this-&gt;options['max'] = $max; return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } $content = file_get_contents($file); $this-&gt;count = str_word_count($content); if (($this-&gt;getMax() !== null) &amp;&amp; ($this-&gt;count &gt; $this-&gt;getMax())) { $this-&gt;error(self::TOO_MUCH); return false; } if (($this-&gt;getMin() !== null) &amp;&amp; ($this-&gt;count &lt; $this-&gt;getMin())) { $this-&gt;error(self::TOO_LESS); return false; } return true; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\Exception; class NotExists extends Exists { const DOES_EXIST = 'fileNotExistsDoesExist'; protected $messageTemplates = array( self::DOES_EXIST =&gt; "File exists", ); public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; $this-&gt;setValue($filename); } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = basename($file); $this-&gt;setValue($value['name']); } else { $file = $value; $filename = basename($file); $this-&gt;setValue($filename); } $check = false; $directories = $this-&gt;getDirectory(true); if (!isset($directories)) { $check = true; if (file_exists($file)) { $this-&gt;error(self::DOES_EXIST); return false; } } else { foreach ($directories as $directory) { if (!isset($directory) || '' === $directory) { continue; } $check = true; if (file_exists($directory . DIRECTORY_SEPARATOR . $filename)) { $this-&gt;error(self::DOES_EXIST); return false; } } } if (!$check) { $this-&gt;error(self::DOES_EXIST); return false; } return true; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Validator\Exception; class ExcludeExtension extends Extension { const FALSE_EXTENSION = 'fileExcludeExtensionFalse'; const NOT_FOUND = 'fileExcludeExtensionNotFound'; protected $messageTemplates = array( self::FALSE_EXTENSION =&gt; "File has an incorrect extension", self::NOT_FOUND =&gt; "File is not readable or does not exist", ); public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } $extension = substr($filename, strrpos($filename, '.') + 1); $extensions = $this-&gt;getExtension(); if ($this-&gt;getCase() &amp;&amp; (!in_array($extension, $extensions))) { return true; } elseif (!$this-&gt;getCase()) { foreach ($extensions as $ext) { if (strtolower($ext) == strtolower($extension)) { $this-&gt;error(self::FALSE_EXTENSION); return false; } } return true; } $this-&gt;error(self::FALSE_EXTENSION); return false; } } &lt;?php
 namespace Zend\Validator\File; use Zend\Stdlib\ErrorHandler; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Size extends AbstractValidator { const TOO_BIG = 'fileSizeTooBig'; const TOO_SMALL = 'fileSizeTooSmall'; const NOT_FOUND = 'fileSizeNotFound'; protected $messageTemplates = array( self::TOO_BIG =&gt; "Maximum allowed size for file is '%max%' but '%size%' detected", self::TOO_SMALL =&gt; "Minimum expected size for file is '%min%' but '%size%' detected", self::NOT_FOUND =&gt; "File is not readable or does not exist", ); protected $messageVariables = array( 'min' =&gt; array('options' =&gt; 'min'), 'max' =&gt; array('options' =&gt; 'max'), 'size' =&gt; 'size', ); protected $size; protected $options = array( 'min' =&gt; null, 'max' =&gt; null, 'useByteString' =&gt; true, ); public function __construct($options = null) { if (is_string($options) || is_numeric($options)) { $options = array('max' =&gt; $options); } if (1 &lt; func_num_args()) { $argv = func_get_args(); array_shift($argv); $options['max'] = array_shift($argv); if (!empty($argv)) { $options['useByteString'] = array_shift($argv); } } parent::__construct($options); } public function useByteString($byteString = true) { $this-&gt;options['useByteString'] = (bool) $byteString; return $this; } public function getByteString() { return $this-&gt;options['useByteString']; } public function getMin($raw = false) { $min = $this-&gt;options['min']; if (!$raw &amp;&amp; $this-&gt;getByteString()) { $min = $this-&gt;toByteString($min); } return $min; } public function setMin($min) { if (!is_string($min) and !is_numeric($min)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } $min = (integer) $this-&gt;fromByteString($min); $max = $this-&gt;getMax(true); if (($max !== null) &amp;&amp; ($min &gt; $max)) { throw new Exception\InvalidArgumentException( 'The minimum must be less than or equal to the maximum file' ." size, but $min &gt; $max"); } $this-&gt;options['min'] = $min; return $this; } public function getMax($raw = false) { $max = $this-&gt;options['max']; if (!$raw &amp;&amp; $this-&gt;getByteString()) { $max = $this-&gt;toByteString($max); } return $max; } public function setMax($max) { if (!is_string($max) &amp;&amp; !is_numeric($max)) { throw new Exception\InvalidArgumentException('Invalid options to validator provided'); } $max = (integer) $this-&gt;fromByteString($max); $min = $this-&gt;getMin(true); if (($min !== null) &amp;&amp; ($max &lt; $min)) { throw new Exception\InvalidArgumentException( 'The maximum must be greater than or equal to the minimum file' ." size, but $max &lt; $min"); } $this-&gt;options['max'] = $max; return $this; } protected function getSize() { return $this-&gt;size; } protected function setSize($size) { $this-&gt;size = $size; return $this; } public function isValid($value, $file = null) { if (is_string($value) &amp;&amp; is_array($file)) { $filename = $file['name']; $file = $file['tmp_name']; } elseif (is_array($value)) { if (!isset($value['tmp_name']) || !isset($value['name'])) { throw new Exception\InvalidArgumentException( 'Value array must be in $_FILES format' ); } $file = $value['tmp_name']; $filename = $value['name']; } else { $file = $value; $filename = basename($file); } $this-&gt;setValue($filename); if (false === stream_resolve_include_path($file)) { $this-&gt;error(self::NOT_FOUND); return false; } ErrorHandler::start(); $size = sprintf("%u", filesize($file)); ErrorHandler::stop(); $this-&gt;size = $size; $min = $this-&gt;getMin(true); $max = $this-&gt;getMax(true); if (($min !== null) &amp;&amp; ($size &lt; $min)) { if ($this-&gt;getByteString()) { $this-&gt;options['min'] = $this-&gt;toByteString($min); $this-&gt;size = $this-&gt;toByteString($size); $this-&gt;error(self::TOO_SMALL); $this-&gt;options['min'] = $min; $this-&gt;size = $size; } else { $this-&gt;error(self::TOO_SMALL); } } if (($max !== null) &amp;&amp; ($max &lt; $size)) { if ($this-&gt;getByteString()) { $this-&gt;options['max'] = $this-&gt;toByteString($max); $this-&gt;size = $this-&gt;toByteString($size); $this-&gt;error(self::TOO_BIG); $this-&gt;options['max'] = $max; $this-&gt;size = $size; } else { $this-&gt;error(self::TOO_BIG); } } if (count($this-&gt;getMessages()) &gt; 0) { return false; } return true; } protected function toByteString($size) { $sizes = array('B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'); for ($i=0; $size &gt;= 1024 &amp;&amp; $i &lt; 9; $i++) { $size /= 1024; } return round($size, 2) . $sizes[$i]; } protected function fromByteString($size) { if (is_numeric($size)) { return (integer) $size; } $type = trim(substr($size, -2, 1)); $value = substr($size, 0, -1); if (!is_numeric($value)) { $value = substr($value, 0, -1); } switch (strtoupper($type)) { case 'Y': $value *= (1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024); break; case 'Z': $value *= (1024 * 1024 * 1024 * 1024 * 1024 * 1024 * 1024); break; case 'E': $value *= (1024 * 1024 * 1024 * 1024 * 1024 * 1024); break; case 'P': $value *= (1024 * 1024 * 1024 * 1024 * 1024); break; case 'T': $value *= (1024 * 1024 * 1024 * 1024); break; case 'G': $value *= (1024 * 1024 * 1024); break; case 'M': $value *= (1024 * 1024); break; case 'K': $value *= 1024; break; default: break; } return $value; } } &lt;?php
 namespace Zend\Validator\Hostname; return array( 1 =&gt; '/^[\x{002d}0-9\x{0400}-\x{052f}]{1,63}$/iu', 2 =&gt; '/^[\x{002d}0-9\x{0370}-\x{03ff}]{1,63}$/iu', 3 =&gt; '/^[\x{002d}0-9a-z\x{ac00}-\x{d7a3}]{1,17}$/iu', 4 =&gt; '/^[\x{002d}0-9a-z·à-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĵķĸĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżž]{1,63}$/iu', 5 =&gt; '/^[\x{002d}0-9A-Za-z\x{3400}-\x{3401}\x{3404}-\x{3406}\x{340C}\x{3416}\x{341C}' . '\x{3421}\x{3424}\x{3428}-\x{3429}\x{342B}-\x{342E}\x{3430}-\x{3434}\x{3436}' . '\x{3438}-\x{343C}\x{343E}\x{3441}-\x{3445}\x{3447}\x{3449}-\x{3451}\x{3453}' . '\x{3457}-\x{345F}\x{3463}-\x{3467}\x{346E}-\x{3471}\x{3473}-\x{3477}\x{3479}-\x{348E}\x{3491}-\x{3497}' . '\x{3499}-\x{34A1}\x{34A4}-\x{34AD}\x{34AF}-\x{34B0}\x{34B2}-\x{34BF}\x{34C2}-\x{34C5}\x{34C7}-\x{34CC}' . '\x{34CE}-\x{34D1}\x{34D3}-\x{34D8}\x{34DA}-\x{34E4}\x{34E7}-\x{34E9}\x{34EC}-\x{34EF}\x{34F1}-\x{34FE}' . '\x{3500}-\x{3507}\x{350A}-\x{3513}\x{3515}\x{3517}-\x{351A}\x{351C}-\x{351E}\x{3520}-\x{352A}' . '\x{352C}-\x{3552}\x{3554}-\x{355C}\x{355E}-\x{3567}\x{3569}-\x{3573}\x{3575}-\x{357C}\x{3580}-\x{3588}' . '\x{358F}-\x{3598}\x{359E}-\x{35AB}\x{35B4}-\x{35CD}\x{35D0}\x{35D3}-\x{35DC}\x{35E2}-\x{35ED}' . '\x{35F0}-\x{35F6}\x{35FB}-\x{3602}\x{3605}-\x{360E}\x{3610}-\x{3611}\x{3613}-\x{3616}\x{3619}-\x{362D}' . '\x{362F}-\x{3634}\x{3636}-\x{363B}\x{363F}-\x{3645}\x{3647}-\x{364B}\x{364D}-\x{3653}\x{3655}' . '\x{3659}-\x{365E}\x{3660}-\x{3665}\x{3667}-\x{367C}\x{367E}\x{3680}-\x{3685}\x{3687}' . '\x{3689}-\x{3690}\x{3692}-\x{3698}\x{369A}\x{369C}-\x{36AE}\x{36B0}-\x{36BF}\x{36C1}-\x{36C5}' . '\x{36C9}-\x{36CA}\x{36CD}-\x{36DE}\x{36E1}-\x{36E2}\x{36E5}-\x{36FE}\x{3701}-\x{3713}\x{3715}-\x{371E}' . '\x{3720}-\x{372C}\x{372E}-\x{3745}\x{3747}-\x{3748}\x{374A}\x{374C}-\x{3759}\x{375B}-\x{3760}' . '\x{3762}-\x{3767}\x{3769}-\x{3772}\x{3774}-\x{378C}\x{378F}-\x{379C}\x{379F}\x{37A1}-\x{37AD}' . '\x{37AF}-\x{37B7}\x{37B9}-\x{37C1}\x{37C3}-\x{37C5}\x{37C7}-\x{37D4}\x{37D6}-\x{37E0}\x{37E2}' . '\x{37E5}-\x{37ED}\x{37EF}-\x{37F6}\x{37F8}-\x{3802}\x{3804}-\x{381D}\x{3820}-\x{3822}\x{3825}-\x{382A}' . '\x{382D}-\x{382F}\x{3831}-\x{3832}\x{3834}-\x{384C}\x{384E}-\x{3860}\x{3862}-\x{3863}\x{3865}-\x{386B}' . '\x{386D}-\x{3886}\x{3888}-\x{38A1}\x{38A3}\x{38A5}-\x{38AA}\x{38AC}\x{38AE}-\x{38B0}' . '\x{38B2}-\x{38B6}\x{38B8}\x{38BA}-\x{38BE}\x{38C0}-\x{38C9}\x{38CB}-\x{38D4}\x{38D8}-\x{38E0}' . '\x{38E2}-\x{38E6}\x{38EB}-\x{38ED}\x{38EF}-\x{38F2}\x{38F5}-\x{38F7}\x{38FA}-\x{38FF}\x{3901}-\x{392A}' . '\x{392C}\x{392E}-\x{393B}\x{393E}-\x{3956}\x{395A}-\x{3969}\x{396B}-\x{397A}\x{397C}-\x{3987}' . '\x{3989}-\x{3998}\x{399A}-\x{39B0}\x{39B2}\x{39B4}-\x{39D0}\x{39D2}-\x{39DA}\x{39DE}-\x{39DF}' . '\x{39E1}-\x{39EF}\x{39F1}-\x{3A17}\x{3A19}-\x{3A2A}\x{3A2D}-\x{3A40}\x{3A43}-\x{3A4E}\x{3A50}' . '\x{3A52}-\x{3A5E}\x{3A60}-\x{3A6D}\x{3A6F}-\x{3A77}\x{3A79}-\x{3A82}\x{3A84}-\x{3A85}\x{3A87}-\x{3A89}' . '\x{3A8B}-\x{3A8F}\x{3A91}-\x{3A93}\x{3A95}-\x{3A96}\x{3A9A}\x{3A9C}-\x{3AA6}\x{3AA8}-\x{3AA9}' . '\x{3AAB}-\x{3AB1}\x{3AB4}-\x{3ABC}\x{3ABE}-\x{3AC5}\x{3ACA}-\x{3ACB}\x{3ACD}-\x{3AD5}\x{3AD7}-\x{3AE1}' . '\x{3AE4}-\x{3AE7}\x{3AE9}-\x{3AEC}\x{3AEE}-\x{3AFD}\x{3B01}-\x{3B10}\x{3B12}-\x{3B15}\x{3B17}-\x{3B1E}' . '\x{3B20}-\x{3B23}\x{3B25}-\x{3B27}\x{3B29}-\x{3B36}\x{3B38}-\x{3B39}\x{3B3B}-\x{3B3C}\x{3B3F}' . '\x{3B41}-\x{3B44}\x{3B47}-\x{3B4C}\x{3B4E}\x{3B51}-\x{3B55}\x{3B58}-\x{3B62}\x{3B68}-\x{3B72}' . '\x{3B78}-\x{3B88}\x{3B8B}-\x{3B9F}\x{3BA1}\x{3BA3}-\x{3BBA}\x{3BBC}\x{3BBF}-\x{3BD0}' . '\x{3BD3}-\x{3BE6}\x{3BEA}-\x{3BFB}\x{3BFE}-\x{3C12}\x{3C14}-\x{3C1B}\x{3C1D}-\x{3C37}\x{3C39}-\x{3C4F}' . '\x{3C52}\x{3C54}-\x{3C5C}\x{3C5E}-\x{3C68}\x{3C6A}-\x{3C76}\x{3C78}-\x{3C8F}\x{3C91}-\x{3CA8}' . '\x{3CAA}-\x{3CAD}\x{3CAF}-\x{3CBE}\x{3CC0}-\x{3CC8}\x{3CCA}-\x{3CD3}\x{3CD6}-\x{3CE0}\x{3CE4}-\x{3CEE}' . '\x{3CF3}-\x{3D0A}\x{3D0E}-\x{3D1E}\x{3D20}-\x{3D21}\x{3D25}-\x{3D38}\x{3D3B}-\x{3D46}\x{3D4A}-\x{3D59}' . '\x{3D5D}-\x{3D7B}\x{3D7D}-\x{3D81}\x{3D84}-\x{3D88}\x{3D8C}-\x{3D8F}\x{3D91}-\x{3D98}\x{3D9A}-\x{3D9C}' . '\x{3D9E}-\x{3DA1}\x{3DA3}-\x{3DB0}\x{3DB2}-\x{3DB5}\x{3DB9}-\x{3DBC}\x{3DBE}-\x{3DCB}\x{3DCD}-\x{3DDB}' . '\x{3DDF}-\x{3DE8}\x{3DEB}-\x{3DF0}\x{3DF3}-\x{3DF9}\x{3DFB}-\x{3DFC}\x{3DFE}-\x{3E05}\x{3E08}-\x{3E33}' . '\x{3E35}-\x{3E3E}\x{3E40}-\x{3E47}\x{3E49}-\x{3E67}\x{3E6B}-\x{3E6F}\x{3E71}-\x{3E85}\x{3E87}-\x{3E8C}' . '\x{3E8E}-\x{3E98}\x{3E9A}-\x{3EA1}\x{3EA3}-\x{3EAE}\x{3EB0}-\x{3EB5}\x{3EB7}-\x{3EBA}\x{3EBD}' . '\x{3EBF}-\x{3EC4}\x{3EC7}-\x{3ECE}\x{3ED1}-\x{3ED7}\x{3ED9}-\x{3EDA}\x{3EDD}-\x{3EE3}\x{3EE7}-\x{3EE8}' . '\x{3EEB}-\x{3EF2}\x{3EF5}-\x{3EFF}\x{3F01}-\x{3F02}\x{3F04}-\x{3F07}\x{3F09}-\x{3F44}\x{3F46}-\x{3F4E}' . '\x{3F50}-\x{3F53}\x{3F55}-\x{3F72}\x{3F74}-\x{3F75}\x{3F77}-\x{3F7B}\x{3F7D}-\x{3FB0}\x{3FB6}-\x{3FBF}' . '\x{3FC1}-\x{3FCF}\x{3FD1}-\x{3FD3}\x{3FD5}-\x{3FDF}\x{3FE1}-\x{400B}\x{400D}-\x{401C}\x{401E}-\x{4024}' . '\x{4027}-\x{403F}\x{4041}-\x{4060}\x{4062}-\x{4069}\x{406B}-\x{408A}\x{408C}-\x{40A7}\x{40A9}-\x{40B4}' . '\x{40B6}-\x{40C2}\x{40C7}-\x{40CF}\x{40D1}-\x{40DE}\x{40E0}-\x{40E7}\x{40E9}-\x{40EE}\x{40F0}-\x{40FB}' . '\x{40FD}-\x{4109}\x{410B}-\x{4115}\x{4118}-\x{411D}\x{411F}-\x{4122}\x{4124}-\x{4133}\x{4136}-\x{4138}' . '\x{413A}-\x{4148}\x{414A}-\x{4169}\x{416C}-\x{4185}\x{4188}-\x{418B}\x{418D}-\x{41AD}\x{41AF}-\x{41B3}' . '\x{41B5}-\x{41C3}\x{41C5}-\x{41C9}\x{41CB}-\x{41F2}\x{41F5}-\x{41FE}\x{4200}-\x{4227}\x{422A}-\x{4246}' . '\x{4248}-\x{4263}\x{4265}-\x{428B}\x{428D}-\x{42A1}\x{42A3}-\x{42C4}\x{42C8}-\x{42DC}\x{42DE}-\x{430A}' . '\x{430C}-\x{4335}\x{4337}\x{4342}-\x{435F}\x{4361}-\x{439A}\x{439C}-\x{439D}\x{439F}-\x{43A4}' . '\x{43A6}-\x{43EC}\x{43EF}-\x{4405}\x{4407}-\x{4429}\x{442B}-\x{4455}\x{4457}-\x{4468}\x{446A}-\x{446D}' . '\x{446F}-\x{4476}\x{4479}-\x{447D}\x{447F}-\x{4486}\x{4488}-\x{4490}\x{4492}-\x{4498}\x{449A}-\x{44AD}' . '\x{44B0}-\x{44BD}\x{44C1}-\x{44D3}\x{44D6}-\x{44E7}\x{44EA}\x{44EC}-\x{44FA}\x{44FC}-\x{4541}' . '\x{4543}-\x{454F}\x{4551}-\x{4562}\x{4564}-\x{4575}\x{4577}-\x{45AB}\x{45AD}-\x{45BD}\x{45BF}-\x{45D5}' . '\x{45D7}-\x{45EC}\x{45EE}-\x{45F2}\x{45F4}-\x{45FA}\x{45FC}-\x{461A}\x{461C}-\x{461D}\x{461F}-\x{4631}' . '\x{4633}-\x{4649}\x{464C}\x{464E}-\x{4652}\x{4654}-\x{466A}\x{466C}-\x{4675}\x{4677}-\x{467A}' . '\x{467C}-\x{4694}\x{4696}-\x{46A3}\x{46A5}-\x{46AB}\x{46AD}-\x{46D2}\x{46D4}-\x{4723}\x{4729}-\x{4732}' . '\x{4734}-\x{4758}\x{475A}\x{475C}-\x{478B}\x{478D}\x{4791}-\x{47B1}\x{47B3}-\x{47F1}' . '\x{47F3}-\x{480B}\x{480D}-\x{4815}\x{4817}-\x{4839}\x{483B}-\x{4870}\x{4872}-\x{487A}\x{487C}-\x{487F}' . '\x{4883}-\x{488E}\x{4890}-\x{4896}\x{4899}-\x{48A2}\x{48A4}-\x{48B9}\x{48BB}-\x{48C8}\x{48CA}-\x{48D1}' . '\x{48D3}-\x{48E5}\x{48E7}-\x{48F2}\x{48F4}-\x{48FF}\x{4901}-\x{4922}\x{4924}-\x{4928}\x{492A}-\x{4931}' . '\x{4933}-\x{495B}\x{495D}-\x{4978}\x{497A}\x{497D}\x{4982}-\x{4983}\x{4985}-\x{49A8}' . '\x{49AA}-\x{49AF}\x{49B1}-\x{49B7}\x{49B9}-\x{49BD}\x{49C1}-\x{49C7}\x{49C9}-\x{49CE}\x{49D0}-\x{49E8}' . '\x{49EA}\x{49EC}\x{49EE}-\x{4A19}\x{4A1B}-\x{4A43}\x{4A45}-\x{4A4D}\x{4A4F}-\x{4A9E}' . '\x{4AA0}-\x{4AA9}\x{4AAB}-\x{4B4E}\x{4B50}-\x{4B5B}\x{4B5D}-\x{4B69}\x{4B6B}-\x{4BC2}\x{4BC6}-\x{4BE8}' . '\x{4BEA}-\x{4BFA}\x{4BFC}-\x{4C06}\x{4C08}-\x{4C2D}\x{4C2F}-\x{4C32}\x{4C34}-\x{4C35}\x{4C37}-\x{4C69}' . '\x{4C6B}-\x{4C73}\x{4C75}-\x{4C86}\x{4C88}-\x{4C97}\x{4C99}-\x{4C9C}\x{4C9F}-\x{4CA3}\x{4CA5}-\x{4CB5}' . '\x{4CB7}-\x{4CF8}\x{4CFA}-\x{4D27}\x{4D29}-\x{4DAC}\x{4DAE}-\x{4DB1}\x{4DB3}-\x{4DB5}\x{4E00}-\x{4E54}' . '\x{4E56}-\x{4E89}\x{4E8B}-\x{4EEC}\x{4EEE}-\x{4FAC}\x{4FAE}-\x{503C}\x{503E}-\x{51E5}\x{51E7}-\x{5270}' . '\x{5272}-\x{56A1}\x{56A3}-\x{5840}\x{5842}-\x{58B5}\x{58B7}-\x{58CB}\x{58CD}-\x{5BC8}\x{5BCA}-\x{5C01}' . '\x{5C03}-\x{5C25}\x{5C27}-\x{5D5B}\x{5D5D}-\x{5F08}\x{5F0A}-\x{61F3}\x{61F5}-\x{63BA}\x{63BC}-\x{6441}' . '\x{6443}-\x{657C}\x{657E}-\x{663E}\x{6640}-\x{66FC}\x{66FE}-\x{6728}\x{672A}-\x{6766}\x{6768}-\x{67A8}' . '\x{67AA}-\x{685B}\x{685D}-\x{685E}\x{6860}-\x{68B9}\x{68BB}-\x{6AC8}\x{6ACA}-\x{6BB0}\x{6BB2}-\x{6C16}' . '\x{6C18}-\x{6D9B}\x{6D9D}-\x{6E12}\x{6E14}-\x{6E8B}\x{6E8D}-\x{704D}\x{704F}-\x{7113}\x{7115}-\x{713B}' . '\x{713D}-\x{7154}\x{7156}-\x{729F}\x{72A1}-\x{731E}\x{7320}-\x{7362}\x{7364}-\x{7533}\x{7535}-\x{7551}' . '\x{7553}-\x{7572}\x{7574}-\x{75E8}\x{75EA}-\x{7679}\x{767B}-\x{783E}\x{7840}-\x{7A62}\x{7A64}-\x{7AC2}' . '\x{7AC4}-\x{7B06}\x{7B08}-\x{7B79}\x{7B7B}-\x{7BCE}\x{7BD0}-\x{7D99}\x{7D9B}-\x{7E49}\x{7E4C}-\x{8132}' . '\x{8134}\x{8136}-\x{81D2}\x{81D4}-\x{8216}\x{8218}-\x{822D}\x{822F}-\x{83B4}\x{83B6}-\x{841F}' . '\x{8421}-\x{86CC}\x{86CE}-\x{874A}\x{874C}-\x{877E}\x{8780}-\x{8A32}\x{8A34}-\x{8B71}\x{8B73}-\x{8B8E}' . '\x{8B90}-\x{8DE4}\x{8DE6}-\x{8E9A}\x{8E9C}-\x{8EE1}\x{8EE4}-\x{8F0B}\x{8F0D}-\x{8FB9}\x{8FBB}-\x{9038}' . '\x{903A}-\x{9196}\x{9198}-\x{91A3}\x{91A5}-\x{91B7}\x{91B9}-\x{91C7}\x{91C9}-\x{91E0}\x{91E2}-\x{91FB}' . '\x{91FD}-\x{922B}\x{922D}-\x{9270}\x{9272}-\x{9420}\x{9422}-\x{9664}\x{9666}-\x{9679}\x{967B}-\x{9770}' . '\x{9772}-\x{982B}\x{982D}-\x{98ED}\x{98EF}-\x{99C4}\x{99C6}-\x{9A11}\x{9A14}-\x{9A27}\x{9A29}-\x{9D0D}' . '\x{9D0F}-\x{9D2B}\x{9D2D}-\x{9D8E}\x{9D90}-\x{9DC5}\x{9DC7}-\x{9E77}\x{9E79}-\x{9EB8}\x{9EBB}-\x{9F20}' . '\x{9F22}-\x{9F61}\x{9F63}-\x{9FA5}\x{FA28}]{1,20}$/iu', 6 =&gt; '/^[\x{002d}0-9A-Za-z]{1,63}$/iu', 7 =&gt; '/^[\x{00A1}-\x{00FF}]{1,63}$/iu', 8 =&gt; '/^[\x{0100}-\x{017f}]{1,63}$/iu', 9 =&gt; '/^[\x{0180}-\x{024f}]{1,63}$/iu', 10 =&gt; '/^[\x{0250}-\x{02af}]{1,63}$/iu', 11 =&gt; '/^[\x{02b0}-\x{02ff}]{1,63}$/iu', 12 =&gt; '/^[\x{0300}-\x{036f}]{1,63}$/iu', 13 =&gt; '/^[\x{0370}-\x{03ff}]{1,63}$/iu', 14 =&gt; '/^[\x{0400}-\x{04ff}]{1,63}$/iu', 15 =&gt; '/^[\x{0500}-\x{052f}]{1,63}$/iu', 16 =&gt; '/^[\x{0530}-\x{058F}]{1,63}$/iu', 17 =&gt; '/^[\x{0590}-\x{05FF}]{1,63}$/iu', 18 =&gt; '/^[\x{0600}-\x{06FF}]{1,63}$/iu', 19 =&gt; '/^[\x{0700}-\x{074F}]{1,63}$/iu', 20 =&gt; '/^[\x{0780}-\x{07BF}]{1,63}$/iu', 21 =&gt; '/^[\x{0900}-\x{097F}]{1,63}$/iu', 22 =&gt; '/^[\x{0980}-\x{09FF}]{1,63}$/iu', 23 =&gt; '/^[\x{0A00}-\x{0A7F}]{1,63}$/iu', 24 =&gt; '/^[\x{0A80}-\x{0AFF}]{1,63}$/iu', 25 =&gt; '/^[\x{0B00}-\x{0B7F}]{1,63}$/iu', 26 =&gt; '/^[\x{0B80}-\x{0BFF}]{1,63}$/iu', 27 =&gt; '/^[\x{0C00}-\x{0C7F}]{1,63}$/iu', 28 =&gt; '/^[\x{0C80}-\x{0CFF}]{1,63}$/iu', 29 =&gt; '/^[\x{0D00}-\x{0D7F}]{1,63}$/iu', 30 =&gt; '/^[\x{0D80}-\x{0DFF}]{1,63}$/iu', 31 =&gt; '/^[\x{0E00}-\x{0E7F}]{1,63}$/iu', 32 =&gt; '/^[\x{0E80}-\x{0EFF}]{1,63}$/iu', 33 =&gt; '/^[\x{0F00}-\x{0FFF}]{1,63}$/iu', 34 =&gt; '/^[\x{1000}-\x{109F}]{1,63}$/iu', 35 =&gt; '/^[\x{10A0}-\x{10FF}]{1,63}$/iu', 36 =&gt; '/^[\x{1100}-\x{11FF}]{1,63}$/iu', 37 =&gt; '/^[\x{1200}-\x{137F}]{1,63}$/iu', 38 =&gt; '/^[\x{13A0}-\x{13FF}]{1,63}$/iu', 39 =&gt; '/^[\x{1400}-\x{167F}]{1,63}$/iu', 40 =&gt; '/^[\x{1680}-\x{169F}]{1,63}$/iu', 41 =&gt; '/^[\x{16A0}-\x{16FF}]{1,63}$/iu', 42 =&gt; '/^[\x{1700}-\x{171F}]{1,63}$/iu', 43 =&gt; '/^[\x{1720}-\x{173F}]{1,63}$/iu', 44 =&gt; '/^[\x{1740}-\x{175F}]{1,63}$/iu', 45 =&gt; '/^[\x{1760}-\x{177F}]{1,63}$/iu', 46 =&gt; '/^[\x{1780}-\x{17FF}]{1,63}$/iu', 47 =&gt; '/^[\x{1800}-\x{18AF}]{1,63}$/iu', 48 =&gt; '/^[\x{1E00}-\x{1EFF}]{1,63}$/iu', 49 =&gt; '/^[\x{1F00}-\x{1FFF}]{1,63}$/iu', 50 =&gt; '/^[\x{2070}-\x{209F}]{1,63}$/iu', 51 =&gt; '/^[\x{2100}-\x{214F}]{1,63}$/iu', 52 =&gt; '/^[\x{2150}-\x{218F}]{1,63}$/iu', 53 =&gt; '/^[\x{2460}-\x{24FF}]{1,63}$/iu', 54 =&gt; '/^[\x{2E80}-\x{2EFF}]{1,63}$/iu', 55 =&gt; '/^[\x{2F00}-\x{2FDF}]{1,63}$/iu', 56 =&gt; '/^[\x{2FF0}-\x{2FFF}]{1,63}$/iu', 57 =&gt; '/^[\x{3040}-\x{309F}]{1,63}$/iu', 58 =&gt; '/^[\x{30A0}-\x{30FF}]{1,63}$/iu', 59 =&gt; '/^[\x{3100}-\x{312F}]{1,63}$/iu', 60 =&gt; '/^[\x{3130}-\x{318F}]{1,63}$/iu', 61 =&gt; '/^[\x{3190}-\x{319F}]{1,63}$/iu', 62 =&gt; '/^[\x{31A0}-\x{31BF}]{1,63}$/iu', 63 =&gt; '/^[\x{31F0}-\x{31FF}]{1,63}$/iu', 64 =&gt; '/^[\x{3200}-\x{32FF}]{1,63}$/iu', 65 =&gt; '/^[\x{3300}-\x{33FF}]{1,63}$/iu', 66 =&gt; '/^[\x{3400}-\x{4DBF}]{1,63}$/iu', 67 =&gt; '/^[\x{4E00}-\x{9FFF}]{1,63}$/iu', 68 =&gt; '/^[\x{A000}-\x{A48F}]{1,63}$/iu', 69 =&gt; '/^[\x{A490}-\x{A4CF}]{1,63}$/iu', 70 =&gt; '/^[\x{AC00}-\x{D7AF}]{1,63}$/iu', 71 =&gt; '/^[\x{D800}-\x{DB7F}]{1,63}$/iu', 72 =&gt; '/^[\x{DC00}-\x{DFFF}]{1,63}$/iu', 73 =&gt; '/^[\x{F900}-\x{FAFF}]{1,63}$/iu', 74 =&gt; '/^[\x{FB00}-\x{FB4F}]{1,63}$/iu', 75 =&gt; '/^[\x{FB50}-\x{FDFF}]{1,63}$/iu', 76 =&gt; '/^[\x{FE20}-\x{FE2F}]{1,63}$/iu', 77 =&gt; '/^[\x{FE70}-\x{FEFF}]{1,63}$/iu', 78 =&gt; '/^[\x{FF00}-\x{FFEF}]{1,63}$/iu', 79 =&gt; '/^[\x{20000}-\x{2A6DF}]{1,63}$/iu', 80 =&gt; '/^[\x{2F800}-\x{2FA1F}]{1,63}$/iu', ); &lt;?php
 namespace Zend\Validator\Hostname; return array( 1 =&gt; '/^[\x{002d}0-9a-z\x{3005}-\x{3007}\x{3041}-\x{3093}\x{309D}\x{309E}' . '\x{30A1}-\x{30F6}\x{30FC}' . '\x{30FD}\x{30FE}\x{4E00}\x{4E01}\x{4E03}\x{4E07}\x{4E08}\x{4E09}\x{4E0A}' . '\x{4E0B}\x{4E0D}\x{4E0E}\x{4E10}\x{4E11}\x{4E14}\x{4E15}\x{4E16}\x{4E17}' . '\x{4E18}\x{4E19}\x{4E1E}\x{4E21}\x{4E26}\x{4E2A}\x{4E2D}\x{4E31}\x{4E32}' . '\x{4E36}\x{4E38}\x{4E39}\x{4E3B}\x{4E3C}\x{4E3F}\x{4E42}\x{4E43}\x{4E45}' . '\x{4E4B}\x{4E4D}\x{4E4E}\x{4E4F}\x{4E55}\x{4E56}\x{4E57}\x{4E58}\x{4E59}' . '\x{4E5D}\x{4E5E}\x{4E5F}\x{4E62}\x{4E71}\x{4E73}\x{4E7E}\x{4E80}\x{4E82}' . '\x{4E85}\x{4E86}\x{4E88}\x{4E89}\x{4E8A}\x{4E8B}\x{4E8C}\x{4E8E}\x{4E91}' . '\x{4E92}\x{4E94}\x{4E95}\x{4E98}\x{4E99}\x{4E9B}\x{4E9C}\x{4E9E}\x{4E9F}' . '\x{4EA0}\x{4EA1}\x{4EA2}\x{4EA4}\x{4EA5}\x{4EA6}\x{4EA8}\x{4EAB}\x{4EAC}' . '\x{4EAD}\x{4EAE}\x{4EB0}\x{4EB3}\x{4EB6}\x{4EBA}\x{4EC0}\x{4EC1}\x{4EC2}' . '\x{4EC4}\x{4EC6}\x{4EC7}\x{4ECA}\x{4ECB}\x{4ECD}\x{4ECE}\x{4ECF}\x{4ED4}' . '\x{4ED5}\x{4ED6}\x{4ED7}\x{4ED8}\x{4ED9}\x{4EDD}\x{4EDE}\x{4EDF}\x{4EE3}' . '\x{4EE4}\x{4EE5}\x{4EED}\x{4EEE}\x{4EF0}\x{4EF2}\x{4EF6}\x{4EF7}\x{4EFB}' . '\x{4F01}\x{4F09}\x{4F0A}\x{4F0D}\x{4F0E}\x{4F0F}\x{4F10}\x{4F11}\x{4F1A}' . '\x{4F1C}\x{4F1D}\x{4F2F}\x{4F30}\x{4F34}\x{4F36}\x{4F38}\x{4F3A}\x{4F3C}' . '\x{4F3D}\x{4F43}\x{4F46}\x{4F47}\x{4F4D}\x{4F4E}\x{4F4F}\x{4F50}\x{4F51}' . '\x{4F53}\x{4F55}\x{4F57}\x{4F59}\x{4F5A}\x{4F5B}\x{4F5C}\x{4F5D}\x{4F5E}' . '\x{4F69}\x{4F6F}\x{4F70}\x{4F73}\x{4F75}\x{4F76}\x{4F7B}\x{4F7C}\x{4F7F}' . '\x{4F83}\x{4F86}\x{4F88}\x{4F8B}\x{4F8D}\x{4F8F}\x{4F91}\x{4F96}\x{4F98}' . '\x{4F9B}\x{4F9D}\x{4FA0}\x{4FA1}\x{4FAB}\x{4FAD}\x{4FAE}\x{4FAF}\x{4FB5}' . '\x{4FB6}\x{4FBF}\x{4FC2}\x{4FC3}\x{4FC4}\x{4FCA}\x{4FCE}\x{4FD0}\x{4FD1}' . '\x{4FD4}\x{4FD7}\x{4FD8}\x{4FDA}\x{4FDB}\x{4FDD}\x{4FDF}\x{4FE1}\x{4FE3}' . '\x{4FE4}\x{4FE5}\x{4FEE}\x{4FEF}\x{4FF3}\x{4FF5}\x{4FF6}\x{4FF8}\x{4FFA}' . '\x{4FFE}\x{5005}\x{5006}\x{5009}\x{500B}\x{500D}\x{500F}\x{5011}\x{5012}' . '\x{5014}\x{5016}\x{5019}\x{501A}\x{501F}\x{5021}\x{5023}\x{5024}\x{5025}' . '\x{5026}\x{5028}\x{5029}\x{502A}\x{502B}\x{502C}\x{502D}\x{5036}\x{5039}' . '\x{5043}\x{5047}\x{5048}\x{5049}\x{504F}\x{5050}\x{5055}\x{5056}\x{505A}' . '\x{505C}\x{5065}\x{506C}\x{5072}\x{5074}\x{5075}\x{5076}\x{5078}\x{507D}' . '\x{5080}\x{5085}\x{508D}\x{5091}\x{5098}\x{5099}\x{509A}\x{50AC}\x{50AD}' . '\x{50B2}\x{50B3}\x{50B4}\x{50B5}\x{50B7}\x{50BE}\x{50C2}\x{50C5}\x{50C9}' . '\x{50CA}\x{50CD}\x{50CF}\x{50D1}\x{50D5}\x{50D6}\x{50DA}\x{50DE}\x{50E3}' . '\x{50E5}\x{50E7}\x{50ED}\x{50EE}\x{50F5}\x{50F9}\x{50FB}\x{5100}\x{5101}' . '\x{5102}\x{5104}\x{5109}\x{5112}\x{5114}\x{5115}\x{5116}\x{5118}\x{511A}' . '\x{511F}\x{5121}\x{512A}\x{5132}\x{5137}\x{513A}\x{513B}\x{513C}\x{513F}' . '\x{5140}\x{5141}\x{5143}\x{5144}\x{5145}\x{5146}\x{5147}\x{5148}\x{5149}' . '\x{514B}\x{514C}\x{514D}\x{514E}\x{5150}\x{5152}\x{5154}\x{515A}\x{515C}' . '\x{5162}\x{5165}\x{5168}\x{5169}\x{516A}\x{516B}\x{516C}\x{516D}\x{516E}' . '\x{5171}\x{5175}\x{5176}\x{5177}\x{5178}\x{517C}\x{5180}\x{5182}\x{5185}' . '\x{5186}\x{5189}\x{518A}\x{518C}\x{518D}\x{518F}\x{5190}\x{5191}\x{5192}' . '\x{5193}\x{5195}\x{5196}\x{5197}\x{5199}\x{51A0}\x{51A2}\x{51A4}\x{51A5}' . '\x{51A6}\x{51A8}\x{51A9}\x{51AA}\x{51AB}\x{51AC}\x{51B0}\x{51B1}\x{51B2}' . '\x{51B3}\x{51B4}\x{51B5}\x{51B6}\x{51B7}\x{51BD}\x{51C4}\x{51C5}\x{51C6}' . '\x{51C9}\x{51CB}\x{51CC}\x{51CD}\x{51D6}\x{51DB}\x{51DC}\x{51DD}\x{51E0}' . '\x{51E1}\x{51E6}\x{51E7}\x{51E9}\x{51EA}\x{51ED}\x{51F0}\x{51F1}\x{51F5}' . '\x{51F6}\x{51F8}\x{51F9}\x{51FA}\x{51FD}\x{51FE}\x{5200}\x{5203}\x{5204}' . '\x{5206}\x{5207}\x{5208}\x{520A}\x{520B}\x{520E}\x{5211}\x{5214}\x{5217}' . '\x{521D}\x{5224}\x{5225}\x{5227}\x{5229}\x{522A}\x{522E}\x{5230}\x{5233}' . '\x{5236}\x{5237}\x{5238}\x{5239}\x{523A}\x{523B}\x{5243}\x{5244}\x{5247}' . '\x{524A}\x{524B}\x{524C}\x{524D}\x{524F}\x{5254}\x{5256}\x{525B}\x{525E}' . '\x{5263}\x{5264}\x{5265}\x{5269}\x{526A}\x{526F}\x{5270}\x{5271}\x{5272}' . '\x{5273}\x{5274}\x{5275}\x{527D}\x{527F}\x{5283}\x{5287}\x{5288}\x{5289}' . '\x{528D}\x{5291}\x{5292}\x{5294}\x{529B}\x{529F}\x{52A0}\x{52A3}\x{52A9}' . '\x{52AA}\x{52AB}\x{52AC}\x{52AD}\x{52B1}\x{52B4}\x{52B5}\x{52B9}\x{52BC}' . '\x{52BE}\x{52C1}\x{52C3}\x{52C5}\x{52C7}\x{52C9}\x{52CD}\x{52D2}\x{52D5}' . '\x{52D7}\x{52D8}\x{52D9}\x{52DD}\x{52DE}\x{52DF}\x{52E0}\x{52E2}\x{52E3}' . '\x{52E4}\x{52E6}\x{52E7}\x{52F2}\x{52F3}\x{52F5}\x{52F8}\x{52F9}\x{52FA}' . '\x{52FE}\x{52FF}\x{5301}\x{5302}\x{5305}\x{5306}\x{5308}\x{530D}\x{530F}' . '\x{5310}\x{5315}\x{5316}\x{5317}\x{5319}\x{531A}\x{531D}\x{5320}\x{5321}' . '\x{5323}\x{532A}\x{532F}\x{5331}\x{5333}\x{5338}\x{5339}\x{533A}\x{533B}' . '\x{533F}\x{5340}\x{5341}\x{5343}\x{5345}\x{5346}\x{5347}\x{5348}\x{5349}' . '\x{534A}\x{534D}\x{5351}\x{5352}\x{5353}\x{5354}\x{5357}\x{5358}\x{535A}' . '\x{535C}\x{535E}\x{5360}\x{5366}\x{5369}\x{536E}\x{536F}\x{5370}\x{5371}' . '\x{5373}\x{5374}\x{5375}\x{5377}\x{5378}\x{537B}\x{537F}\x{5382}\x{5384}' . '\x{5396}\x{5398}\x{539A}\x{539F}\x{53A0}\x{53A5}\x{53A6}\x{53A8}\x{53A9}' . '\x{53AD}\x{53AE}\x{53B0}\x{53B3}\x{53B6}\x{53BB}\x{53C2}\x{53C3}\x{53C8}' . '\x{53C9}\x{53CA}\x{53CB}\x{53CC}\x{53CD}\x{53CE}\x{53D4}\x{53D6}\x{53D7}' . '\x{53D9}\x{53DB}\x{53DF}\x{53E1}\x{53E2}\x{53E3}\x{53E4}\x{53E5}\x{53E8}' . '\x{53E9}\x{53EA}\x{53EB}\x{53EC}\x{53ED}\x{53EE}\x{53EF}\x{53F0}\x{53F1}' . '\x{53F2}\x{53F3}\x{53F6}\x{53F7}\x{53F8}\x{53FA}\x{5401}\x{5403}\x{5404}' . '\x{5408}\x{5409}\x{540A}\x{540B}\x{540C}\x{540D}\x{540E}\x{540F}\x{5410}' . '\x{5411}\x{541B}\x{541D}\x{541F}\x{5420}\x{5426}\x{5429}\x{542B}\x{542C}' . '\x{542D}\x{542E}\x{5436}\x{5438}\x{5439}\x{543B}\x{543C}\x{543D}\x{543E}' . '\x{5440}\x{5442}\x{5446}\x{5448}\x{5449}\x{544A}\x{544E}\x{5451}\x{545F}' . '\x{5468}\x{546A}\x{5470}\x{5471}\x{5473}\x{5475}\x{5476}\x{5477}\x{547B}' . '\x{547C}\x{547D}\x{5480}\x{5484}\x{5486}\x{548B}\x{548C}\x{548E}\x{548F}' . '\x{5490}\x{5492}\x{54A2}\x{54A4}\x{54A5}\x{54A8}\x{54AB}\x{54AC}\x{54AF}' . '\x{54B2}\x{54B3}\x{54B8}\x{54BC}\x{54BD}\x{54BE}\x{54C0}\x{54C1}\x{54C2}' . '\x{54C4}\x{54C7}\x{54C8}\x{54C9}\x{54D8}\x{54E1}\x{54E2}\x{54E5}\x{54E6}' . '\x{54E8}\x{54E9}\x{54ED}\x{54EE}\x{54F2}\x{54FA}\x{54FD}\x{5504}\x{5506}' . '\x{5507}\x{550F}\x{5510}\x{5514}\x{5516}\x{552E}\x{552F}\x{5531}\x{5533}' . '\x{5538}\x{5539}\x{553E}\x{5540}\x{5544}\x{5545}\x{5546}\x{554C}\x{554F}' . '\x{5553}\x{5556}\x{5557}\x{555C}\x{555D}\x{5563}\x{557B}\x{557C}\x{557E}' . '\x{5580}\x{5583}\x{5584}\x{5587}\x{5589}\x{558A}\x{558B}\x{5598}\x{5599}' . '\x{559A}\x{559C}\x{559D}\x{559E}\x{559F}\x{55A7}\x{55A8}\x{55A9}\x{55AA}' . '\x{55AB}\x{55AC}\x{55AE}\x{55B0}\x{55B6}\x{55C4}\x{55C5}\x{55C7}\x{55D4}' . '\x{55DA}\x{55DC}\x{55DF}\x{55E3}\x{55E4}\x{55F7}\x{55F9}\x{55FD}\x{55FE}' . '\x{5606}\x{5609}\x{5614}\x{5616}\x{5617}\x{5618}\x{561B}\x{5629}\x{562F}' . '\x{5631}\x{5632}\x{5634}\x{5636}\x{5638}\x{5642}\x{564C}\x{564E}\x{5650}' . '\x{565B}\x{5664}\x{5668}\x{566A}\x{566B}\x{566C}\x{5674}\x{5678}\x{567A}' . '\x{5680}\x{5686}\x{5687}\x{568A}\x{568F}\x{5694}\x{56A0}\x{56A2}\x{56A5}' . '\x{56AE}\x{56B4}\x{56B6}\x{56BC}\x{56C0}\x{56C1}\x{56C2}\x{56C3}\x{56C8}' . '\x{56CE}\x{56D1}\x{56D3}\x{56D7}\x{56D8}\x{56DA}\x{56DB}\x{56DE}\x{56E0}' . '\x{56E3}\x{56EE}\x{56F0}\x{56F2}\x{56F3}\x{56F9}\x{56FA}\x{56FD}\x{56FF}' . '\x{5700}\x{5703}\x{5704}\x{5708}\x{5709}\x{570B}\x{570D}\x{570F}\x{5712}' . '\x{5713}\x{5716}\x{5718}\x{571C}\x{571F}\x{5726}\x{5727}\x{5728}\x{572D}' . '\x{5730}\x{5737}\x{5738}\x{573B}\x{5740}\x{5742}\x{5747}\x{574A}\x{574E}' . '\x{574F}\x{5750}\x{5751}\x{5761}\x{5764}\x{5766}\x{5769}\x{576A}\x{577F}' . '\x{5782}\x{5788}\x{5789}\x{578B}\x{5793}\x{57A0}\x{57A2}\x{57A3}\x{57A4}' . '\x{57AA}\x{57B0}\x{57B3}\x{57C0}\x{57C3}\x{57C6}\x{57CB}\x{57CE}\x{57D2}' . '\x{57D3}\x{57D4}\x{57D6}\x{57DC}\x{57DF}\x{57E0}\x{57E3}\x{57F4}\x{57F7}' . '\x{57F9}\x{57FA}\x{57FC}\x{5800}\x{5802}\x{5805}\x{5806}\x{580A}\x{580B}' . '\x{5815}\x{5819}\x{581D}\x{5821}\x{5824}\x{582A}\x{582F}\x{5830}\x{5831}' . '\x{5834}\x{5835}\x{583A}\x{583D}\x{5840}\x{5841}\x{584A}\x{584B}\x{5851}' . '\x{5852}\x{5854}\x{5857}\x{5858}\x{5859}\x{585A}\x{585E}\x{5862}\x{5869}' . '\x{586B}\x{5870}\x{5872}\x{5875}\x{5879}\x{587E}\x{5883}\x{5885}\x{5893}' . '\x{5897}\x{589C}\x{589F}\x{58A8}\x{58AB}\x{58AE}\x{58B3}\x{58B8}\x{58B9}' . '\x{58BA}\x{58BB}\x{58BE}\x{58C1}\x{58C5}\x{58C7}\x{58CA}\x{58CC}\x{58D1}' . '\x{58D3}\x{58D5}\x{58D7}\x{58D8}\x{58D9}\x{58DC}\x{58DE}\x{58DF}\x{58E4}' . '\x{58E5}\x{58EB}\x{58EC}\x{58EE}\x{58EF}\x{58F0}\x{58F1}\x{58F2}\x{58F7}' . '\x{58F9}\x{58FA}\x{58FB}\x{58FC}\x{58FD}\x{5902}\x{5909}\x{590A}\x{590F}' . '\x{5910}\x{5915}\x{5916}\x{5918}\x{5919}\x{591A}\x{591B}\x{591C}\x{5922}' . '\x{5925}\x{5927}\x{5929}\x{592A}\x{592B}\x{592C}\x{592D}\x{592E}\x{5931}' . '\x{5932}\x{5937}\x{5938}\x{593E}\x{5944}\x{5947}\x{5948}\x{5949}\x{594E}' . '\x{594F}\x{5950}\x{5951}\x{5954}\x{5955}\x{5957}\x{5958}\x{595A}\x{5960}' . '\x{5962}\x{5965}\x{5967}\x{5968}\x{5969}\x{596A}\x{596C}\x{596E}\x{5973}' . '\x{5974}\x{5978}\x{597D}\x{5981}\x{5982}\x{5983}\x{5984}\x{598A}\x{598D}' . '\x{5993}\x{5996}\x{5999}\x{599B}\x{599D}\x{59A3}\x{59A5}\x{59A8}\x{59AC}' . '\x{59B2}\x{59B9}\x{59BB}\x{59BE}\x{59C6}\x{59C9}\x{59CB}\x{59D0}\x{59D1}' . '\x{59D3}\x{59D4}\x{59D9}\x{59DA}\x{59DC}\x{59E5}\x{59E6}\x{59E8}\x{59EA}' . '\x{59EB}\x{59F6}\x{59FB}\x{59FF}\x{5A01}\x{5A03}\x{5A09}\x{5A11}\x{5A18}' . '\x{5A1A}\x{5A1C}\x{5A1F}\x{5A20}\x{5A25}\x{5A29}\x{5A2F}\x{5A35}\x{5A36}' . '\x{5A3C}\x{5A40}\x{5A41}\x{5A46}\x{5A49}\x{5A5A}\x{5A62}\x{5A66}\x{5A6A}' . '\x{5A6C}\x{5A7F}\x{5A92}\x{5A9A}\x{5A9B}\x{5ABC}\x{5ABD}\x{5ABE}\x{5AC1}' . '\x{5AC2}\x{5AC9}\x{5ACB}\x{5ACC}\x{5AD0}\x{5AD6}\x{5AD7}\x{5AE1}\x{5AE3}' . '\x{5AE6}\x{5AE9}\x{5AFA}\x{5AFB}\x{5B09}\x{5B0B}\x{5B0C}\x{5B16}\x{5B22}' . '\x{5B2A}\x{5B2C}\x{5B30}\x{5B32}\x{5B36}\x{5B3E}\x{5B40}\x{5B43}\x{5B45}' . '\x{5B50}\x{5B51}\x{5B54}\x{5B55}\x{5B57}\x{5B58}\x{5B5A}\x{5B5B}\x{5B5C}' . '\x{5B5D}\x{5B5F}\x{5B63}\x{5B64}\x{5B65}\x{5B66}\x{5B69}\x{5B6B}\x{5B70}' . '\x{5B71}\x{5B73}\x{5B75}\x{5B78}\x{5B7A}\x{5B80}\x{5B83}\x{5B85}\x{5B87}' . '\x{5B88}\x{5B89}\x{5B8B}\x{5B8C}\x{5B8D}\x{5B8F}\x{5B95}\x{5B97}\x{5B98}' . '\x{5B99}\x{5B9A}\x{5B9B}\x{5B9C}\x{5B9D}\x{5B9F}\x{5BA2}\x{5BA3}\x{5BA4}' . '\x{5BA5}\x{5BA6}\x{5BAE}\x{5BB0}\x{5BB3}\x{5BB4}\x{5BB5}\x{5BB6}\x{5BB8}' . '\x{5BB9}\x{5BBF}\x{5BC2}\x{5BC3}\x{5BC4}\x{5BC5}\x{5BC6}\x{5BC7}\x{5BC9}' . '\x{5BCC}\x{5BD0}\x{5BD2}\x{5BD3}\x{5BD4}\x{5BDB}\x{5BDD}\x{5BDE}\x{5BDF}' . '\x{5BE1}\x{5BE2}\x{5BE4}\x{5BE5}\x{5BE6}\x{5BE7}\x{5BE8}\x{5BE9}\x{5BEB}' . '\x{5BEE}\x{5BF0}\x{5BF3}\x{5BF5}\x{5BF6}\x{5BF8}\x{5BFA}\x{5BFE}\x{5BFF}' . '\x{5C01}\x{5C02}\x{5C04}\x{5C05}\x{5C06}\x{5C07}\x{5C08}\x{5C09}\x{5C0A}' . '\x{5C0B}\x{5C0D}\x{5C0E}\x{5C0F}\x{5C11}\x{5C13}\x{5C16}\x{5C1A}\x{5C20}' . '\x{5C22}\x{5C24}\x{5C28}\x{5C2D}\x{5C31}\x{5C38}\x{5C39}\x{5C3A}\x{5C3B}' . '\x{5C3C}\x{5C3D}\x{5C3E}\x{5C3F}\x{5C40}\x{5C41}\x{5C45}\x{5C46}\x{5C48}' . '\x{5C4A}\x{5C4B}\x{5C4D}\x{5C4E}\x{5C4F}\x{5C50}\x{5C51}\x{5C53}\x{5C55}' . '\x{5C5E}\x{5C60}\x{5C61}\x{5C64}\x{5C65}\x{5C6C}\x{5C6E}\x{5C6F}\x{5C71}' . '\x{5C76}\x{5C79}\x{5C8C}\x{5C90}\x{5C91}\x{5C94}\x{5CA1}\x{5CA8}\x{5CA9}' . '\x{5CAB}\x{5CAC}\x{5CB1}\x{5CB3}\x{5CB6}\x{5CB7}\x{5CB8}\x{5CBB}\x{5CBC}' . '\x{5CBE}\x{5CC5}\x{5CC7}\x{5CD9}\x{5CE0}\x{5CE1}\x{5CE8}\x{5CE9}\x{5CEA}' . '\x{5CED}\x{5CEF}\x{5CF0}\x{5CF6}\x{5CFA}\x{5CFB}\x{5CFD}\x{5D07}\x{5D0B}' . '\x{5D0E}\x{5D11}\x{5D14}\x{5D15}\x{5D16}\x{5D17}\x{5D18}\x{5D19}\x{5D1A}' . '\x{5D1B}\x{5D1F}\x{5D22}\x{5D29}\x{5D4B}\x{5D4C}\x{5D4E}\x{5D50}\x{5D52}' . '\x{5D5C}\x{5D69}\x{5D6C}\x{5D6F}\x{5D73}\x{5D76}\x{5D82}\x{5D84}\x{5D87}' . '\x{5D8B}\x{5D8C}\x{5D90}\x{5D9D}\x{5DA2}\x{5DAC}\x{5DAE}\x{5DB7}\x{5DBA}' . '\x{5DBC}\x{5DBD}\x{5DC9}\x{5DCC}\x{5DCD}\x{5DD2}\x{5DD3}\x{5DD6}\x{5DDB}' . '\x{5DDD}\x{5DDE}\x{5DE1}\x{5DE3}\x{5DE5}\x{5DE6}\x{5DE7}\x{5DE8}\x{5DEB}' . '\x{5DEE}\x{5DF1}\x{5DF2}\x{5DF3}\x{5DF4}\x{5DF5}\x{5DF7}\x{5DFB}\x{5DFD}' . '\x{5DFE}\x{5E02}\x{5E03}\x{5E06}\x{5E0B}\x{5E0C}\x{5E11}\x{5E16}\x{5E19}' . '\x{5E1A}\x{5E1B}\x{5E1D}\x{5E25}\x{5E2B}\x{5E2D}\x{5E2F}\x{5E30}\x{5E33}' . '\x{5E36}\x{5E37}\x{5E38}\x{5E3D}\x{5E40}\x{5E43}\x{5E44}\x{5E45}\x{5E47}' . '\x{5E4C}\x{5E4E}\x{5E54}\x{5E55}\x{5E57}\x{5E5F}\x{5E61}\x{5E62}\x{5E63}' . '\x{5E64}\x{5E72}\x{5E73}\x{5E74}\x{5E75}\x{5E76}\x{5E78}\x{5E79}\x{5E7A}' . '\x{5E7B}\x{5E7C}\x{5E7D}\x{5E7E}\x{5E7F}\x{5E81}\x{5E83}\x{5E84}\x{5E87}' . '\x{5E8A}\x{5E8F}\x{5E95}\x{5E96}\x{5E97}\x{5E9A}\x{5E9C}\x{5EA0}\x{5EA6}' . '\x{5EA7}\x{5EAB}\x{5EAD}\x{5EB5}\x{5EB6}\x{5EB7}\x{5EB8}\x{5EC1}\x{5EC2}' . '\x{5EC3}\x{5EC8}\x{5EC9}\x{5ECA}\x{5ECF}\x{5ED0}\x{5ED3}\x{5ED6}\x{5EDA}' . '\x{5EDB}\x{5EDD}\x{5EDF}\x{5EE0}\x{5EE1}\x{5EE2}\x{5EE3}\x{5EE8}\x{5EE9}' . '\x{5EEC}\x{5EF0}\x{5EF1}\x{5EF3}\x{5EF4}\x{5EF6}\x{5EF7}\x{5EF8}\x{5EFA}' . '\x{5EFB}\x{5EFC}\x{5EFE}\x{5EFF}\x{5F01}\x{5F03}\x{5F04}\x{5F09}\x{5F0A}' . '\x{5F0B}\x{5F0C}\x{5F0D}\x{5F0F}\x{5F10}\x{5F11}\x{5F13}\x{5F14}\x{5F15}' . '\x{5F16}\x{5F17}\x{5F18}\x{5F1B}\x{5F1F}\x{5F25}\x{5F26}\x{5F27}\x{5F29}' . '\x{5F2D}\x{5F2F}\x{5F31}\x{5F35}\x{5F37}\x{5F38}\x{5F3C}\x{5F3E}\x{5F41}' . '\x{5F48}\x{5F4A}\x{5F4C}\x{5F4E}\x{5F51}\x{5F53}\x{5F56}\x{5F57}\x{5F59}' . '\x{5F5C}\x{5F5D}\x{5F61}\x{5F62}\x{5F66}\x{5F69}\x{5F6A}\x{5F6B}\x{5F6C}' . '\x{5F6D}\x{5F70}\x{5F71}\x{5F73}\x{5F77}\x{5F79}\x{5F7C}\x{5F7F}\x{5F80}' . '\x{5F81}\x{5F82}\x{5F83}\x{5F84}\x{5F85}\x{5F87}\x{5F88}\x{5F8A}\x{5F8B}' . '\x{5F8C}\x{5F90}\x{5F91}\x{5F92}\x{5F93}\x{5F97}\x{5F98}\x{5F99}\x{5F9E}' . '\x{5FA0}\x{5FA1}\x{5FA8}\x{5FA9}\x{5FAA}\x{5FAD}\x{5FAE}\x{5FB3}\x{5FB4}' . '\x{5FB9}\x{5FBC}\x{5FBD}\x{5FC3}\x{5FC5}\x{5FCC}\x{5FCD}\x{5FD6}\x{5FD7}' . '\x{5FD8}\x{5FD9}\x{5FDC}\x{5FDD}\x{5FE0}\x{5FE4}\x{5FEB}\x{5FF0}\x{5FF1}' . '\x{5FF5}\x{5FF8}\x{5FFB}\x{5FFD}\x{5FFF}\x{600E}\x{600F}\x{6010}\x{6012}' . '\x{6015}\x{6016}\x{6019}\x{601B}\x{601C}\x{601D}\x{6020}\x{6021}\x{6025}' . '\x{6026}\x{6027}\x{6028}\x{6029}\x{602A}\x{602B}\x{602F}\x{6031}\x{603A}' . '\x{6041}\x{6042}\x{6043}\x{6046}\x{604A}\x{604B}\x{604D}\x{6050}\x{6052}' . '\x{6055}\x{6059}\x{605A}\x{605F}\x{6060}\x{6062}\x{6063}\x{6064}\x{6065}' . '\x{6068}\x{6069}\x{606A}\x{606B}\x{606C}\x{606D}\x{606F}\x{6070}\x{6075}' . '\x{6077}\x{6081}\x{6083}\x{6084}\x{6089}\x{608B}\x{608C}\x{608D}\x{6092}' . '\x{6094}\x{6096}\x{6097}\x{609A}\x{609B}\x{609F}\x{60A0}\x{60A3}\x{60A6}' . '\x{60A7}\x{60A9}\x{60AA}\x{60B2}\x{60B3}\x{60B4}\x{60B5}\x{60B6}\x{60B8}' . '\x{60BC}\x{60BD}\x{60C5}\x{60C6}\x{60C7}\x{60D1}\x{60D3}\x{60D8}\x{60DA}' . '\x{60DC}\x{60DF}\x{60E0}\x{60E1}\x{60E3}\x{60E7}\x{60E8}\x{60F0}\x{60F1}' . '\x{60F3}\x{60F4}\x{60F6}\x{60F7}\x{60F9}\x{60FA}\x{60FB}\x{6100}\x{6101}' . '\x{6103}\x{6106}\x{6108}\x{6109}\x{610D}\x{610E}\x{610F}\x{6115}\x{611A}' . '\x{611B}\x{611F}\x{6121}\x{6127}\x{6128}\x{612C}\x{6134}\x{613C}\x{613D}' . '\x{613E}\x{613F}\x{6142}\x{6144}\x{6147}\x{6148}\x{614A}\x{614B}\x{614C}' . '\x{614D}\x{614E}\x{6153}\x{6155}\x{6158}\x{6159}\x{615A}\x{615D}\x{615F}' . '\x{6162}\x{6163}\x{6165}\x{6167}\x{6168}\x{616B}\x{616E}\x{616F}\x{6170}' . '\x{6171}\x{6173}\x{6174}\x{6175}\x{6176}\x{6177}\x{617E}\x{6182}\x{6187}' . '\x{618A}\x{618E}\x{6190}\x{6191}\x{6194}\x{6196}\x{6199}\x{619A}\x{61A4}' . '\x{61A7}\x{61A9}\x{61AB}\x{61AC}\x{61AE}\x{61B2}\x{61B6}\x{61BA}\x{61BE}' . '\x{61C3}\x{61C6}\x{61C7}\x{61C8}\x{61C9}\x{61CA}\x{61CB}\x{61CC}\x{61CD}' . '\x{61D0}\x{61E3}\x{61E6}\x{61F2}\x{61F4}\x{61F6}\x{61F7}\x{61F8}\x{61FA}' . '\x{61FC}\x{61FD}\x{61FE}\x{61FF}\x{6200}\x{6208}\x{6209}\x{620A}\x{620C}' . '\x{620D}\x{620E}\x{6210}\x{6211}\x{6212}\x{6214}\x{6216}\x{621A}\x{621B}' . '\x{621D}\x{621E}\x{621F}\x{6221}\x{6226}\x{622A}\x{622E}\x{622F}\x{6230}' . '\x{6232}\x{6233}\x{6234}\x{6238}\x{623B}\x{623F}\x{6240}\x{6241}\x{6247}' . '\x{6248}\x{6249}\x{624B}\x{624D}\x{624E}\x{6253}\x{6255}\x{6258}\x{625B}' . '\x{625E}\x{6260}\x{6263}\x{6268}\x{626E}\x{6271}\x{6276}\x{6279}\x{627C}' . '\x{627E}\x{627F}\x{6280}\x{6282}\x{6283}\x{6284}\x{6289}\x{628A}\x{6291}' . '\x{6292}\x{6293}\x{6294}\x{6295}\x{6296}\x{6297}\x{6298}\x{629B}\x{629C}' . '\x{629E}\x{62AB}\x{62AC}\x{62B1}\x{62B5}\x{62B9}\x{62BB}\x{62BC}\x{62BD}' . '\x{62C2}\x{62C5}\x{62C6}\x{62C7}\x{62C8}\x{62C9}\x{62CA}\x{62CC}\x{62CD}' . '\x{62CF}\x{62D0}\x{62D1}\x{62D2}\x{62D3}\x{62D4}\x{62D7}\x{62D8}\x{62D9}' . '\x{62DB}\x{62DC}\x{62DD}\x{62E0}\x{62E1}\x{62EC}\x{62ED}\x{62EE}\x{62EF}' . '\x{62F1}\x{62F3}\x{62F5}\x{62F6}\x{62F7}\x{62FE}\x{62FF}\x{6301}\x{6302}' . '\x{6307}\x{6308}\x{6309}\x{630C}\x{6311}\x{6319}\x{631F}\x{6327}\x{6328}' . '\x{632B}\x{632F}\x{633A}\x{633D}\x{633E}\x{633F}\x{6349}\x{634C}\x{634D}' . '\x{634F}\x{6350}\x{6355}\x{6357}\x{635C}\x{6367}\x{6368}\x{6369}\x{636B}' . '\x{636E}\x{6372}\x{6376}\x{6377}\x{637A}\x{637B}\x{6380}\x{6383}\x{6388}' . '\x{6389}\x{638C}\x{638E}\x{638F}\x{6392}\x{6396}\x{6398}\x{639B}\x{639F}' . '\x{63A0}\x{63A1}\x{63A2}\x{63A3}\x{63A5}\x{63A7}\x{63A8}\x{63A9}\x{63AA}' . '\x{63AB}\x{63AC}\x{63B2}\x{63B4}\x{63B5}\x{63BB}\x{63BE}\x{63C0}\x{63C3}' . '\x{63C4}\x{63C6}\x{63C9}\x{63CF}\x{63D0}\x{63D2}\x{63D6}\x{63DA}\x{63DB}' . '\x{63E1}\x{63E3}\x{63E9}\x{63EE}\x{63F4}\x{63F6}\x{63FA}\x{6406}\x{640D}' . '\x{640F}\x{6413}\x{6416}\x{6417}\x{641C}\x{6426}\x{6428}\x{642C}\x{642D}' . '\x{6434}\x{6436}\x{643A}\x{643E}\x{6442}\x{644E}\x{6458}\x{6467}\x{6469}' . '\x{646F}\x{6476}\x{6478}\x{647A}\x{6483}\x{6488}\x{6492}\x{6493}\x{6495}' . '\x{649A}\x{649E}\x{64A4}\x{64A5}\x{64A9}\x{64AB}\x{64AD}\x{64AE}\x{64B0}' . '\x{64B2}\x{64B9}\x{64BB}\x{64BC}\x{64C1}\x{64C2}\x{64C5}\x{64C7}\x{64CD}' . '\x{64D2}\x{64D4}\x{64D8}\x{64DA}\x{64E0}\x{64E1}\x{64E2}\x{64E3}\x{64E6}' . '\x{64E7}\x{64EC}\x{64EF}\x{64F1}\x{64F2}\x{64F4}\x{64F6}\x{64FA}\x{64FD}' . '\x{64FE}\x{6500}\x{6505}\x{6518}\x{651C}\x{651D}\x{6523}\x{6524}\x{652A}' . '\x{652B}\x{652C}\x{652F}\x{6534}\x{6535}\x{6536}\x{6537}\x{6538}\x{6539}' . '\x{653B}\x{653E}\x{653F}\x{6545}\x{6548}\x{654D}\x{654F}\x{6551}\x{6555}' . '\x{6556}\x{6557}\x{6558}\x{6559}\x{655D}\x{655E}\x{6562}\x{6563}\x{6566}' . '\x{656C}\x{6570}\x{6572}\x{6574}\x{6575}\x{6577}\x{6578}\x{6582}\x{6583}' . '\x{6587}\x{6588}\x{6589}\x{658C}\x{658E}\x{6590}\x{6591}\x{6597}\x{6599}' . '\x{659B}\x{659C}\x{659F}\x{65A1}\x{65A4}\x{65A5}\x{65A7}\x{65AB}\x{65AC}' . '\x{65AD}\x{65AF}\x{65B0}\x{65B7}\x{65B9}\x{65BC}\x{65BD}\x{65C1}\x{65C3}' . '\x{65C4}\x{65C5}\x{65C6}\x{65CB}\x{65CC}\x{65CF}\x{65D2}\x{65D7}\x{65D9}' . '\x{65DB}\x{65E0}\x{65E1}\x{65E2}\x{65E5}\x{65E6}\x{65E7}\x{65E8}\x{65E9}' . '\x{65EC}\x{65ED}\x{65F1}\x{65FA}\x{65FB}\x{6602}\x{6603}\x{6606}\x{6607}' . '\x{660A}\x{660C}\x{660E}\x{660F}\x{6613}\x{6614}\x{661C}\x{661F}\x{6620}' . '\x{6625}\x{6627}\x{6628}\x{662D}\x{662F}\x{6634}\x{6635}\x{6636}\x{663C}' . '\x{663F}\x{6641}\x{6642}\x{6643}\x{6644}\x{6649}\x{664B}\x{664F}\x{6652}' . '\x{665D}\x{665E}\x{665F}\x{6662}\x{6664}\x{6666}\x{6667}\x{6668}\x{6669}' . '\x{666E}\x{666F}\x{6670}\x{6674}\x{6676}\x{667A}\x{6681}\x{6683}\x{6684}' . '\x{6687}\x{6688}\x{6689}\x{668E}\x{6691}\x{6696}\x{6697}\x{6698}\x{669D}' . '\x{66A2}\x{66A6}\x{66AB}\x{66AE}\x{66B4}\x{66B8}\x{66B9}\x{66BC}\x{66BE}' . '\x{66C1}\x{66C4}\x{66C7}\x{66C9}\x{66D6}\x{66D9}\x{66DA}\x{66DC}\x{66DD}' . '\x{66E0}\x{66E6}\x{66E9}\x{66F0}\x{66F2}\x{66F3}\x{66F4}\x{66F5}\x{66F7}' . '\x{66F8}\x{66F9}\x{66FC}\x{66FD}\x{66FE}\x{66FF}\x{6700}\x{6703}\x{6708}' . '\x{6709}\x{670B}\x{670D}\x{670F}\x{6714}\x{6715}\x{6716}\x{6717}\x{671B}' . '\x{671D}\x{671E}\x{671F}\x{6726}\x{6727}\x{6728}\x{672A}\x{672B}\x{672C}' . '\x{672D}\x{672E}\x{6731}\x{6734}\x{6736}\x{6737}\x{6738}\x{673A}\x{673D}' . '\x{673F}\x{6741}\x{6746}\x{6749}\x{674E}\x{674F}\x{6750}\x{6751}\x{6753}' . '\x{6756}\x{6759}\x{675C}\x{675E}\x{675F}\x{6760}\x{6761}\x{6762}\x{6763}' . '\x{6764}\x{6765}\x{676A}\x{676D}\x{676F}\x{6770}\x{6771}\x{6772}\x{6773}' . '\x{6775}\x{6777}\x{677C}\x{677E}\x{677F}\x{6785}\x{6787}\x{6789}\x{678B}' . '\x{678C}\x{6790}\x{6795}\x{6797}\x{679A}\x{679C}\x{679D}\x{67A0}\x{67A1}' . '\x{67A2}\x{67A6}\x{67A9}\x{67AF}\x{67B3}\x{67B4}\x{67B6}\x{67B7}\x{67B8}' . '\x{67B9}\x{67C1}\x{67C4}\x{67C6}\x{67CA}\x{67CE}\x{67CF}\x{67D0}\x{67D1}' . '\x{67D3}\x{67D4}\x{67D8}\x{67DA}\x{67DD}\x{67DE}\x{67E2}\x{67E4}\x{67E7}' . '\x{67E9}\x{67EC}\x{67EE}\x{67EF}\x{67F1}\x{67F3}\x{67F4}\x{67F5}\x{67FB}' . '\x{67FE}\x{67FF}\x{6802}\x{6803}\x{6804}\x{6813}\x{6816}\x{6817}\x{681E}' . '\x{6821}\x{6822}\x{6829}\x{682A}\x{682B}\x{6832}\x{6834}\x{6838}\x{6839}' . '\x{683C}\x{683D}\x{6840}\x{6841}\x{6842}\x{6843}\x{6846}\x{6848}\x{684D}' . '\x{684E}\x{6850}\x{6851}\x{6853}\x{6854}\x{6859}\x{685C}\x{685D}\x{685F}' . '\x{6863}\x{6867}\x{6874}\x{6876}\x{6877}\x{687E}\x{687F}\x{6881}\x{6883}' . '\x{6885}\x{688D}\x{688F}\x{6893}\x{6894}\x{6897}\x{689B}\x{689D}\x{689F}' . '\x{68A0}\x{68A2}\x{68A6}\x{68A7}\x{68A8}\x{68AD}\x{68AF}\x{68B0}\x{68B1}' . '\x{68B3}\x{68B5}\x{68B6}\x{68B9}\x{68BA}\x{68BC}\x{68C4}\x{68C6}\x{68C9}' . '\x{68CA}\x{68CB}\x{68CD}\x{68D2}\x{68D4}\x{68D5}\x{68D7}\x{68D8}\x{68DA}' . '\x{68DF}\x{68E0}\x{68E1}\x{68E3}\x{68E7}\x{68EE}\x{68EF}\x{68F2}\x{68F9}' . '\x{68FA}\x{6900}\x{6901}\x{6904}\x{6905}\x{6908}\x{690B}\x{690C}\x{690D}' . '\x{690E}\x{690F}\x{6912}\x{6919}\x{691A}\x{691B}\x{691C}\x{6921}\x{6922}' . '\x{6923}\x{6925}\x{6926}\x{6928}\x{692A}\x{6930}\x{6934}\x{6936}\x{6939}' . '\x{693D}\x{693F}\x{694A}\x{6953}\x{6954}\x{6955}\x{6959}\x{695A}\x{695C}' . '\x{695D}\x{695E}\x{6960}\x{6961}\x{6962}\x{696A}\x{696B}\x{696D}\x{696E}' . '\x{696F}\x{6973}\x{6974}\x{6975}\x{6977}\x{6978}\x{6979}\x{697C}\x{697D}' . '\x{697E}\x{6981}\x{6982}\x{698A}\x{698E}\x{6991}\x{6994}\x{6995}\x{699B}' . '\x{699C}\x{69A0}\x{69A7}\x{69AE}\x{69B1}\x{69B2}\x{69B4}\x{69BB}\x{69BE}' . '\x{69BF}\x{69C1}\x{69C3}\x{69C7}\x{69CA}\x{69CB}\x{69CC}\x{69CD}\x{69CE}' . '\x{69D0}\x{69D3}\x{69D8}\x{69D9}\x{69DD}\x{69DE}\x{69E7}\x{69E8}\x{69EB}' . '\x{69ED}\x{69F2}\x{69F9}\x{69FB}\x{69FD}\x{69FF}\x{6A02}\x{6A05}\x{6A0A}' . '\x{6A0B}\x{6A0C}\x{6A12}\x{6A13}\x{6A14}\x{6A17}\x{6A19}\x{6A1B}\x{6A1E}' . '\x{6A1F}\x{6A21}\x{6A22}\x{6A23}\x{6A29}\x{6A2A}\x{6A2B}\x{6A2E}\x{6A35}' . '\x{6A36}\x{6A38}\x{6A39}\x{6A3A}\x{6A3D}\x{6A44}\x{6A47}\x{6A48}\x{6A4B}' . '\x{6A58}\x{6A59}\x{6A5F}\x{6A61}\x{6A62}\x{6A66}\x{6A72}\x{6A78}\x{6A7F}' . '\x{6A80}\x{6A84}\x{6A8D}\x{6A8E}\x{6A90}\x{6A97}\x{6A9C}\x{6AA0}\x{6AA2}' . '\x{6AA3}\x{6AAA}\x{6AAC}\x{6AAE}\x{6AB3}\x{6AB8}\x{6ABB}\x{6AC1}\x{6AC2}' . '\x{6AC3}\x{6AD1}\x{6AD3}\x{6ADA}\x{6ADB}\x{6ADE}\x{6ADF}\x{6AE8}\x{6AEA}' . '\x{6AFA}\x{6AFB}\x{6B04}\x{6B05}\x{6B0A}\x{6B12}\x{6B16}\x{6B1D}\x{6B1F}' . '\x{6B20}\x{6B21}\x{6B23}\x{6B27}\x{6B32}\x{6B37}\x{6B38}\x{6B39}\x{6B3A}' . '\x{6B3D}\x{6B3E}\x{6B43}\x{6B47}\x{6B49}\x{6B4C}\x{6B4E}\x{6B50}\x{6B53}' . '\x{6B54}\x{6B59}\x{6B5B}\x{6B5F}\x{6B61}\x{6B62}\x{6B63}\x{6B64}\x{6B66}' . '\x{6B69}\x{6B6A}\x{6B6F}\x{6B73}\x{6B74}\x{6B78}\x{6B79}\x{6B7B}\x{6B7F}' . '\x{6B80}\x{6B83}\x{6B84}\x{6B86}\x{6B89}\x{6B8A}\x{6B8B}\x{6B8D}\x{6B95}' . '\x{6B96}\x{6B98}\x{6B9E}\x{6BA4}\x{6BAA}\x{6BAB}\x{6BAF}\x{6BB1}\x{6BB2}' . '\x{6BB3}\x{6BB4}\x{6BB5}\x{6BB7}\x{6BBA}\x{6BBB}\x{6BBC}\x{6BBF}\x{6BC0}' . '\x{6BC5}\x{6BC6}\x{6BCB}\x{6BCD}\x{6BCE}\x{6BD2}\x{6BD3}\x{6BD4}\x{6BD8}' . '\x{6BDB}\x{6BDF}\x{6BEB}\x{6BEC}\x{6BEF}\x{6BF3}\x{6C08}\x{6C0F}\x{6C11}' . '\x{6C13}\x{6C14}\x{6C17}\x{6C1B}\x{6C23}\x{6C24}\x{6C34}\x{6C37}\x{6C38}' . '\x{6C3E}\x{6C40}\x{6C41}\x{6C42}\x{6C4E}\x{6C50}\x{6C55}\x{6C57}\x{6C5A}' . '\x{6C5D}\x{6C5E}\x{6C5F}\x{6C60}\x{6C62}\x{6C68}\x{6C6A}\x{6C70}\x{6C72}' . '\x{6C73}\x{6C7A}\x{6C7D}\x{6C7E}\x{6C81}\x{6C82}\x{6C83}\x{6C88}\x{6C8C}' . '\x{6C8D}\x{6C90}\x{6C92}\x{6C93}\x{6C96}\x{6C99}\x{6C9A}\x{6C9B}\x{6CA1}' . '\x{6CA2}\x{6CAB}\x{6CAE}\x{6CB1}\x{6CB3}\x{6CB8}\x{6CB9}\x{6CBA}\x{6CBB}' . '\x{6CBC}\x{6CBD}\x{6CBE}\x{6CBF}\x{6CC1}\x{6CC4}\x{6CC5}\x{6CC9}\x{6CCA}' . '\x{6CCC}\x{6CD3}\x{6CD5}\x{6CD7}\x{6CD9}\x{6CDB}\x{6CDD}\x{6CE1}\x{6CE2}' . '\x{6CE3}\x{6CE5}\x{6CE8}\x{6CEA}\x{6CEF}\x{6CF0}\x{6CF1}\x{6CF3}\x{6D0B}' . '\x{6D0C}\x{6D12}\x{6D17}\x{6D19}\x{6D1B}\x{6D1E}\x{6D1F}\x{6D25}\x{6D29}' . '\x{6D2A}\x{6D2B}\x{6D32}\x{6D33}\x{6D35}\x{6D36}\x{6D38}\x{6D3B}\x{6D3D}' . '\x{6D3E}\x{6D41}\x{6D44}\x{6D45}\x{6D59}\x{6D5A}\x{6D5C}\x{6D63}\x{6D64}' . '\x{6D66}\x{6D69}\x{6D6A}\x{6D6C}\x{6D6E}\x{6D74}\x{6D77}\x{6D78}\x{6D79}' . '\x{6D85}\x{6D88}\x{6D8C}\x{6D8E}\x{6D93}\x{6D95}\x{6D99}\x{6D9B}\x{6D9C}' . '\x{6DAF}\x{6DB2}\x{6DB5}\x{6DB8}\x{6DBC}\x{6DC0}\x{6DC5}\x{6DC6}\x{6DC7}' . '\x{6DCB}\x{6DCC}\x{6DD1}\x{6DD2}\x{6DD5}\x{6DD8}\x{6DD9}\x{6DDE}\x{6DE1}' . '\x{6DE4}\x{6DE6}\x{6DE8}\x{6DEA}\x{6DEB}\x{6DEC}\x{6DEE}\x{6DF1}\x{6DF3}' . '\x{6DF5}\x{6DF7}\x{6DF9}\x{6DFA}\x{6DFB}\x{6E05}\x{6E07}\x{6E08}\x{6E09}' . '\x{6E0A}\x{6E0B}\x{6E13}\x{6E15}\x{6E19}\x{6E1A}\x{6E1B}\x{6E1D}\x{6E1F}' . '\x{6E20}\x{6E21}\x{6E23}\x{6E24}\x{6E25}\x{6E26}\x{6E29}\x{6E2B}\x{6E2C}' . '\x{6E2D}\x{6E2E}\x{6E2F}\x{6E38}\x{6E3A}\x{6E3E}\x{6E43}\x{6E4A}\x{6E4D}' . '\x{6E4E}\x{6E56}\x{6E58}\x{6E5B}\x{6E5F}\x{6E67}\x{6E6B}\x{6E6E}\x{6E6F}' . '\x{6E72}\x{6E76}\x{6E7E}\x{6E7F}\x{6E80}\x{6E82}\x{6E8C}\x{6E8F}\x{6E90}' . '\x{6E96}\x{6E98}\x{6E9C}\x{6E9D}\x{6E9F}\x{6EA2}\x{6EA5}\x{6EAA}\x{6EAF}' . '\x{6EB2}\x{6EB6}\x{6EB7}\x{6EBA}\x{6EBD}\x{6EC2}\x{6EC4}\x{6EC5}\x{6EC9}' . '\x{6ECB}\x{6ECC}\x{6ED1}\x{6ED3}\x{6ED4}\x{6ED5}\x{6EDD}\x{6EDE}\x{6EEC}' . '\x{6EEF}\x{6EF2}\x{6EF4}\x{6EF7}\x{6EF8}\x{6EFE}\x{6EFF}\x{6F01}\x{6F02}' . '\x{6F06}\x{6F09}\x{6F0F}\x{6F11}\x{6F13}\x{6F14}\x{6F15}\x{6F20}\x{6F22}' . '\x{6F23}\x{6F2B}\x{6F2C}\x{6F31}\x{6F32}\x{6F38}\x{6F3E}\x{6F3F}\x{6F41}' . '\x{6F45}\x{6F54}\x{6F58}\x{6F5B}\x{6F5C}\x{6F5F}\x{6F64}\x{6F66}\x{6F6D}' . '\x{6F6E}\x{6F6F}\x{6F70}\x{6F74}\x{6F78}\x{6F7A}\x{6F7C}\x{6F80}\x{6F81}' . '\x{6F82}\x{6F84}\x{6F86}\x{6F8E}\x{6F91}\x{6F97}\x{6FA1}\x{6FA3}\x{6FA4}' . '\x{6FAA}\x{6FB1}\x{6FB3}\x{6FB9}\x{6FC0}\x{6FC1}\x{6FC2}\x{6FC3}\x{6FC6}' . '\x{6FD4}\x{6FD5}\x{6FD8}\x{6FDB}\x{6FDF}\x{6FE0}\x{6FE1}\x{6FE4}\x{6FEB}' . '\x{6FEC}\x{6FEE}\x{6FEF}\x{6FF1}\x{6FF3}\x{6FF6}\x{6FFA}\x{6FFE}\x{7001}' . '\x{7009}\x{700B}\x{700F}\x{7011}\x{7015}\x{7018}\x{701A}\x{701B}\x{701D}' . '\x{701E}\x{701F}\x{7026}\x{7027}\x{702C}\x{7030}\x{7032}\x{703E}\x{704C}' . '\x{7051}\x{7058}\x{7063}\x{706B}\x{706F}\x{7070}\x{7078}\x{707C}\x{707D}' . '\x{7089}\x{708A}\x{708E}\x{7092}\x{7099}\x{70AC}\x{70AD}\x{70AE}\x{70AF}' . '\x{70B3}\x{70B8}\x{70B9}\x{70BA}\x{70C8}\x{70CB}\x{70CF}\x{70D9}\x{70DD}' . '\x{70DF}\x{70F1}\x{70F9}\x{70FD}\x{7109}\x{7114}\x{7119}\x{711A}\x{711C}' . '\x{7121}\x{7126}\x{7136}\x{713C}\x{7149}\x{714C}\x{714E}\x{7155}\x{7156}' . '\x{7159}\x{7162}\x{7164}\x{7165}\x{7166}\x{7167}\x{7169}\x{716C}\x{716E}' . '\x{717D}\x{7184}\x{7188}\x{718A}\x{718F}\x{7194}\x{7195}\x{7199}\x{719F}' . '\x{71A8}\x{71AC}\x{71B1}\x{71B9}\x{71BE}\x{71C3}\x{71C8}\x{71C9}\x{71CE}' . '\x{71D0}\x{71D2}\x{71D4}\x{71D5}\x{71D7}\x{71DF}\x{71E0}\x{71E5}\x{71E6}' . '\x{71E7}\x{71EC}\x{71ED}\x{71EE}\x{71F5}\x{71F9}\x{71FB}\x{71FC}\x{71FF}' . '\x{7206}\x{720D}\x{7210}\x{721B}\x{7228}\x{722A}\x{722C}\x{722D}\x{7230}' . '\x{7232}\x{7235}\x{7236}\x{723A}\x{723B}\x{723C}\x{723D}\x{723E}\x{723F}' . '\x{7240}\x{7246}\x{7247}\x{7248}\x{724B}\x{724C}\x{7252}\x{7258}\x{7259}' . '\x{725B}\x{725D}\x{725F}\x{7261}\x{7262}\x{7267}\x{7269}\x{7272}\x{7274}' . '\x{7279}\x{727D}\x{727E}\x{7280}\x{7281}\x{7282}\x{7287}\x{7292}\x{7296}' . '\x{72A0}\x{72A2}\x{72A7}\x{72AC}\x{72AF}\x{72B2}\x{72B6}\x{72B9}\x{72C2}' . '\x{72C3}\x{72C4}\x{72C6}\x{72CE}\x{72D0}\x{72D2}\x{72D7}\x{72D9}\x{72DB}' . '\x{72E0}\x{72E1}\x{72E2}\x{72E9}\x{72EC}\x{72ED}\x{72F7}\x{72F8}\x{72F9}' . '\x{72FC}\x{72FD}\x{730A}\x{7316}\x{7317}\x{731B}\x{731C}\x{731D}\x{731F}' . '\x{7325}\x{7329}\x{732A}\x{732B}\x{732E}\x{732F}\x{7334}\x{7336}\x{7337}' . '\x{733E}\x{733F}\x{7344}\x{7345}\x{734E}\x{734F}\x{7357}\x{7363}\x{7368}' . '\x{736A}\x{7370}\x{7372}\x{7375}\x{7378}\x{737A}\x{737B}\x{7384}\x{7387}' . '\x{7389}\x{738B}\x{7396}\x{73A9}\x{73B2}\x{73B3}\x{73BB}\x{73C0}\x{73C2}' . '\x{73C8}\x{73CA}\x{73CD}\x{73CE}\x{73DE}\x{73E0}\x{73E5}\x{73EA}\x{73ED}' . '\x{73EE}\x{73F1}\x{73F8}\x{73FE}\x{7403}\x{7405}\x{7406}\x{7409}\x{7422}' . '\x{7425}\x{7432}\x{7433}\x{7434}\x{7435}\x{7436}\x{743A}\x{743F}\x{7441}' . '\x{7455}\x{7459}\x{745A}\x{745B}\x{745C}\x{745E}\x{745F}\x{7460}\x{7463}' . '\x{7464}\x{7469}\x{746A}\x{746F}\x{7470}\x{7473}\x{7476}\x{747E}\x{7483}' . '\x{748B}\x{749E}\x{74A2}\x{74A7}\x{74B0}\x{74BD}\x{74CA}\x{74CF}\x{74D4}' . '\x{74DC}\x{74E0}\x{74E2}\x{74E3}\x{74E6}\x{74E7}\x{74E9}\x{74EE}\x{74F0}' . '\x{74F1}\x{74F2}\x{74F6}\x{74F7}\x{74F8}\x{7503}\x{7504}\x{7505}\x{750C}' . '\x{750D}\x{750E}\x{7511}\x{7513}\x{7515}\x{7518}\x{751A}\x{751C}\x{751E}' . '\x{751F}\x{7523}\x{7525}\x{7526}\x{7528}\x{752B}\x{752C}\x{7530}\x{7531}' . '\x{7532}\x{7533}\x{7537}\x{7538}\x{753A}\x{753B}\x{753C}\x{7544}\x{7546}' . '\x{7549}\x{754A}\x{754B}\x{754C}\x{754D}\x{754F}\x{7551}\x{7554}\x{7559}' . '\x{755A}\x{755B}\x{755C}\x{755D}\x{7560}\x{7562}\x{7564}\x{7565}\x{7566}' . '\x{7567}\x{7569}\x{756A}\x{756B}\x{756D}\x{7570}\x{7573}\x{7574}\x{7576}' . '\x{7577}\x{7578}\x{757F}\x{7582}\x{7586}\x{7587}\x{7589}\x{758A}\x{758B}' . '\x{758E}\x{758F}\x{7591}\x{7594}\x{759A}\x{759D}\x{75A3}\x{75A5}\x{75AB}' . '\x{75B1}\x{75B2}\x{75B3}\x{75B5}\x{75B8}\x{75B9}\x{75BC}\x{75BD}\x{75BE}' . '\x{75C2}\x{75C3}\x{75C5}\x{75C7}\x{75CA}\x{75CD}\x{75D2}\x{75D4}\x{75D5}' . '\x{75D8}\x{75D9}\x{75DB}\x{75DE}\x{75E2}\x{75E3}\x{75E9}\x{75F0}\x{75F2}' . '\x{75F3}\x{75F4}\x{75FA}\x{75FC}\x{75FE}\x{75FF}\x{7601}\x{7609}\x{760B}' . '\x{760D}\x{761F}\x{7620}\x{7621}\x{7622}\x{7624}\x{7627}\x{7630}\x{7634}' . '\x{763B}\x{7642}\x{7646}\x{7647}\x{7648}\x{764C}\x{7652}\x{7656}\x{7658}' . '\x{765C}\x{7661}\x{7662}\x{7667}\x{7668}\x{7669}\x{766A}\x{766C}\x{7670}' . '\x{7672}\x{7676}\x{7678}\x{767A}\x{767B}\x{767C}\x{767D}\x{767E}\x{7680}' . '\x{7683}\x{7684}\x{7686}\x{7687}\x{7688}\x{768B}\x{768E}\x{7690}\x{7693}' . '\x{7696}\x{7699}\x{769A}\x{76AE}\x{76B0}\x{76B4}\x{76B7}\x{76B8}\x{76B9}' . '\x{76BA}\x{76BF}\x{76C2}\x{76C3}\x{76C6}\x{76C8}\x{76CA}\x{76CD}\x{76D2}' . '\x{76D6}\x{76D7}\x{76DB}\x{76DC}\x{76DE}\x{76DF}\x{76E1}\x{76E3}\x{76E4}' . '\x{76E5}\x{76E7}\x{76EA}\x{76EE}\x{76F2}\x{76F4}\x{76F8}\x{76FB}\x{76FE}' . '\x{7701}\x{7704}\x{7707}\x{7708}\x{7709}\x{770B}\x{770C}\x{771B}\x{771E}' . '\x{771F}\x{7720}\x{7724}\x{7725}\x{7726}\x{7729}\x{7737}\x{7738}\x{773A}' . '\x{773C}\x{7740}\x{7747}\x{775A}\x{775B}\x{7761}\x{7763}\x{7765}\x{7766}' . '\x{7768}\x{776B}\x{7779}\x{777E}\x{777F}\x{778B}\x{778E}\x{7791}\x{779E}' . '\x{77A0}\x{77A5}\x{77AC}\x{77AD}\x{77B0}\x{77B3}\x{77B6}\x{77B9}\x{77BB}' . '\x{77BC}\x{77BD}\x{77BF}\x{77C7}\x{77CD}\x{77D7}\x{77DA}\x{77DB}\x{77DC}' . '\x{77E2}\x{77E3}\x{77E5}\x{77E7}\x{77E9}\x{77ED}\x{77EE}\x{77EF}\x{77F3}' . '\x{77FC}\x{7802}\x{780C}\x{7812}\x{7814}\x{7815}\x{7820}\x{7825}\x{7826}' . '\x{7827}\x{7832}\x{7834}\x{783A}\x{783F}\x{7845}\x{785D}\x{786B}\x{786C}' . '\x{786F}\x{7872}\x{7874}\x{787C}\x{7881}\x{7886}\x{7887}\x{788C}\x{788D}' . '\x{788E}\x{7891}\x{7893}\x{7895}\x{7897}\x{789A}\x{78A3}\x{78A7}\x{78A9}' . '\x{78AA}\x{78AF}\x{78B5}\x{78BA}\x{78BC}\x{78BE}\x{78C1}\x{78C5}\x{78C6}' . '\x{78CA}\x{78CB}\x{78D0}\x{78D1}\x{78D4}\x{78DA}\x{78E7}\x{78E8}\x{78EC}' . '\x{78EF}\x{78F4}\x{78FD}\x{7901}\x{7907}\x{790E}\x{7911}\x{7912}\x{7919}' . '\x{7926}\x{792A}\x{792B}\x{792C}\x{793A}\x{793C}\x{793E}\x{7940}\x{7941}' . '\x{7947}\x{7948}\x{7949}\x{7950}\x{7953}\x{7955}\x{7956}\x{7957}\x{795A}' . '\x{795D}\x{795E}\x{795F}\x{7960}\x{7962}\x{7965}\x{7968}\x{796D}\x{7977}' . '\x{797A}\x{797F}\x{7980}\x{7981}\x{7984}\x{7985}\x{798A}\x{798D}\x{798E}' . '\x{798F}\x{799D}\x{79A6}\x{79A7}\x{79AA}\x{79AE}\x{79B0}\x{79B3}\x{79B9}' . '\x{79BA}\x{79BD}\x{79BE}\x{79BF}\x{79C0}\x{79C1}\x{79C9}\x{79CB}\x{79D1}' . '\x{79D2}\x{79D5}\x{79D8}\x{79DF}\x{79E1}\x{79E3}\x{79E4}\x{79E6}\x{79E7}' . '\x{79E9}\x{79EC}\x{79F0}\x{79FB}\x{7A00}\x{7A08}\x{7A0B}\x{7A0D}\x{7A0E}' . '\x{7A14}\x{7A17}\x{7A18}\x{7A19}\x{7A1A}\x{7A1C}\x{7A1F}\x{7A20}\x{7A2E}' . '\x{7A31}\x{7A32}\x{7A37}\x{7A3B}\x{7A3C}\x{7A3D}\x{7A3E}\x{7A3F}\x{7A40}' . '\x{7A42}\x{7A43}\x{7A46}\x{7A49}\x{7A4D}\x{7A4E}\x{7A4F}\x{7A50}\x{7A57}' . '\x{7A61}\x{7A62}\x{7A63}\x{7A69}\x{7A6B}\x{7A70}\x{7A74}\x{7A76}\x{7A79}' . '\x{7A7A}\x{7A7D}\x{7A7F}\x{7A81}\x{7A83}\x{7A84}\x{7A88}\x{7A92}\x{7A93}' . '\x{7A95}\x{7A96}\x{7A97}\x{7A98}\x{7A9F}\x{7AA9}\x{7AAA}\x{7AAE}\x{7AAF}' . '\x{7AB0}\x{7AB6}\x{7ABA}\x{7ABF}\x{7AC3}\x{7AC4}\x{7AC5}\x{7AC7}\x{7AC8}' . '\x{7ACA}\x{7ACB}\x{7ACD}\x{7ACF}\x{7AD2}\x{7AD3}\x{7AD5}\x{7AD9}\x{7ADA}' . '\x{7ADC}\x{7ADD}\x{7ADF}\x{7AE0}\x{7AE1}\x{7AE2}\x{7AE3}\x{7AE5}\x{7AE6}' . '\x{7AEA}\x{7AED}\x{7AEF}\x{7AF0}\x{7AF6}\x{7AF8}\x{7AF9}\x{7AFA}\x{7AFF}' . '\x{7B02}\x{7B04}\x{7B06}\x{7B08}\x{7B0A}\x{7B0B}\x{7B0F}\x{7B11}\x{7B18}' . '\x{7B19}\x{7B1B}\x{7B1E}\x{7B20}\x{7B25}\x{7B26}\x{7B28}\x{7B2C}\x{7B33}' . '\x{7B35}\x{7B36}\x{7B39}\x{7B45}\x{7B46}\x{7B48}\x{7B49}\x{7B4B}\x{7B4C}' . '\x{7B4D}\x{7B4F}\x{7B50}\x{7B51}\x{7B52}\x{7B54}\x{7B56}\x{7B5D}\x{7B65}' . '\x{7B67}\x{7B6C}\x{7B6E}\x{7B70}\x{7B71}\x{7B74}\x{7B75}\x{7B7A}\x{7B86}' . '\x{7B87}\x{7B8B}\x{7B8D}\x{7B8F}\x{7B92}\x{7B94}\x{7B95}\x{7B97}\x{7B98}' . '\x{7B99}\x{7B9A}\x{7B9C}\x{7B9D}\x{7B9F}\x{7BA1}\x{7BAA}\x{7BAD}\x{7BB1}' . '\x{7BB4}\x{7BB8}\x{7BC0}\x{7BC1}\x{7BC4}\x{7BC6}\x{7BC7}\x{7BC9}\x{7BCB}' . '\x{7BCC}\x{7BCF}\x{7BDD}\x{7BE0}\x{7BE4}\x{7BE5}\x{7BE6}\x{7BE9}\x{7BED}' . '\x{7BF3}\x{7BF6}\x{7BF7}\x{7C00}\x{7C07}\x{7C0D}\x{7C11}\x{7C12}\x{7C13}' . '\x{7C14}\x{7C17}\x{7C1F}\x{7C21}\x{7C23}\x{7C27}\x{7C2A}\x{7C2B}\x{7C37}' . '\x{7C38}\x{7C3D}\x{7C3E}\x{7C3F}\x{7C40}\x{7C43}\x{7C4C}\x{7C4D}\x{7C4F}' . '\x{7C50}\x{7C54}\x{7C56}\x{7C58}\x{7C5F}\x{7C60}\x{7C64}\x{7C65}\x{7C6C}' . '\x{7C73}\x{7C75}\x{7C7E}\x{7C81}\x{7C82}\x{7C83}\x{7C89}\x{7C8B}\x{7C8D}' . '\x{7C90}\x{7C92}\x{7C95}\x{7C97}\x{7C98}\x{7C9B}\x{7C9F}\x{7CA1}\x{7CA2}' . '\x{7CA4}\x{7CA5}\x{7CA7}\x{7CA8}\x{7CAB}\x{7CAD}\x{7CAE}\x{7CB1}\x{7CB2}' . '\x{7CB3}\x{7CB9}\x{7CBD}\x{7CBE}\x{7CC0}\x{7CC2}\x{7CC5}\x{7CCA}\x{7CCE}' . '\x{7CD2}\x{7CD6}\x{7CD8}\x{7CDC}\x{7CDE}\x{7CDF}\x{7CE0}\x{7CE2}\x{7CE7}' . '\x{7CEF}\x{7CF2}\x{7CF4}\x{7CF6}\x{7CF8}\x{7CFA}\x{7CFB}\x{7CFE}\x{7D00}' . '\x{7D02}\x{7D04}\x{7D05}\x{7D06}\x{7D0A}\x{7D0B}\x{7D0D}\x{7D10}\x{7D14}' . '\x{7D15}\x{7D17}\x{7D18}\x{7D19}\x{7D1A}\x{7D1B}\x{7D1C}\x{7D20}\x{7D21}' . '\x{7D22}\x{7D2B}\x{7D2C}\x{7D2E}\x{7D2F}\x{7D30}\x{7D32}\x{7D33}\x{7D35}' . '\x{7D39}\x{7D3A}\x{7D3F}\x{7D42}\x{7D43}\x{7D44}\x{7D45}\x{7D46}\x{7D4B}' . '\x{7D4C}\x{7D4E}\x{7D4F}\x{7D50}\x{7D56}\x{7D5B}\x{7D5E}\x{7D61}\x{7D62}' . '\x{7D63}\x{7D66}\x{7D68}\x{7D6E}\x{7D71}\x{7D72}\x{7D73}\x{7D75}\x{7D76}' . '\x{7D79}\x{7D7D}\x{7D89}\x{7D8F}\x{7D93}\x{7D99}\x{7D9A}\x{7D9B}\x{7D9C}' . '\x{7D9F}\x{7DA2}\x{7DA3}\x{7DAB}\x{7DAC}\x{7DAD}\x{7DAE}\x{7DAF}\x{7DB0}' . '\x{7DB1}\x{7DB2}\x{7DB4}\x{7DB5}\x{7DB8}\x{7DBA}\x{7DBB}\x{7DBD}\x{7DBE}' . '\x{7DBF}\x{7DC7}\x{7DCA}\x{7DCB}\x{7DCF}\x{7DD1}\x{7DD2}\x{7DD5}\x{7DD8}' . '\x{7DDA}\x{7DDC}\x{7DDD}\x{7DDE}\x{7DE0}\x{7DE1}\x{7DE4}\x{7DE8}\x{7DE9}' . '\x{7DEC}\x{7DEF}\x{7DF2}\x{7DF4}\x{7DFB}\x{7E01}\x{7E04}\x{7E05}\x{7E09}' . '\x{7E0A}\x{7E0B}\x{7E12}\x{7E1B}\x{7E1E}\x{7E1F}\x{7E21}\x{7E22}\x{7E23}' . '\x{7E26}\x{7E2B}\x{7E2E}\x{7E31}\x{7E32}\x{7E35}\x{7E37}\x{7E39}\x{7E3A}' . '\x{7E3B}\x{7E3D}\x{7E3E}\x{7E41}\x{7E43}\x{7E46}\x{7E4A}\x{7E4B}\x{7E4D}' . '\x{7E54}\x{7E55}\x{7E56}\x{7E59}\x{7E5A}\x{7E5D}\x{7E5E}\x{7E66}\x{7E67}' . '\x{7E69}\x{7E6A}\x{7E6D}\x{7E70}\x{7E79}\x{7E7B}\x{7E7C}\x{7E7D}\x{7E7F}' . '\x{7E82}\x{7E83}\x{7E88}\x{7E89}\x{7E8C}\x{7E8E}\x{7E8F}\x{7E90}\x{7E92}' . '\x{7E93}\x{7E94}\x{7E96}\x{7E9B}\x{7E9C}\x{7F36}\x{7F38}\x{7F3A}\x{7F45}' . '\x{7F4C}\x{7F4D}\x{7F4E}\x{7F50}\x{7F51}\x{7F54}\x{7F55}\x{7F58}\x{7F5F}' . '\x{7F60}\x{7F67}\x{7F68}\x{7F69}\x{7F6A}\x{7F6B}\x{7F6E}\x{7F70}\x{7F72}' . '\x{7F75}\x{7F77}\x{7F78}\x{7F79}\x{7F82}\x{7F83}\x{7F85}\x{7F86}\x{7F87}' . '\x{7F88}\x{7F8A}\x{7F8C}\x{7F8E}\x{7F94}\x{7F9A}\x{7F9D}\x{7F9E}\x{7FA3}' . '\x{7FA4}\x{7FA8}\x{7FA9}\x{7FAE}\x{7FAF}\x{7FB2}\x{7FB6}\x{7FB8}\x{7FB9}' . '\x{7FBD}\x{7FC1}\x{7FC5}\x{7FC6}\x{7FCA}\x{7FCC}\x{7FD2}\x{7FD4}\x{7FD5}' . '\x{7FE0}\x{7FE1}\x{7FE6}\x{7FE9}\x{7FEB}\x{7FF0}\x{7FF3}\x{7FF9}\x{7FFB}' . '\x{7FFC}\x{8000}\x{8001}\x{8003}\x{8004}\x{8005}\x{8006}\x{800B}\x{800C}' . '\x{8010}\x{8012}\x{8015}\x{8017}\x{8018}\x{8019}\x{801C}\x{8021}\x{8028}' . '\x{8033}\x{8036}\x{803B}\x{803D}\x{803F}\x{8046}\x{804A}\x{8052}\x{8056}' . '\x{8058}\x{805A}\x{805E}\x{805F}\x{8061}\x{8062}\x{8068}\x{806F}\x{8070}' . '\x{8072}\x{8073}\x{8074}\x{8076}\x{8077}\x{8079}\x{807D}\x{807E}\x{807F}' . '\x{8084}\x{8085}\x{8086}\x{8087}\x{8089}\x{808B}\x{808C}\x{8093}\x{8096}' . '\x{8098}\x{809A}\x{809B}\x{809D}\x{80A1}\x{80A2}\x{80A5}\x{80A9}\x{80AA}' . '\x{80AC}\x{80AD}\x{80AF}\x{80B1}\x{80B2}\x{80B4}\x{80BA}\x{80C3}\x{80C4}' . '\x{80C6}\x{80CC}\x{80CE}\x{80D6}\x{80D9}\x{80DA}\x{80DB}\x{80DD}\x{80DE}' . '\x{80E1}\x{80E4}\x{80E5}\x{80EF}\x{80F1}\x{80F4}\x{80F8}\x{80FC}\x{80FD}' . '\x{8102}\x{8105}\x{8106}\x{8107}\x{8108}\x{8109}\x{810A}\x{811A}\x{811B}' . '\x{8123}\x{8129}\x{812F}\x{8131}\x{8133}\x{8139}\x{813E}\x{8146}\x{814B}' . '\x{814E}\x{8150}\x{8151}\x{8153}\x{8154}\x{8155}\x{815F}\x{8165}\x{8166}' . '\x{816B}\x{816E}\x{8170}\x{8171}\x{8174}\x{8178}\x{8179}\x{817A}\x{817F}' . '\x{8180}\x{8182}\x{8183}\x{8188}\x{818A}\x{818F}\x{8193}\x{8195}\x{819A}' . '\x{819C}\x{819D}\x{81A0}\x{81A3}\x{81A4}\x{81A8}\x{81A9}\x{81B0}\x{81B3}' . '\x{81B5}\x{81B8}\x{81BA}\x{81BD}\x{81BE}\x{81BF}\x{81C0}\x{81C2}\x{81C6}' . '\x{81C8}\x{81C9}\x{81CD}\x{81D1}\x{81D3}\x{81D8}\x{81D9}\x{81DA}\x{81DF}' . '\x{81E0}\x{81E3}\x{81E5}\x{81E7}\x{81E8}\x{81EA}\x{81ED}\x{81F3}\x{81F4}' . '\x{81FA}\x{81FB}\x{81FC}\x{81FE}\x{8201}\x{8202}\x{8205}\x{8207}\x{8208}' . '\x{8209}\x{820A}\x{820C}\x{820D}\x{820E}\x{8210}\x{8212}\x{8216}\x{8217}' . '\x{8218}\x{821B}\x{821C}\x{821E}\x{821F}\x{8229}\x{822A}\x{822B}\x{822C}' . '\x{822E}\x{8233}\x{8235}\x{8236}\x{8237}\x{8238}\x{8239}\x{8240}\x{8247}' . '\x{8258}\x{8259}\x{825A}\x{825D}\x{825F}\x{8262}\x{8264}\x{8266}\x{8268}' . '\x{826A}\x{826B}\x{826E}\x{826F}\x{8271}\x{8272}\x{8276}\x{8277}\x{8278}' . '\x{827E}\x{828B}\x{828D}\x{8292}\x{8299}\x{829D}\x{829F}\x{82A5}\x{82A6}' . '\x{82AB}\x{82AC}\x{82AD}\x{82AF}\x{82B1}\x{82B3}\x{82B8}\x{82B9}\x{82BB}' . '\x{82BD}\x{82C5}\x{82D1}\x{82D2}\x{82D3}\x{82D4}\x{82D7}\x{82D9}\x{82DB}' . '\x{82DC}\x{82DE}\x{82DF}\x{82E1}\x{82E3}\x{82E5}\x{82E6}\x{82E7}\x{82EB}' . '\x{82F1}\x{82F3}\x{82F4}\x{82F9}\x{82FA}\x{82FB}\x{8302}\x{8303}\x{8304}' . '\x{8305}\x{8306}\x{8309}\x{830E}\x{8316}\x{8317}\x{8318}\x{831C}\x{8323}' . '\x{8328}\x{832B}\x{832F}\x{8331}\x{8332}\x{8334}\x{8335}\x{8336}\x{8338}' . '\x{8339}\x{8340}\x{8345}\x{8349}\x{834A}\x{834F}\x{8350}\x{8352}\x{8358}' . '\x{8373}\x{8375}\x{8377}\x{837B}\x{837C}\x{8385}\x{8387}\x{8389}\x{838A}' . '\x{838E}\x{8393}\x{8396}\x{839A}\x{839E}\x{839F}\x{83A0}\x{83A2}\x{83A8}' . '\x{83AA}\x{83AB}\x{83B1}\x{83B5}\x{83BD}\x{83C1}\x{83C5}\x{83CA}\x{83CC}' . '\x{83CE}\x{83D3}\x{83D6}\x{83D8}\x{83DC}\x{83DF}\x{83E0}\x{83E9}\x{83EB}' . '\x{83EF}\x{83F0}\x{83F1}\x{83F2}\x{83F4}\x{83F7}\x{83FB}\x{83FD}\x{8403}' . '\x{8404}\x{8407}\x{840B}\x{840C}\x{840D}\x{840E}\x{8413}\x{8420}\x{8422}' . '\x{8429}\x{842A}\x{842C}\x{8431}\x{8435}\x{8438}\x{843C}\x{843D}\x{8446}' . '\x{8449}\x{844E}\x{8457}\x{845B}\x{8461}\x{8462}\x{8463}\x{8466}\x{8469}' . '\x{846B}\x{846C}\x{846D}\x{846E}\x{846F}\x{8471}\x{8475}\x{8477}\x{8479}' . '\x{847A}\x{8482}\x{8484}\x{848B}\x{8490}\x{8494}\x{8499}\x{849C}\x{849F}' . '\x{84A1}\x{84AD}\x{84B2}\x{84B8}\x{84B9}\x{84BB}\x{84BC}\x{84BF}\x{84C1}' . '\x{84C4}\x{84C6}\x{84C9}\x{84CA}\x{84CB}\x{84CD}\x{84D0}\x{84D1}\x{84D6}' . '\x{84D9}\x{84DA}\x{84EC}\x{84EE}\x{84F4}\x{84FC}\x{84FF}\x{8500}\x{8506}' . '\x{8511}\x{8513}\x{8514}\x{8515}\x{8517}\x{8518}\x{851A}\x{851F}\x{8521}' . '\x{8526}\x{852C}\x{852D}\x{8535}\x{853D}\x{8540}\x{8541}\x{8543}\x{8548}' . '\x{8549}\x{854A}\x{854B}\x{854E}\x{8555}\x{8557}\x{8558}\x{855A}\x{8563}' . '\x{8568}\x{8569}\x{856A}\x{856D}\x{8577}\x{857E}\x{8580}\x{8584}\x{8587}' . '\x{8588}\x{858A}\x{8590}\x{8591}\x{8594}\x{8597}\x{8599}\x{859B}\x{859C}' . '\x{85A4}\x{85A6}\x{85A8}\x{85A9}\x{85AA}\x{85AB}\x{85AC}\x{85AE}\x{85AF}' . '\x{85B9}\x{85BA}\x{85C1}\x{85C9}\x{85CD}\x{85CF}\x{85D0}\x{85D5}\x{85DC}' . '\x{85DD}\x{85E4}\x{85E5}\x{85E9}\x{85EA}\x{85F7}\x{85F9}\x{85FA}\x{85FB}' . '\x{85FE}\x{8602}\x{8606}\x{8607}\x{860A}\x{860B}\x{8613}\x{8616}\x{8617}' . '\x{861A}\x{8622}\x{862D}\x{862F}\x{8630}\x{863F}\x{864D}\x{864E}\x{8650}' . '\x{8654}\x{8655}\x{865A}\x{865C}\x{865E}\x{865F}\x{8667}\x{866B}\x{8671}' . '\x{8679}\x{867B}\x{868A}\x{868B}\x{868C}\x{8693}\x{8695}\x{86A3}\x{86A4}' . '\x{86A9}\x{86AA}\x{86AB}\x{86AF}\x{86B0}\x{86B6}\x{86C4}\x{86C6}\x{86C7}' . '\x{86C9}\x{86CB}\x{86CD}\x{86CE}\x{86D4}\x{86D9}\x{86DB}\x{86DE}\x{86DF}' . '\x{86E4}\x{86E9}\x{86EC}\x{86ED}\x{86EE}\x{86EF}\x{86F8}\x{86F9}\x{86FB}' . '\x{86FE}\x{8700}\x{8702}\x{8703}\x{8706}\x{8708}\x{8709}\x{870A}\x{870D}' . '\x{8711}\x{8712}\x{8718}\x{871A}\x{871C}\x{8725}\x{8729}\x{8734}\x{8737}' . '\x{873B}\x{873F}\x{8749}\x{874B}\x{874C}\x{874E}\x{8753}\x{8755}\x{8757}' . '\x{8759}\x{875F}\x{8760}\x{8763}\x{8766}\x{8768}\x{876A}\x{876E}\x{8774}' . '\x{8776}\x{8778}\x{877F}\x{8782}\x{878D}\x{879F}\x{87A2}\x{87AB}\x{87AF}' . '\x{87B3}\x{87BA}\x{87BB}\x{87BD}\x{87C0}\x{87C4}\x{87C6}\x{87C7}\x{87CB}' . '\x{87D0}\x{87D2}\x{87E0}\x{87EF}\x{87F2}\x{87F6}\x{87F7}\x{87F9}\x{87FB}' . '\x{87FE}\x{8805}\x{880D}\x{880E}\x{880F}\x{8811}\x{8815}\x{8816}\x{8821}' . '\x{8822}\x{8823}\x{8827}\x{8831}\x{8836}\x{8839}\x{883B}\x{8840}\x{8842}' . '\x{8844}\x{8846}\x{884C}\x{884D}\x{8852}\x{8853}\x{8857}\x{8859}\x{885B}' . '\x{885D}\x{885E}\x{8861}\x{8862}\x{8863}\x{8868}\x{886B}\x{8870}\x{8872}' . '\x{8875}\x{8877}\x{887D}\x{887E}\x{887F}\x{8881}\x{8882}\x{8888}\x{888B}' . '\x{888D}\x{8892}\x{8896}\x{8897}\x{8899}\x{889E}\x{88A2}\x{88A4}\x{88AB}' . '\x{88AE}\x{88B0}\x{88B1}\x{88B4}\x{88B5}\x{88B7}\x{88BF}\x{88C1}\x{88C2}' . '\x{88C3}\x{88C4}\x{88C5}\x{88CF}\x{88D4}\x{88D5}\x{88D8}\x{88D9}\x{88DC}' . '\x{88DD}\x{88DF}\x{88E1}\x{88E8}\x{88F2}\x{88F3}\x{88F4}\x{88F8}\x{88F9}' . '\x{88FC}\x{88FD}\x{88FE}\x{8902}\x{8904}\x{8907}\x{890A}\x{890C}\x{8910}' . '\x{8912}\x{8913}\x{891D}\x{891E}\x{8925}\x{892A}\x{892B}\x{8936}\x{8938}' . '\x{893B}\x{8941}\x{8943}\x{8944}\x{894C}\x{894D}\x{8956}\x{895E}\x{895F}' . '\x{8960}\x{8964}\x{8966}\x{896A}\x{896D}\x{896F}\x{8972}\x{8974}\x{8977}' . '\x{897E}\x{897F}\x{8981}\x{8983}\x{8986}\x{8987}\x{8988}\x{898A}\x{898B}' . '\x{898F}\x{8993}\x{8996}\x{8997}\x{8998}\x{899A}\x{89A1}\x{89A6}\x{89A7}' . '\x{89A9}\x{89AA}\x{89AC}\x{89AF}\x{89B2}\x{89B3}\x{89BA}\x{89BD}\x{89BF}' . '\x{89C0}\x{89D2}\x{89DA}\x{89DC}\x{89DD}\x{89E3}\x{89E6}\x{89E7}\x{89F4}' . '\x{89F8}\x{8A00}\x{8A02}\x{8A03}\x{8A08}\x{8A0A}\x{8A0C}\x{8A0E}\x{8A10}' . '\x{8A13}\x{8A16}\x{8A17}\x{8A18}\x{8A1B}\x{8A1D}\x{8A1F}\x{8A23}\x{8A25}' . '\x{8A2A}\x{8A2D}\x{8A31}\x{8A33}\x{8A34}\x{8A36}\x{8A3A}\x{8A3B}\x{8A3C}' . '\x{8A41}\x{8A46}\x{8A48}\x{8A50}\x{8A51}\x{8A52}\x{8A54}\x{8A55}\x{8A5B}' . '\x{8A5E}\x{8A60}\x{8A62}\x{8A63}\x{8A66}\x{8A69}\x{8A6B}\x{8A6C}\x{8A6D}' . '\x{8A6E}\x{8A70}\x{8A71}\x{8A72}\x{8A73}\x{8A7C}\x{8A82}\x{8A84}\x{8A85}' . '\x{8A87}\x{8A89}\x{8A8C}\x{8A8D}\x{8A91}\x{8A93}\x{8A95}\x{8A98}\x{8A9A}' . '\x{8A9E}\x{8AA0}\x{8AA1}\x{8AA3}\x{8AA4}\x{8AA5}\x{8AA6}\x{8AA8}\x{8AAC}' . '\x{8AAD}\x{8AB0}\x{8AB2}\x{8AB9}\x{8ABC}\x{8ABF}\x{8AC2}\x{8AC4}\x{8AC7}' . '\x{8ACB}\x{8ACC}\x{8ACD}\x{8ACF}\x{8AD2}\x{8AD6}\x{8ADA}\x{8ADB}\x{8ADC}' . '\x{8ADE}\x{8AE0}\x{8AE1}\x{8AE2}\x{8AE4}\x{8AE6}\x{8AE7}\x{8AEB}\x{8AED}' . '\x{8AEE}\x{8AF1}\x{8AF3}\x{8AF7}\x{8AF8}\x{8AFA}\x{8AFE}\x{8B00}\x{8B01}' . '\x{8B02}\x{8B04}\x{8B07}\x{8B0C}\x{8B0E}\x{8B10}\x{8B14}\x{8B16}\x{8B17}' . '\x{8B19}\x{8B1A}\x{8B1B}\x{8B1D}\x{8B20}\x{8B21}\x{8B26}\x{8B28}\x{8B2B}' . '\x{8B2C}\x{8B33}\x{8B39}\x{8B3E}\x{8B41}\x{8B49}\x{8B4C}\x{8B4E}\x{8B4F}' . '\x{8B56}\x{8B58}\x{8B5A}\x{8B5B}\x{8B5C}\x{8B5F}\x{8B66}\x{8B6B}\x{8B6C}' . '\x{8B6F}\x{8B70}\x{8B71}\x{8B72}\x{8B74}\x{8B77}\x{8B7D}\x{8B80}\x{8B83}' . '\x{8B8A}\x{8B8C}\x{8B8E}\x{8B90}\x{8B92}\x{8B93}\x{8B96}\x{8B99}\x{8B9A}' . '\x{8C37}\x{8C3A}\x{8C3F}\x{8C41}\x{8C46}\x{8C48}\x{8C4A}\x{8C4C}\x{8C4E}' . '\x{8C50}\x{8C55}\x{8C5A}\x{8C61}\x{8C62}\x{8C6A}\x{8C6B}\x{8C6C}\x{8C78}' . '\x{8C79}\x{8C7A}\x{8C7C}\x{8C82}\x{8C85}\x{8C89}\x{8C8A}\x{8C8C}\x{8C8D}' . '\x{8C8E}\x{8C94}\x{8C98}\x{8C9D}\x{8C9E}\x{8CA0}\x{8CA1}\x{8CA2}\x{8CA7}' . '\x{8CA8}\x{8CA9}\x{8CAA}\x{8CAB}\x{8CAC}\x{8CAD}\x{8CAE}\x{8CAF}\x{8CB0}' . '\x{8CB2}\x{8CB3}\x{8CB4}\x{8CB6}\x{8CB7}\x{8CB8}\x{8CBB}\x{8CBC}\x{8CBD}' . '\x{8CBF}\x{8CC0}\x{8CC1}\x{8CC2}\x{8CC3}\x{8CC4}\x{8CC7}\x{8CC8}\x{8CCA}' . '\x{8CCD}\x{8CCE}\x{8CD1}\x{8CD3}\x{8CDA}\x{8CDB}\x{8CDC}\x{8CDE}\x{8CE0}' . '\x{8CE2}\x{8CE3}\x{8CE4}\x{8CE6}\x{8CEA}\x{8CED}\x{8CFA}\x{8CFB}\x{8CFC}' . '\x{8CFD}\x{8D04}\x{8D05}\x{8D07}\x{8D08}\x{8D0A}\x{8D0B}\x{8D0D}\x{8D0F}' . '\x{8D10}\x{8D13}\x{8D14}\x{8D16}\x{8D64}\x{8D66}\x{8D67}\x{8D6B}\x{8D6D}' . '\x{8D70}\x{8D71}\x{8D73}\x{8D74}\x{8D77}\x{8D81}\x{8D85}\x{8D8A}\x{8D99}' . '\x{8DA3}\x{8DA8}\x{8DB3}\x{8DBA}\x{8DBE}\x{8DC2}\x{8DCB}\x{8DCC}\x{8DCF}' . '\x{8DD6}\x{8DDA}\x{8DDB}\x{8DDD}\x{8DDF}\x{8DE1}\x{8DE3}\x{8DE8}\x{8DEA}' . '\x{8DEB}\x{8DEF}\x{8DF3}\x{8DF5}\x{8DFC}\x{8DFF}\x{8E08}\x{8E09}\x{8E0A}' . '\x{8E0F}\x{8E10}\x{8E1D}\x{8E1E}\x{8E1F}\x{8E2A}\x{8E30}\x{8E34}\x{8E35}' . '\x{8E42}\x{8E44}\x{8E47}\x{8E48}\x{8E49}\x{8E4A}\x{8E4C}\x{8E50}\x{8E55}' . '\x{8E59}\x{8E5F}\x{8E60}\x{8E63}\x{8E64}\x{8E72}\x{8E74}\x{8E76}\x{8E7C}' . '\x{8E81}\x{8E84}\x{8E85}\x{8E87}\x{8E8A}\x{8E8B}\x{8E8D}\x{8E91}\x{8E93}' . '\x{8E94}\x{8E99}\x{8EA1}\x{8EAA}\x{8EAB}\x{8EAC}\x{8EAF}\x{8EB0}\x{8EB1}' . '\x{8EBE}\x{8EC5}\x{8EC6}\x{8EC8}\x{8ECA}\x{8ECB}\x{8ECC}\x{8ECD}\x{8ED2}' . '\x{8EDB}\x{8EDF}\x{8EE2}\x{8EE3}\x{8EEB}\x{8EF8}\x{8EFB}\x{8EFC}\x{8EFD}' . '\x{8EFE}\x{8F03}\x{8F05}\x{8F09}\x{8F0A}\x{8F0C}\x{8F12}\x{8F13}\x{8F14}' . '\x{8F15}\x{8F19}\x{8F1B}\x{8F1C}\x{8F1D}\x{8F1F}\x{8F26}\x{8F29}\x{8F2A}' . '\x{8F2F}\x{8F33}\x{8F38}\x{8F39}\x{8F3B}\x{8F3E}\x{8F3F}\x{8F42}\x{8F44}' . '\x{8F45}\x{8F46}\x{8F49}\x{8F4C}\x{8F4D}\x{8F4E}\x{8F57}\x{8F5C}\x{8F5F}' . '\x{8F61}\x{8F62}\x{8F63}\x{8F64}\x{8F9B}\x{8F9C}\x{8F9E}\x{8F9F}\x{8FA3}' . '\x{8FA7}\x{8FA8}\x{8FAD}\x{8FAE}\x{8FAF}\x{8FB0}\x{8FB1}\x{8FB2}\x{8FB7}' . '\x{8FBA}\x{8FBB}\x{8FBC}\x{8FBF}\x{8FC2}\x{8FC4}\x{8FC5}\x{8FCE}\x{8FD1}' . '\x{8FD4}\x{8FDA}\x{8FE2}\x{8FE5}\x{8FE6}\x{8FE9}\x{8FEA}\x{8FEB}\x{8FED}' . '\x{8FEF}\x{8FF0}\x{8FF4}\x{8FF7}\x{8FF8}\x{8FF9}\x{8FFA}\x{8FFD}\x{9000}' . '\x{9001}\x{9003}\x{9005}\x{9006}\x{900B}\x{900D}\x{900E}\x{900F}\x{9010}' . '\x{9011}\x{9013}\x{9014}\x{9015}\x{9016}\x{9017}\x{9019}\x{901A}\x{901D}' . '\x{901E}\x{901F}\x{9020}\x{9021}\x{9022}\x{9023}\x{9027}\x{902E}\x{9031}' . '\x{9032}\x{9035}\x{9036}\x{9038}\x{9039}\x{903C}\x{903E}\x{9041}\x{9042}' . '\x{9045}\x{9047}\x{9049}\x{904A}\x{904B}\x{904D}\x{904E}\x{904F}\x{9050}' . '\x{9051}\x{9052}\x{9053}\x{9054}\x{9055}\x{9056}\x{9058}\x{9059}\x{905C}' . '\x{905E}\x{9060}\x{9061}\x{9063}\x{9065}\x{9068}\x{9069}\x{906D}\x{906E}' . '\x{906F}\x{9072}\x{9075}\x{9076}\x{9077}\x{9078}\x{907A}\x{907C}\x{907D}' . '\x{907F}\x{9080}\x{9081}\x{9082}\x{9083}\x{9084}\x{9087}\x{9089}\x{908A}' . '\x{908F}\x{9091}\x{90A3}\x{90A6}\x{90A8}\x{90AA}\x{90AF}\x{90B1}\x{90B5}' . '\x{90B8}\x{90C1}\x{90CA}\x{90CE}\x{90DB}\x{90E1}\x{90E2}\x{90E4}\x{90E8}' . '\x{90ED}\x{90F5}\x{90F7}\x{90FD}\x{9102}\x{9112}\x{9119}\x{912D}\x{9130}' . '\x{9132}\x{9149}\x{914A}\x{914B}\x{914C}\x{914D}\x{914E}\x{9152}\x{9154}' . '\x{9156}\x{9158}\x{9162}\x{9163}\x{9165}\x{9169}\x{916A}\x{916C}\x{9172}' . '\x{9173}\x{9175}\x{9177}\x{9178}\x{9182}\x{9187}\x{9189}\x{918B}\x{918D}' . '\x{9190}\x{9192}\x{9197}\x{919C}\x{91A2}\x{91A4}\x{91AA}\x{91AB}\x{91AF}' . '\x{91B4}\x{91B5}\x{91B8}\x{91BA}\x{91C0}\x{91C1}\x{91C6}\x{91C7}\x{91C8}' . '\x{91C9}\x{91CB}\x{91CC}\x{91CD}\x{91CE}\x{91CF}\x{91D0}\x{91D1}\x{91D6}' . '\x{91D8}\x{91DB}\x{91DC}\x{91DD}\x{91DF}\x{91E1}\x{91E3}\x{91E6}\x{91E7}' . '\x{91F5}\x{91F6}\x{91FC}\x{91FF}\x{920D}\x{920E}\x{9211}\x{9214}\x{9215}' . '\x{921E}\x{9229}\x{922C}\x{9234}\x{9237}\x{923F}\x{9244}\x{9245}\x{9248}' . '\x{9249}\x{924B}\x{9250}\x{9257}\x{925A}\x{925B}\x{925E}\x{9262}\x{9264}' . '\x{9266}\x{9271}\x{927E}\x{9280}\x{9283}\x{9285}\x{9291}\x{9293}\x{9295}' . '\x{9296}\x{9298}\x{929A}\x{929B}\x{929C}\x{92AD}\x{92B7}\x{92B9}\x{92CF}' . '\x{92D2}\x{92E4}\x{92E9}\x{92EA}\x{92ED}\x{92F2}\x{92F3}\x{92F8}\x{92FA}' . '\x{92FC}\x{9306}\x{930F}\x{9310}\x{9318}\x{9319}\x{931A}\x{9320}\x{9322}' . '\x{9323}\x{9326}\x{9328}\x{932B}\x{932C}\x{932E}\x{932F}\x{9332}\x{9335}' . '\x{933A}\x{933B}\x{9344}\x{934B}\x{934D}\x{9354}\x{9356}\x{935B}\x{935C}' . '\x{9360}\x{936C}\x{936E}\x{9375}\x{937C}\x{937E}\x{938C}\x{9394}\x{9396}' . '\x{9397}\x{939A}\x{93A7}\x{93AC}\x{93AD}\x{93AE}\x{93B0}\x{93B9}\x{93C3}' . '\x{93C8}\x{93D0}\x{93D1}\x{93D6}\x{93D7}\x{93D8}\x{93DD}\x{93E1}\x{93E4}' . '\x{93E5}\x{93E8}\x{9403}\x{9407}\x{9410}\x{9413}\x{9414}\x{9418}\x{9419}' . '\x{941A}\x{9421}\x{942B}\x{9435}\x{9436}\x{9438}\x{943A}\x{9441}\x{9444}' . '\x{9451}\x{9452}\x{9453}\x{945A}\x{945B}\x{945E}\x{9460}\x{9462}\x{946A}' . '\x{9470}\x{9475}\x{9477}\x{947C}\x{947D}\x{947E}\x{947F}\x{9481}\x{9577}' . '\x{9580}\x{9582}\x{9583}\x{9587}\x{9589}\x{958A}\x{958B}\x{958F}\x{9591}' . '\x{9593}\x{9594}\x{9596}\x{9598}\x{9599}\x{95A0}\x{95A2}\x{95A3}\x{95A4}' . '\x{95A5}\x{95A7}\x{95A8}\x{95AD}\x{95B2}\x{95B9}\x{95BB}\x{95BC}\x{95BE}' . '\x{95C3}\x{95C7}\x{95CA}\x{95CC}\x{95CD}\x{95D4}\x{95D5}\x{95D6}\x{95D8}' . '\x{95DC}\x{95E1}\x{95E2}\x{95E5}\x{961C}\x{9621}\x{9628}\x{962A}\x{962E}' . '\x{962F}\x{9632}\x{963B}\x{963F}\x{9640}\x{9642}\x{9644}\x{964B}\x{964C}' . '\x{964D}\x{964F}\x{9650}\x{965B}\x{965C}\x{965D}\x{965E}\x{965F}\x{9662}' . '\x{9663}\x{9664}\x{9665}\x{9666}\x{966A}\x{966C}\x{9670}\x{9672}\x{9673}' . '\x{9675}\x{9676}\x{9677}\x{9678}\x{967A}\x{967D}\x{9685}\x{9686}\x{9688}' . '\x{968A}\x{968B}\x{968D}\x{968E}\x{968F}\x{9694}\x{9695}\x{9697}\x{9698}' . '\x{9699}\x{969B}\x{969C}\x{96A0}\x{96A3}\x{96A7}\x{96A8}\x{96AA}\x{96B0}' . '\x{96B1}\x{96B2}\x{96B4}\x{96B6}\x{96B7}\x{96B8}\x{96B9}\x{96BB}\x{96BC}' . '\x{96C0}\x{96C1}\x{96C4}\x{96C5}\x{96C6}\x{96C7}\x{96C9}\x{96CB}\x{96CC}' . '\x{96CD}\x{96CE}\x{96D1}\x{96D5}\x{96D6}\x{96D9}\x{96DB}\x{96DC}\x{96E2}' . '\x{96E3}\x{96E8}\x{96EA}\x{96EB}\x{96F0}\x{96F2}\x{96F6}\x{96F7}\x{96F9}' . '\x{96FB}\x{9700}\x{9704}\x{9706}\x{9707}\x{9708}\x{970A}\x{970D}\x{970E}' . '\x{970F}\x{9711}\x{9713}\x{9716}\x{9719}\x{971C}\x{971E}\x{9724}\x{9727}' . '\x{972A}\x{9730}\x{9732}\x{9738}\x{9739}\x{973D}\x{973E}\x{9742}\x{9744}' . '\x{9746}\x{9748}\x{9749}\x{9752}\x{9756}\x{9759}\x{975C}\x{975E}\x{9760}' . '\x{9761}\x{9762}\x{9764}\x{9766}\x{9768}\x{9769}\x{976B}\x{976D}\x{9771}' . '\x{9774}\x{9779}\x{977A}\x{977C}\x{9781}\x{9784}\x{9785}\x{9786}\x{978B}' . '\x{978D}\x{978F}\x{9790}\x{9798}\x{979C}\x{97A0}\x{97A3}\x{97A6}\x{97A8}' . '\x{97AB}\x{97AD}\x{97B3}\x{97B4}\x{97C3}\x{97C6}\x{97C8}\x{97CB}\x{97D3}' . '\x{97DC}\x{97ED}\x{97EE}\x{97F2}\x{97F3}\x{97F5}\x{97F6}\x{97FB}\x{97FF}' . '\x{9801}\x{9802}\x{9803}\x{9805}\x{9806}\x{9808}\x{980C}\x{980F}\x{9810}' . '\x{9811}\x{9812}\x{9813}\x{9817}\x{9818}\x{981A}\x{9821}\x{9824}\x{982C}' . '\x{982D}\x{9834}\x{9837}\x{9838}\x{983B}\x{983C}\x{983D}\x{9846}\x{984B}' . '\x{984C}\x{984D}\x{984E}\x{984F}\x{9854}\x{9855}\x{9858}\x{985B}\x{985E}' . '\x{9867}\x{986B}\x{986F}\x{9870}\x{9871}\x{9873}\x{9874}\x{98A8}\x{98AA}' . '\x{98AF}\x{98B1}\x{98B6}\x{98C3}\x{98C4}\x{98C6}\x{98DB}\x{98DC}\x{98DF}' . '\x{98E2}\x{98E9}\x{98EB}\x{98ED}\x{98EE}\x{98EF}\x{98F2}\x{98F4}\x{98FC}' . '\x{98FD}\x{98FE}\x{9903}\x{9905}\x{9909}\x{990A}\x{990C}\x{9910}\x{9912}' . '\x{9913}\x{9914}\x{9918}\x{991D}\x{991E}\x{9920}\x{9921}\x{9924}\x{9928}' . '\x{992C}\x{992E}\x{993D}\x{993E}\x{9942}\x{9945}\x{9949}\x{994B}\x{994C}' . '\x{9950}\x{9951}\x{9952}\x{9955}\x{9957}\x{9996}\x{9997}\x{9998}\x{9999}' . '\x{99A5}\x{99A8}\x{99AC}\x{99AD}\x{99AE}\x{99B3}\x{99B4}\x{99BC}\x{99C1}' . '\x{99C4}\x{99C5}\x{99C6}\x{99C8}\x{99D0}\x{99D1}\x{99D2}\x{99D5}\x{99D8}' . '\x{99DB}\x{99DD}\x{99DF}\x{99E2}\x{99ED}\x{99EE}\x{99F1}\x{99F2}\x{99F8}' . '\x{99FB}\x{99FF}\x{9A01}\x{9A05}\x{9A0E}\x{9A0F}\x{9A12}\x{9A13}\x{9A19}' . '\x{9A28}\x{9A2B}\x{9A30}\x{9A37}\x{9A3E}\x{9A40}\x{9A42}\x{9A43}\x{9A45}' . '\x{9A4D}\x{9A55}\x{9A57}\x{9A5A}\x{9A5B}\x{9A5F}\x{9A62}\x{9A64}\x{9A65}' . '\x{9A69}\x{9A6A}\x{9A6B}\x{9AA8}\x{9AAD}\x{9AB0}\x{9AB8}\x{9ABC}\x{9AC0}' . '\x{9AC4}\x{9ACF}\x{9AD1}\x{9AD3}\x{9AD4}\x{9AD8}\x{9ADE}\x{9ADF}\x{9AE2}' . '\x{9AE3}\x{9AE6}\x{9AEA}\x{9AEB}\x{9AED}\x{9AEE}\x{9AEF}\x{9AF1}\x{9AF4}' . '\x{9AF7}\x{9AFB}\x{9B06}\x{9B18}\x{9B1A}\x{9B1F}\x{9B22}\x{9B23}\x{9B25}' . '\x{9B27}\x{9B28}\x{9B29}\x{9B2A}\x{9B2E}\x{9B2F}\x{9B31}\x{9B32}\x{9B3B}' . '\x{9B3C}\x{9B41}\x{9B42}\x{9B43}\x{9B44}\x{9B45}\x{9B4D}\x{9B4E}\x{9B4F}' . '\x{9B51}\x{9B54}\x{9B58}\x{9B5A}\x{9B6F}\x{9B74}\x{9B83}\x{9B8E}\x{9B91}' . '\x{9B92}\x{9B93}\x{9B96}\x{9B97}\x{9B9F}\x{9BA0}\x{9BA8}\x{9BAA}\x{9BAB}' . '\x{9BAD}\x{9BAE}\x{9BB4}\x{9BB9}\x{9BC0}\x{9BC6}\x{9BC9}\x{9BCA}\x{9BCF}' . '\x{9BD1}\x{9BD2}\x{9BD4}\x{9BD6}\x{9BDB}\x{9BE1}\x{9BE2}\x{9BE3}\x{9BE4}' . '\x{9BE8}\x{9BF0}\x{9BF1}\x{9BF2}\x{9BF5}\x{9C04}\x{9C06}\x{9C08}\x{9C09}' . '\x{9C0A}\x{9C0C}\x{9C0D}\x{9C10}\x{9C12}\x{9C13}\x{9C14}\x{9C15}\x{9C1B}' . '\x{9C21}\x{9C24}\x{9C25}\x{9C2D}\x{9C2E}\x{9C2F}\x{9C30}\x{9C32}\x{9C39}' . '\x{9C3A}\x{9C3B}\x{9C3E}\x{9C46}\x{9C47}\x{9C48}\x{9C52}\x{9C57}\x{9C5A}' . '\x{9C60}\x{9C67}\x{9C76}\x{9C78}\x{9CE5}\x{9CE7}\x{9CE9}\x{9CEB}\x{9CEC}' . '\x{9CF0}\x{9CF3}\x{9CF4}\x{9CF6}\x{9D03}\x{9D06}\x{9D07}\x{9D08}\x{9D09}' . '\x{9D0E}\x{9D12}\x{9D15}\x{9D1B}\x{9D1F}\x{9D23}\x{9D26}\x{9D28}\x{9D2A}' . '\x{9D2B}\x{9D2C}\x{9D3B}\x{9D3E}\x{9D3F}\x{9D41}\x{9D44}\x{9D46}\x{9D48}' . '\x{9D50}\x{9D51}\x{9D59}\x{9D5C}\x{9D5D}\x{9D5E}\x{9D60}\x{9D61}\x{9D64}' . '\x{9D6C}\x{9D6F}\x{9D72}\x{9D7A}\x{9D87}\x{9D89}\x{9D8F}\x{9D9A}\x{9DA4}' . '\x{9DA9}\x{9DAB}\x{9DAF}\x{9DB2}\x{9DB4}\x{9DB8}\x{9DBA}\x{9DBB}\x{9DC1}' . '\x{9DC2}\x{9DC4}\x{9DC6}\x{9DCF}\x{9DD3}\x{9DD9}\x{9DE6}\x{9DED}\x{9DEF}' . '\x{9DF2}\x{9DF8}\x{9DF9}\x{9DFA}\x{9DFD}\x{9E1A}\x{9E1B}\x{9E1E}\x{9E75}' . '\x{9E78}\x{9E79}\x{9E7D}\x{9E7F}\x{9E81}\x{9E88}\x{9E8B}\x{9E8C}\x{9E91}' . '\x{9E92}\x{9E93}\x{9E95}\x{9E97}\x{9E9D}\x{9E9F}\x{9EA5}\x{9EA6}\x{9EA9}' . '\x{9EAA}\x{9EAD}\x{9EB8}\x{9EB9}\x{9EBA}\x{9EBB}\x{9EBC}\x{9EBE}\x{9EBF}' . '\x{9EC4}\x{9ECC}\x{9ECD}\x{9ECE}\x{9ECF}\x{9ED0}\x{9ED2}\x{9ED4}\x{9ED8}' . '\x{9ED9}\x{9EDB}\x{9EDC}\x{9EDD}\x{9EDE}\x{9EE0}\x{9EE5}\x{9EE8}\x{9EEF}' . '\x{9EF4}\x{9EF6}\x{9EF7}\x{9EF9}\x{9EFB}\x{9EFC}\x{9EFD}\x{9F07}\x{9F08}' . '\x{9F0E}\x{9F13}\x{9F15}\x{9F20}\x{9F21}\x{9F2C}\x{9F3B}\x{9F3E}\x{9F4A}' . '\x{9F4B}\x{9F4E}\x{9F4F}\x{9F52}\x{9F54}\x{9F5F}\x{9F60}\x{9F61}\x{9F62}' . '\x{9F63}\x{9F66}\x{9F67}\x{9F6A}\x{9F6C}\x{9F72}\x{9F76}\x{9F77}\x{9F8D}' . '\x{9F95}\x{9F9C}\x{9F9D}\x{9FA0}]{1,15}$/iu', ); &lt;?php
 namespace Zend\Validator\Hostname; return array( 1 =&gt; '/^[\x{002d}0-9a-z\x{3447}\x{3473}\x{359E}\x{360E}\x{361A}\x{3918}\x{396E}\x{39CF}\x{39D0}' . '\x{39DF}\x{3A73}\x{3B4E}\x{3C6E}\x{3CE0}\x{4056}\x{415F}\x{4337}\x{43AC}' . '\x{43B1}\x{43DD}\x{44D6}\x{464C}\x{4661}\x{4723}\x{4729}\x{477C}\x{478D}' . '\x{4947}\x{497A}\x{497D}\x{4982}\x{4983}\x{4985}\x{4986}\x{499B}\x{499F}' . '\x{49B6}\x{49B7}\x{4C77}\x{4C9F}\x{4CA0}\x{4CA1}\x{4CA2}\x{4CA3}\x{4D13}' . '\x{4D14}\x{4D15}\x{4D16}\x{4D17}\x{4D18}\x{4D19}\x{4DAE}\x{4E00}\x{4E01}' . '\x{4E02}\x{4E03}\x{4E04}\x{4E05}\x{4E06}\x{4E07}\x{4E08}\x{4E09}\x{4E0A}' . '\x{4E0B}\x{4E0C}\x{4E0D}\x{4E0E}\x{4E0F}\x{4E10}\x{4E11}\x{4E13}\x{4E14}' . '\x{4E15}\x{4E16}\x{4E17}\x{4E18}\x{4E19}\x{4E1A}\x{4E1B}\x{4E1C}\x{4E1D}' . '\x{4E1E}\x{4E1F}\x{4E20}\x{4E21}\x{4E22}\x{4E23}\x{4E24}\x{4E25}\x{4E26}' . '\x{4E27}\x{4E28}\x{4E2A}\x{4E2B}\x{4E2C}\x{4E2D}\x{4E2E}\x{4E2F}\x{4E30}' . '\x{4E31}\x{4E32}\x{4E33}\x{4E34}\x{4E35}\x{4E36}\x{4E37}\x{4E38}\x{4E39}' . '\x{4E3A}\x{4E3B}\x{4E3C}\x{4E3D}\x{4E3E}\x{4E3F}\x{4E40}\x{4E41}\x{4E42}' . '\x{4E43}\x{4E44}\x{4E45}\x{4E46}\x{4E47}\x{4E48}\x{4E49}\x{4E4A}\x{4E4B}' . '\x{4E4C}\x{4E4D}\x{4E4E}\x{4E4F}\x{4E50}\x{4E51}\x{4E52}\x{4E53}\x{4E54}' . '\x{4E56}\x{4E57}\x{4E58}\x{4E59}\x{4E5A}\x{4E5B}\x{4E5C}\x{4E5D}\x{4E5E}' . '\x{4E5F}\x{4E60}\x{4E61}\x{4E62}\x{4E63}\x{4E64}\x{4E65}\x{4E66}\x{4E67}' . '\x{4E69}\x{4E6A}\x{4E6B}\x{4E6C}\x{4E6D}\x{4E6E}\x{4E6F}\x{4E70}\x{4E71}' . '\x{4E72}\x{4E73}\x{4E74}\x{4E75}\x{4E76}\x{4E77}\x{4E78}\x{4E7A}\x{4E7B}' . '\x{4E7C}\x{4E7D}\x{4E7E}\x{4E7F}\x{4E80}\x{4E81}\x{4E82}\x{4E83}\x{4E84}' . '\x{4E85}\x{4E86}\x{4E87}\x{4E88}\x{4E89}\x{4E8B}\x{4E8C}\x{4E8D}\x{4E8E}' . '\x{4E8F}\x{4E90}\x{4E91}\x{4E92}\x{4E93}\x{4E94}\x{4E95}\x{4E97}\x{4E98}' . '\x{4E99}\x{4E9A}\x{4E9B}\x{4E9C}\x{4E9D}\x{4E9E}\x{4E9F}\x{4EA0}\x{4EA1}' . '\x{4EA2}\x{4EA4}\x{4EA5}\x{4EA6}\x{4EA7}\x{4EA8}\x{4EA9}\x{4EAA}\x{4EAB}' . '\x{4EAC}\x{4EAD}\x{4EAE}\x{4EAF}\x{4EB0}\x{4EB1}\x{4EB2}\x{4EB3}\x{4EB4}' . '\x{4EB5}\x{4EB6}\x{4EB7}\x{4EB8}\x{4EB9}\x{4EBA}\x{4EBB}\x{4EBD}\x{4EBE}' . '\x{4EBF}\x{4EC0}\x{4EC1}\x{4EC2}\x{4EC3}\x{4EC4}\x{4EC5}\x{4EC6}\x{4EC7}' . '\x{4EC8}\x{4EC9}\x{4ECA}\x{4ECB}\x{4ECD}\x{4ECE}\x{4ECF}\x{4ED0}\x{4ED1}' . '\x{4ED2}\x{4ED3}\x{4ED4}\x{4ED5}\x{4ED6}\x{4ED7}\x{4ED8}\x{4ED9}\x{4EDA}' . '\x{4EDB}\x{4EDC}\x{4EDD}\x{4EDE}\x{4EDF}\x{4EE0}\x{4EE1}\x{4EE2}\x{4EE3}' . '\x{4EE4}\x{4EE5}\x{4EE6}\x{4EE8}\x{4EE9}\x{4EEA}\x{4EEB}\x{4EEC}\x{4EEF}' . '\x{4EF0}\x{4EF1}\x{4EF2}\x{4EF3}\x{4EF4}\x{4EF5}\x{4EF6}\x{4EF7}\x{4EFB}' . '\x{4EFD}\x{4EFF}\x{4F00}\x{4F01}\x{4F02}\x{4F03}\x{4F04}\x{4F05}\x{4F06}' . '\x{4F08}\x{4F09}\x{4F0A}\x{4F0B}\x{4F0C}\x{4F0D}\x{4F0E}\x{4F0F}\x{4F10}' . '\x{4F11}\x{4F12}\x{4F13}\x{4F14}\x{4F15}\x{4F17}\x{4F18}\x{4F19}\x{4F1A}' . '\x{4F1B}\x{4F1C}\x{4F1D}\x{4F1E}\x{4F1F}\x{4F20}\x{4F21}\x{4F22}\x{4F23}' . '\x{4F24}\x{4F25}\x{4F26}\x{4F27}\x{4F29}\x{4F2A}\x{4F2B}\x{4F2C}\x{4F2D}' . '\x{4F2E}\x{4F2F}\x{4F30}\x{4F32}\x{4F33}\x{4F34}\x{4F36}\x{4F38}\x{4F39}' . '\x{4F3A}\x{4F3B}\x{4F3C}\x{4F3D}\x{4F3E}\x{4F3F}\x{4F41}\x{4F42}\x{4F43}' . '\x{4F45}\x{4F46}\x{4F47}\x{4F48}\x{4F49}\x{4F4A}\x{4F4B}\x{4F4C}\x{4F4D}' . '\x{4F4E}\x{4F4F}\x{4F50}\x{4F51}\x{4F52}\x{4F53}\x{4F54}\x{4F55}\x{4F56}' . '\x{4F57}\x{4F58}\x{4F59}\x{4F5A}\x{4F5B}\x{4F5C}\x{4F5D}\x{4F5E}\x{4F5F}' . '\x{4F60}\x{4F61}\x{4F62}\x{4F63}\x{4F64}\x{4F65}\x{4F66}\x{4F67}\x{4F68}' . '\x{4F69}\x{4F6A}\x{4F6B}\x{4F6C}\x{4F6D}\x{4F6E}\x{4F6F}\x{4F70}\x{4F72}' . '\x{4F73}\x{4F74}\x{4F75}\x{4F76}\x{4F77}\x{4F78}\x{4F79}\x{4F7A}\x{4F7B}' . '\x{4F7C}\x{4F7D}\x{4F7E}\x{4F7F}\x{4F80}\x{4F81}\x{4F82}\x{4F83}\x{4F84}' . '\x{4F85}\x{4F86}\x{4F87}\x{4F88}\x{4F89}\x{4F8A}\x{4F8B}\x{4F8D}\x{4F8F}' . '\x{4F90}\x{4F91}\x{4F92}\x{4F93}\x{4F94}\x{4F95}\x{4F96}\x{4F97}\x{4F98}' . '\x{4F99}\x{4F9A}\x{4F9B}\x{4F9C}\x{4F9D}\x{4F9E}\x{4F9F}\x{4FA0}\x{4FA1}' . '\x{4FA3}\x{4FA4}\x{4FA5}\x{4FA6}\x{4FA7}\x{4FA8}\x{4FA9}\x{4FAA}\x{4FAB}' . '\x{4FAC}\x{4FAE}\x{4FAF}\x{4FB0}\x{4FB1}\x{4FB2}\x{4FB3}\x{4FB4}\x{4FB5}' . '\x{4FB6}\x{4FB7}\x{4FB8}\x{4FB9}\x{4FBA}\x{4FBB}\x{4FBC}\x{4FBE}\x{4FBF}' . '\x{4FC0}\x{4FC1}\x{4FC2}\x{4FC3}\x{4FC4}\x{4FC5}\x{4FC7}\x{4FC9}\x{4FCA}' . '\x{4FCB}\x{4FCD}\x{4FCE}\x{4FCF}\x{4FD0}\x{4FD1}\x{4FD2}\x{4FD3}\x{4FD4}' . '\x{4FD5}\x{4FD6}\x{4FD7}\x{4FD8}\x{4FD9}\x{4FDA}\x{4FDB}\x{4FDC}\x{4FDD}' . '\x{4FDE}\x{4FDF}\x{4FE0}\x{4FE1}\x{4FE3}\x{4FE4}\x{4FE5}\x{4FE6}\x{4FE7}' . '\x{4FE8}\x{4FE9}\x{4FEA}\x{4FEB}\x{4FEC}\x{4FED}\x{4FEE}\x{4FEF}\x{4FF0}' . '\x{4FF1}\x{4FF2}\x{4FF3}\x{4FF4}\x{4FF5}\x{4FF6}\x{4FF7}\x{4FF8}\x{4FF9}' . '\x{4FFA}\x{4FFB}\x{4FFE}\x{4FFF}\x{5000}\x{5001}\x{5002}\x{5003}\x{5004}' . '\x{5005}\x{5006}\x{5007}\x{5008}\x{5009}\x{500A}\x{500B}\x{500C}\x{500D}' . '\x{500E}\x{500F}\x{5011}\x{5012}\x{5013}\x{5014}\x{5015}\x{5016}\x{5017}' . '\x{5018}\x{5019}\x{501A}\x{501B}\x{501C}\x{501D}\x{501E}\x{501F}\x{5020}' . '\x{5021}\x{5022}\x{5023}\x{5024}\x{5025}\x{5026}\x{5027}\x{5028}\x{5029}' . '\x{502A}\x{502B}\x{502C}\x{502D}\x{502E}\x{502F}\x{5030}\x{5031}\x{5032}' . '\x{5033}\x{5035}\x{5036}\x{5037}\x{5039}\x{503A}\x{503B}\x{503C}\x{503E}' . '\x{503F}\x{5040}\x{5041}\x{5043}\x{5044}\x{5045}\x{5046}\x{5047}\x{5048}' . '\x{5049}\x{504A}\x{504B}\x{504C}\x{504D}\x{504E}\x{504F}\x{5051}\x{5053}' . '\x{5054}\x{5055}\x{5056}\x{5057}\x{5059}\x{505A}\x{505B}\x{505C}\x{505D}' . '\x{505E}\x{505F}\x{5060}\x{5061}\x{5062}\x{5063}\x{5064}\x{5065}\x{5066}' . '\x{5067}\x{5068}\x{5069}\x{506A}\x{506B}\x{506C}\x{506D}\x{506E}\x{506F}' . '\x{5070}\x{5071}\x{5072}\x{5073}\x{5074}\x{5075}\x{5076}\x{5077}\x{5078}' . '\x{5079}\x{507A}\x{507B}\x{507D}\x{507E}\x{507F}\x{5080}\x{5082}\x{5083}' . '\x{5084}\x{5085}\x{5086}\x{5087}\x{5088}\x{5089}\x{508A}\x{508B}\x{508C}' . '\x{508D}\x{508E}\x{508F}\x{5090}\x{5091}\x{5092}\x{5094}\x{5095}\x{5096}' . '\x{5098}\x{5099}\x{509A}\x{509B}\x{509C}\x{509D}\x{509E}\x{50A2}\x{50A3}' . '\x{50A4}\x{50A5}\x{50A6}\x{50A7}\x{50A8}\x{50A9}\x{50AA}\x{50AB}\x{50AC}' . '\x{50AD}\x{50AE}\x{50AF}\x{50B0}\x{50B1}\x{50B2}\x{50B3}\x{50B4}\x{50B5}' . '\x{50B6}\x{50B7}\x{50B8}\x{50BA}\x{50BB}\x{50BC}\x{50BD}\x{50BE}\x{50BF}' . '\x{50C0}\x{50C1}\x{50C2}\x{50C4}\x{50C5}\x{50C6}\x{50C7}\x{50C8}\x{50C9}' . '\x{50CA}\x{50CB}\x{50CC}\x{50CD}\x{50CE}\x{50CF}\x{50D0}\x{50D1}\x{50D2}' . '\x{50D3}\x{50D4}\x{50D5}\x{50D6}\x{50D7}\x{50D9}\x{50DA}\x{50DB}\x{50DC}' . '\x{50DD}\x{50DE}\x{50E0}\x{50E3}\x{50E4}\x{50E5}\x{50E6}\x{50E7}\x{50E8}' . '\x{50E9}\x{50EA}\x{50EC}\x{50ED}\x{50EE}\x{50EF}\x{50F0}\x{50F1}\x{50F2}' . '\x{50F3}\x{50F5}\x{50F6}\x{50F8}\x{50F9}\x{50FA}\x{50FB}\x{50FC}\x{50FD}' . '\x{50FE}\x{50FF}\x{5100}\x{5101}\x{5102}\x{5103}\x{5104}\x{5105}\x{5106}' . '\x{5107}\x{5108}\x{5109}\x{510A}\x{510B}\x{510C}\x{510D}\x{510E}\x{510F}' . '\x{5110}\x{5111}\x{5112}\x{5113}\x{5114}\x{5115}\x{5116}\x{5117}\x{5118}' . '\x{5119}\x{511A}\x{511C}\x{511D}\x{511E}\x{511F}\x{5120}\x{5121}\x{5122}' . '\x{5123}\x{5124}\x{5125}\x{5126}\x{5127}\x{5129}\x{512A}\x{512C}\x{512D}' . '\x{512E}\x{512F}\x{5130}\x{5131}\x{5132}\x{5133}\x{5134}\x{5135}\x{5136}' . '\x{5137}\x{5138}\x{5139}\x{513A}\x{513B}\x{513C}\x{513D}\x{513E}\x{513F}' . '\x{5140}\x{5141}\x{5143}\x{5144}\x{5145}\x{5146}\x{5147}\x{5148}\x{5149}' . '\x{514B}\x{514C}\x{514D}\x{514E}\x{5150}\x{5151}\x{5152}\x{5154}\x{5155}' . '\x{5156}\x{5157}\x{5159}\x{515A}\x{515B}\x{515C}\x{515D}\x{515E}\x{515F}' . '\x{5161}\x{5162}\x{5163}\x{5165}\x{5166}\x{5167}\x{5168}\x{5169}\x{516A}' . '\x{516B}\x{516C}\x{516D}\x{516E}\x{516F}\x{5170}\x{5171}\x{5173}\x{5174}' . '\x{5175}\x{5176}\x{5177}\x{5178}\x{5179}\x{517A}\x{517B}\x{517C}\x{517D}' . '\x{517F}\x{5180}\x{5181}\x{5182}\x{5185}\x{5186}\x{5187}\x{5188}\x{5189}' . '\x{518A}\x{518B}\x{518C}\x{518D}\x{518F}\x{5190}\x{5191}\x{5192}\x{5193}' . '\x{5194}\x{5195}\x{5196}\x{5197}\x{5198}\x{5199}\x{519A}\x{519B}\x{519C}' . '\x{519D}\x{519E}\x{519F}\x{51A0}\x{51A2}\x{51A4}\x{51A5}\x{51A6}\x{51A7}' . '\x{51A8}\x{51AA}\x{51AB}\x{51AC}\x{51AE}\x{51AF}\x{51B0}\x{51B1}\x{51B2}' . '\x{51B3}\x{51B5}\x{51B6}\x{51B7}\x{51B9}\x{51BB}\x{51BC}\x{51BD}\x{51BE}' . '\x{51BF}\x{51C0}\x{51C1}\x{51C3}\x{51C4}\x{51C5}\x{51C6}\x{51C7}\x{51C8}' . '\x{51C9}\x{51CA}\x{51CB}\x{51CC}\x{51CD}\x{51CE}\x{51CF}\x{51D0}\x{51D1}' . '\x{51D4}\x{51D5}\x{51D6}\x{51D7}\x{51D8}\x{51D9}\x{51DA}\x{51DB}\x{51DC}' . '\x{51DD}\x{51DE}\x{51E0}\x{51E1}\x{51E2}\x{51E3}\x{51E4}\x{51E5}\x{51E7}' . '\x{51E8}\x{51E9}\x{51EA}\x{51EB}\x{51ED}\x{51EF}\x{51F0}\x{51F1}\x{51F3}' . '\x{51F4}\x{51F5}\x{51F6}\x{51F7}\x{51F8}\x{51F9}\x{51FA}\x{51FB}\x{51FC}' . '\x{51FD}\x{51FE}\x{51FF}\x{5200}\x{5201}\x{5202}\x{5203}\x{5204}\x{5205}' . '\x{5206}\x{5207}\x{5208}\x{5209}\x{520A}\x{520B}\x{520C}\x{520D}\x{520E}' . '\x{520F}\x{5210}\x{5211}\x{5212}\x{5213}\x{5214}\x{5215}\x{5216}\x{5217}' . '\x{5218}\x{5219}\x{521A}\x{521B}\x{521C}\x{521D}\x{521E}\x{521F}\x{5220}' . '\x{5221}\x{5222}\x{5223}\x{5224}\x{5225}\x{5226}\x{5228}\x{5229}\x{522A}' . '\x{522B}\x{522C}\x{522D}\x{522E}\x{522F}\x{5230}\x{5231}\x{5232}\x{5233}' . '\x{5234}\x{5235}\x{5236}\x{5237}\x{5238}\x{5239}\x{523A}\x{523B}\x{523C}' . '\x{523D}\x{523E}\x{523F}\x{5240}\x{5241}\x{5242}\x{5243}\x{5244}\x{5245}' . '\x{5246}\x{5247}\x{5248}\x{5249}\x{524A}\x{524B}\x{524C}\x{524D}\x{524E}' . '\x{5250}\x{5251}\x{5252}\x{5254}\x{5255}\x{5256}\x{5257}\x{5258}\x{5259}' . '\x{525A}\x{525B}\x{525C}\x{525D}\x{525E}\x{525F}\x{5260}\x{5261}\x{5262}' . '\x{5263}\x{5264}\x{5265}\x{5267}\x{5268}\x{5269}\x{526A}\x{526B}\x{526C}' . '\x{526D}\x{526E}\x{526F}\x{5270}\x{5272}\x{5273}\x{5274}\x{5275}\x{5276}' . '\x{5277}\x{5278}\x{527A}\x{527B}\x{527C}\x{527D}\x{527E}\x{527F}\x{5280}' . '\x{5281}\x{5282}\x{5283}\x{5284}\x{5286}\x{5287}\x{5288}\x{5289}\x{528A}' . '\x{528B}\x{528C}\x{528D}\x{528F}\x{5290}\x{5291}\x{5292}\x{5293}\x{5294}' . '\x{5295}\x{5296}\x{5297}\x{5298}\x{5299}\x{529A}\x{529B}\x{529C}\x{529D}' . '\x{529E}\x{529F}\x{52A0}\x{52A1}\x{52A2}\x{52A3}\x{52A5}\x{52A6}\x{52A7}' . '\x{52A8}\x{52A9}\x{52AA}\x{52AB}\x{52AC}\x{52AD}\x{52AE}\x{52AF}\x{52B0}' . '\x{52B1}\x{52B2}\x{52B3}\x{52B4}\x{52B5}\x{52B6}\x{52B7}\x{52B8}\x{52B9}' . '\x{52BA}\x{52BB}\x{52BC}\x{52BD}\x{52BE}\x{52BF}\x{52C0}\x{52C1}\x{52C2}' . '\x{52C3}\x{52C6}\x{52C7}\x{52C9}\x{52CA}\x{52CB}\x{52CD}\x{52CF}\x{52D0}' . '\x{52D2}\x{52D3}\x{52D5}\x{52D6}\x{52D7}\x{52D8}\x{52D9}\x{52DA}\x{52DB}' . '\x{52DC}\x{52DD}\x{52DE}\x{52DF}\x{52E0}\x{52E2}\x{52E3}\x{52E4}\x{52E6}' . '\x{52E7}\x{52E8}\x{52E9}\x{52EA}\x{52EB}\x{52EC}\x{52ED}\x{52EF}\x{52F0}' . '\x{52F1}\x{52F2}\x{52F3}\x{52F4}\x{52F5}\x{52F6}\x{52F7}\x{52F8}\x{52F9}' . '\x{52FA}\x{52FB}\x{52FC}\x{52FD}\x{52FE}\x{52FF}\x{5300}\x{5301}\x{5302}' . '\x{5305}\x{5306}\x{5307}\x{5308}\x{5309}\x{530A}\x{530B}\x{530C}\x{530D}' . '\x{530E}\x{530F}\x{5310}\x{5311}\x{5312}\x{5313}\x{5314}\x{5315}\x{5316}' . '\x{5317}\x{5319}\x{531A}\x{531C}\x{531D}\x{531F}\x{5320}\x{5321}\x{5322}' . '\x{5323}\x{5324}\x{5325}\x{5326}\x{5328}\x{532A}\x{532B}\x{532C}\x{532D}' . '\x{532E}\x{532F}\x{5330}\x{5331}\x{5333}\x{5334}\x{5337}\x{5339}\x{533A}' . '\x{533B}\x{533C}\x{533D}\x{533E}\x{533F}\x{5340}\x{5341}\x{5343}\x{5344}' . '\x{5345}\x{5346}\x{5347}\x{5348}\x{5349}\x{534A}\x{534B}\x{534C}\x{534D}' . '\x{534E}\x{534F}\x{5350}\x{5351}\x{5352}\x{5353}\x{5354}\x{5355}\x{5356}' . '\x{5357}\x{5358}\x{5359}\x{535A}\x{535C}\x{535E}\x{535F}\x{5360}\x{5361}' . '\x{5362}\x{5363}\x{5364}\x{5365}\x{5366}\x{5367}\x{5369}\x{536B}\x{536C}' . '\x{536E}\x{536F}\x{5370}\x{5371}\x{5372}\x{5373}\x{5374}\x{5375}\x{5376}' . '\x{5377}\x{5378}\x{5379}\x{537A}\x{537B}\x{537C}\x{537D}\x{537E}\x{537F}' . '\x{5381}\x{5382}\x{5383}\x{5384}\x{5385}\x{5386}\x{5387}\x{5388}\x{5389}' . '\x{538A}\x{538B}\x{538C}\x{538D}\x{538E}\x{538F}\x{5390}\x{5391}\x{5392}' . '\x{5393}\x{5394}\x{5395}\x{5396}\x{5397}\x{5398}\x{5399}\x{539A}\x{539B}' . '\x{539C}\x{539D}\x{539E}\x{539F}\x{53A0}\x{53A2}\x{53A3}\x{53A4}\x{53A5}' . '\x{53A6}\x{53A7}\x{53A8}\x{53A9}\x{53AC}\x{53AD}\x{53AE}\x{53B0}\x{53B1}' . '\x{53B2}\x{53B3}\x{53B4}\x{53B5}\x{53B6}\x{53B7}\x{53B8}\x{53B9}\x{53BB}' . '\x{53BC}\x{53BD}\x{53BE}\x{53BF}\x{53C0}\x{53C1}\x{53C2}\x{53C3}\x{53C4}' . '\x{53C6}\x{53C7}\x{53C8}\x{53C9}\x{53CA}\x{53CB}\x{53CC}\x{53CD}\x{53CE}' . '\x{53D0}\x{53D1}\x{53D2}\x{53D3}\x{53D4}\x{53D5}\x{53D6}\x{53D7}\x{53D8}' . '\x{53D9}\x{53DB}\x{53DC}\x{53DF}\x{53E0}\x{53E1}\x{53E2}\x{53E3}\x{53E4}' . '\x{53E5}\x{53E6}\x{53E8}\x{53E9}\x{53EA}\x{53EB}\x{53EC}\x{53ED}\x{53EE}' . '\x{53EF}\x{53F0}\x{53F1}\x{53F2}\x{53F3}\x{53F4}\x{53F5}\x{53F6}\x{53F7}' . '\x{53F8}\x{53F9}\x{53FA}\x{53FB}\x{53FC}\x{53FD}\x{53FE}\x{5401}\x{5402}' . '\x{5403}\x{5404}\x{5405}\x{5406}\x{5407}\x{5408}\x{5409}\x{540A}\x{540B}' . '\x{540C}\x{540D}\x{540E}\x{540F}\x{5410}\x{5411}\x{5412}\x{5413}\x{5414}' . '\x{5415}\x{5416}\x{5417}\x{5418}\x{5419}\x{541B}\x{541C}\x{541D}\x{541E}' . '\x{541F}\x{5420}\x{5421}\x{5423}\x{5424}\x{5425}\x{5426}\x{5427}\x{5428}' . '\x{5429}\x{542A}\x{542B}\x{542C}\x{542D}\x{542E}\x{542F}\x{5430}\x{5431}' . '\x{5432}\x{5433}\x{5434}\x{5435}\x{5436}\x{5437}\x{5438}\x{5439}\x{543A}' . '\x{543B}\x{543C}\x{543D}\x{543E}\x{543F}\x{5440}\x{5441}\x{5442}\x{5443}' . '\x{5444}\x{5445}\x{5446}\x{5447}\x{5448}\x{5449}\x{544A}\x{544B}\x{544D}' . '\x{544E}\x{544F}\x{5450}\x{5451}\x{5452}\x{5453}\x{5454}\x{5455}\x{5456}' . '\x{5457}\x{5458}\x{5459}\x{545A}\x{545B}\x{545C}\x{545E}\x{545F}\x{5460}' . '\x{5461}\x{5462}\x{5463}\x{5464}\x{5465}\x{5466}\x{5467}\x{5468}\x{546A}' . '\x{546B}\x{546C}\x{546D}\x{546E}\x{546F}\x{5470}\x{5471}\x{5472}\x{5473}' . '\x{5474}\x{5475}\x{5476}\x{5477}\x{5478}\x{5479}\x{547A}\x{547B}\x{547C}' . '\x{547D}\x{547E}\x{547F}\x{5480}\x{5481}\x{5482}\x{5483}\x{5484}\x{5485}' . '\x{5486}\x{5487}\x{5488}\x{5489}\x{548B}\x{548C}\x{548D}\x{548E}\x{548F}' . '\x{5490}\x{5491}\x{5492}\x{5493}\x{5494}\x{5495}\x{5496}\x{5497}\x{5498}' . '\x{5499}\x{549A}\x{549B}\x{549C}\x{549D}\x{549E}\x{549F}\x{54A0}\x{54A1}' . '\x{54A2}\x{54A3}\x{54A4}\x{54A5}\x{54A6}\x{54A7}\x{54A8}\x{54A9}\x{54AA}' . '\x{54AB}\x{54AC}\x{54AD}\x{54AE}\x{54AF}\x{54B0}\x{54B1}\x{54B2}\x{54B3}' . '\x{54B4}\x{54B6}\x{54B7}\x{54B8}\x{54B9}\x{54BA}\x{54BB}\x{54BC}\x{54BD}' . '\x{54BE}\x{54BF}\x{54C0}\x{54C1}\x{54C2}\x{54C3}\x{54C4}\x{54C5}\x{54C6}' . '\x{54C7}\x{54C8}\x{54C9}\x{54CA}\x{54CB}\x{54CC}\x{54CD}\x{54CE}\x{54CF}' . '\x{54D0}\x{54D1}\x{54D2}\x{54D3}\x{54D4}\x{54D5}\x{54D6}\x{54D7}\x{54D8}' . '\x{54D9}\x{54DA}\x{54DB}\x{54DC}\x{54DD}\x{54DE}\x{54DF}\x{54E0}\x{54E1}' . '\x{54E2}\x{54E3}\x{54E4}\x{54E5}\x{54E6}\x{54E7}\x{54E8}\x{54E9}\x{54EA}' . '\x{54EB}\x{54EC}\x{54ED}\x{54EE}\x{54EF}\x{54F0}\x{54F1}\x{54F2}\x{54F3}' . '\x{54F4}\x{54F5}\x{54F7}\x{54F8}\x{54F9}\x{54FA}\x{54FB}\x{54FC}\x{54FD}' . '\x{54FE}\x{54FF}\x{5500}\x{5501}\x{5502}\x{5503}\x{5504}\x{5505}\x{5506}' . '\x{5507}\x{5508}\x{5509}\x{550A}\x{550B}\x{550C}\x{550D}\x{550E}\x{550F}' . '\x{5510}\x{5511}\x{5512}\x{5513}\x{5514}\x{5516}\x{5517}\x{551A}\x{551B}' . '\x{551C}\x{551D}\x{551E}\x{551F}\x{5520}\x{5521}\x{5522}\x{5523}\x{5524}' . '\x{5525}\x{5526}\x{5527}\x{5528}\x{5529}\x{552A}\x{552B}\x{552C}\x{552D}' . '\x{552E}\x{552F}\x{5530}\x{5531}\x{5532}\x{5533}\x{5534}\x{5535}\x{5536}' . '\x{5537}\x{5538}\x{5539}\x{553A}\x{553B}\x{553C}\x{553D}\x{553E}\x{553F}' . '\x{5540}\x{5541}\x{5542}\x{5543}\x{5544}\x{5545}\x{5546}\x{5548}\x{5549}' . '\x{554A}\x{554B}\x{554C}\x{554D}\x{554E}\x{554F}\x{5550}\x{5551}\x{5552}' . '\x{5553}\x{5554}\x{5555}\x{5556}\x{5557}\x{5558}\x{5559}\x{555A}\x{555B}' . '\x{555C}\x{555D}\x{555E}\x{555F}\x{5561}\x{5562}\x{5563}\x{5564}\x{5565}' . '\x{5566}\x{5567}\x{5568}\x{5569}\x{556A}\x{556B}\x{556C}\x{556D}\x{556E}' . '\x{556F}\x{5570}\x{5571}\x{5572}\x{5573}\x{5574}\x{5575}\x{5576}\x{5577}' . '\x{5578}\x{5579}\x{557B}\x{557C}\x{557D}\x{557E}\x{557F}\x{5580}\x{5581}' . '\x{5582}\x{5583}\x{5584}\x{5585}\x{5586}\x{5587}\x{5588}\x{5589}\x{558A}' . '\x{558B}\x{558C}\x{558D}\x{558E}\x{558F}\x{5590}\x{5591}\x{5592}\x{5593}' . '\x{5594}\x{5595}\x{5596}\x{5597}\x{5598}\x{5599}\x{559A}\x{559B}\x{559C}' . '\x{559D}\x{559E}\x{559F}\x{55A0}\x{55A1}\x{55A2}\x{55A3}\x{55A4}\x{55A5}' . '\x{55A6}\x{55A7}\x{55A8}\x{55A9}\x{55AA}\x{55AB}\x{55AC}\x{55AD}\x{55AE}' . '\x{55AF}\x{55B0}\x{55B1}\x{55B2}\x{55B3}\x{55B4}\x{55B5}\x{55B6}\x{55B7}' . '\x{55B8}\x{55B9}\x{55BA}\x{55BB}\x{55BC}\x{55BD}\x{55BE}\x{55BF}\x{55C0}' . '\x{55C1}\x{55C2}\x{55C3}\x{55C4}\x{55C5}\x{55C6}\x{55C7}\x{55C8}\x{55C9}' . '\x{55CA}\x{55CB}\x{55CC}\x{55CD}\x{55CE}\x{55CF}\x{55D0}\x{55D1}\x{55D2}' . '\x{55D3}\x{55D4}\x{55D5}\x{55D6}\x{55D7}\x{55D8}\x{55D9}\x{55DA}\x{55DB}' . '\x{55DC}\x{55DD}\x{55DE}\x{55DF}\x{55E1}\x{55E2}\x{55E3}\x{55E4}\x{55E5}' . '\x{55E6}\x{55E7}\x{55E8}\x{55E9}\x{55EA}\x{55EB}\x{55EC}\x{55ED}\x{55EE}' . '\x{55EF}\x{55F0}\x{55F1}\x{55F2}\x{55F3}\x{55F4}\x{55F5}\x{55F6}\x{55F7}' . '\x{55F9}\x{55FA}\x{55FB}\x{55FC}\x{55FD}\x{55FE}\x{55FF}\x{5600}\x{5601}' . '\x{5602}\x{5603}\x{5604}\x{5606}\x{5607}\x{5608}\x{5609}\x{560C}\x{560D}' . '\x{560E}\x{560F}\x{5610}\x{5611}\x{5612}\x{5613}\x{5614}\x{5615}\x{5616}' . '\x{5617}\x{5618}\x{5619}\x{561A}\x{561B}\x{561C}\x{561D}\x{561E}\x{561F}' . '\x{5621}\x{5622}\x{5623}\x{5624}\x{5625}\x{5626}\x{5627}\x{5628}\x{5629}' . '\x{562A}\x{562C}\x{562D}\x{562E}\x{562F}\x{5630}\x{5631}\x{5632}\x{5633}' . '\x{5634}\x{5635}\x{5636}\x{5638}\x{5639}\x{563A}\x{563B}\x{563D}\x{563E}' . '\x{563F}\x{5640}\x{5641}\x{5642}\x{5643}\x{5645}\x{5646}\x{5647}\x{5648}' . '\x{5649}\x{564A}\x{564C}\x{564D}\x{564E}\x{564F}\x{5650}\x{5652}\x{5653}' . '\x{5654}\x{5655}\x{5657}\x{5658}\x{5659}\x{565A}\x{565B}\x{565C}\x{565D}' . '\x{565E}\x{5660}\x{5662}\x{5663}\x{5664}\x{5665}\x{5666}\x{5667}\x{5668}' . '\x{5669}\x{566A}\x{566B}\x{566C}\x{566D}\x{566E}\x{566F}\x{5670}\x{5671}' . '\x{5672}\x{5673}\x{5674}\x{5676}\x{5677}\x{5678}\x{5679}\x{567A}\x{567B}' . '\x{567C}\x{567E}\x{567F}\x{5680}\x{5681}\x{5682}\x{5683}\x{5684}\x{5685}' . '\x{5686}\x{5687}\x{568A}\x{568C}\x{568D}\x{568E}\x{568F}\x{5690}\x{5691}' . '\x{5692}\x{5693}\x{5694}\x{5695}\x{5697}\x{5698}\x{5699}\x{569A}\x{569B}' . '\x{569C}\x{569D}\x{569F}\x{56A0}\x{56A1}\x{56A3}\x{56A4}\x{56A5}\x{56A6}' . '\x{56A7}\x{56A8}\x{56A9}\x{56AA}\x{56AB}\x{56AC}\x{56AD}\x{56AE}\x{56AF}' . '\x{56B0}\x{56B1}\x{56B2}\x{56B3}\x{56B4}\x{56B5}\x{56B6}\x{56B7}\x{56B8}' . '\x{56B9}\x{56BB}\x{56BC}\x{56BD}\x{56BE}\x{56BF}\x{56C0}\x{56C1}\x{56C2}' . '\x{56C3}\x{56C4}\x{56C5}\x{56C6}\x{56C7}\x{56C8}\x{56C9}\x{56CA}\x{56CB}' . '\x{56CC}\x{56CD}\x{56CE}\x{56D0}\x{56D1}\x{56D2}\x{56D3}\x{56D4}\x{56D5}' . '\x{56D6}\x{56D7}\x{56D8}\x{56DA}\x{56DB}\x{56DC}\x{56DD}\x{56DE}\x{56DF}' . '\x{56E0}\x{56E1}\x{56E2}\x{56E3}\x{56E4}\x{56E5}\x{56E7}\x{56E8}\x{56E9}' . '\x{56EA}\x{56EB}\x{56EC}\x{56ED}\x{56EE}\x{56EF}\x{56F0}\x{56F1}\x{56F2}' . '\x{56F3}\x{56F4}\x{56F5}\x{56F7}\x{56F9}\x{56FA}\x{56FD}\x{56FE}\x{56FF}' . '\x{5700}\x{5701}\x{5702}\x{5703}\x{5704}\x{5706}\x{5707}\x{5708}\x{5709}' . '\x{570A}\x{570B}\x{570C}\x{570D}\x{570E}\x{570F}\x{5710}\x{5712}\x{5713}' . '\x{5714}\x{5715}\x{5716}\x{5718}\x{5719}\x{571A}\x{571B}\x{571C}\x{571D}' . '\x{571E}\x{571F}\x{5720}\x{5722}\x{5723}\x{5725}\x{5726}\x{5727}\x{5728}' . '\x{5729}\x{572A}\x{572B}\x{572C}\x{572D}\x{572E}\x{572F}\x{5730}\x{5731}' . '\x{5732}\x{5733}\x{5734}\x{5735}\x{5736}\x{5737}\x{5738}\x{5739}\x{573A}' . '\x{573B}\x{573C}\x{573E}\x{573F}\x{5740}\x{5741}\x{5742}\x{5744}\x{5745}' . '\x{5746}\x{5747}\x{5749}\x{574A}\x{574B}\x{574C}\x{574D}\x{574E}\x{574F}' . '\x{5750}\x{5751}\x{5752}\x{5753}\x{5754}\x{5757}\x{5759}\x{575A}\x{575B}' . '\x{575C}\x{575D}\x{575E}\x{575F}\x{5760}\x{5761}\x{5762}\x{5764}\x{5765}' . '\x{5766}\x{5767}\x{5768}\x{5769}\x{576A}\x{576B}\x{576C}\x{576D}\x{576F}' . '\x{5770}\x{5771}\x{5772}\x{5773}\x{5774}\x{5775}\x{5776}\x{5777}\x{5779}' . '\x{577A}\x{577B}\x{577C}\x{577D}\x{577E}\x{577F}\x{5780}\x{5782}\x{5783}' . '\x{5784}\x{5785}\x{5786}\x{5788}\x{5789}\x{578A}\x{578B}\x{578C}\x{578D}' . '\x{578E}\x{578F}\x{5790}\x{5791}\x{5792}\x{5793}\x{5794}\x{5795}\x{5797}' . '\x{5798}\x{5799}\x{579A}\x{579B}\x{579C}\x{579D}\x{579E}\x{579F}\x{57A0}' . '\x{57A1}\x{57A2}\x{57A3}\x{57A4}\x{57A5}\x{57A6}\x{57A7}\x{57A9}\x{57AA}' . '\x{57AB}\x{57AC}\x{57AD}\x{57AE}\x{57AF}\x{57B0}\x{57B1}\x{57B2}\x{57B3}' . '\x{57B4}\x{57B5}\x{57B6}\x{57B7}\x{57B8}\x{57B9}\x{57BA}\x{57BB}\x{57BC}' . '\x{57BD}\x{57BE}\x{57BF}\x{57C0}\x{57C1}\x{57C2}\x{57C3}\x{57C4}\x{57C5}' . '\x{57C6}\x{57C7}\x{57C8}\x{57C9}\x{57CB}\x{57CC}\x{57CD}\x{57CE}\x{57CF}' . '\x{57D0}\x{57D2}\x{57D3}\x{57D4}\x{57D5}\x{57D6}\x{57D8}\x{57D9}\x{57DA}' . '\x{57DC}\x{57DD}\x{57DF}\x{57E0}\x{57E1}\x{57E2}\x{57E3}\x{57E4}\x{57E5}' . '\x{57E6}\x{57E7}\x{57E8}\x{57E9}\x{57EA}\x{57EB}\x{57EC}\x{57ED}\x{57EE}' . '\x{57EF}\x{57F0}\x{57F1}\x{57F2}\x{57F3}\x{57F4}\x{57F5}\x{57F6}\x{57F7}' . '\x{57F8}\x{57F9}\x{57FA}\x{57FB}\x{57FC}\x{57FD}\x{57FE}\x{57FF}\x{5800}' . '\x{5801}\x{5802}\x{5803}\x{5804}\x{5805}\x{5806}\x{5807}\x{5808}\x{5809}' . '\x{580A}\x{580B}\x{580C}\x{580D}\x{580E}\x{580F}\x{5810}\x{5811}\x{5812}' . '\x{5813}\x{5814}\x{5815}\x{5816}\x{5819}\x{581A}\x{581B}\x{581C}\x{581D}' . '\x{581E}\x{581F}\x{5820}\x{5821}\x{5822}\x{5823}\x{5824}\x{5825}\x{5826}' . '\x{5827}\x{5828}\x{5829}\x{582A}\x{582B}\x{582C}\x{582D}\x{582E}\x{582F}' . '\x{5830}\x{5831}\x{5832}\x{5833}\x{5834}\x{5835}\x{5836}\x{5837}\x{5838}' . '\x{5839}\x{583A}\x{583B}\x{583C}\x{583D}\x{583E}\x{583F}\x{5840}\x{5842}' . '\x{5843}\x{5844}\x{5845}\x{5846}\x{5847}\x{5848}\x{5849}\x{584A}\x{584B}' . '\x{584C}\x{584D}\x{584E}\x{584F}\x{5851}\x{5852}\x{5853}\x{5854}\x{5855}' . '\x{5857}\x{5858}\x{5859}\x{585A}\x{585B}\x{585C}\x{585D}\x{585E}\x{585F}' . '\x{5861}\x{5862}\x{5863}\x{5864}\x{5865}\x{5868}\x{5869}\x{586A}\x{586B}' . '\x{586C}\x{586D}\x{586E}\x{586F}\x{5870}\x{5871}\x{5872}\x{5873}\x{5874}' . '\x{5875}\x{5876}\x{5878}\x{5879}\x{587A}\x{587B}\x{587C}\x{587D}\x{587E}' . '\x{587F}\x{5880}\x{5881}\x{5882}\x{5883}\x{5884}\x{5885}\x{5886}\x{5887}' . '\x{5888}\x{5889}\x{588A}\x{588B}\x{588C}\x{588D}\x{588E}\x{588F}\x{5890}' . '\x{5891}\x{5892}\x{5893}\x{5894}\x{5896}\x{5897}\x{5898}\x{5899}\x{589A}' . '\x{589B}\x{589C}\x{589D}\x{589E}\x{589F}\x{58A0}\x{58A1}\x{58A2}\x{58A3}' . '\x{58A4}\x{58A5}\x{58A6}\x{58A7}\x{58A8}\x{58A9}\x{58AB}\x{58AC}\x{58AD}' . '\x{58AE}\x{58AF}\x{58B0}\x{58B1}\x{58B2}\x{58B3}\x{58B4}\x{58B7}\x{58B8}' . '\x{58B9}\x{58BA}\x{58BB}\x{58BC}\x{58BD}\x{58BE}\x{58BF}\x{58C1}\x{58C2}' . '\x{58C5}\x{58C6}\x{58C7}\x{58C8}\x{58C9}\x{58CA}\x{58CB}\x{58CE}\x{58CF}' . '\x{58D1}\x{58D2}\x{58D3}\x{58D4}\x{58D5}\x{58D6}\x{58D7}\x{58D8}\x{58D9}' . '\x{58DA}\x{58DB}\x{58DD}\x{58DE}\x{58DF}\x{58E0}\x{58E2}\x{58E3}\x{58E4}' . '\x{58E5}\x{58E7}\x{58E8}\x{58E9}\x{58EA}\x{58EB}\x{58EC}\x{58ED}\x{58EE}' . '\x{58EF}\x{58F0}\x{58F1}\x{58F2}\x{58F3}\x{58F4}\x{58F6}\x{58F7}\x{58F8}' . '\x{58F9}\x{58FA}\x{58FB}\x{58FC}\x{58FD}\x{58FE}\x{58FF}\x{5900}\x{5902}' . '\x{5903}\x{5904}\x{5906}\x{5907}\x{5909}\x{590A}\x{590B}\x{590C}\x{590D}' . '\x{590E}\x{590F}\x{5910}\x{5912}\x{5914}\x{5915}\x{5916}\x{5917}\x{5918}' . '\x{5919}\x{591A}\x{591B}\x{591C}\x{591D}\x{591E}\x{591F}\x{5920}\x{5921}' . '\x{5922}\x{5924}\x{5925}\x{5926}\x{5927}\x{5928}\x{5929}\x{592A}\x{592B}' . '\x{592C}\x{592D}\x{592E}\x{592F}\x{5930}\x{5931}\x{5932}\x{5934}\x{5935}' . '\x{5937}\x{5938}\x{5939}\x{593A}\x{593B}\x{593C}\x{593D}\x{593E}\x{593F}' . '\x{5940}\x{5941}\x{5942}\x{5943}\x{5944}\x{5945}\x{5946}\x{5947}\x{5948}' . '\x{5949}\x{594A}\x{594B}\x{594C}\x{594D}\x{594E}\x{594F}\x{5950}\x{5951}' . '\x{5952}\x{5953}\x{5954}\x{5955}\x{5956}\x{5957}\x{5958}\x{595A}\x{595C}' . '\x{595D}\x{595E}\x{595F}\x{5960}\x{5961}\x{5962}\x{5963}\x{5964}\x{5965}' . '\x{5966}\x{5967}\x{5968}\x{5969}\x{596A}\x{596B}\x{596C}\x{596D}\x{596E}' . '\x{596F}\x{5970}\x{5971}\x{5972}\x{5973}\x{5974}\x{5975}\x{5976}\x{5977}' . '\x{5978}\x{5979}\x{597A}\x{597B}\x{597C}\x{597D}\x{597E}\x{597F}\x{5980}' . '\x{5981}\x{5982}\x{5983}\x{5984}\x{5985}\x{5986}\x{5987}\x{5988}\x{5989}' . '\x{598A}\x{598B}\x{598C}\x{598D}\x{598E}\x{598F}\x{5990}\x{5991}\x{5992}' . '\x{5993}\x{5994}\x{5995}\x{5996}\x{5997}\x{5998}\x{5999}\x{599A}\x{599C}' . '\x{599D}\x{599E}\x{599F}\x{59A0}\x{59A1}\x{59A2}\x{59A3}\x{59A4}\x{59A5}' . '\x{59A6}\x{59A7}\x{59A8}\x{59A9}\x{59AA}\x{59AB}\x{59AC}\x{59AD}\x{59AE}' . '\x{59AF}\x{59B0}\x{59B1}\x{59B2}\x{59B3}\x{59B4}\x{59B5}\x{59B6}\x{59B8}' . '\x{59B9}\x{59BA}\x{59BB}\x{59BC}\x{59BD}\x{59BE}\x{59BF}\x{59C0}\x{59C1}' . '\x{59C2}\x{59C3}\x{59C4}\x{59C5}\x{59C6}\x{59C7}\x{59C8}\x{59C9}\x{59CA}' . '\x{59CB}\x{59CC}\x{59CD}\x{59CE}\x{59CF}\x{59D0}\x{59D1}\x{59D2}\x{59D3}' . '\x{59D4}\x{59D5}\x{59D6}\x{59D7}\x{59D8}\x{59D9}\x{59DA}\x{59DB}\x{59DC}' . '\x{59DD}\x{59DE}\x{59DF}\x{59E0}\x{59E1}\x{59E2}\x{59E3}\x{59E4}\x{59E5}' . '\x{59E6}\x{59E8}\x{59E9}\x{59EA}\x{59EB}\x{59EC}\x{59ED}\x{59EE}\x{59EF}' . '\x{59F0}\x{59F1}\x{59F2}\x{59F3}\x{59F4}\x{59F5}\x{59F6}\x{59F7}\x{59F8}' . '\x{59F9}\x{59FA}\x{59FB}\x{59FC}\x{59FD}\x{59FE}\x{59FF}\x{5A00}\x{5A01}' . '\x{5A02}\x{5A03}\x{5A04}\x{5A05}\x{5A06}\x{5A07}\x{5A08}\x{5A09}\x{5A0A}' . '\x{5A0B}\x{5A0C}\x{5A0D}\x{5A0E}\x{5A0F}\x{5A10}\x{5A11}\x{5A12}\x{5A13}' . '\x{5A14}\x{5A15}\x{5A16}\x{5A17}\x{5A18}\x{5A19}\x{5A1A}\x{5A1B}\x{5A1C}' . '\x{5A1D}\x{5A1E}\x{5A1F}\x{5A20}\x{5A21}\x{5A22}\x{5A23}\x{5A25}\x{5A27}' . '\x{5A28}\x{5A29}\x{5A2A}\x{5A2B}\x{5A2D}\x{5A2E}\x{5A2F}\x{5A31}\x{5A32}' . '\x{5A33}\x{5A34}\x{5A35}\x{5A36}\x{5A37}\x{5A38}\x{5A39}\x{5A3A}\x{5A3B}' . '\x{5A3C}\x{5A3D}\x{5A3E}\x{5A3F}\x{5A40}\x{5A41}\x{5A42}\x{5A43}\x{5A44}' . '\x{5A45}\x{5A46}\x{5A47}\x{5A48}\x{5A49}\x{5A4A}\x{5A4B}\x{5A4C}\x{5A4D}' . '\x{5A4E}\x{5A4F}\x{5A50}\x{5A51}\x{5A52}\x{5A53}\x{5A55}\x{5A56}\x{5A57}' . '\x{5A58}\x{5A5A}\x{5A5B}\x{5A5C}\x{5A5D}\x{5A5E}\x{5A5F}\x{5A60}\x{5A61}' . '\x{5A62}\x{5A63}\x{5A64}\x{5A65}\x{5A66}\x{5A67}\x{5A68}\x{5A69}\x{5A6A}' . '\x{5A6B}\x{5A6C}\x{5A6D}\x{5A6E}\x{5A70}\x{5A72}\x{5A73}\x{5A74}\x{5A75}' . '\x{5A76}\x{5A77}\x{5A78}\x{5A79}\x{5A7A}\x{5A7B}\x{5A7C}\x{5A7D}\x{5A7E}' . '\x{5A7F}\x{5A80}\x{5A81}\x{5A82}\x{5A83}\x{5A84}\x{5A85}\x{5A86}\x{5A88}' . '\x{5A89}\x{5A8A}\x{5A8B}\x{5A8C}\x{5A8E}\x{5A8F}\x{5A90}\x{5A91}\x{5A92}' . '\x{5A93}\x{5A94}\x{5A95}\x{5A96}\x{5A97}\x{5A98}\x{5A99}\x{5A9A}\x{5A9B}' . '\x{5A9C}\x{5A9D}\x{5A9E}\x{5A9F}\x{5AA0}\x{5AA1}\x{5AA2}\x{5AA3}\x{5AA4}' . '\x{5AA5}\x{5AA6}\x{5AA7}\x{5AA8}\x{5AA9}\x{5AAA}\x{5AAC}\x{5AAD}\x{5AAE}' . '\x{5AAF}\x{5AB0}\x{5AB1}\x{5AB2}\x{5AB3}\x{5AB4}\x{5AB5}\x{5AB6}\x{5AB7}' . '\x{5AB8}\x{5AB9}\x{5ABA}\x{5ABB}\x{5ABC}\x{5ABD}\x{5ABE}\x{5ABF}\x{5AC0}' . '\x{5AC1}\x{5AC2}\x{5AC3}\x{5AC4}\x{5AC5}\x{5AC6}\x{5AC7}\x{5AC8}\x{5AC9}' . '\x{5ACA}\x{5ACB}\x{5ACC}\x{5ACD}\x{5ACE}\x{5ACF}\x{5AD1}\x{5AD2}\x{5AD4}' . '\x{5AD5}\x{5AD6}\x{5AD7}\x{5AD8}\x{5AD9}\x{5ADA}\x{5ADB}\x{5ADC}\x{5ADD}' . '\x{5ADE}\x{5ADF}\x{5AE0}\x{5AE1}\x{5AE2}\x{5AE3}\x{5AE4}\x{5AE5}\x{5AE6}' . '\x{5AE7}\x{5AE8}\x{5AE9}\x{5AEA}\x{5AEB}\x{5AEC}\x{5AED}\x{5AEE}\x{5AF1}' . '\x{5AF2}\x{5AF3}\x{5AF4}\x{5AF5}\x{5AF6}\x{5AF7}\x{5AF8}\x{5AF9}\x{5AFA}' . '\x{5AFB}\x{5AFC}\x{5AFD}\x{5AFE}\x{5AFF}\x{5B00}\x{5B01}\x{5B02}\x{5B03}' . '\x{5B04}\x{5B05}\x{5B06}\x{5B07}\x{5B08}\x{5B09}\x{5B0B}\x{5B0C}\x{5B0E}' . '\x{5B0F}\x{5B10}\x{5B11}\x{5B12}\x{5B13}\x{5B14}\x{5B15}\x{5B16}\x{5B17}' . '\x{5B18}\x{5B19}\x{5B1A}\x{5B1B}\x{5B1C}\x{5B1D}\x{5B1E}\x{5B1F}\x{5B20}' . '\x{5B21}\x{5B22}\x{5B23}\x{5B24}\x{5B25}\x{5B26}\x{5B27}\x{5B28}\x{5B29}' . '\x{5B2A}\x{5B2B}\x{5B2C}\x{5B2D}\x{5B2E}\x{5B2F}\x{5B30}\x{5B31}\x{5B32}' . '\x{5B33}\x{5B34}\x{5B35}\x{5B36}\x{5B37}\x{5B38}\x{5B3A}\x{5B3B}\x{5B3C}' . '\x{5B3D}\x{5B3E}\x{5B3F}\x{5B40}\x{5B41}\x{5B42}\x{5B43}\x{5B44}\x{5B45}' . '\x{5B47}\x{5B48}\x{5B49}\x{5B4A}\x{5B4B}\x{5B4C}\x{5B4D}\x{5B4E}\x{5B50}' . '\x{5B51}\x{5B53}\x{5B54}\x{5B55}\x{5B56}\x{5B57}\x{5B58}\x{5B59}\x{5B5A}' . '\x{5B5B}\x{5B5C}\x{5B5D}\x{5B5E}\x{5B5F}\x{5B62}\x{5B63}\x{5B64}\x{5B65}' . '\x{5B66}\x{5B67}\x{5B68}\x{5B69}\x{5B6A}\x{5B6B}\x{5B6C}\x{5B6D}\x{5B6E}' . '\x{5B70}\x{5B71}\x{5B72}\x{5B73}\x{5B74}\x{5B75}\x{5B76}\x{5B77}\x{5B78}' . '\x{5B7A}\x{5B7B}\x{5B7C}\x{5B7D}\x{5B7F}\x{5B80}\x{5B81}\x{5B82}\x{5B83}' . '\x{5B84}\x{5B85}\x{5B87}\x{5B88}\x{5B89}\x{5B8A}\x{5B8B}\x{5B8C}\x{5B8D}' . '\x{5B8E}\x{5B8F}\x{5B91}\x{5B92}\x{5B93}\x{5B94}\x{5B95}\x{5B96}\x{5B97}' . '\x{5B98}\x{5B99}\x{5B9A}\x{5B9B}\x{5B9C}\x{5B9D}\x{5B9E}\x{5B9F}\x{5BA0}' . '\x{5BA1}\x{5BA2}\x{5BA3}\x{5BA4}\x{5BA5}\x{5BA6}\x{5BA7}\x{5BA8}\x{5BAA}' . '\x{5BAB}\x{5BAC}\x{5BAD}\x{5BAE}\x{5BAF}\x{5BB0}\x{5BB1}\x{5BB3}\x{5BB4}' . '\x{5BB5}\x{5BB6}\x{5BB8}\x{5BB9}\x{5BBA}\x{5BBB}\x{5BBD}\x{5BBE}\x{5BBF}' . '\x{5BC0}\x{5BC1}\x{5BC2}\x{5BC3}\x{5BC4}\x{5BC5}\x{5BC6}\x{5BC7}\x{5BCA}' . '\x{5BCB}\x{5BCC}\x{5BCD}\x{5BCE}\x{5BCF}\x{5BD0}\x{5BD1}\x{5BD2}\x{5BD3}' . '\x{5BD4}\x{5BD5}\x{5BD6}\x{5BD8}\x{5BD9}\x{5BDB}\x{5BDC}\x{5BDD}\x{5BDE}' . '\x{5BDF}\x{5BE0}\x{5BE1}\x{5BE2}\x{5BE3}\x{5BE4}\x{5BE5}\x{5BE6}\x{5BE7}' . '\x{5BE8}\x{5BE9}\x{5BEA}\x{5BEB}\x{5BEC}\x{5BED}\x{5BEE}\x{5BEF}\x{5BF0}' . '\x{5BF1}\x{5BF2}\x{5BF3}\x{5BF4}\x{5BF5}\x{5BF6}\x{5BF7}\x{5BF8}\x{5BF9}' . '\x{5BFA}\x{5BFB}\x{5BFC}\x{5BFD}\x{5BFF}\x{5C01}\x{5C03}\x{5C04}\x{5C05}' . '\x{5C06}\x{5C07}\x{5C08}\x{5C09}\x{5C0A}\x{5C0B}\x{5C0C}\x{5C0D}\x{5C0E}' . '\x{5C0F}\x{5C10}\x{5C11}\x{5C12}\x{5C13}\x{5C14}\x{5C15}\x{5C16}\x{5C17}' . '\x{5C18}\x{5C19}\x{5C1A}\x{5C1C}\x{5C1D}\x{5C1E}\x{5C1F}\x{5C20}\x{5C21}' . '\x{5C22}\x{5C24}\x{5C25}\x{5C27}\x{5C28}\x{5C2A}\x{5C2B}\x{5C2C}\x{5C2D}' . '\x{5C2E}\x{5C2F}\x{5C30}\x{5C31}\x{5C32}\x{5C33}\x{5C34}\x{5C35}\x{5C37}' . '\x{5C38}\x{5C39}\x{5C3A}\x{5C3B}\x{5C3C}\x{5C3D}\x{5C3E}\x{5C3F}\x{5C40}' . '\x{5C41}\x{5C42}\x{5C43}\x{5C44}\x{5C45}\x{5C46}\x{5C47}\x{5C48}\x{5C49}' . '\x{5C4A}\x{5C4B}\x{5C4C}\x{5C4D}\x{5C4E}\x{5C4F}\x{5C50}\x{5C51}\x{5C52}' . '\x{5C53}\x{5C54}\x{5C55}\x{5C56}\x{5C57}\x{5C58}\x{5C59}\x{5C5B}\x{5C5C}' . '\x{5C5D}\x{5C5E}\x{5C5F}\x{5C60}\x{5C61}\x{5C62}\x{5C63}\x{5C64}\x{5C65}' . '\x{5C66}\x{5C67}\x{5C68}\x{5C69}\x{5C6A}\x{5C6B}\x{5C6C}\x{5C6D}\x{5C6E}' . '\x{5C6F}\x{5C70}\x{5C71}\x{5C72}\x{5C73}\x{5C74}\x{5C75}\x{5C76}\x{5C77}' . '\x{5C78}\x{5C79}\x{5C7A}\x{5C7B}\x{5C7C}\x{5C7D}\x{5C7E}\x{5C7F}\x{5C80}' . '\x{5C81}\x{5C82}\x{5C83}\x{5C84}\x{5C86}\x{5C87}\x{5C88}\x{5C89}\x{5C8A}' . '\x{5C8B}\x{5C8C}\x{5C8D}\x{5C8E}\x{5C8F}\x{5C90}\x{5C91}\x{5C92}\x{5C93}' . '\x{5C94}\x{5C95}\x{5C96}\x{5C97}\x{5C98}\x{5C99}\x{5C9A}\x{5C9B}\x{5C9C}' . '\x{5C9D}\x{5C9E}\x{5C9F}\x{5CA0}\x{5CA1}\x{5CA2}\x{5CA3}\x{5CA4}\x{5CA5}' . '\x{5CA6}\x{5CA7}\x{5CA8}\x{5CA9}\x{5CAA}\x{5CAB}\x{5CAC}\x{5CAD}\x{5CAE}' . '\x{5CAF}\x{5CB0}\x{5CB1}\x{5CB2}\x{5CB3}\x{5CB5}\x{5CB6}\x{5CB7}\x{5CB8}' . '\x{5CBA}\x{5CBB}\x{5CBC}\x{5CBD}\x{5CBE}\x{5CBF}\x{5CC1}\x{5CC2}\x{5CC3}' . '\x{5CC4}\x{5CC5}\x{5CC6}\x{5CC7}\x{5CC8}\x{5CC9}\x{5CCA}\x{5CCB}\x{5CCC}' . '\x{5CCD}\x{5CCE}\x{5CCF}\x{5CD0}\x{5CD1}\x{5CD2}\x{5CD3}\x{5CD4}\x{5CD6}' . '\x{5CD7}\x{5CD8}\x{5CD9}\x{5CDA}\x{5CDB}\x{5CDC}\x{5CDE}\x{5CDF}\x{5CE0}' . '\x{5CE1}\x{5CE2}\x{5CE3}\x{5CE4}\x{5CE5}\x{5CE6}\x{5CE7}\x{5CE8}\x{5CE9}' . '\x{5CEA}\x{5CEB}\x{5CEC}\x{5CED}\x{5CEE}\x{5CEF}\x{5CF0}\x{5CF1}\x{5CF2}' . '\x{5CF3}\x{5CF4}\x{5CF6}\x{5CF7}\x{5CF8}\x{5CF9}\x{5CFA}\x{5CFB}\x{5CFC}' . '\x{5CFD}\x{5CFE}\x{5CFF}\x{5D00}\x{5D01}\x{5D02}\x{5D03}\x{5D04}\x{5D05}' . '\x{5D06}\x{5D07}\x{5D08}\x{5D09}\x{5D0A}\x{5D0B}\x{5D0C}\x{5D0D}\x{5D0E}' . '\x{5D0F}\x{5D10}\x{5D11}\x{5D12}\x{5D13}\x{5D14}\x{5D15}\x{5D16}\x{5D17}' . '\x{5D18}\x{5D19}\x{5D1A}\x{5D1B}\x{5D1C}\x{5D1D}\x{5D1E}\x{5D1F}\x{5D20}' . '\x{5D21}\x{5D22}\x{5D23}\x{5D24}\x{5D25}\x{5D26}\x{5D27}\x{5D28}\x{5D29}' . '\x{5D2A}\x{5D2C}\x{5D2D}\x{5D2E}\x{5D30}\x{5D31}\x{5D32}\x{5D33}\x{5D34}' . '\x{5D35}\x{5D36}\x{5D37}\x{5D38}\x{5D39}\x{5D3A}\x{5D3C}\x{5D3D}\x{5D3E}' . '\x{5D3F}\x{5D40}\x{5D41}\x{5D42}\x{5D43}\x{5D44}\x{5D45}\x{5D46}\x{5D47}' . '\x{5D48}\x{5D49}\x{5D4A}\x{5D4B}\x{5D4C}\x{5D4D}\x{5D4E}\x{5D4F}\x{5D50}' . '\x{5D51}\x{5D52}\x{5D54}\x{5D55}\x{5D56}\x{5D58}\x{5D59}\x{5D5A}\x{5D5B}' . '\x{5D5D}\x{5D5E}\x{5D5F}\x{5D61}\x{5D62}\x{5D63}\x{5D64}\x{5D65}\x{5D66}' . '\x{5D67}\x{5D68}\x{5D69}\x{5D6A}\x{5D6B}\x{5D6C}\x{5D6D}\x{5D6E}\x{5D6F}' . '\x{5D70}\x{5D71}\x{5D72}\x{5D73}\x{5D74}\x{5D75}\x{5D76}\x{5D77}\x{5D78}' . '\x{5D79}\x{5D7A}\x{5D7B}\x{5D7C}\x{5D7D}\x{5D7E}\x{5D7F}\x{5D80}\x{5D81}' . '\x{5D82}\x{5D84}\x{5D85}\x{5D86}\x{5D87}\x{5D88}\x{5D89}\x{5D8A}\x{5D8B}' . '\x{5D8C}\x{5D8D}\x{5D8E}\x{5D8F}\x{5D90}\x{5D91}\x{5D92}\x{5D93}\x{5D94}' . '\x{5D95}\x{5D97}\x{5D98}\x{5D99}\x{5D9A}\x{5D9B}\x{5D9C}\x{5D9D}\x{5D9E}' . '\x{5D9F}\x{5DA0}\x{5DA1}\x{5DA2}\x{5DA5}\x{5DA6}\x{5DA7}\x{5DA8}\x{5DA9}' . '\x{5DAA}\x{5DAC}\x{5DAD}\x{5DAE}\x{5DAF}\x{5DB0}\x{5DB1}\x{5DB2}\x{5DB4}' . '\x{5DB5}\x{5DB6}\x{5DB7}\x{5DB8}\x{5DBA}\x{5DBB}\x{5DBC}\x{5DBD}\x{5DBE}' . '\x{5DBF}\x{5DC0}\x{5DC1}\x{5DC2}\x{5DC3}\x{5DC5}\x{5DC6}\x{5DC7}\x{5DC8}' . '\x{5DC9}\x{5DCA}\x{5DCB}\x{5DCC}\x{5DCD}\x{5DCE}\x{5DCF}\x{5DD0}\x{5DD1}' . '\x{5DD2}\x{5DD3}\x{5DD4}\x{5DD5}\x{5DD6}\x{5DD8}\x{5DD9}\x{5DDB}\x{5DDD}' . '\x{5DDE}\x{5DDF}\x{5DE0}\x{5DE1}\x{5DE2}\x{5DE3}\x{5DE4}\x{5DE5}\x{5DE6}' . '\x{5DE7}\x{5DE8}\x{5DE9}\x{5DEA}\x{5DEB}\x{5DEC}\x{5DED}\x{5DEE}\x{5DEF}' . '\x{5DF0}\x{5DF1}\x{5DF2}\x{5DF3}\x{5DF4}\x{5DF5}\x{5DF7}\x{5DF8}\x{5DF9}' . '\x{5DFA}\x{5DFB}\x{5DFC}\x{5DFD}\x{5DFE}\x{5DFF}\x{5E00}\x{5E01}\x{5E02}' . '\x{5E03}\x{5E04}\x{5E05}\x{5E06}\x{5E07}\x{5E08}\x{5E09}\x{5E0A}\x{5E0B}' . '\x{5E0C}\x{5E0D}\x{5E0E}\x{5E0F}\x{5E10}\x{5E11}\x{5E13}\x{5E14}\x{5E15}' . '\x{5E16}\x{5E17}\x{5E18}\x{5E19}\x{5E1A}\x{5E1B}\x{5E1C}\x{5E1D}\x{5E1E}' . '\x{5E1F}\x{5E20}\x{5E21}\x{5E22}\x{5E23}\x{5E24}\x{5E25}\x{5E26}\x{5E27}' . '\x{5E28}\x{5E29}\x{5E2A}\x{5E2B}\x{5E2C}\x{5E2D}\x{5E2E}\x{5E2F}\x{5E30}' . '\x{5E31}\x{5E32}\x{5E33}\x{5E34}\x{5E35}\x{5E36}\x{5E37}\x{5E38}\x{5E39}' . '\x{5E3A}\x{5E3B}\x{5E3C}\x{5E3D}\x{5E3E}\x{5E40}\x{5E41}\x{5E42}\x{5E43}' . '\x{5E44}\x{5E45}\x{5E46}\x{5E47}\x{5E49}\x{5E4A}\x{5E4B}\x{5E4C}\x{5E4D}' . '\x{5E4E}\x{5E4F}\x{5E50}\x{5E52}\x{5E53}\x{5E54}\x{5E55}\x{5E56}\x{5E57}' . '\x{5E58}\x{5E59}\x{5E5A}\x{5E5B}\x{5E5C}\x{5E5D}\x{5E5E}\x{5E5F}\x{5E60}' . '\x{5E61}\x{5E62}\x{5E63}\x{5E64}\x{5E65}\x{5E66}\x{5E67}\x{5E68}\x{5E69}' . '\x{5E6A}\x{5E6B}\x{5E6C}\x{5E6D}\x{5E6E}\x{5E6F}\x{5E70}\x{5E71}\x{5E72}' . '\x{5E73}\x{5E74}\x{5E75}\x{5E76}\x{5E77}\x{5E78}\x{5E79}\x{5E7A}\x{5E7B}' . '\x{5E7C}\x{5E7D}\x{5E7E}\x{5E7F}\x{5E80}\x{5E81}\x{5E82}\x{5E83}\x{5E84}' . '\x{5E85}\x{5E86}\x{5E87}\x{5E88}\x{5E89}\x{5E8A}\x{5E8B}\x{5E8C}\x{5E8D}' . '\x{5E8E}\x{5E8F}\x{5E90}\x{5E91}\x{5E93}\x{5E94}\x{5E95}\x{5E96}\x{5E97}' . '\x{5E98}\x{5E99}\x{5E9A}\x{5E9B}\x{5E9C}\x{5E9D}\x{5E9E}\x{5E9F}\x{5EA0}' . '\x{5EA1}\x{5EA2}\x{5EA3}\x{5EA4}\x{5EA5}\x{5EA6}\x{5EA7}\x{5EA8}\x{5EA9}' . '\x{5EAA}\x{5EAB}\x{5EAC}\x{5EAD}\x{5EAE}\x{5EAF}\x{5EB0}\x{5EB1}\x{5EB2}' . '\x{5EB3}\x{5EB4}\x{5EB5}\x{5EB6}\x{5EB7}\x{5EB8}\x{5EB9}\x{5EBB}\x{5EBC}' . '\x{5EBD}\x{5EBE}\x{5EBF}\x{5EC1}\x{5EC2}\x{5EC3}\x{5EC4}\x{5EC5}\x{5EC6}' . '\x{5EC7}\x{5EC8}\x{5EC9}\x{5ECA}\x{5ECB}\x{5ECC}\x{5ECD}\x{5ECE}\x{5ECF}' . '\x{5ED0}\x{5ED1}\x{5ED2}\x{5ED3}\x{5ED4}\x{5ED5}\x{5ED6}\x{5ED7}\x{5ED8}' . '\x{5ED9}\x{5EDA}\x{5EDB}\x{5EDC}\x{5EDD}\x{5EDE}\x{5EDF}\x{5EE0}\x{5EE1}' . '\x{5EE2}\x{5EE3}\x{5EE4}\x{5EE5}\x{5EE6}\x{5EE7}\x{5EE8}\x{5EE9}\x{5EEA}' . '\x{5EEC}\x{5EED}\x{5EEE}\x{5EEF}\x{5EF0}\x{5EF1}\x{5EF2}\x{5EF3}\x{5EF4}' . '\x{5EF5}\x{5EF6}\x{5EF7}\x{5EF8}\x{5EFA}\x{5EFB}\x{5EFC}\x{5EFD}\x{5EFE}' . '\x{5EFF}\x{5F00}\x{5F01}\x{5F02}\x{5F03}\x{5F04}\x{5F05}\x{5F06}\x{5F07}' . '\x{5F08}\x{5F0A}\x{5F0B}\x{5F0C}\x{5F0D}\x{5F0F}\x{5F11}\x{5F12}\x{5F13}' . '\x{5F14}\x{5F15}\x{5F16}\x{5F17}\x{5F18}\x{5F19}\x{5F1A}\x{5F1B}\x{5F1C}' . '\x{5F1D}\x{5F1E}\x{5F1F}\x{5F20}\x{5F21}\x{5F22}\x{5F23}\x{5F24}\x{5F25}' . '\x{5F26}\x{5F27}\x{5F28}\x{5F29}\x{5F2A}\x{5F2B}\x{5F2C}\x{5F2D}\x{5F2E}' . '\x{5F2F}\x{5F30}\x{5F31}\x{5F32}\x{5F33}\x{5F34}\x{5F35}\x{5F36}\x{5F37}' . '\x{5F38}\x{5F39}\x{5F3A}\x{5F3C}\x{5F3E}\x{5F3F}\x{5F40}\x{5F41}\x{5F42}' . '\x{5F43}\x{5F44}\x{5F45}\x{5F46}\x{5F47}\x{5F48}\x{5F49}\x{5F4A}\x{5F4B}' . '\x{5F4C}\x{5F4D}\x{5F4E}\x{5F4F}\x{5F50}\x{5F51}\x{5F52}\x{5F53}\x{5F54}' . '\x{5F55}\x{5F56}\x{5F57}\x{5F58}\x{5F59}\x{5F5A}\x{5F5B}\x{5F5C}\x{5F5D}' . '\x{5F5E}\x{5F5F}\x{5F60}\x{5F61}\x{5F62}\x{5F63}\x{5F64}\x{5F65}\x{5F66}' . '\x{5F67}\x{5F68}\x{5F69}\x{5F6A}\x{5F6B}\x{5F6C}\x{5F6D}\x{5F6E}\x{5F6F}' . '\x{5F70}\x{5F71}\x{5F72}\x{5F73}\x{5F74}\x{5F75}\x{5F76}\x{5F77}\x{5F78}' . '\x{5F79}\x{5F7A}\x{5F7B}\x{5F7C}\x{5F7D}\x{5F7E}\x{5F7F}\x{5F80}\x{5F81}' . '\x{5F82}\x{5F83}\x{5F84}\x{5F85}\x{5F86}\x{5F87}\x{5F88}\x{5F89}\x{5F8A}' . '\x{5F8B}\x{5F8C}\x{5F8D}\x{5F8E}\x{5F90}\x{5F91}\x{5F92}\x{5F93}\x{5F94}' . '\x{5F95}\x{5F96}\x{5F97}\x{5F98}\x{5F99}\x{5F9B}\x{5F9C}\x{5F9D}\x{5F9E}' . '\x{5F9F}\x{5FA0}\x{5FA1}\x{5FA2}\x{5FA5}\x{5FA6}\x{5FA7}\x{5FA8}\x{5FA9}' . '\x{5FAA}\x{5FAB}\x{5FAC}\x{5FAD}\x{5FAE}\x{5FAF}\x{5FB1}\x{5FB2}\x{5FB3}' . '\x{5FB4}\x{5FB5}\x{5FB6}\x{5FB7}\x{5FB8}\x{5FB9}\x{5FBA}\x{5FBB}\x{5FBC}' . '\x{5FBD}\x{5FBE}\x{5FBF}\x{5FC0}\x{5FC1}\x{5FC3}\x{5FC4}\x{5FC5}\x{5FC6}' . '\x{5FC7}\x{5FC8}\x{5FC9}\x{5FCA}\x{5FCB}\x{5FCC}\x{5FCD}\x{5FCF}\x{5FD0}' . '\x{5FD1}\x{5FD2}\x{5FD3}\x{5FD4}\x{5FD5}\x{5FD6}\x{5FD7}\x{5FD8}\x{5FD9}' . '\x{5FDA}\x{5FDC}\x{5FDD}\x{5FDE}\x{5FE0}\x{5FE1}\x{5FE3}\x{5FE4}\x{5FE5}' . '\x{5FE6}\x{5FE7}\x{5FE8}\x{5FE9}\x{5FEA}\x{5FEB}\x{5FED}\x{5FEE}\x{5FEF}' . '\x{5FF0}\x{5FF1}\x{5FF2}\x{5FF3}\x{5FF4}\x{5FF5}\x{5FF6}\x{5FF7}\x{5FF8}' . '\x{5FF9}\x{5FFA}\x{5FFB}\x{5FFD}\x{5FFE}\x{5FFF}\x{6000}\x{6001}\x{6002}' . '\x{6003}\x{6004}\x{6005}\x{6006}\x{6007}\x{6008}\x{6009}\x{600A}\x{600B}' . '\x{600C}\x{600D}\x{600E}\x{600F}\x{6010}\x{6011}\x{6012}\x{6013}\x{6014}' . '\x{6015}\x{6016}\x{6017}\x{6018}\x{6019}\x{601A}\x{601B}\x{601C}\x{601D}' . '\x{601E}\x{601F}\x{6020}\x{6021}\x{6022}\x{6024}\x{6025}\x{6026}\x{6027}' . '\x{6028}\x{6029}\x{602A}\x{602B}\x{602C}\x{602D}\x{602E}\x{602F}\x{6030}' . '\x{6031}\x{6032}\x{6033}\x{6034}\x{6035}\x{6036}\x{6037}\x{6038}\x{6039}' . '\x{603A}\x{603B}\x{603C}\x{603D}\x{603E}\x{603F}\x{6040}\x{6041}\x{6042}' . '\x{6043}\x{6044}\x{6045}\x{6046}\x{6047}\x{6048}\x{6049}\x{604A}\x{604B}' . '\x{604C}\x{604D}\x{604E}\x{604F}\x{6050}\x{6051}\x{6052}\x{6053}\x{6054}' . '\x{6055}\x{6057}\x{6058}\x{6059}\x{605A}\x{605B}\x{605C}\x{605D}\x{605E}' . '\x{605F}\x{6062}\x{6063}\x{6064}\x{6065}\x{6066}\x{6067}\x{6068}\x{6069}' . '\x{606A}\x{606B}\x{606C}\x{606D}\x{606E}\x{606F}\x{6070}\x{6072}\x{6073}' . '\x{6075}\x{6076}\x{6077}\x{6078}\x{6079}\x{607A}\x{607B}\x{607C}\x{607D}' . '\x{607E}\x{607F}\x{6080}\x{6081}\x{6082}\x{6083}\x{6084}\x{6085}\x{6086}' . '\x{6087}\x{6088}\x{6089}\x{608A}\x{608B}\x{608C}\x{608D}\x{608E}\x{608F}' . '\x{6090}\x{6092}\x{6094}\x{6095}\x{6096}\x{6097}\x{6098}\x{6099}\x{609A}' . '\x{609B}\x{609C}\x{609D}\x{609E}\x{609F}\x{60A0}\x{60A1}\x{60A2}\x{60A3}' . '\x{60A4}\x{60A6}\x{60A7}\x{60A8}\x{60AA}\x{60AB}\x{60AC}\x{60AD}\x{60AE}' . '\x{60AF}\x{60B0}\x{60B1}\x{60B2}\x{60B3}\x{60B4}\x{60B5}\x{60B6}\x{60B7}' . '\x{60B8}\x{60B9}\x{60BA}\x{60BB}\x{60BC}\x{60BD}\x{60BE}\x{60BF}\x{60C0}' . '\x{60C1}\x{60C2}\x{60C3}\x{60C4}\x{60C5}\x{60C6}\x{60C7}\x{60C8}\x{60C9}' . '\x{60CA}\x{60CB}\x{60CC}\x{60CD}\x{60CE}\x{60CF}\x{60D0}\x{60D1}\x{60D3}' . '\x{60D4}\x{60D5}\x{60D7}\x{60D8}\x{60D9}\x{60DA}\x{60DB}\x{60DC}\x{60DD}' . '\x{60DF}\x{60E0}\x{60E1}\x{60E2}\x{60E4}\x{60E6}\x{60E7}\x{60E8}\x{60E9}' . '\x{60EA}\x{60EB}\x{60EC}\x{60ED}\x{60EE}\x{60EF}\x{60F0}\x{60F1}\x{60F2}' . '\x{60F3}\x{60F4}\x{60F5}\x{60F6}\x{60F7}\x{60F8}\x{60F9}\x{60FA}\x{60FB}' . '\x{60FC}\x{60FE}\x{60FF}\x{6100}\x{6101}\x{6103}\x{6104}\x{6105}\x{6106}' . '\x{6108}\x{6109}\x{610A}\x{610B}\x{610C}\x{610D}\x{610E}\x{610F}\x{6110}' . '\x{6112}\x{6113}\x{6114}\x{6115}\x{6116}\x{6117}\x{6118}\x{6119}\x{611A}' . '\x{611B}\x{611C}\x{611D}\x{611F}\x{6120}\x{6122}\x{6123}\x{6124}\x{6125}' . '\x{6126}\x{6127}\x{6128}\x{6129}\x{612A}\x{612B}\x{612C}\x{612D}\x{612E}' . '\x{612F}\x{6130}\x{6132}\x{6134}\x{6136}\x{6137}\x{613A}\x{613B}\x{613C}' . '\x{613D}\x{613E}\x{613F}\x{6140}\x{6141}\x{6142}\x{6143}\x{6144}\x{6145}' . '\x{6146}\x{6147}\x{6148}\x{6149}\x{614A}\x{614B}\x{614C}\x{614D}\x{614E}' . '\x{614F}\x{6150}\x{6151}\x{6152}\x{6153}\x{6154}\x{6155}\x{6156}\x{6157}' . '\x{6158}\x{6159}\x{615A}\x{615B}\x{615C}\x{615D}\x{615E}\x{615F}\x{6161}' . '\x{6162}\x{6163}\x{6164}\x{6165}\x{6166}\x{6167}\x{6168}\x{6169}\x{616A}' . '\x{616B}\x{616C}\x{616D}\x{616E}\x{6170}\x{6171}\x{6172}\x{6173}\x{6174}' . '\x{6175}\x{6176}\x{6177}\x{6178}\x{6179}\x{617A}\x{617C}\x{617E}\x{6180}' . '\x{6181}\x{6182}\x{6183}\x{6184}\x{6185}\x{6187}\x{6188}\x{6189}\x{618A}' . '\x{618B}\x{618C}\x{618D}\x{618E}\x{618F}\x{6190}\x{6191}\x{6192}\x{6193}' . '\x{6194}\x{6195}\x{6196}\x{6198}\x{6199}\x{619A}\x{619B}\x{619D}\x{619E}' . '\x{619F}\x{61A0}\x{61A1}\x{61A2}\x{61A3}\x{61A4}\x{61A5}\x{61A6}\x{61A7}' . '\x{61A8}\x{61A9}\x{61AA}\x{61AB}\x{61AC}\x{61AD}\x{61AE}\x{61AF}\x{61B0}' . '\x{61B1}\x{61B2}\x{61B3}\x{61B4}\x{61B5}\x{61B6}\x{61B7}\x{61B8}\x{61BA}' . '\x{61BC}\x{61BD}\x{61BE}\x{61BF}\x{61C0}\x{61C1}\x{61C2}\x{61C3}\x{61C4}' . '\x{61C5}\x{61C6}\x{61C7}\x{61C8}\x{61C9}\x{61CA}\x{61CB}\x{61CC}\x{61CD}' . '\x{61CE}\x{61CF}\x{61D0}\x{61D1}\x{61D2}\x{61D4}\x{61D6}\x{61D7}\x{61D8}' . '\x{61D9}\x{61DA}\x{61DB}\x{61DC}\x{61DD}\x{61DE}\x{61DF}\x{61E0}\x{61E1}' . '\x{61E2}\x{61E3}\x{61E4}\x{61E5}\x{61E6}\x{61E7}\x{61E8}\x{61E9}\x{61EA}' . '\x{61EB}\x{61ED}\x{61EE}\x{61F0}\x{61F1}\x{61F2}\x{61F3}\x{61F5}\x{61F6}' . '\x{61F7}\x{61F8}\x{61F9}\x{61FA}\x{61FB}\x{61FC}\x{61FD}\x{61FE}\x{61FF}' . '\x{6200}\x{6201}\x{6202}\x{6203}\x{6204}\x{6206}\x{6207}\x{6208}\x{6209}' . '\x{620A}\x{620B}\x{620C}\x{620D}\x{620E}\x{620F}\x{6210}\x{6211}\x{6212}' . '\x{6213}\x{6214}\x{6215}\x{6216}\x{6217}\x{6218}\x{6219}\x{621A}\x{621B}' . '\x{621C}\x{621D}\x{621E}\x{621F}\x{6220}\x{6221}\x{6222}\x{6223}\x{6224}' . '\x{6225}\x{6226}\x{6227}\x{6228}\x{6229}\x{622A}\x{622B}\x{622C}\x{622D}' . '\x{622E}\x{622F}\x{6230}\x{6231}\x{6232}\x{6233}\x{6234}\x{6236}\x{6237}' . '\x{6238}\x{623A}\x{623B}\x{623C}\x{623D}\x{623E}\x{623F}\x{6240}\x{6241}' . '\x{6242}\x{6243}\x{6244}\x{6245}\x{6246}\x{6247}\x{6248}\x{6249}\x{624A}' . '\x{624B}\x{624C}\x{624D}\x{624E}\x{624F}\x{6250}\x{6251}\x{6252}\x{6253}' . '\x{6254}\x{6255}\x{6256}\x{6258}\x{6259}\x{625A}\x{625B}\x{625C}\x{625D}' . '\x{625E}\x{625F}\x{6260}\x{6261}\x{6262}\x{6263}\x{6264}\x{6265}\x{6266}' . '\x{6267}\x{6268}\x{6269}\x{626A}\x{626B}\x{626C}\x{626D}\x{626E}\x{626F}' . '\x{6270}\x{6271}\x{6272}\x{6273}\x{6274}\x{6275}\x{6276}\x{6277}\x{6278}' . '\x{6279}\x{627A}\x{627B}\x{627C}\x{627D}\x{627E}\x{627F}\x{6280}\x{6281}' . '\x{6283}\x{6284}\x{6285}\x{6286}\x{6287}\x{6288}\x{6289}\x{628A}\x{628B}' . '\x{628C}\x{628E}\x{628F}\x{6290}\x{6291}\x{6292}\x{6293}\x{6294}\x{6295}' . '\x{6296}\x{6297}\x{6298}\x{6299}\x{629A}\x{629B}\x{629C}\x{629E}\x{629F}' . '\x{62A0}\x{62A1}\x{62A2}\x{62A3}\x{62A4}\x{62A5}\x{62A7}\x{62A8}\x{62A9}' . '\x{62AA}\x{62AB}\x{62AC}\x{62AD}\x{62AE}\x{62AF}\x{62B0}\x{62B1}\x{62B2}' . '\x{62B3}\x{62B4}\x{62B5}\x{62B6}\x{62B7}\x{62B8}\x{62B9}\x{62BA}\x{62BB}' . '\x{62BC}\x{62BD}\x{62BE}\x{62BF}\x{62C0}\x{62C1}\x{62C2}\x{62C3}\x{62C4}' . '\x{62C5}\x{62C6}\x{62C7}\x{62C8}\x{62C9}\x{62CA}\x{62CB}\x{62CC}\x{62CD}' . '\x{62CE}\x{62CF}\x{62D0}\x{62D1}\x{62D2}\x{62D3}\x{62D4}\x{62D5}\x{62D6}' . '\x{62D7}\x{62D8}\x{62D9}\x{62DA}\x{62DB}\x{62DC}\x{62DD}\x{62DF}\x{62E0}' . '\x{62E1}\x{62E2}\x{62E3}\x{62E4}\x{62E5}\x{62E6}\x{62E7}\x{62E8}\x{62E9}' . '\x{62EB}\x{62EC}\x{62ED}\x{62EE}\x{62EF}\x{62F0}\x{62F1}\x{62F2}\x{62F3}' . '\x{62F4}\x{62F5}\x{62F6}\x{62F7}\x{62F8}\x{62F9}\x{62FA}\x{62FB}\x{62FC}' . '\x{62FD}\x{62FE}\x{62FF}\x{6300}\x{6301}\x{6302}\x{6303}\x{6304}\x{6305}' . '\x{6306}\x{6307}\x{6308}\x{6309}\x{630B}\x{630C}\x{630D}\x{630E}\x{630F}' . '\x{6310}\x{6311}\x{6312}\x{6313}\x{6314}\x{6315}\x{6316}\x{6318}\x{6319}' . '\x{631A}\x{631B}\x{631C}\x{631D}\x{631E}\x{631F}\x{6320}\x{6321}\x{6322}' . '\x{6323}\x{6324}\x{6325}\x{6326}\x{6327}\x{6328}\x{6329}\x{632A}\x{632B}' . '\x{632C}\x{632D}\x{632E}\x{632F}\x{6330}\x{6332}\x{6333}\x{6334}\x{6336}' . '\x{6338}\x{6339}\x{633A}\x{633B}\x{633C}\x{633D}\x{633E}\x{6340}\x{6341}' . '\x{6342}\x{6343}\x{6344}\x{6345}\x{6346}\x{6347}\x{6348}\x{6349}\x{634A}' . '\x{634B}\x{634C}\x{634D}\x{634E}\x{634F}\x{6350}\x{6351}\x{6352}\x{6353}' . '\x{6354}\x{6355}\x{6356}\x{6357}\x{6358}\x{6359}\x{635A}\x{635C}\x{635D}' . '\x{635E}\x{635F}\x{6360}\x{6361}\x{6362}\x{6363}\x{6364}\x{6365}\x{6366}' . '\x{6367}\x{6368}\x{6369}\x{636A}\x{636B}\x{636C}\x{636D}\x{636E}\x{636F}' . '\x{6370}\x{6371}\x{6372}\x{6373}\x{6374}\x{6375}\x{6376}\x{6377}\x{6378}' . '\x{6379}\x{637A}\x{637B}\x{637C}\x{637D}\x{637E}\x{6380}\x{6381}\x{6382}' . '\x{6383}\x{6384}\x{6385}\x{6386}\x{6387}\x{6388}\x{6389}\x{638A}\x{638C}' . '\x{638D}\x{638E}\x{638F}\x{6390}\x{6391}\x{6392}\x{6394}\x{6395}\x{6396}' . '\x{6397}\x{6398}\x{6399}\x{639A}\x{639B}\x{639C}\x{639D}\x{639E}\x{639F}' . '\x{63A0}\x{63A1}\x{63A2}\x{63A3}\x{63A4}\x{63A5}\x{63A6}\x{63A7}\x{63A8}' . '\x{63A9}\x{63AA}\x{63AB}\x{63AC}\x{63AD}\x{63AE}\x{63AF}\x{63B0}\x{63B1}' . '\x{63B2}\x{63B3}\x{63B4}\x{63B5}\x{63B6}\x{63B7}\x{63B8}\x{63B9}\x{63BA}' . '\x{63BC}\x{63BD}\x{63BE}\x{63BF}\x{63C0}\x{63C1}\x{63C2}\x{63C3}\x{63C4}' . '\x{63C5}\x{63C6}\x{63C7}\x{63C8}\x{63C9}\x{63CA}\x{63CB}\x{63CC}\x{63CD}' . '\x{63CE}\x{63CF}\x{63D0}\x{63D2}\x{63D3}\x{63D4}\x{63D5}\x{63D6}\x{63D7}' . '\x{63D8}\x{63D9}\x{63DA}\x{63DB}\x{63DC}\x{63DD}\x{63DE}\x{63DF}\x{63E0}' . '\x{63E1}\x{63E2}\x{63E3}\x{63E4}\x{63E5}\x{63E6}\x{63E7}\x{63E8}\x{63E9}' . '\x{63EA}\x{63EB}\x{63EC}\x{63ED}\x{63EE}\x{63EF}\x{63F0}\x{63F1}\x{63F2}' . '\x{63F3}\x{63F4}\x{63F5}\x{63F6}\x{63F7}\x{63F8}\x{63F9}\x{63FA}\x{63FB}' . '\x{63FC}\x{63FD}\x{63FE}\x{63FF}\x{6400}\x{6401}\x{6402}\x{6403}\x{6404}' . '\x{6405}\x{6406}\x{6408}\x{6409}\x{640A}\x{640B}\x{640C}\x{640D}\x{640E}' . '\x{640F}\x{6410}\x{6411}\x{6412}\x{6413}\x{6414}\x{6415}\x{6416}\x{6417}' . '\x{6418}\x{6419}\x{641A}\x{641B}\x{641C}\x{641D}\x{641E}\x{641F}\x{6420}' . '\x{6421}\x{6422}\x{6423}\x{6424}\x{6425}\x{6426}\x{6427}\x{6428}\x{6429}' . '\x{642A}\x{642B}\x{642C}\x{642D}\x{642E}\x{642F}\x{6430}\x{6431}\x{6432}' . '\x{6433}\x{6434}\x{6435}\x{6436}\x{6437}\x{6438}\x{6439}\x{643A}\x{643D}' . '\x{643E}\x{643F}\x{6440}\x{6441}\x{6443}\x{6444}\x{6445}\x{6446}\x{6447}' . '\x{6448}\x{644A}\x{644B}\x{644C}\x{644D}\x{644E}\x{644F}\x{6450}\x{6451}' . '\x{6452}\x{6453}\x{6454}\x{6455}\x{6456}\x{6457}\x{6458}\x{6459}\x{645B}' . '\x{645C}\x{645D}\x{645E}\x{645F}\x{6460}\x{6461}\x{6462}\x{6463}\x{6464}' . '\x{6465}\x{6466}\x{6467}\x{6468}\x{6469}\x{646A}\x{646B}\x{646C}\x{646D}' . '\x{646E}\x{646F}\x{6470}\x{6471}\x{6472}\x{6473}\x{6474}\x{6475}\x{6476}' . '\x{6477}\x{6478}\x{6479}\x{647A}\x{647B}\x{647C}\x{647D}\x{647F}\x{6480}' . '\x{6481}\x{6482}\x{6483}\x{6484}\x{6485}\x{6487}\x{6488}\x{6489}\x{648A}' . '\x{648B}\x{648C}\x{648D}\x{648E}\x{648F}\x{6490}\x{6491}\x{6492}\x{6493}' . '\x{6494}\x{6495}\x{6496}\x{6497}\x{6498}\x{6499}\x{649A}\x{649B}\x{649C}' . '\x{649D}\x{649E}\x{649F}\x{64A0}\x{64A2}\x{64A3}\x{64A4}\x{64A5}\x{64A6}' . '\x{64A7}\x{64A8}\x{64A9}\x{64AA}\x{64AB}\x{64AC}\x{64AD}\x{64AE}\x{64B0}' . '\x{64B1}\x{64B2}\x{64B3}\x{64B4}\x{64B5}\x{64B7}\x{64B8}\x{64B9}\x{64BA}' . '\x{64BB}\x{64BC}\x{64BD}\x{64BE}\x{64BF}\x{64C0}\x{64C1}\x{64C2}\x{64C3}' . '\x{64C4}\x{64C5}\x{64C6}\x{64C7}\x{64C9}\x{64CA}\x{64CB}\x{64CC}\x{64CD}' . '\x{64CE}\x{64CF}\x{64D0}\x{64D1}\x{64D2}\x{64D3}\x{64D4}\x{64D6}\x{64D7}' . '\x{64D8}\x{64D9}\x{64DA}\x{64DB}\x{64DC}\x{64DD}\x{64DE}\x{64DF}\x{64E0}' . '\x{64E2}\x{64E3}\x{64E4}\x{64E6}\x{64E7}\x{64E8}\x{64E9}\x{64EA}\x{64EB}' . '\x{64EC}\x{64ED}\x{64EF}\x{64F0}\x{64F1}\x{64F2}\x{64F3}\x{64F4}\x{64F6}' . '\x{64F7}\x{64F8}\x{64FA}\x{64FB}\x{64FC}\x{64FD}\x{64FE}\x{64FF}\x{6500}' . '\x{6501}\x{6503}\x{6504}\x{6505}\x{6506}\x{6507}\x{6508}\x{6509}\x{650B}' . '\x{650C}\x{650D}\x{650E}\x{650F}\x{6510}\x{6511}\x{6512}\x{6513}\x{6514}' . '\x{6515}\x{6516}\x{6517}\x{6518}\x{6519}\x{651A}\x{651B}\x{651C}\x{651D}' . '\x{651E}\x{6520}\x{6521}\x{6522}\x{6523}\x{6524}\x{6525}\x{6526}\x{6527}' . '\x{6529}\x{652A}\x{652B}\x{652C}\x{652D}\x{652E}\x{652F}\x{6530}\x{6531}' . '\x{6532}\x{6533}\x{6534}\x{6535}\x{6536}\x{6537}\x{6538}\x{6539}\x{653A}' . '\x{653B}\x{653C}\x{653D}\x{653E}\x{653F}\x{6541}\x{6543}\x{6544}\x{6545}' . '\x{6546}\x{6547}\x{6548}\x{6549}\x{654A}\x{654B}\x{654C}\x{654D}\x{654E}' . '\x{654F}\x{6550}\x{6551}\x{6552}\x{6553}\x{6554}\x{6555}\x{6556}\x{6557}' . '\x{6558}\x{6559}\x{655B}\x{655C}\x{655D}\x{655E}\x{6560}\x{6561}\x{6562}' . '\x{6563}\x{6564}\x{6565}\x{6566}\x{6567}\x{6568}\x{6569}\x{656A}\x{656B}' . '\x{656C}\x{656E}\x{656F}\x{6570}\x{6571}\x{6572}\x{6573}\x{6574}\x{6575}' . '\x{6576}\x{6577}\x{6578}\x{6579}\x{657A}\x{657B}\x{657C}\x{657E}\x{657F}' . '\x{6580}\x{6581}\x{6582}\x{6583}\x{6584}\x{6585}\x{6586}\x{6587}\x{6588}' . '\x{6589}\x{658B}\x{658C}\x{658D}\x{658E}\x{658F}\x{6590}\x{6591}\x{6592}' . '\x{6593}\x{6594}\x{6595}\x{6596}\x{6597}\x{6598}\x{6599}\x{659B}\x{659C}' . '\x{659D}\x{659E}\x{659F}\x{65A0}\x{65A1}\x{65A2}\x{65A3}\x{65A4}\x{65A5}' . '\x{65A6}\x{65A7}\x{65A8}\x{65A9}\x{65AA}\x{65AB}\x{65AC}\x{65AD}\x{65AE}' . '\x{65AF}\x{65B0}\x{65B1}\x{65B2}\x{65B3}\x{65B4}\x{65B6}\x{65B7}\x{65B8}' . '\x{65B9}\x{65BA}\x{65BB}\x{65BC}\x{65BD}\x{65BF}\x{65C0}\x{65C1}\x{65C2}' . '\x{65C3}\x{65C4}\x{65C5}\x{65C6}\x{65C7}\x{65CA}\x{65CB}\x{65CC}\x{65CD}' . '\x{65CE}\x{65CF}\x{65D0}\x{65D2}\x{65D3}\x{65D4}\x{65D5}\x{65D6}\x{65D7}' . '\x{65DA}\x{65DB}\x{65DD}\x{65DE}\x{65DF}\x{65E0}\x{65E1}\x{65E2}\x{65E3}' . '\x{65E5}\x{65E6}\x{65E7}\x{65E8}\x{65E9}\x{65EB}\x{65EC}\x{65ED}\x{65EE}' . '\x{65EF}\x{65F0}\x{65F1}\x{65F2}\x{65F3}\x{65F4}\x{65F5}\x{65F6}\x{65F7}' . '\x{65F8}\x{65FA}\x{65FB}\x{65FC}\x{65FD}\x{6600}\x{6601}\x{6602}\x{6603}' . '\x{6604}\x{6605}\x{6606}\x{6607}\x{6608}\x{6609}\x{660A}\x{660B}\x{660C}' . '\x{660D}\x{660E}\x{660F}\x{6610}\x{6611}\x{6612}\x{6613}\x{6614}\x{6615}' . '\x{6616}\x{6618}\x{6619}\x{661A}\x{661B}\x{661C}\x{661D}\x{661F}\x{6620}' . '\x{6621}\x{6622}\x{6623}\x{6624}\x{6625}\x{6626}\x{6627}\x{6628}\x{6629}' . '\x{662A}\x{662B}\x{662D}\x{662E}\x{662F}\x{6630}\x{6631}\x{6632}\x{6633}' . '\x{6634}\x{6635}\x{6636}\x{6639}\x{663A}\x{663C}\x{663D}\x{663E}\x{6640}' . '\x{6641}\x{6642}\x{6643}\x{6644}\x{6645}\x{6646}\x{6647}\x{6649}\x{664A}' . '\x{664B}\x{664C}\x{664E}\x{664F}\x{6650}\x{6651}\x{6652}\x{6653}\x{6654}' . '\x{6655}\x{6656}\x{6657}\x{6658}\x{6659}\x{665A}\x{665B}\x{665C}\x{665D}' . '\x{665E}\x{665F}\x{6661}\x{6662}\x{6664}\x{6665}\x{6666}\x{6668}\x{6669}' . '\x{666A}\x{666B}\x{666C}\x{666D}\x{666E}\x{666F}\x{6670}\x{6671}\x{6672}' . '\x{6673}\x{6674}\x{6675}\x{6676}\x{6677}\x{6678}\x{6679}\x{667A}\x{667B}' . '\x{667C}\x{667D}\x{667E}\x{667F}\x{6680}\x{6681}\x{6682}\x{6683}\x{6684}' . '\x{6685}\x{6686}\x{6687}\x{6688}\x{6689}\x{668A}\x{668B}\x{668C}\x{668D}' . '\x{668E}\x{668F}\x{6690}\x{6691}\x{6693}\x{6694}\x{6695}\x{6696}\x{6697}' . '\x{6698}\x{6699}\x{669A}\x{669B}\x{669D}\x{669F}\x{66A0}\x{66A1}\x{66A2}' . '\x{66A3}\x{66A4}\x{66A5}\x{66A6}\x{66A7}\x{66A8}\x{66A9}\x{66AA}\x{66AB}' . '\x{66AE}\x{66AF}\x{66B0}\x{66B1}\x{66B2}\x{66B3}\x{66B4}\x{66B5}\x{66B6}' . '\x{66B7}\x{66B8}\x{66B9}\x{66BA}\x{66BB}\x{66BC}\x{66BD}\x{66BE}\x{66BF}' . '\x{66C0}\x{66C1}\x{66C2}\x{66C3}\x{66C4}\x{66C5}\x{66C6}\x{66C7}\x{66C8}' . '\x{66C9}\x{66CA}\x{66CB}\x{66CC}\x{66CD}\x{66CE}\x{66CF}\x{66D1}\x{66D2}' . '\x{66D4}\x{66D5}\x{66D6}\x{66D8}\x{66D9}\x{66DA}\x{66DB}\x{66DC}\x{66DD}' . '\x{66DE}\x{66E0}\x{66E1}\x{66E2}\x{66E3}\x{66E4}\x{66E5}\x{66E6}\x{66E7}' . '\x{66E8}\x{66E9}\x{66EA}\x{66EB}\x{66EC}\x{66ED}\x{66EE}\x{66F0}\x{66F1}' . '\x{66F2}\x{66F3}\x{66F4}\x{66F5}\x{66F6}\x{66F7}\x{66F8}\x{66F9}\x{66FA}' . '\x{66FB}\x{66FC}\x{66FE}\x{66FF}\x{6700}\x{6701}\x{6703}\x{6704}\x{6705}' . '\x{6706}\x{6708}\x{6709}\x{670A}\x{670B}\x{670C}\x{670D}\x{670E}\x{670F}' . '\x{6710}\x{6711}\x{6712}\x{6713}\x{6714}\x{6715}\x{6716}\x{6717}\x{6718}' . '\x{671A}\x{671B}\x{671C}\x{671D}\x{671E}\x{671F}\x{6720}\x{6721}\x{6722}' . '\x{6723}\x{6725}\x{6726}\x{6727}\x{6728}\x{672A}\x{672B}\x{672C}\x{672D}' . '\x{672E}\x{672F}\x{6730}\x{6731}\x{6732}\x{6733}\x{6734}\x{6735}\x{6736}' . '\x{6737}\x{6738}\x{6739}\x{673A}\x{673B}\x{673C}\x{673D}\x{673E}\x{673F}' . '\x{6740}\x{6741}\x{6742}\x{6743}\x{6744}\x{6745}\x{6746}\x{6747}\x{6748}' . '\x{6749}\x{674A}\x{674B}\x{674C}\x{674D}\x{674E}\x{674F}\x{6750}\x{6751}' . '\x{6752}\x{6753}\x{6754}\x{6755}\x{6756}\x{6757}\x{6758}\x{6759}\x{675A}' . '\x{675B}\x{675C}\x{675D}\x{675E}\x{675F}\x{6760}\x{6761}\x{6762}\x{6763}' . '\x{6764}\x{6765}\x{6766}\x{6768}\x{6769}\x{676A}\x{676B}\x{676C}\x{676D}' . '\x{676E}\x{676F}\x{6770}\x{6771}\x{6772}\x{6773}\x{6774}\x{6775}\x{6776}' . '\x{6777}\x{6778}\x{6779}\x{677A}\x{677B}\x{677C}\x{677D}\x{677E}\x{677F}' . '\x{6780}\x{6781}\x{6782}\x{6783}\x{6784}\x{6785}\x{6786}\x{6787}\x{6789}' . '\x{678A}\x{678B}\x{678C}\x{678D}\x{678E}\x{678F}\x{6790}\x{6791}\x{6792}' . '\x{6793}\x{6794}\x{6795}\x{6797}\x{6798}\x{6799}\x{679A}\x{679B}\x{679C}' . '\x{679D}\x{679E}\x{679F}\x{67A0}\x{67A1}\x{67A2}\x{67A3}\x{67A4}\x{67A5}' . '\x{67A6}\x{67A7}\x{67A8}\x{67AA}\x{67AB}\x{67AC}\x{67AD}\x{67AE}\x{67AF}' . '\x{67B0}\x{67B1}\x{67B2}\x{67B3}\x{67B4}\x{67B5}\x{67B6}\x{67B7}\x{67B8}' . '\x{67B9}\x{67BA}\x{67BB}\x{67BC}\x{67BE}\x{67C0}\x{67C1}\x{67C2}\x{67C3}' . '\x{67C4}\x{67C5}\x{67C6}\x{67C7}\x{67C8}\x{67C9}\x{67CA}\x{67CB}\x{67CC}' . '\x{67CD}\x{67CE}\x{67CF}\x{67D0}\x{67D1}\x{67D2}\x{67D3}\x{67D4}\x{67D6}' . '\x{67D8}\x{67D9}\x{67DA}\x{67DB}\x{67DC}\x{67DD}\x{67DE}\x{67DF}\x{67E0}' . '\x{67E1}\x{67E2}\x{67E3}\x{67E4}\x{67E5}\x{67E6}\x{67E7}\x{67E8}\x{67E9}' . '\x{67EA}\x{67EB}\x{67EC}\x{67ED}\x{67EE}\x{67EF}\x{67F0}\x{67F1}\x{67F2}' . '\x{67F3}\x{67F4}\x{67F5}\x{67F6}\x{67F7}\x{67F8}\x{67FA}\x{67FB}\x{67FC}' . '\x{67FD}\x{67FE}\x{67FF}\x{6800}\x{6802}\x{6803}\x{6804}\x{6805}\x{6806}' . '\x{6807}\x{6808}\x{6809}\x{680A}\x{680B}\x{680C}\x{680D}\x{680E}\x{680F}' . '\x{6810}\x{6811}\x{6812}\x{6813}\x{6814}\x{6816}\x{6817}\x{6818}\x{6819}' . '\x{681A}\x{681B}\x{681C}\x{681D}\x{681F}\x{6820}\x{6821}\x{6822}\x{6823}' . '\x{6824}\x{6825}\x{6826}\x{6828}\x{6829}\x{682A}\x{682B}\x{682C}\x{682D}' . '\x{682E}\x{682F}\x{6831}\x{6832}\x{6833}\x{6834}\x{6835}\x{6836}\x{6837}' . '\x{6838}\x{6839}\x{683A}\x{683B}\x{683C}\x{683D}\x{683E}\x{683F}\x{6840}' . '\x{6841}\x{6842}\x{6843}\x{6844}\x{6845}\x{6846}\x{6847}\x{6848}\x{6849}' . '\x{684A}\x{684B}\x{684C}\x{684D}\x{684E}\x{684F}\x{6850}\x{6851}\x{6852}' . '\x{6853}\x{6854}\x{6855}\x{6856}\x{6857}\x{685B}\x{685D}\x{6860}\x{6861}' . '\x{6862}\x{6863}\x{6864}\x{6865}\x{6866}\x{6867}\x{6868}\x{6869}\x{686A}' . '\x{686B}\x{686C}\x{686D}\x{686E}\x{686F}\x{6870}\x{6871}\x{6872}\x{6873}' . '\x{6874}\x{6875}\x{6876}\x{6877}\x{6878}\x{6879}\x{687B}\x{687C}\x{687D}' . '\x{687E}\x{687F}\x{6880}\x{6881}\x{6882}\x{6883}\x{6884}\x{6885}\x{6886}' . '\x{6887}\x{6888}\x{6889}\x{688A}\x{688B}\x{688C}\x{688D}\x{688E}\x{688F}' . '\x{6890}\x{6891}\x{6892}\x{6893}\x{6894}\x{6896}\x{6897}\x{6898}\x{689A}' . '\x{689B}\x{689C}\x{689D}\x{689E}\x{689F}\x{68A0}\x{68A1}\x{68A2}\x{68A3}' . '\x{68A4}\x{68A6}\x{68A7}\x{68A8}\x{68A9}\x{68AA}\x{68AB}\x{68AC}\x{68AD}' . '\x{68AE}\x{68AF}\x{68B0}\x{68B1}\x{68B2}\x{68B3}\x{68B4}\x{68B5}\x{68B6}' . '\x{68B7}\x{68B9}\x{68BB}\x{68BC}\x{68BD}\x{68BE}\x{68BF}\x{68C0}\x{68C1}' . '\x{68C2}\x{68C4}\x{68C6}\x{68C7}\x{68C8}\x{68C9}\x{68CA}\x{68CB}\x{68CC}' . '\x{68CD}\x{68CE}\x{68CF}\x{68D0}\x{68D1}\x{68D2}\x{68D3}\x{68D4}\x{68D5}' . '\x{68D6}\x{68D7}\x{68D8}\x{68DA}\x{68DB}\x{68DC}\x{68DD}\x{68DE}\x{68DF}' . '\x{68E0}\x{68E1}\x{68E3}\x{68E4}\x{68E6}\x{68E7}\x{68E8}\x{68E9}\x{68EA}' . '\x{68EB}\x{68EC}\x{68ED}\x{68EE}\x{68EF}\x{68F0}\x{68F1}\x{68F2}\x{68F3}' . '\x{68F4}\x{68F5}\x{68F6}\x{68F7}\x{68F8}\x{68F9}\x{68FA}\x{68FB}\x{68FC}' . '\x{68FD}\x{68FE}\x{68FF}\x{6901}\x{6902}\x{6903}\x{6904}\x{6905}\x{6906}' . '\x{6907}\x{6908}\x{690A}\x{690B}\x{690C}\x{690D}\x{690E}\x{690F}\x{6910}' . '\x{6911}\x{6912}\x{6913}\x{6914}\x{6915}\x{6916}\x{6917}\x{6918}\x{6919}' . '\x{691A}\x{691B}\x{691C}\x{691D}\x{691E}\x{691F}\x{6920}\x{6921}\x{6922}' . '\x{6923}\x{6924}\x{6925}\x{6926}\x{6927}\x{6928}\x{6929}\x{692A}\x{692B}' . '\x{692C}\x{692D}\x{692E}\x{692F}\x{6930}\x{6931}\x{6932}\x{6933}\x{6934}' . '\x{6935}\x{6936}\x{6937}\x{6938}\x{6939}\x{693A}\x{693B}\x{693C}\x{693D}' . '\x{693F}\x{6940}\x{6941}\x{6942}\x{6943}\x{6944}\x{6945}\x{6946}\x{6947}' . '\x{6948}\x{6949}\x{694A}\x{694B}\x{694C}\x{694E}\x{694F}\x{6950}\x{6951}' . '\x{6952}\x{6953}\x{6954}\x{6955}\x{6956}\x{6957}\x{6958}\x{6959}\x{695A}' . '\x{695B}\x{695C}\x{695D}\x{695E}\x{695F}\x{6960}\x{6961}\x{6962}\x{6963}' . '\x{6964}\x{6965}\x{6966}\x{6967}\x{6968}\x{6969}\x{696A}\x{696B}\x{696C}' . '\x{696D}\x{696E}\x{696F}\x{6970}\x{6971}\x{6972}\x{6973}\x{6974}\x{6975}' . '\x{6976}\x{6977}\x{6978}\x{6979}\x{697A}\x{697B}\x{697C}\x{697D}\x{697E}' . '\x{697F}\x{6980}\x{6981}\x{6982}\x{6983}\x{6984}\x{6985}\x{6986}\x{6987}' . '\x{6988}\x{6989}\x{698A}\x{698B}\x{698C}\x{698D}\x{698E}\x{698F}\x{6990}' . '\x{6991}\x{6992}\x{6993}\x{6994}\x{6995}\x{6996}\x{6997}\x{6998}\x{6999}' . '\x{699A}\x{699B}\x{699C}\x{699D}\x{699E}\x{69A0}\x{69A1}\x{69A3}\x{69A4}' . '\x{69A5}\x{69A6}\x{69A7}\x{69A8}\x{69A9}\x{69AA}\x{69AB}\x{69AC}\x{69AD}' . '\x{69AE}\x{69AF}\x{69B0}\x{69B1}\x{69B2}\x{69B3}\x{69B4}\x{69B5}\x{69B6}' . '\x{69B7}\x{69B8}\x{69B9}\x{69BA}\x{69BB}\x{69BC}\x{69BD}\x{69BE}\x{69BF}' . '\x{69C1}\x{69C2}\x{69C3}\x{69C4}\x{69C5}\x{69C6}\x{69C7}\x{69C8}\x{69C9}' . '\x{69CA}\x{69CB}\x{69CC}\x{69CD}\x{69CE}\x{69CF}\x{69D0}\x{69D3}\x{69D4}' . '\x{69D8}\x{69D9}\x{69DA}\x{69DB}\x{69DC}\x{69DD}\x{69DE}\x{69DF}\x{69E0}' . '\x{69E1}\x{69E2}\x{69E3}\x{69E4}\x{69E5}\x{69E6}\x{69E7}\x{69E8}\x{69E9}' . '\x{69EA}\x{69EB}\x{69EC}\x{69ED}\x{69EE}\x{69EF}\x{69F0}\x{69F1}\x{69F2}' . '\x{69F3}\x{69F4}\x{69F5}\x{69F6}\x{69F7}\x{69F8}\x{69FA}\x{69FB}\x{69FC}' . '\x{69FD}\x{69FE}\x{69FF}\x{6A00}\x{6A01}\x{6A02}\x{6A04}\x{6A05}\x{6A06}' . '\x{6A07}\x{6A08}\x{6A09}\x{6A0A}\x{6A0B}\x{6A0D}\x{6A0E}\x{6A0F}\x{6A10}' . '\x{6A11}\x{6A12}\x{6A13}\x{6A14}\x{6A15}\x{6A16}\x{6A17}\x{6A18}\x{6A19}' . '\x{6A1A}\x{6A1B}\x{6A1D}\x{6A1E}\x{6A1F}\x{6A20}\x{6A21}\x{6A22}\x{6A23}' . '\x{6A25}\x{6A26}\x{6A27}\x{6A28}\x{6A29}\x{6A2A}\x{6A2B}\x{6A2C}\x{6A2D}' . '\x{6A2E}\x{6A2F}\x{6A30}\x{6A31}\x{6A32}\x{6A33}\x{6A34}\x{6A35}\x{6A36}' . '\x{6A38}\x{6A39}\x{6A3A}\x{6A3B}\x{6A3C}\x{6A3D}\x{6A3E}\x{6A3F}\x{6A40}' . '\x{6A41}\x{6A42}\x{6A43}\x{6A44}\x{6A45}\x{6A46}\x{6A47}\x{6A48}\x{6A49}' . '\x{6A4B}\x{6A4C}\x{6A4D}\x{6A4E}\x{6A4F}\x{6A50}\x{6A51}\x{6A52}\x{6A54}' . '\x{6A55}\x{6A56}\x{6A57}\x{6A58}\x{6A59}\x{6A5A}\x{6A5B}\x{6A5D}\x{6A5E}' . '\x{6A5F}\x{6A60}\x{6A61}\x{6A62}\x{6A63}\x{6A64}\x{6A65}\x{6A66}\x{6A67}' . '\x{6A68}\x{6A69}\x{6A6A}\x{6A6B}\x{6A6C}\x{6A6D}\x{6A6F}\x{6A71}\x{6A72}' . '\x{6A73}\x{6A74}\x{6A75}\x{6A76}\x{6A77}\x{6A78}\x{6A79}\x{6A7A}\x{6A7B}' . '\x{6A7C}\x{6A7D}\x{6A7E}\x{6A7F}\x{6A80}\x{6A81}\x{6A82}\x{6A83}\x{6A84}' . '\x{6A85}\x{6A87}\x{6A88}\x{6A89}\x{6A8B}\x{6A8C}\x{6A8D}\x{6A8E}\x{6A90}' . '\x{6A91}\x{6A92}\x{6A93}\x{6A94}\x{6A95}\x{6A96}\x{6A97}\x{6A98}\x{6A9A}' . '\x{6A9B}\x{6A9C}\x{6A9E}\x{6A9F}\x{6AA0}\x{6AA1}\x{6AA2}\x{6AA3}\x{6AA4}' . '\x{6AA5}\x{6AA6}\x{6AA7}\x{6AA8}\x{6AA9}\x{6AAB}\x{6AAC}\x{6AAD}\x{6AAE}' . '\x{6AAF}\x{6AB0}\x{6AB2}\x{6AB3}\x{6AB4}\x{6AB5}\x{6AB6}\x{6AB7}\x{6AB8}' . '\x{6AB9}\x{6ABA}\x{6ABB}\x{6ABC}\x{6ABD}\x{6ABF}\x{6AC1}\x{6AC2}\x{6AC3}' . '\x{6AC5}\x{6AC6}\x{6AC7}\x{6ACA}\x{6ACB}\x{6ACC}\x{6ACD}\x{6ACE}\x{6ACF}' . '\x{6AD0}\x{6AD1}\x{6AD2}\x{6AD3}\x{6AD4}\x{6AD5}\x{6AD6}\x{6AD7}\x{6AD9}' . '\x{6ADA}\x{6ADB}\x{6ADC}\x{6ADD}\x{6ADE}\x{6ADF}\x{6AE0}\x{6AE1}\x{6AE2}' . '\x{6AE3}\x{6AE4}\x{6AE5}\x{6AE6}\x{6AE7}\x{6AE8}\x{6AEA}\x{6AEB}\x{6AEC}' . '\x{6AED}\x{6AEE}\x{6AEF}\x{6AF0}\x{6AF1}\x{6AF2}\x{6AF3}\x{6AF4}\x{6AF5}' . '\x{6AF6}\x{6AF7}\x{6AF8}\x{6AF9}\x{6AFA}\x{6AFB}\x{6AFC}\x{6AFD}\x{6AFE}' . '\x{6AFF}\x{6B00}\x{6B01}\x{6B02}\x{6B03}\x{6B04}\x{6B05}\x{6B06}\x{6B07}' . '\x{6B08}\x{6B09}\x{6B0A}\x{6B0B}\x{6B0C}\x{6B0D}\x{6B0F}\x{6B10}\x{6B11}' . '\x{6B12}\x{6B13}\x{6B14}\x{6B15}\x{6B16}\x{6B17}\x{6B18}\x{6B19}\x{6B1A}' . '\x{6B1C}\x{6B1D}\x{6B1E}\x{6B1F}\x{6B20}\x{6B21}\x{6B22}\x{6B23}\x{6B24}' . '\x{6B25}\x{6B26}\x{6B27}\x{6B28}\x{6B29}\x{6B2A}\x{6B2B}\x{6B2C}\x{6B2D}' . '\x{6B2F}\x{6B30}\x{6B31}\x{6B32}\x{6B33}\x{6B34}\x{6B36}\x{6B37}\x{6B38}' . '\x{6B39}\x{6B3A}\x{6B3B}\x{6B3C}\x{6B3D}\x{6B3E}\x{6B3F}\x{6B41}\x{6B42}' . '\x{6B43}\x{6B44}\x{6B45}\x{6B46}\x{6B47}\x{6B48}\x{6B49}\x{6B4A}\x{6B4B}' . '\x{6B4C}\x{6B4D}\x{6B4E}\x{6B4F}\x{6B50}\x{6B51}\x{6B52}\x{6B53}\x{6B54}' . '\x{6B55}\x{6B56}\x{6B59}\x{6B5A}\x{6B5B}\x{6B5C}\x{6B5E}\x{6B5F}\x{6B60}' . '\x{6B61}\x{6B62}\x{6B63}\x{6B64}\x{6B65}\x{6B66}\x{6B67}\x{6B69}\x{6B6A}' . '\x{6B6B}\x{6B6D}\x{6B6F}\x{6B70}\x{6B72}\x{6B73}\x{6B74}\x{6B76}\x{6B77}' . '\x{6B78}\x{6B79}\x{6B7A}\x{6B7B}\x{6B7C}\x{6B7E}\x{6B7F}\x{6B80}\x{6B81}' . '\x{6B82}\x{6B83}\x{6B84}\x{6B85}\x{6B86}\x{6B87}\x{6B88}\x{6B89}\x{6B8A}' . '\x{6B8B}\x{6B8C}\x{6B8D}\x{6B8E}\x{6B8F}\x{6B90}\x{6B91}\x{6B92}\x{6B93}' . '\x{6B94}\x{6B95}\x{6B96}\x{6B97}\x{6B98}\x{6B99}\x{6B9A}\x{6B9B}\x{6B9C}' . '\x{6B9D}\x{6B9E}\x{6B9F}\x{6BA0}\x{6BA1}\x{6BA2}\x{6BA3}\x{6BA4}\x{6BA5}' . '\x{6BA6}\x{6BA7}\x{6BA8}\x{6BA9}\x{6BAA}\x{6BAB}\x{6BAC}\x{6BAD}\x{6BAE}' . '\x{6BAF}\x{6BB0}\x{6BB2}\x{6BB3}\x{6BB4}\x{6BB5}\x{6BB6}\x{6BB7}\x{6BB9}' . '\x{6BBA}\x{6BBB}\x{6BBC}\x{6BBD}\x{6BBE}\x{6BBF}\x{6BC0}\x{6BC1}\x{6BC2}' . '\x{6BC3}\x{6BC4}\x{6BC5}\x{6BC6}\x{6BC7}\x{6BC8}\x{6BC9}\x{6BCA}\x{6BCB}' . '\x{6BCC}\x{6BCD}\x{6BCE}\x{6BCF}\x{6BD0}\x{6BD1}\x{6BD2}\x{6BD3}\x{6BD4}' . '\x{6BD5}\x{6BD6}\x{6BD7}\x{6BD8}\x{6BD9}\x{6BDA}\x{6BDB}\x{6BDC}\x{6BDD}' . '\x{6BDE}\x{6BDF}\x{6BE0}\x{6BE1}\x{6BE2}\x{6BE3}\x{6BE4}\x{6BE5}\x{6BE6}' . '\x{6BE7}\x{6BE8}\x{6BEA}\x{6BEB}\x{6BEC}\x{6BED}\x{6BEE}\x{6BEF}\x{6BF0}' . '\x{6BF2}\x{6BF3}\x{6BF5}\x{6BF6}\x{6BF7}\x{6BF8}\x{6BF9}\x{6BFB}\x{6BFC}' . '\x{6BFD}\x{6BFE}\x{6BFF}\x{6C00}\x{6C01}\x{6C02}\x{6C03}\x{6C04}\x{6C05}' . '\x{6C06}\x{6C07}\x{6C08}\x{6C09}\x{6C0B}\x{6C0C}\x{6C0D}\x{6C0E}\x{6C0F}' . '\x{6C10}\x{6C11}\x{6C12}\x{6C13}\x{6C14}\x{6C15}\x{6C16}\x{6C18}\x{6C19}' . '\x{6C1A}\x{6C1B}\x{6C1D}\x{6C1E}\x{6C1F}\x{6C20}\x{6C21}\x{6C22}\x{6C23}' . '\x{6C24}\x{6C25}\x{6C26}\x{6C27}\x{6C28}\x{6C29}\x{6C2A}\x{6C2B}\x{6C2C}' . '\x{6C2E}\x{6C2F}\x{6C30}\x{6C31}\x{6C32}\x{6C33}\x{6C34}\x{6C35}\x{6C36}' . '\x{6C37}\x{6C38}\x{6C3A}\x{6C3B}\x{6C3D}\x{6C3E}\x{6C3F}\x{6C40}\x{6C41}' . '\x{6C42}\x{6C43}\x{6C44}\x{6C46}\x{6C47}\x{6C48}\x{6C49}\x{6C4A}\x{6C4B}' . '\x{6C4C}\x{6C4D}\x{6C4E}\x{6C4F}\x{6C50}\x{6C51}\x{6C52}\x{6C53}\x{6C54}' . '\x{6C55}\x{6C56}\x{6C57}\x{6C58}\x{6C59}\x{6C5A}\x{6C5B}\x{6C5C}\x{6C5D}' . '\x{6C5E}\x{6C5F}\x{6C60}\x{6C61}\x{6C62}\x{6C63}\x{6C64}\x{6C65}\x{6C66}' . '\x{6C67}\x{6C68}\x{6C69}\x{6C6A}\x{6C6B}\x{6C6D}\x{6C6F}\x{6C70}\x{6C71}' . '\x{6C72}\x{6C73}\x{6C74}\x{6C75}\x{6C76}\x{6C77}\x{6C78}\x{6C79}\x{6C7A}' . '\x{6C7B}\x{6C7C}\x{6C7D}\x{6C7E}\x{6C7F}\x{6C80}\x{6C81}\x{6C82}\x{6C83}' . '\x{6C84}\x{6C85}\x{6C86}\x{6C87}\x{6C88}\x{6C89}\x{6C8A}\x{6C8B}\x{6C8C}' . '\x{6C8D}\x{6C8E}\x{6C8F}\x{6C90}\x{6C91}\x{6C92}\x{6C93}\x{6C94}\x{6C95}' . '\x{6C96}\x{6C97}\x{6C98}\x{6C99}\x{6C9A}\x{6C9B}\x{6C9C}\x{6C9D}\x{6C9E}' . '\x{6C9F}\x{6CA1}\x{6CA2}\x{6CA3}\x{6CA4}\x{6CA5}\x{6CA6}\x{6CA7}\x{6CA8}' . '\x{6CA9}\x{6CAA}\x{6CAB}\x{6CAC}\x{6CAD}\x{6CAE}\x{6CAF}\x{6CB0}\x{6CB1}' . '\x{6CB2}\x{6CB3}\x{6CB4}\x{6CB5}\x{6CB6}\x{6CB7}\x{6CB8}\x{6CB9}\x{6CBA}' . '\x{6CBB}\x{6CBC}\x{6CBD}\x{6CBE}\x{6CBF}\x{6CC0}\x{6CC1}\x{6CC2}\x{6CC3}' . '\x{6CC4}\x{6CC5}\x{6CC6}\x{6CC7}\x{6CC8}\x{6CC9}\x{6CCA}\x{6CCB}\x{6CCC}' . '\x{6CCD}\x{6CCE}\x{6CCF}\x{6CD0}\x{6CD1}\x{6CD2}\x{6CD3}\x{6CD4}\x{6CD5}' . '\x{6CD6}\x{6CD7}\x{6CD9}\x{6CDA}\x{6CDB}\x{6CDC}\x{6CDD}\x{6CDE}\x{6CDF}' . '\x{6CE0}\x{6CE1}\x{6CE2}\x{6CE3}\x{6CE4}\x{6CE5}\x{6CE6}\x{6CE7}\x{6CE8}' . '\x{6CE9}\x{6CEA}\x{6CEB}\x{6CEC}\x{6CED}\x{6CEE}\x{6CEF}\x{6CF0}\x{6CF1}' . '\x{6CF2}\x{6CF3}\x{6CF5}\x{6CF6}\x{6CF7}\x{6CF8}\x{6CF9}\x{6CFA}\x{6CFB}' . '\x{6CFC}\x{6CFD}\x{6CFE}\x{6CFF}\x{6D00}\x{6D01}\x{6D03}\x{6D04}\x{6D05}' . '\x{6D06}\x{6D07}\x{6D08}\x{6D09}\x{6D0A}\x{6D0B}\x{6D0C}\x{6D0D}\x{6D0E}' . '\x{6D0F}\x{6D10}\x{6D11}\x{6D12}\x{6D13}\x{6D14}\x{6D15}\x{6D16}\x{6D17}' . '\x{6D18}\x{6D19}\x{6D1A}\x{6D1B}\x{6D1D}\x{6D1E}\x{6D1F}\x{6D20}\x{6D21}' . '\x{6D22}\x{6D23}\x{6D25}\x{6D26}\x{6D27}\x{6D28}\x{6D29}\x{6D2A}\x{6D2B}' . '\x{6D2C}\x{6D2D}\x{6D2E}\x{6D2F}\x{6D30}\x{6D31}\x{6D32}\x{6D33}\x{6D34}' . '\x{6D35}\x{6D36}\x{6D37}\x{6D38}\x{6D39}\x{6D3A}\x{6D3B}\x{6D3C}\x{6D3D}' . '\x{6D3E}\x{6D3F}\x{6D40}\x{6D41}\x{6D42}\x{6D43}\x{6D44}\x{6D45}\x{6D46}' . '\x{6D47}\x{6D48}\x{6D49}\x{6D4A}\x{6D4B}\x{6D4C}\x{6D4D}\x{6D4E}\x{6D4F}' . '\x{6D50}\x{6D51}\x{6D52}\x{6D53}\x{6D54}\x{6D55}\x{6D56}\x{6D57}\x{6D58}' . '\x{6D59}\x{6D5A}\x{6D5B}\x{6D5C}\x{6D5D}\x{6D5E}\x{6D5F}\x{6D60}\x{6D61}' . '\x{6D62}\x{6D63}\x{6D64}\x{6D65}\x{6D66}\x{6D67}\x{6D68}\x{6D69}\x{6D6A}' . '\x{6D6B}\x{6D6C}\x{6D6D}\x{6D6E}\x{6D6F}\x{6D70}\x{6D72}\x{6D73}\x{6D74}' . '\x{6D75}\x{6D76}\x{6D77}\x{6D78}\x{6D79}\x{6D7A}\x{6D7B}\x{6D7C}\x{6D7D}' . '\x{6D7E}\x{6D7F}\x{6D80}\x{6D82}\x{6D83}\x{6D84}\x{6D85}\x{6D86}\x{6D87}' . '\x{6D88}\x{6D89}\x{6D8A}\x{6D8B}\x{6D8C}\x{6D8D}\x{6D8E}\x{6D8F}\x{6D90}' . '\x{6D91}\x{6D92}\x{6D93}\x{6D94}\x{6D95}\x{6D97}\x{6D98}\x{6D99}\x{6D9A}' . '\x{6D9B}\x{6D9D}\x{6D9E}\x{6D9F}\x{6DA0}\x{6DA1}\x{6DA2}\x{6DA3}\x{6DA4}' . '\x{6DA5}\x{6DA6}\x{6DA7}\x{6DA8}\x{6DA9}\x{6DAA}\x{6DAB}\x{6DAC}\x{6DAD}' . '\x{6DAE}\x{6DAF}\x{6DB2}\x{6DB3}\x{6DB4}\x{6DB5}\x{6DB7}\x{6DB8}\x{6DB9}' . '\x{6DBA}\x{6DBB}\x{6DBC}\x{6DBD}\x{6DBE}\x{6DBF}\x{6DC0}\x{6DC1}\x{6DC2}' . '\x{6DC3}\x{6DC4}\x{6DC5}\x{6DC6}\x{6DC7}\x{6DC8}\x{6DC9}\x{6DCA}\x{6DCB}' . '\x{6DCC}\x{6DCD}\x{6DCE}\x{6DCF}\x{6DD0}\x{6DD1}\x{6DD2}\x{6DD3}\x{6DD4}' . '\x{6DD5}\x{6DD6}\x{6DD7}\x{6DD8}\x{6DD9}\x{6DDA}\x{6DDB}\x{6DDC}\x{6DDD}' . '\x{6DDE}\x{6DDF}\x{6DE0}\x{6DE1}\x{6DE2}\x{6DE3}\x{6DE4}\x{6DE5}\x{6DE6}' . '\x{6DE7}\x{6DE8}\x{6DE9}\x{6DEA}\x{6DEB}\x{6DEC}\x{6DED}\x{6DEE}\x{6DEF}' . '\x{6DF0}\x{6DF1}\x{6DF2}\x{6DF3}\x{6DF4}\x{6DF5}\x{6DF6}\x{6DF7}\x{6DF8}' . '\x{6DF9}\x{6DFA}\x{6DFB}\x{6DFC}\x{6DFD}\x{6E00}\x{6E03}\x{6E04}\x{6E05}' . '\x{6E07}\x{6E08}\x{6E09}\x{6E0A}\x{6E0B}\x{6E0C}\x{6E0D}\x{6E0E}\x{6E0F}' . '\x{6E10}\x{6E11}\x{6E14}\x{6E15}\x{6E16}\x{6E17}\x{6E19}\x{6E1A}\x{6E1B}' . '\x{6E1C}\x{6E1D}\x{6E1E}\x{6E1F}\x{6E20}\x{6E21}\x{6E22}\x{6E23}\x{6E24}' . '\x{6E25}\x{6E26}\x{6E27}\x{6E28}\x{6E29}\x{6E2B}\x{6E2C}\x{6E2D}\x{6E2E}' . '\x{6E2F}\x{6E30}\x{6E31}\x{6E32}\x{6E33}\x{6E34}\x{6E35}\x{6E36}\x{6E37}' . '\x{6E38}\x{6E39}\x{6E3A}\x{6E3B}\x{6E3C}\x{6E3D}\x{6E3E}\x{6E3F}\x{6E40}' . '\x{6E41}\x{6E42}\x{6E43}\x{6E44}\x{6E45}\x{6E46}\x{6E47}\x{6E48}\x{6E49}' . '\x{6E4A}\x{6E4B}\x{6E4D}\x{6E4E}\x{6E4F}\x{6E50}\x{6E51}\x{6E52}\x{6E53}' . '\x{6E54}\x{6E55}\x{6E56}\x{6E57}\x{6E58}\x{6E59}\x{6E5A}\x{6E5B}\x{6E5C}' . '\x{6E5D}\x{6E5E}\x{6E5F}\x{6E60}\x{6E61}\x{6E62}\x{6E63}\x{6E64}\x{6E65}' . '\x{6E66}\x{6E67}\x{6E68}\x{6E69}\x{6E6A}\x{6E6B}\x{6E6D}\x{6E6E}\x{6E6F}' . '\x{6E70}\x{6E71}\x{6E72}\x{6E73}\x{6E74}\x{6E75}\x{6E77}\x{6E78}\x{6E79}' . '\x{6E7E}\x{6E7F}\x{6E80}\x{6E81}\x{6E82}\x{6E83}\x{6E84}\x{6E85}\x{6E86}' . '\x{6E87}\x{6E88}\x{6E89}\x{6E8A}\x{6E8D}\x{6E8E}\x{6E8F}\x{6E90}\x{6E91}' . '\x{6E92}\x{6E93}\x{6E94}\x{6E96}\x{6E97}\x{6E98}\x{6E99}\x{6E9A}\x{6E9B}' . '\x{6E9C}\x{6E9D}\x{6E9E}\x{6E9F}\x{6EA0}\x{6EA1}\x{6EA2}\x{6EA3}\x{6EA4}' . '\x{6EA5}\x{6EA6}\x{6EA7}\x{6EA8}\x{6EA9}\x{6EAA}\x{6EAB}\x{6EAC}\x{6EAD}' . '\x{6EAE}\x{6EAF}\x{6EB0}\x{6EB1}\x{6EB2}\x{6EB3}\x{6EB4}\x{6EB5}\x{6EB6}' . '\x{6EB7}\x{6EB8}\x{6EB9}\x{6EBA}\x{6EBB}\x{6EBC}\x{6EBD}\x{6EBE}\x{6EBF}' . '\x{6EC0}\x{6EC1}\x{6EC2}\x{6EC3}\x{6EC4}\x{6EC5}\x{6EC6}\x{6EC7}\x{6EC8}' . '\x{6EC9}\x{6ECA}\x{6ECB}\x{6ECC}\x{6ECD}\x{6ECE}\x{6ECF}\x{6ED0}\x{6ED1}' . '\x{6ED2}\x{6ED3}\x{6ED4}\x{6ED5}\x{6ED6}\x{6ED7}\x{6ED8}\x{6ED9}\x{6EDA}' . '\x{6EDC}\x{6EDE}\x{6EDF}\x{6EE0}\x{6EE1}\x{6EE2}\x{6EE4}\x{6EE5}\x{6EE6}' . '\x{6EE7}\x{6EE8}\x{6EE9}\x{6EEA}\x{6EEB}\x{6EEC}\x{6EED}\x{6EEE}\x{6EEF}' . '\x{6EF0}\x{6EF1}\x{6EF2}\x{6EF3}\x{6EF4}\x{6EF5}\x{6EF6}\x{6EF7}\x{6EF8}' . '\x{6EF9}\x{6EFA}\x{6EFB}\x{6EFC}\x{6EFD}\x{6EFE}\x{6EFF}\x{6F00}\x{6F01}' . '\x{6F02}\x{6F03}\x{6F05}\x{6F06}\x{6F07}\x{6F08}\x{6F09}\x{6F0A}\x{6F0C}' . '\x{6F0D}\x{6F0E}\x{6F0F}\x{6F10}\x{6F11}\x{6F12}\x{6F13}\x{6F14}\x{6F15}' . '\x{6F16}\x{6F17}\x{6F18}\x{6F19}\x{6F1A}\x{6F1B}\x{6F1C}\x{6F1D}\x{6F1E}' . '\x{6F1F}\x{6F20}\x{6F21}\x{6F22}\x{6F23}\x{6F24}\x{6F25}\x{6F26}\x{6F27}' . '\x{6F28}\x{6F29}\x{6F2A}\x{6F2B}\x{6F2C}\x{6F2D}\x{6F2E}\x{6F2F}\x{6F30}' . '\x{6F31}\x{6F32}\x{6F33}\x{6F34}\x{6F35}\x{6F36}\x{6F37}\x{6F38}\x{6F39}' . '\x{6F3A}\x{6F3B}\x{6F3C}\x{6F3D}\x{6F3E}\x{6F3F}\x{6F40}\x{6F41}\x{6F43}' . '\x{6F44}\x{6F45}\x{6F46}\x{6F47}\x{6F49}\x{6F4B}\x{6F4C}\x{6F4D}\x{6F4E}' . '\x{6F4F}\x{6F50}\x{6F51}\x{6F52}\x{6F53}\x{6F54}\x{6F55}\x{6F56}\x{6F57}' . '\x{6F58}\x{6F59}\x{6F5A}\x{6F5B}\x{6F5C}\x{6F5D}\x{6F5E}\x{6F5F}\x{6F60}' . '\x{6F61}\x{6F62}\x{6F63}\x{6F64}\x{6F65}\x{6F66}\x{6F67}\x{6F68}\x{6F69}' . '\x{6F6A}\x{6F6B}\x{6F6C}\x{6F6D}\x{6F6E}\x{6F6F}\x{6F70}\x{6F71}\x{6F72}' . '\x{6F73}\x{6F74}\x{6F75}\x{6F76}\x{6F77}\x{6F78}\x{6F7A}\x{6F7B}\x{6F7C}' . '\x{6F7D}\x{6F7E}\x{6F7F}\x{6F80}\x{6F81}\x{6F82}\x{6F83}\x{6F84}\x{6F85}' . '\x{6F86}\x{6F87}\x{6F88}\x{6F89}\x{6F8A}\x{6F8B}\x{6F8C}\x{6F8D}\x{6F8E}' . '\x{6F8F}\x{6F90}\x{6F91}\x{6F92}\x{6F93}\x{6F94}\x{6F95}\x{6F96}\x{6F97}' . '\x{6F99}\x{6F9B}\x{6F9C}\x{6F9D}\x{6F9E}\x{6FA0}\x{6FA1}\x{6FA2}\x{6FA3}' . '\x{6FA4}\x{6FA5}\x{6FA6}\x{6FA7}\x{6FA8}\x{6FA9}\x{6FAA}\x{6FAB}\x{6FAC}' . '\x{6FAD}\x{6FAE}\x{6FAF}\x{6FB0}\x{6FB1}\x{6FB2}\x{6FB3}\x{6FB4}\x{6FB5}' . '\x{6FB6}\x{6FB8}\x{6FB9}\x{6FBA}\x{6FBB}\x{6FBC}\x{6FBD}\x{6FBE}\x{6FBF}' . '\x{6FC0}\x{6FC1}\x{6FC2}\x{6FC3}\x{6FC4}\x{6FC6}\x{6FC7}\x{6FC8}\x{6FC9}' . '\x{6FCA}\x{6FCB}\x{6FCC}\x{6FCD}\x{6FCE}\x{6FCF}\x{6FD1}\x{6FD2}\x{6FD4}' . '\x{6FD5}\x{6FD6}\x{6FD7}\x{6FD8}\x{6FD9}\x{6FDA}\x{6FDB}\x{6FDC}\x{6FDD}' . '\x{6FDE}\x{6FDF}\x{6FE0}\x{6FE1}\x{6FE2}\x{6FE3}\x{6FE4}\x{6FE5}\x{6FE6}' . '\x{6FE7}\x{6FE8}\x{6FE9}\x{6FEA}\x{6FEB}\x{6FEC}\x{6FED}\x{6FEE}\x{6FEF}' . '\x{6FF0}\x{6FF1}\x{6FF2}\x{6FF3}\x{6FF4}\x{6FF6}\x{6FF7}\x{6FF8}\x{6FF9}' . '\x{6FFA}\x{6FFB}\x{6FFC}\x{6FFE}\x{6FFF}\x{7000}\x{7001}\x{7002}\x{7003}' . '\x{7004}\x{7005}\x{7006}\x{7007}\x{7008}\x{7009}\x{700A}\x{700B}\x{700C}' . '\x{700D}\x{700E}\x{700F}\x{7011}\x{7012}\x{7014}\x{7015}\x{7016}\x{7017}' . '\x{7018}\x{7019}\x{701A}\x{701B}\x{701C}\x{701D}\x{701F}\x{7020}\x{7021}' . '\x{7022}\x{7023}\x{7024}\x{7025}\x{7026}\x{7027}\x{7028}\x{7029}\x{702A}' . '\x{702B}\x{702C}\x{702D}\x{702E}\x{702F}\x{7030}\x{7031}\x{7032}\x{7033}' . '\x{7034}\x{7035}\x{7036}\x{7037}\x{7038}\x{7039}\x{703A}\x{703B}\x{703C}' . '\x{703D}\x{703E}\x{703F}\x{7040}\x{7041}\x{7042}\x{7043}\x{7044}\x{7045}' . '\x{7046}\x{7048}\x{7049}\x{704A}\x{704C}\x{704D}\x{704F}\x{7050}\x{7051}' . '\x{7052}\x{7053}\x{7054}\x{7055}\x{7056}\x{7057}\x{7058}\x{7059}\x{705A}' . '\x{705B}\x{705C}\x{705D}\x{705E}\x{705F}\x{7060}\x{7061}\x{7062}\x{7063}' . '\x{7064}\x{7065}\x{7066}\x{7067}\x{7068}\x{7069}\x{706A}\x{706B}\x{706C}' . '\x{706D}\x{706E}\x{706F}\x{7070}\x{7071}\x{7074}\x{7075}\x{7076}\x{7077}' . '\x{7078}\x{7079}\x{707A}\x{707C}\x{707D}\x{707E}\x{707F}\x{7080}\x{7082}' . '\x{7083}\x{7084}\x{7085}\x{7086}\x{7087}\x{7088}\x{7089}\x{708A}\x{708B}' . '\x{708C}\x{708E}\x{708F}\x{7090}\x{7091}\x{7092}\x{7093}\x{7094}\x{7095}' . '\x{7096}\x{7098}\x{7099}\x{709A}\x{709C}\x{709D}\x{709E}\x{709F}\x{70A0}' . '\x{70A1}\x{70A2}\x{70A3}\x{70A4}\x{70A5}\x{70A6}\x{70A7}\x{70A8}\x{70A9}' . '\x{70AB}\x{70AC}\x{70AD}\x{70AE}\x{70AF}\x{70B0}\x{70B1}\x{70B3}\x{70B4}' . '\x{70B5}\x{70B7}\x{70B8}\x{70B9}\x{70BA}\x{70BB}\x{70BC}\x{70BD}\x{70BE}' . '\x{70BF}\x{70C0}\x{70C1}\x{70C2}\x{70C3}\x{70C4}\x{70C5}\x{70C6}\x{70C7}' . '\x{70C8}\x{70C9}\x{70CA}\x{70CB}\x{70CC}\x{70CD}\x{70CE}\x{70CF}\x{70D0}' . '\x{70D1}\x{70D2}\x{70D3}\x{70D4}\x{70D6}\x{70D7}\x{70D8}\x{70D9}\x{70DA}' . '\x{70DB}\x{70DC}\x{70DD}\x{70DE}\x{70DF}\x{70E0}\x{70E1}\x{70E2}\x{70E3}' . '\x{70E4}\x{70E5}\x{70E6}\x{70E7}\x{70E8}\x{70E9}\x{70EA}\x{70EB}\x{70EC}' . '\x{70ED}\x{70EE}\x{70EF}\x{70F0}\x{70F1}\x{70F2}\x{70F3}\x{70F4}\x{70F5}' . '\x{70F6}\x{70F7}\x{70F8}\x{70F9}\x{70FA}\x{70FB}\x{70FC}\x{70FD}\x{70FF}' . '\x{7100}\x{7101}\x{7102}\x{7103}\x{7104}\x{7105}\x{7106}\x{7107}\x{7109}' . '\x{710A}\x{710B}\x{710C}\x{710D}\x{710E}\x{710F}\x{7110}\x{7111}\x{7112}' . '\x{7113}\x{7115}\x{7116}\x{7117}\x{7118}\x{7119}\x{711A}\x{711B}\x{711C}' . '\x{711D}\x{711E}\x{711F}\x{7120}\x{7121}\x{7122}\x{7123}\x{7125}\x{7126}' . '\x{7127}\x{7128}\x{7129}\x{712A}\x{712B}\x{712C}\x{712D}\x{712E}\x{712F}' . '\x{7130}\x{7131}\x{7132}\x{7135}\x{7136}\x{7137}\x{7138}\x{7139}\x{713A}' . '\x{713B}\x{713D}\x{713E}\x{713F}\x{7140}\x{7141}\x{7142}\x{7143}\x{7144}' . '\x{7145}\x{7146}\x{7147}\x{7148}\x{7149}\x{714A}\x{714B}\x{714C}\x{714D}' . '\x{714E}\x{714F}\x{7150}\x{7151}\x{7152}\x{7153}\x{7154}\x{7156}\x{7158}' . '\x{7159}\x{715A}\x{715B}\x{715C}\x{715D}\x{715E}\x{715F}\x{7160}\x{7161}' . '\x{7162}\x{7163}\x{7164}\x{7165}\x{7166}\x{7167}\x{7168}\x{7169}\x{716A}' . '\x{716C}\x{716E}\x{716F}\x{7170}\x{7171}\x{7172}\x{7173}\x{7174}\x{7175}' . '\x{7176}\x{7177}\x{7178}\x{7179}\x{717A}\x{717B}\x{717C}\x{717D}\x{717E}' . '\x{717F}\x{7180}\x{7181}\x{7182}\x{7183}\x{7184}\x{7185}\x{7186}\x{7187}' . '\x{7188}\x{7189}\x{718A}\x{718B}\x{718C}\x{718E}\x{718F}\x{7190}\x{7191}' . '\x{7192}\x{7193}\x{7194}\x{7195}\x{7197}\x{7198}\x{7199}\x{719A}\x{719B}' . '\x{719C}\x{719D}\x{719E}\x{719F}\x{71A0}\x{71A1}\x{71A2}\x{71A3}\x{71A4}' . '\x{71A5}\x{71A7}\x{71A8}\x{71A9}\x{71AA}\x{71AC}\x{71AD}\x{71AE}\x{71AF}' . '\x{71B0}\x{71B1}\x{71B2}\x{71B3}\x{71B4}\x{71B5}\x{71B7}\x{71B8}\x{71B9}' . '\x{71BA}\x{71BB}\x{71BC}\x{71BD}\x{71BE}\x{71BF}\x{71C0}\x{71C1}\x{71C2}' . '\x{71C3}\x{71C4}\x{71C5}\x{71C6}\x{71C7}\x{71C8}\x{71C9}\x{71CA}\x{71CB}' . '\x{71CD}\x{71CE}\x{71CF}\x{71D0}\x{71D1}\x{71D2}\x{71D4}\x{71D5}\x{71D6}' . '\x{71D7}\x{71D8}\x{71D9}\x{71DA}\x{71DB}\x{71DC}\x{71DD}\x{71DE}\x{71DF}' . '\x{71E0}\x{71E1}\x{71E2}\x{71E3}\x{71E4}\x{71E5}\x{71E6}\x{71E7}\x{71E8}' . '\x{71E9}\x{71EA}\x{71EB}\x{71EC}\x{71ED}\x{71EE}\x{71EF}\x{71F0}\x{71F1}' . '\x{71F2}\x{71F4}\x{71F5}\x{71F6}\x{71F7}\x{71F8}\x{71F9}\x{71FB}\x{71FC}' . '\x{71FD}\x{71FE}\x{71FF}\x{7201}\x{7202}\x{7203}\x{7204}\x{7205}\x{7206}' . '\x{7207}\x{7208}\x{7209}\x{720A}\x{720C}\x{720D}\x{720E}\x{720F}\x{7210}' . '\x{7212}\x{7213}\x{7214}\x{7216}\x{7218}\x{7219}\x{721A}\x{721B}\x{721C}' . '\x{721D}\x{721E}\x{721F}\x{7221}\x{7222}\x{7223}\x{7226}\x{7227}\x{7228}' . '\x{7229}\x{722A}\x{722B}\x{722C}\x{722D}\x{722E}\x{7230}\x{7231}\x{7232}' . '\x{7233}\x{7235}\x{7236}\x{7237}\x{7238}\x{7239}\x{723A}\x{723B}\x{723C}' . '\x{723D}\x{723E}\x{723F}\x{7240}\x{7241}\x{7242}\x{7243}\x{7244}\x{7246}' . '\x{7247}\x{7248}\x{7249}\x{724A}\x{724B}\x{724C}\x{724D}\x{724F}\x{7251}' . '\x{7252}\x{7253}\x{7254}\x{7256}\x{7257}\x{7258}\x{7259}\x{725A}\x{725B}' . '\x{725C}\x{725D}\x{725E}\x{725F}\x{7260}\x{7261}\x{7262}\x{7263}\x{7264}' . '\x{7265}\x{7266}\x{7267}\x{7268}\x{7269}\x{726A}\x{726B}\x{726C}\x{726D}' . '\x{726E}\x{726F}\x{7270}\x{7271}\x{7272}\x{7273}\x{7274}\x{7275}\x{7276}' . '\x{7277}\x{7278}\x{7279}\x{727A}\x{727B}\x{727C}\x{727D}\x{727E}\x{727F}' . '\x{7280}\x{7281}\x{7282}\x{7283}\x{7284}\x{7285}\x{7286}\x{7287}\x{7288}' . '\x{7289}\x{728A}\x{728B}\x{728C}\x{728D}\x{728E}\x{728F}\x{7290}\x{7291}' . '\x{7292}\x{7293}\x{7294}\x{7295}\x{7296}\x{7297}\x{7298}\x{7299}\x{729A}' . '\x{729B}\x{729C}\x{729D}\x{729E}\x{729F}\x{72A1}\x{72A2}\x{72A3}\x{72A4}' . '\x{72A5}\x{72A6}\x{72A7}\x{72A8}\x{72A9}\x{72AA}\x{72AC}\x{72AD}\x{72AE}' . '\x{72AF}\x{72B0}\x{72B1}\x{72B2}\x{72B3}\x{72B4}\x{72B5}\x{72B6}\x{72B7}' . '\x{72B8}\x{72B9}\x{72BA}\x{72BB}\x{72BC}\x{72BD}\x{72BF}\x{72C0}\x{72C1}' . '\x{72C2}\x{72C3}\x{72C4}\x{72C5}\x{72C6}\x{72C7}\x{72C8}\x{72C9}\x{72CA}' . '\x{72CB}\x{72CC}\x{72CD}\x{72CE}\x{72CF}\x{72D0}\x{72D1}\x{72D2}\x{72D3}' . '\x{72D4}\x{72D5}\x{72D6}\x{72D7}\x{72D8}\x{72D9}\x{72DA}\x{72DB}\x{72DC}' . '\x{72DD}\x{72DE}\x{72DF}\x{72E0}\x{72E1}\x{72E2}\x{72E3}\x{72E4}\x{72E5}' . '\x{72E6}\x{72E7}\x{72E8}\x{72E9}\x{72EA}\x{72EB}\x{72EC}\x{72ED}\x{72EE}' . '\x{72EF}\x{72F0}\x{72F1}\x{72F2}\x{72F3}\x{72F4}\x{72F5}\x{72F6}\x{72F7}' . '\x{72F8}\x{72F9}\x{72FA}\x{72FB}\x{72FC}\x{72FD}\x{72FE}\x{72FF}\x{7300}' . '\x{7301}\x{7303}\x{7304}\x{7305}\x{7306}\x{7307}\x{7308}\x{7309}\x{730A}' . '\x{730B}\x{730C}\x{730D}\x{730E}\x{730F}\x{7311}\x{7312}\x{7313}\x{7314}' . '\x{7315}\x{7316}\x{7317}\x{7318}\x{7319}\x{731A}\x{731B}\x{731C}\x{731D}' . '\x{731E}\x{7320}\x{7321}\x{7322}\x{7323}\x{7324}\x{7325}\x{7326}\x{7327}' . '\x{7329}\x{732A}\x{732B}\x{732C}\x{732D}\x{732E}\x{7330}\x{7331}\x{7332}' . '\x{7333}\x{7334}\x{7335}\x{7336}\x{7337}\x{7338}\x{7339}\x{733A}\x{733B}' . '\x{733C}\x{733D}\x{733E}\x{733F}\x{7340}\x{7341}\x{7342}\x{7343}\x{7344}' . '\x{7345}\x{7346}\x{7347}\x{7348}\x{7349}\x{734A}\x{734B}\x{734C}\x{734D}' . '\x{734E}\x{7350}\x{7351}\x{7352}\x{7354}\x{7355}\x{7356}\x{7357}\x{7358}' . '\x{7359}\x{735A}\x{735B}\x{735C}\x{735D}\x{735E}\x{735F}\x{7360}\x{7361}' . '\x{7362}\x{7364}\x{7365}\x{7366}\x{7367}\x{7368}\x{7369}\x{736A}\x{736B}' . '\x{736C}\x{736D}\x{736E}\x{736F}\x{7370}\x{7371}\x{7372}\x{7373}\x{7374}' . '\x{7375}\x{7376}\x{7377}\x{7378}\x{7379}\x{737A}\x{737B}\x{737C}\x{737D}' . '\x{737E}\x{737F}\x{7380}\x{7381}\x{7382}\x{7383}\x{7384}\x{7385}\x{7386}' . '\x{7387}\x{7388}\x{7389}\x{738A}\x{738B}\x{738C}\x{738D}\x{738E}\x{738F}' . '\x{7390}\x{7391}\x{7392}\x{7393}\x{7394}\x{7395}\x{7396}\x{7397}\x{7398}' . '\x{7399}\x{739A}\x{739B}\x{739D}\x{739E}\x{739F}\x{73A0}\x{73A1}\x{73A2}' . '\x{73A3}\x{73A4}\x{73A5}\x{73A6}\x{73A7}\x{73A8}\x{73A9}\x{73AA}\x{73AB}' . '\x{73AC}\x{73AD}\x{73AE}\x{73AF}\x{73B0}\x{73B1}\x{73B2}\x{73B3}\x{73B4}' . '\x{73B5}\x{73B6}\x{73B7}\x{73B8}\x{73B9}\x{73BA}\x{73BB}\x{73BC}\x{73BD}' . '\x{73BE}\x{73BF}\x{73C0}\x{73C2}\x{73C3}\x{73C4}\x{73C5}\x{73C6}\x{73C7}' . '\x{73C8}\x{73C9}\x{73CA}\x{73CB}\x{73CC}\x{73CD}\x{73CE}\x{73CF}\x{73D0}' . '\x{73D1}\x{73D2}\x{73D3}\x{73D4}\x{73D5}\x{73D6}\x{73D7}\x{73D8}\x{73D9}' . '\x{73DA}\x{73DB}\x{73DC}\x{73DD}\x{73DE}\x{73DF}\x{73E0}\x{73E2}\x{73E3}' . '\x{73E5}\x{73E6}\x{73E7}\x{73E8}\x{73E9}\x{73EA}\x{73EB}\x{73EC}\x{73ED}' . '\x{73EE}\x{73EF}\x{73F0}\x{73F1}\x{73F2}\x{73F4}\x{73F5}\x{73F6}\x{73F7}' . '\x{73F8}\x{73F9}\x{73FA}\x{73FC}\x{73FD}\x{73FE}\x{73FF}\x{7400}\x{7401}' . '\x{7402}\x{7403}\x{7404}\x{7405}\x{7406}\x{7407}\x{7408}\x{7409}\x{740A}' . '\x{740B}\x{740C}\x{740D}\x{740E}\x{740F}\x{7410}\x{7411}\x{7412}\x{7413}' . '\x{7414}\x{7415}\x{7416}\x{7417}\x{7419}\x{741A}\x{741B}\x{741C}\x{741D}' . '\x{741E}\x{741F}\x{7420}\x{7421}\x{7422}\x{7423}\x{7424}\x{7425}\x{7426}' . '\x{7427}\x{7428}\x{7429}\x{742A}\x{742B}\x{742C}\x{742D}\x{742E}\x{742F}' . '\x{7430}\x{7431}\x{7432}\x{7433}\x{7434}\x{7435}\x{7436}\x{7437}\x{7438}' . '\x{743A}\x{743B}\x{743C}\x{743D}\x{743F}\x{7440}\x{7441}\x{7442}\x{7443}' . '\x{7444}\x{7445}\x{7446}\x{7448}\x{744A}\x{744B}\x{744C}\x{744D}\x{744E}' . '\x{744F}\x{7450}\x{7451}\x{7452}\x{7453}\x{7454}\x{7455}\x{7456}\x{7457}' . '\x{7459}\x{745A}\x{745B}\x{745C}\x{745D}\x{745E}\x{745F}\x{7461}\x{7462}' . '\x{7463}\x{7464}\x{7465}\x{7466}\x{7467}\x{7468}\x{7469}\x{746A}\x{746B}' . '\x{746C}\x{746D}\x{746E}\x{746F}\x{7470}\x{7471}\x{7472}\x{7473}\x{7474}' . '\x{7475}\x{7476}\x{7477}\x{7478}\x{7479}\x{747A}\x{747C}\x{747D}\x{747E}' . '\x{747F}\x{7480}\x{7481}\x{7482}\x{7483}\x{7485}\x{7486}\x{7487}\x{7488}' . '\x{7489}\x{748A}\x{748B}\x{748C}\x{748D}\x{748E}\x{748F}\x{7490}\x{7491}' . '\x{7492}\x{7493}\x{7494}\x{7495}\x{7497}\x{7498}\x{7499}\x{749A}\x{749B}' . '\x{749C}\x{749E}\x{749F}\x{74A0}\x{74A1}\x{74A3}\x{74A4}\x{74A5}\x{74A6}' . '\x{74A7}\x{74A8}\x{74A9}\x{74AA}\x{74AB}\x{74AC}\x{74AD}\x{74AE}\x{74AF}' . '\x{74B0}\x{74B1}\x{74B2}\x{74B3}\x{74B4}\x{74B5}\x{74B6}\x{74B7}\x{74B8}' . '\x{74B9}\x{74BA}\x{74BB}\x{74BC}\x{74BD}\x{74BE}\x{74BF}\x{74C0}\x{74C1}' . '\x{74C2}\x{74C3}\x{74C4}\x{74C5}\x{74C6}\x{74CA}\x{74CB}\x{74CD}\x{74CE}' . '\x{74CF}\x{74D0}\x{74D1}\x{74D2}\x{74D3}\x{74D4}\x{74D5}\x{74D6}\x{74D7}' . '\x{74D8}\x{74D9}\x{74DA}\x{74DB}\x{74DC}\x{74DD}\x{74DE}\x{74DF}\x{74E0}' . '\x{74E1}\x{74E2}\x{74E3}\x{74E4}\x{74E5}\x{74E6}\x{74E7}\x{74E8}\x{74E9}' . '\x{74EA}\x{74EC}\x{74ED}\x{74EE}\x{74EF}\x{74F0}\x{74F1}\x{74F2}\x{74F3}' . '\x{74F4}\x{74F5}\x{74F6}\x{74F7}\x{74F8}\x{74F9}\x{74FA}\x{74FB}\x{74FC}' . '\x{74FD}\x{74FE}\x{74FF}\x{7500}\x{7501}\x{7502}\x{7503}\x{7504}\x{7505}' . '\x{7506}\x{7507}\x{7508}\x{7509}\x{750A}\x{750B}\x{750C}\x{750D}\x{750F}' . '\x{7510}\x{7511}\x{7512}\x{7513}\x{7514}\x{7515}\x{7516}\x{7517}\x{7518}' . '\x{7519}\x{751A}\x{751B}\x{751C}\x{751D}\x{751E}\x{751F}\x{7521}\x{7522}' . '\x{7523}\x{7524}\x{7525}\x{7526}\x{7527}\x{7528}\x{7529}\x{752A}\x{752B}' . '\x{752C}\x{752D}\x{752E}\x{752F}\x{7530}\x{7531}\x{7532}\x{7533}\x{7535}' . '\x{7536}\x{7537}\x{7538}\x{7539}\x{753A}\x{753B}\x{753C}\x{753D}\x{753E}' . '\x{753F}\x{7540}\x{7542}\x{7543}\x{7544}\x{7545}\x{7546}\x{7547}\x{7548}' . '\x{7549}\x{754B}\x{754C}\x{754D}\x{754E}\x{754F}\x{7550}\x{7551}\x{7553}' . '\x{7554}\x{7556}\x{7557}\x{7558}\x{7559}\x{755A}\x{755B}\x{755C}\x{755D}' . '\x{755F}\x{7560}\x{7562}\x{7563}\x{7564}\x{7565}\x{7566}\x{7567}\x{7568}' . '\x{7569}\x{756A}\x{756B}\x{756C}\x{756D}\x{756E}\x{756F}\x{7570}\x{7572}' . '\x{7574}\x{7575}\x{7576}\x{7577}\x{7578}\x{7579}\x{757C}\x{757D}\x{757E}' . '\x{757F}\x{7580}\x{7581}\x{7582}\x{7583}\x{7584}\x{7586}\x{7587}\x{7588}' . '\x{7589}\x{758A}\x{758B}\x{758C}\x{758D}\x{758F}\x{7590}\x{7591}\x{7592}' . '\x{7593}\x{7594}\x{7595}\x{7596}\x{7597}\x{7598}\x{7599}\x{759A}\x{759B}' . '\x{759C}\x{759D}\x{759E}\x{759F}\x{75A0}\x{75A1}\x{75A2}\x{75A3}\x{75A4}' . '\x{75A5}\x{75A6}\x{75A7}\x{75A8}\x{75AA}\x{75AB}\x{75AC}\x{75AD}\x{75AE}' . '\x{75AF}\x{75B0}\x{75B1}\x{75B2}\x{75B3}\x{75B4}\x{75B5}\x{75B6}\x{75B8}' . '\x{75B9}\x{75BA}\x{75BB}\x{75BC}\x{75BD}\x{75BE}\x{75BF}\x{75C0}\x{75C1}' . '\x{75C2}\x{75C3}\x{75C4}\x{75C5}\x{75C6}\x{75C7}\x{75C8}\x{75C9}\x{75CA}' . '\x{75CB}\x{75CC}\x{75CD}\x{75CE}\x{75CF}\x{75D0}\x{75D1}\x{75D2}\x{75D3}' . '\x{75D4}\x{75D5}\x{75D6}\x{75D7}\x{75D8}\x{75D9}\x{75DA}\x{75DB}\x{75DD}' . '\x{75DE}\x{75DF}\x{75E0}\x{75E1}\x{75E2}\x{75E3}\x{75E4}\x{75E5}\x{75E6}' . '\x{75E7}\x{75E8}\x{75EA}\x{75EB}\x{75EC}\x{75ED}\x{75EF}\x{75F0}\x{75F1}' . '\x{75F2}\x{75F3}\x{75F4}\x{75F5}\x{75F6}\x{75F7}\x{75F8}\x{75F9}\x{75FA}' . '\x{75FB}\x{75FC}\x{75FD}\x{75FE}\x{75FF}\x{7600}\x{7601}\x{7602}\x{7603}' . '\x{7604}\x{7605}\x{7606}\x{7607}\x{7608}\x{7609}\x{760A}\x{760B}\x{760C}' . '\x{760D}\x{760E}\x{760F}\x{7610}\x{7611}\x{7612}\x{7613}\x{7614}\x{7615}' . '\x{7616}\x{7617}\x{7618}\x{7619}\x{761A}\x{761B}\x{761C}\x{761D}\x{761E}' . '\x{761F}\x{7620}\x{7621}\x{7622}\x{7623}\x{7624}\x{7625}\x{7626}\x{7627}' . '\x{7628}\x{7629}\x{762A}\x{762B}\x{762D}\x{762E}\x{762F}\x{7630}\x{7631}' . '\x{7632}\x{7633}\x{7634}\x{7635}\x{7636}\x{7637}\x{7638}\x{7639}\x{763A}' . '\x{763B}\x{763C}\x{763D}\x{763E}\x{763F}\x{7640}\x{7641}\x{7642}\x{7643}' . '\x{7646}\x{7647}\x{7648}\x{7649}\x{764A}\x{764B}\x{764C}\x{764D}\x{764F}' . '\x{7650}\x{7652}\x{7653}\x{7654}\x{7656}\x{7657}\x{7658}\x{7659}\x{765A}' . '\x{765B}\x{765C}\x{765D}\x{765E}\x{765F}\x{7660}\x{7661}\x{7662}\x{7663}' . '\x{7664}\x{7665}\x{7666}\x{7667}\x{7668}\x{7669}\x{766A}\x{766B}\x{766C}' . '\x{766D}\x{766E}\x{766F}\x{7670}\x{7671}\x{7672}\x{7674}\x{7675}\x{7676}' . '\x{7677}\x{7678}\x{7679}\x{767B}\x{767C}\x{767D}\x{767E}\x{767F}\x{7680}' . '\x{7681}\x{7682}\x{7683}\x{7684}\x{7685}\x{7686}\x{7687}\x{7688}\x{7689}' . '\x{768A}\x{768B}\x{768C}\x{768E}\x{768F}\x{7690}\x{7691}\x{7692}\x{7693}' . '\x{7694}\x{7695}\x{7696}\x{7697}\x{7698}\x{7699}\x{769A}\x{769B}\x{769C}' . '\x{769D}\x{769E}\x{769F}\x{76A0}\x{76A3}\x{76A4}\x{76A6}\x{76A7}\x{76A9}' . '\x{76AA}\x{76AB}\x{76AC}\x{76AD}\x{76AE}\x{76AF}\x{76B0}\x{76B1}\x{76B2}' . '\x{76B4}\x{76B5}\x{76B7}\x{76B8}\x{76BA}\x{76BB}\x{76BC}\x{76BD}\x{76BE}' . '\x{76BF}\x{76C0}\x{76C2}\x{76C3}\x{76C4}\x{76C5}\x{76C6}\x{76C7}\x{76C8}' . '\x{76C9}\x{76CA}\x{76CD}\x{76CE}\x{76CF}\x{76D0}\x{76D1}\x{76D2}\x{76D3}' . '\x{76D4}\x{76D5}\x{76D6}\x{76D7}\x{76D8}\x{76DA}\x{76DB}\x{76DC}\x{76DD}' . '\x{76DE}\x{76DF}\x{76E0}\x{76E1}\x{76E2}\x{76E3}\x{76E4}\x{76E5}\x{76E6}' . '\x{76E7}\x{76E8}\x{76E9}\x{76EA}\x{76EC}\x{76ED}\x{76EE}\x{76EF}\x{76F0}' . '\x{76F1}\x{76F2}\x{76F3}\x{76F4}\x{76F5}\x{76F6}\x{76F7}\x{76F8}\x{76F9}' . '\x{76FA}\x{76FB}\x{76FC}\x{76FD}\x{76FE}\x{76FF}\x{7701}\x{7703}\x{7704}' . '\x{7705}\x{7706}\x{7707}\x{7708}\x{7709}\x{770A}\x{770B}\x{770C}\x{770D}' . '\x{770F}\x{7710}\x{7711}\x{7712}\x{7713}\x{7714}\x{7715}\x{7716}\x{7717}' . '\x{7718}\x{7719}\x{771A}\x{771B}\x{771C}\x{771D}\x{771E}\x{771F}\x{7720}' . '\x{7722}\x{7723}\x{7725}\x{7726}\x{7727}\x{7728}\x{7729}\x{772A}\x{772C}' . '\x{772D}\x{772E}\x{772F}\x{7730}\x{7731}\x{7732}\x{7733}\x{7734}\x{7735}' . '\x{7736}\x{7737}\x{7738}\x{7739}\x{773A}\x{773B}\x{773C}\x{773D}\x{773E}' . '\x{7740}\x{7741}\x{7743}\x{7744}\x{7745}\x{7746}\x{7747}\x{7748}\x{7749}' . '\x{774A}\x{774B}\x{774C}\x{774D}\x{774E}\x{774F}\x{7750}\x{7751}\x{7752}' . '\x{7753}\x{7754}\x{7755}\x{7756}\x{7757}\x{7758}\x{7759}\x{775A}\x{775B}' . '\x{775C}\x{775D}\x{775E}\x{775F}\x{7760}\x{7761}\x{7762}\x{7763}\x{7765}' . '\x{7766}\x{7767}\x{7768}\x{7769}\x{776A}\x{776B}\x{776C}\x{776D}\x{776E}' . '\x{776F}\x{7770}\x{7771}\x{7772}\x{7773}\x{7774}\x{7775}\x{7776}\x{7777}' . '\x{7778}\x{7779}\x{777A}\x{777B}\x{777C}\x{777D}\x{777E}\x{777F}\x{7780}' . '\x{7781}\x{7782}\x{7783}\x{7784}\x{7785}\x{7786}\x{7787}\x{7788}\x{7789}' . '\x{778A}\x{778B}\x{778C}\x{778D}\x{778E}\x{778F}\x{7790}\x{7791}\x{7792}' . '\x{7793}\x{7794}\x{7795}\x{7797}\x{7798}\x{7799}\x{779A}\x{779B}\x{779C}' . '\x{779D}\x{779E}\x{779F}\x{77A0}\x{77A1}\x{77A2}\x{77A3}\x{77A5}\x{77A6}' . '\x{77A7}\x{77A8}\x{77A9}\x{77AA}\x{77AB}\x{77AC}\x{77AD}\x{77AE}\x{77AF}' . '\x{77B0}\x{77B1}\x{77B2}\x{77B3}\x{77B4}\x{77B5}\x{77B6}\x{77B7}\x{77B8}' . '\x{77B9}\x{77BA}\x{77BB}\x{77BC}\x{77BD}\x{77BF}\x{77C0}\x{77C2}\x{77C3}' . '\x{77C4}\x{77C5}\x{77C6}\x{77C7}\x{77C8}\x{77C9}\x{77CA}\x{77CB}\x{77CC}' . '\x{77CD}\x{77CE}\x{77CF}\x{77D0}\x{77D1}\x{77D3}\x{77D4}\x{77D5}\x{77D6}' . '\x{77D7}\x{77D8}\x{77D9}\x{77DA}\x{77DB}\x{77DC}\x{77DE}\x{77DF}\x{77E0}' . '\x{77E1}\x{77E2}\x{77E3}\x{77E5}\x{77E7}\x{77E8}\x{77E9}\x{77EA}\x{77EB}' . '\x{77EC}\x{77ED}\x{77EE}\x{77EF}\x{77F0}\x{77F1}\x{77F2}\x{77F3}\x{77F6}' . '\x{77F7}\x{77F8}\x{77F9}\x{77FA}\x{77FB}\x{77FC}\x{77FD}\x{77FE}\x{77FF}' . '\x{7800}\x{7801}\x{7802}\x{7803}\x{7804}\x{7805}\x{7806}\x{7808}\x{7809}' . '\x{780A}\x{780B}\x{780C}\x{780D}\x{780E}\x{780F}\x{7810}\x{7811}\x{7812}' . '\x{7813}\x{7814}\x{7815}\x{7816}\x{7817}\x{7818}\x{7819}\x{781A}\x{781B}' . '\x{781C}\x{781D}\x{781E}\x{781F}\x{7820}\x{7821}\x{7822}\x{7823}\x{7825}' . '\x{7826}\x{7827}\x{7828}\x{7829}\x{782A}\x{782B}\x{782C}\x{782D}\x{782E}' . '\x{782F}\x{7830}\x{7831}\x{7832}\x{7833}\x{7834}\x{7835}\x{7837}\x{7838}' . '\x{7839}\x{783A}\x{783B}\x{783C}\x{783D}\x{783E}\x{7840}\x{7841}\x{7843}' . '\x{7844}\x{7845}\x{7847}\x{7848}\x{7849}\x{784A}\x{784C}\x{784D}\x{784E}' . '\x{7850}\x{7851}\x{7852}\x{7853}\x{7854}\x{7855}\x{7856}\x{7857}\x{7858}' . '\x{7859}\x{785A}\x{785B}\x{785C}\x{785D}\x{785E}\x{785F}\x{7860}\x{7861}' . '\x{7862}\x{7863}\x{7864}\x{7865}\x{7866}\x{7867}\x{7868}\x{7869}\x{786A}' . '\x{786B}\x{786C}\x{786D}\x{786E}\x{786F}\x{7870}\x{7871}\x{7872}\x{7873}' . '\x{7874}\x{7875}\x{7877}\x{7878}\x{7879}\x{787A}\x{787B}\x{787C}\x{787D}' . '\x{787E}\x{787F}\x{7880}\x{7881}\x{7882}\x{7883}\x{7884}\x{7885}\x{7886}' . '\x{7887}\x{7889}\x{788A}\x{788B}\x{788C}\x{788D}\x{788E}\x{788F}\x{7890}' . '\x{7891}\x{7892}\x{7893}\x{7894}\x{7895}\x{7896}\x{7897}\x{7898}\x{7899}' . '\x{789A}\x{789B}\x{789C}\x{789D}\x{789E}\x{789F}\x{78A0}\x{78A1}\x{78A2}' . '\x{78A3}\x{78A4}\x{78A5}\x{78A6}\x{78A7}\x{78A8}\x{78A9}\x{78AA}\x{78AB}' . '\x{78AC}\x{78AD}\x{78AE}\x{78AF}\x{78B0}\x{78B1}\x{78B2}\x{78B3}\x{78B4}' . '\x{78B5}\x{78B6}\x{78B7}\x{78B8}\x{78B9}\x{78BA}\x{78BB}\x{78BC}\x{78BD}' . '\x{78BE}\x{78BF}\x{78C0}\x{78C1}\x{78C3}\x{78C4}\x{78C5}\x{78C6}\x{78C8}' . '\x{78C9}\x{78CA}\x{78CB}\x{78CC}\x{78CD}\x{78CE}\x{78CF}\x{78D0}\x{78D1}' . '\x{78D3}\x{78D4}\x{78D5}\x{78D6}\x{78D7}\x{78D8}\x{78D9}\x{78DA}\x{78DB}' . '\x{78DC}\x{78DD}\x{78DE}\x{78DF}\x{78E0}\x{78E1}\x{78E2}\x{78E3}\x{78E4}' . '\x{78E5}\x{78E6}\x{78E7}\x{78E8}\x{78E9}\x{78EA}\x{78EB}\x{78EC}\x{78ED}' . '\x{78EE}\x{78EF}\x{78F1}\x{78F2}\x{78F3}\x{78F4}\x{78F5}\x{78F6}\x{78F7}' . '\x{78F9}\x{78FA}\x{78FB}\x{78FC}\x{78FD}\x{78FE}\x{78FF}\x{7901}\x{7902}' . '\x{7903}\x{7904}\x{7905}\x{7906}\x{7907}\x{7909}\x{790A}\x{790B}\x{790C}' . '\x{790E}\x{790F}\x{7910}\x{7911}\x{7912}\x{7913}\x{7914}\x{7916}\x{7917}' . '\x{7918}\x{7919}\x{791A}\x{791B}\x{791C}\x{791D}\x{791E}\x{7921}\x{7922}' . '\x{7923}\x{7924}\x{7925}\x{7926}\x{7927}\x{7928}\x{7929}\x{792A}\x{792B}' . '\x{792C}\x{792D}\x{792E}\x{792F}\x{7930}\x{7931}\x{7933}\x{7934}\x{7935}' . '\x{7937}\x{7938}\x{7939}\x{793A}\x{793B}\x{793C}\x{793D}\x{793E}\x{793F}' . '\x{7940}\x{7941}\x{7942}\x{7943}\x{7944}\x{7945}\x{7946}\x{7947}\x{7948}' . '\x{7949}\x{794A}\x{794B}\x{794C}\x{794D}\x{794E}\x{794F}\x{7950}\x{7951}' . '\x{7952}\x{7953}\x{7954}\x{7955}\x{7956}\x{7957}\x{7958}\x{795A}\x{795B}' . '\x{795C}\x{795D}\x{795E}\x{795F}\x{7960}\x{7961}\x{7962}\x{7963}\x{7964}' . '\x{7965}\x{7966}\x{7967}\x{7968}\x{7969}\x{796A}\x{796B}\x{796D}\x{796F}' . '\x{7970}\x{7971}\x{7972}\x{7973}\x{7974}\x{7977}\x{7978}\x{7979}\x{797A}' . '\x{797B}\x{797C}\x{797D}\x{797E}\x{797F}\x{7980}\x{7981}\x{7982}\x{7983}' . '\x{7984}\x{7985}\x{7988}\x{7989}\x{798A}\x{798B}\x{798C}\x{798D}\x{798E}' . '\x{798F}\x{7990}\x{7991}\x{7992}\x{7993}\x{7994}\x{7995}\x{7996}\x{7997}' . '\x{7998}\x{7999}\x{799A}\x{799B}\x{799C}\x{799F}\x{79A0}\x{79A1}\x{79A2}' . '\x{79A3}\x{79A4}\x{79A5}\x{79A6}\x{79A7}\x{79A8}\x{79AA}\x{79AB}\x{79AC}' . '\x{79AD}\x{79AE}\x{79AF}\x{79B0}\x{79B1}\x{79B2}\x{79B3}\x{79B4}\x{79B5}' . '\x{79B6}\x{79B7}\x{79B8}\x{79B9}\x{79BA}\x{79BB}\x{79BD}\x{79BE}\x{79BF}' . '\x{79C0}\x{79C1}\x{79C2}\x{79C3}\x{79C5}\x{79C6}\x{79C8}\x{79C9}\x{79CA}' . '\x{79CB}\x{79CD}\x{79CE}\x{79CF}\x{79D0}\x{79D1}\x{79D2}\x{79D3}\x{79D5}' . '\x{79D6}\x{79D8}\x{79D9}\x{79DA}\x{79DB}\x{79DC}\x{79DD}\x{79DE}\x{79DF}' . '\x{79E0}\x{79E1}\x{79E2}\x{79E3}\x{79E4}\x{79E5}\x{79E6}\x{79E7}\x{79E8}' . '\x{79E9}\x{79EA}\x{79EB}\x{79EC}\x{79ED}\x{79EE}\x{79EF}\x{79F0}\x{79F1}' . '\x{79F2}\x{79F3}\x{79F4}\x{79F5}\x{79F6}\x{79F7}\x{79F8}\x{79F9}\x{79FA}' . '\x{79FB}\x{79FC}\x{79FD}\x{79FE}\x{79FF}\x{7A00}\x{7A02}\x{7A03}\x{7A04}' . '\x{7A05}\x{7A06}\x{7A08}\x{7A0A}\x{7A0B}\x{7A0C}\x{7A0D}\x{7A0E}\x{7A0F}' . '\x{7A10}\x{7A11}\x{7A12}\x{7A13}\x{7A14}\x{7A15}\x{7A16}\x{7A17}\x{7A18}' . '\x{7A19}\x{7A1A}\x{7A1B}\x{7A1C}\x{7A1D}\x{7A1E}\x{7A1F}\x{7A20}\x{7A21}' . '\x{7A22}\x{7A23}\x{7A24}\x{7A25}\x{7A26}\x{7A27}\x{7A28}\x{7A29}\x{7A2A}' . '\x{7A2B}\x{7A2D}\x{7A2E}\x{7A2F}\x{7A30}\x{7A31}\x{7A32}\x{7A33}\x{7A34}' . '\x{7A35}\x{7A37}\x{7A39}\x{7A3B}\x{7A3C}\x{7A3D}\x{7A3E}\x{7A3F}\x{7A40}' . '\x{7A41}\x{7A42}\x{7A43}\x{7A44}\x{7A45}\x{7A46}\x{7A47}\x{7A48}\x{7A49}' . '\x{7A4A}\x{7A4B}\x{7A4C}\x{7A4D}\x{7A4E}\x{7A50}\x{7A51}\x{7A52}\x{7A53}' . '\x{7A54}\x{7A55}\x{7A56}\x{7A57}\x{7A58}\x{7A59}\x{7A5A}\x{7A5B}\x{7A5C}' . '\x{7A5D}\x{7A5E}\x{7A5F}\x{7A60}\x{7A61}\x{7A62}\x{7A65}\x{7A66}\x{7A67}' . '\x{7A68}\x{7A69}\x{7A6B}\x{7A6C}\x{7A6D}\x{7A6E}\x{7A70}\x{7A71}\x{7A72}' . '\x{7A73}\x{7A74}\x{7A75}\x{7A76}\x{7A77}\x{7A78}\x{7A79}\x{7A7A}\x{7A7B}' . '\x{7A7C}\x{7A7D}\x{7A7E}\x{7A7F}\x{7A80}\x{7A81}\x{7A83}\x{7A84}\x{7A85}' . '\x{7A86}\x{7A87}\x{7A88}\x{7A89}\x{7A8A}\x{7A8B}\x{7A8C}\x{7A8D}\x{7A8E}' . '\x{7A8F}\x{7A90}\x{7A91}\x{7A92}\x{7A93}\x{7A94}\x{7A95}\x{7A96}\x{7A97}' . '\x{7A98}\x{7A99}\x{7A9C}\x{7A9D}\x{7A9E}\x{7A9F}\x{7AA0}\x{7AA1}\x{7AA2}' . '\x{7AA3}\x{7AA4}\x{7AA5}\x{7AA6}\x{7AA7}\x{7AA8}\x{7AA9}\x{7AAA}\x{7AAB}' . '\x{7AAC}\x{7AAD}\x{7AAE}\x{7AAF}\x{7AB0}\x{7AB1}\x{7AB2}\x{7AB3}\x{7AB4}' . '\x{7AB5}\x{7AB6}\x{7AB7}\x{7AB8}\x{7ABA}\x{7ABE}\x{7ABF}\x{7AC0}\x{7AC1}' . '\x{7AC4}\x{7AC5}\x{7AC7}\x{7AC8}\x{7AC9}\x{7ACA}\x{7ACB}\x{7ACC}\x{7ACD}' . '\x{7ACE}\x{7ACF}\x{7AD0}\x{7AD1}\x{7AD2}\x{7AD3}\x{7AD4}\x{7AD5}\x{7AD6}' . '\x{7AD8}\x{7AD9}\x{7ADB}\x{7ADC}\x{7ADD}\x{7ADE}\x{7ADF}\x{7AE0}\x{7AE1}' . '\x{7AE2}\x{7AE3}\x{7AE4}\x{7AE5}\x{7AE6}\x{7AE7}\x{7AE8}\x{7AEA}\x{7AEB}' . '\x{7AEC}\x{7AED}\x{7AEE}\x{7AEF}\x{7AF0}\x{7AF1}\x{7AF2}\x{7AF3}\x{7AF4}' . '\x{7AF6}\x{7AF7}\x{7AF8}\x{7AF9}\x{7AFA}\x{7AFB}\x{7AFD}\x{7AFE}\x{7AFF}' . '\x{7B00}\x{7B01}\x{7B02}\x{7B03}\x{7B04}\x{7B05}\x{7B06}\x{7B08}\x{7B09}' . '\x{7B0A}\x{7B0B}\x{7B0C}\x{7B0D}\x{7B0E}\x{7B0F}\x{7B10}\x{7B11}\x{7B12}' . '\x{7B13}\x{7B14}\x{7B15}\x{7B16}\x{7B17}\x{7B18}\x{7B19}\x{7B1A}\x{7B1B}' . '\x{7B1C}\x{7B1D}\x{7B1E}\x{7B20}\x{7B21}\x{7B22}\x{7B23}\x{7B24}\x{7B25}' . '\x{7B26}\x{7B28}\x{7B2A}\x{7B2B}\x{7B2C}\x{7B2D}\x{7B2E}\x{7B2F}\x{7B30}' . '\x{7B31}\x{7B32}\x{7B33}\x{7B34}\x{7B35}\x{7B36}\x{7B37}\x{7B38}\x{7B39}' . '\x{7B3A}\x{7B3B}\x{7B3C}\x{7B3D}\x{7B3E}\x{7B3F}\x{7B40}\x{7B41}\x{7B43}' . '\x{7B44}\x{7B45}\x{7B46}\x{7B47}\x{7B48}\x{7B49}\x{7B4A}\x{7B4B}\x{7B4C}' . '\x{7B4D}\x{7B4E}\x{7B4F}\x{7B50}\x{7B51}\x{7B52}\x{7B54}\x{7B55}\x{7B56}' . '\x{7B57}\x{7B58}\x{7B59}\x{7B5A}\x{7B5B}\x{7B5C}\x{7B5D}\x{7B5E}\x{7B5F}' . '\x{7B60}\x{7B61}\x{7B62}\x{7B63}\x{7B64}\x{7B65}\x{7B66}\x{7B67}\x{7B68}' . '\x{7B69}\x{7B6A}\x{7B6B}\x{7B6C}\x{7B6D}\x{7B6E}\x{7B70}\x{7B71}\x{7B72}' . '\x{7B73}\x{7B74}\x{7B75}\x{7B76}\x{7B77}\x{7B78}\x{7B79}\x{7B7B}\x{7B7C}' . '\x{7B7D}\x{7B7E}\x{7B7F}\x{7B80}\x{7B81}\x{7B82}\x{7B83}\x{7B84}\x{7B85}' . '\x{7B87}\x{7B88}\x{7B89}\x{7B8A}\x{7B8B}\x{7B8C}\x{7B8D}\x{7B8E}\x{7B8F}' . '\x{7B90}\x{7B91}\x{7B93}\x{7B94}\x{7B95}\x{7B96}\x{7B97}\x{7B98}\x{7B99}' . '\x{7B9A}\x{7B9B}\x{7B9C}\x{7B9D}\x{7B9E}\x{7B9F}\x{7BA0}\x{7BA1}\x{7BA2}' . '\x{7BA4}\x{7BA6}\x{7BA7}\x{7BA8}\x{7BA9}\x{7BAA}\x{7BAB}\x{7BAC}\x{7BAD}' . '\x{7BAE}\x{7BAF}\x{7BB1}\x{7BB3}\x{7BB4}\x{7BB5}\x{7BB6}\x{7BB7}\x{7BB8}' . '\x{7BB9}\x{7BBA}\x{7BBB}\x{7BBC}\x{7BBD}\x{7BBE}\x{7BBF}\x{7BC0}\x{7BC1}' . '\x{7BC2}\x{7BC3}\x{7BC4}\x{7BC5}\x{7BC6}\x{7BC7}\x{7BC8}\x{7BC9}\x{7BCA}' . '\x{7BCB}\x{7BCC}\x{7BCD}\x{7BCE}\x{7BD0}\x{7BD1}\x{7BD2}\x{7BD3}\x{7BD4}' . '\x{7BD5}\x{7BD6}\x{7BD7}\x{7BD8}\x{7BD9}\x{7BDA}\x{7BDB}\x{7BDC}\x{7BDD}' . '\x{7BDE}\x{7BDF}\x{7BE0}\x{7BE1}\x{7BE2}\x{7BE3}\x{7BE4}\x{7BE5}\x{7BE6}' . '\x{7BE7}\x{7BE8}\x{7BE9}\x{7BEA}\x{7BEB}\x{7BEC}\x{7BED}\x{7BEE}\x{7BEF}' . '\x{7BF0}\x{7BF1}\x{7BF2}\x{7BF3}\x{7BF4}\x{7BF5}\x{7BF6}\x{7BF7}\x{7BF8}' . '\x{7BF9}\x{7BFB}\x{7BFC}\x{7BFD}\x{7BFE}\x{7BFF}\x{7C00}\x{7C01}\x{7C02}' . '\x{7C03}\x{7C04}\x{7C05}\x{7C06}\x{7C07}\x{7C08}\x{7C09}\x{7C0A}\x{7C0B}' . '\x{7C0C}\x{7C0D}\x{7C0E}\x{7C0F}\x{7C10}\x{7C11}\x{7C12}\x{7C13}\x{7C15}' . '\x{7C16}\x{7C17}\x{7C18}\x{7C19}\x{7C1A}\x{7C1C}\x{7C1D}\x{7C1E}\x{7C1F}' . '\x{7C20}\x{7C21}\x{7C22}\x{7C23}\x{7C24}\x{7C25}\x{7C26}\x{7C27}\x{7C28}' . '\x{7C29}\x{7C2A}\x{7C2B}\x{7C2C}\x{7C2D}\x{7C30}\x{7C31}\x{7C32}\x{7C33}' . '\x{7C34}\x{7C35}\x{7C36}\x{7C37}\x{7C38}\x{7C39}\x{7C3A}\x{7C3B}\x{7C3C}' . '\x{7C3D}\x{7C3E}\x{7C3F}\x{7C40}\x{7C41}\x{7C42}\x{7C43}\x{7C44}\x{7C45}' . '\x{7C46}\x{7C47}\x{7C48}\x{7C49}\x{7C4A}\x{7C4B}\x{7C4C}\x{7C4D}\x{7C4E}' . '\x{7C50}\x{7C51}\x{7C53}\x{7C54}\x{7C56}\x{7C57}\x{7C58}\x{7C59}\x{7C5A}' . '\x{7C5B}\x{7C5C}\x{7C5E}\x{7C5F}\x{7C60}\x{7C61}\x{7C62}\x{7C63}\x{7C64}' . '\x{7C65}\x{7C66}\x{7C67}\x{7C68}\x{7C69}\x{7C6A}\x{7C6B}\x{7C6C}\x{7C6D}' . '\x{7C6E}\x{7C6F}\x{7C70}\x{7C71}\x{7C72}\x{7C73}\x{7C74}\x{7C75}\x{7C77}' . '\x{7C78}\x{7C79}\x{7C7A}\x{7C7B}\x{7C7C}\x{7C7D}\x{7C7E}\x{7C7F}\x{7C80}' . '\x{7C81}\x{7C82}\x{7C84}\x{7C85}\x{7C86}\x{7C88}\x{7C89}\x{7C8A}\x{7C8B}' . '\x{7C8C}\x{7C8D}\x{7C8E}\x{7C8F}\x{7C90}\x{7C91}\x{7C92}\x{7C94}\x{7C95}' . '\x{7C96}\x{7C97}\x{7C98}\x{7C99}\x{7C9B}\x{7C9C}\x{7C9D}\x{7C9E}\x{7C9F}' . '\x{7CA0}\x{7CA1}\x{7CA2}\x{7CA3}\x{7CA4}\x{7CA5}\x{7CA6}\x{7CA7}\x{7CA8}' . '\x{7CA9}\x{7CAA}\x{7CAD}\x{7CAE}\x{7CAF}\x{7CB0}\x{7CB1}\x{7CB2}\x{7CB3}' . '\x{7CB4}\x{7CB5}\x{7CB6}\x{7CB7}\x{7CB8}\x{7CB9}\x{7CBA}\x{7CBB}\x{7CBC}' . '\x{7CBD}\x{7CBE}\x{7CBF}\x{7CC0}\x{7CC1}\x{7CC2}\x{7CC3}\x{7CC4}\x{7CC5}' . '\x{7CC6}\x{7CC7}\x{7CC8}\x{7CC9}\x{7CCA}\x{7CCB}\x{7CCC}\x{7CCD}\x{7CCE}' . '\x{7CCF}\x{7CD0}\x{7CD1}\x{7CD2}\x{7CD4}\x{7CD5}\x{7CD6}\x{7CD7}\x{7CD8}' . '\x{7CD9}\x{7CDC}\x{7CDD}\x{7CDE}\x{7CDF}\x{7CE0}\x{7CE2}\x{7CE4}\x{7CE7}' . '\x{7CE8}\x{7CE9}\x{7CEA}\x{7CEB}\x{7CEC}\x{7CED}\x{7CEE}\x{7CEF}\x{7CF0}' . '\x{7CF1}\x{7CF2}\x{7CF3}\x{7CF4}\x{7CF5}\x{7CF6}\x{7CF7}\x{7CF8}\x{7CF9}' . '\x{7CFA}\x{7CFB}\x{7CFD}\x{7CFE}\x{7D00}\x{7D01}\x{7D02}\x{7D03}\x{7D04}' . '\x{7D05}\x{7D06}\x{7D07}\x{7D08}\x{7D09}\x{7D0A}\x{7D0B}\x{7D0C}\x{7D0D}' . '\x{7D0E}\x{7D0F}\x{7D10}\x{7D11}\x{7D12}\x{7D13}\x{7D14}\x{7D15}\x{7D16}' . '\x{7D17}\x{7D18}\x{7D19}\x{7D1A}\x{7D1B}\x{7D1C}\x{7D1D}\x{7D1E}\x{7D1F}' . '\x{7D20}\x{7D21}\x{7D22}\x{7D24}\x{7D25}\x{7D26}\x{7D27}\x{7D28}\x{7D29}' . '\x{7D2B}\x{7D2C}\x{7D2E}\x{7D2F}\x{7D30}\x{7D31}\x{7D32}\x{7D33}\x{7D34}' . '\x{7D35}\x{7D36}\x{7D37}\x{7D38}\x{7D39}\x{7D3A}\x{7D3B}\x{7D3C}\x{7D3D}' . '\x{7D3E}\x{7D3F}\x{7D40}\x{7D41}\x{7D42}\x{7D43}\x{7D44}\x{7D45}\x{7D46}' . '\x{7D47}\x{7D49}\x{7D4A}\x{7D4B}\x{7D4C}\x{7D4E}\x{7D4F}\x{7D50}\x{7D51}' . '\x{7D52}\x{7D53}\x{7D54}\x{7D55}\x{7D56}\x{7D57}\x{7D58}\x{7D59}\x{7D5B}' . '\x{7D5C}\x{7D5D}\x{7D5E}\x{7D5F}\x{7D60}\x{7D61}\x{7D62}\x{7D63}\x{7D65}' . '\x{7D66}\x{7D67}\x{7D68}\x{7D69}\x{7D6A}\x{7D6B}\x{7D6C}\x{7D6D}\x{7D6E}' . '\x{7D6F}\x{7D70}\x{7D71}\x{7D72}\x{7D73}\x{7D74}\x{7D75}\x{7D76}\x{7D77}' . '\x{7D79}\x{7D7A}\x{7D7B}\x{7D7C}\x{7D7D}\x{7D7E}\x{7D7F}\x{7D80}\x{7D81}' . '\x{7D83}\x{7D84}\x{7D85}\x{7D86}\x{7D87}\x{7D88}\x{7D89}\x{7D8A}\x{7D8B}' . '\x{7D8C}\x{7D8D}\x{7D8E}\x{7D8F}\x{7D90}\x{7D91}\x{7D92}\x{7D93}\x{7D94}' . '\x{7D96}\x{7D97}\x{7D99}\x{7D9B}\x{7D9C}\x{7D9D}\x{7D9E}\x{7D9F}\x{7DA0}' . '\x{7DA1}\x{7DA2}\x{7DA3}\x{7DA5}\x{7DA6}\x{7DA7}\x{7DA9}\x{7DAA}\x{7DAB}' . '\x{7DAC}\x{7DAD}\x{7DAE}\x{7DAF}\x{7DB0}\x{7DB1}\x{7DB2}\x{7DB3}\x{7DB4}' . '\x{7DB5}\x{7DB6}\x{7DB7}\x{7DB8}\x{7DB9}\x{7DBA}\x{7DBB}\x{7DBC}\x{7DBD}' . '\x{7DBE}\x{7DBF}\x{7DC0}\x{7DC1}\x{7DC2}\x{7DC3}\x{7DC4}\x{7DC5}\x{7DC6}' . '\x{7DC7}\x{7DC8}\x{7DC9}\x{7DCA}\x{7DCB}\x{7DCC}\x{7DCE}\x{7DCF}\x{7DD0}' . '\x{7DD1}\x{7DD2}\x{7DD4}\x{7DD5}\x{7DD6}\x{7DD7}\x{7DD8}\x{7DD9}\x{7DDA}' . '\x{7DDB}\x{7DDD}\x{7DDE}\x{7DDF}\x{7DE0}\x{7DE1}\x{7DE2}\x{7DE3}\x{7DE6}' . '\x{7DE7}\x{7DE8}\x{7DE9}\x{7DEA}\x{7DEC}\x{7DED}\x{7DEE}\x{7DEF}\x{7DF0}' . '\x{7DF1}\x{7DF2}\x{7DF3}\x{7DF4}\x{7DF5}\x{7DF6}\x{7DF7}\x{7DF8}\x{7DF9}' . '\x{7DFA}\x{7DFB}\x{7DFC}\x{7E00}\x{7E01}\x{7E02}\x{7E03}\x{7E04}\x{7E05}' . '\x{7E06}\x{7E07}\x{7E08}\x{7E09}\x{7E0A}\x{7E0B}\x{7E0C}\x{7E0D}\x{7E0E}' . '\x{7E0F}\x{7E10}\x{7E11}\x{7E12}\x{7E13}\x{7E14}\x{7E15}\x{7E16}\x{7E17}' . '\x{7E19}\x{7E1A}\x{7E1B}\x{7E1C}\x{7E1D}\x{7E1E}\x{7E1F}\x{7E20}\x{7E21}' . '\x{7E22}\x{7E23}\x{7E24}\x{7E25}\x{7E26}\x{7E27}\x{7E28}\x{7E29}\x{7E2A}' . '\x{7E2B}\x{7E2C}\x{7E2D}\x{7E2E}\x{7E2F}\x{7E30}\x{7E31}\x{7E32}\x{7E33}' . '\x{7E34}\x{7E35}\x{7E36}\x{7E37}\x{7E38}\x{7E39}\x{7E3A}\x{7E3B}\x{7E3C}' . '\x{7E3D}\x{7E3E}\x{7E3F}\x{7E40}\x{7E41}\x{7E42}\x{7E43}\x{7E44}\x{7E45}' . '\x{7E46}\x{7E47}\x{7E48}\x{7E49}\x{7E4C}\x{7E4D}\x{7E4E}\x{7E4F}\x{7E50}' . '\x{7E51}\x{7E52}\x{7E53}\x{7E54}\x{7E55}\x{7E56}\x{7E57}\x{7E58}\x{7E59}' . '\x{7E5A}\x{7E5C}\x{7E5D}\x{7E5E}\x{7E5F}\x{7E60}\x{7E61}\x{7E62}\x{7E63}' . '\x{7E65}\x{7E66}\x{7E67}\x{7E68}\x{7E69}\x{7E6A}\x{7E6B}\x{7E6C}\x{7E6D}' . '\x{7E6E}\x{7E6F}\x{7E70}\x{7E71}\x{7E72}\x{7E73}\x{7E74}\x{7E75}\x{7E76}' . '\x{7E77}\x{7E78}\x{7E79}\x{7E7A}\x{7E7B}\x{7E7C}\x{7E7D}\x{7E7E}\x{7E7F}' . '\x{7E80}\x{7E81}\x{7E82}\x{7E83}\x{7E84}\x{7E85}\x{7E86}\x{7E87}\x{7E88}' . '\x{7E89}\x{7E8A}\x{7E8B}\x{7E8C}\x{7E8D}\x{7E8E}\x{7E8F}\x{7E90}\x{7E91}' . '\x{7E92}\x{7E93}\x{7E94}\x{7E95}\x{7E96}\x{7E97}\x{7E98}\x{7E99}\x{7E9A}' . '\x{7E9B}\x{7E9C}\x{7E9E}\x{7E9F}\x{7EA0}\x{7EA1}\x{7EA2}\x{7EA3}\x{7EA4}' . '\x{7EA5}\x{7EA6}\x{7EA7}\x{7EA8}\x{7EA9}\x{7EAA}\x{7EAB}\x{7EAC}\x{7EAD}' . '\x{7EAE}\x{7EAF}\x{7EB0}\x{7EB1}\x{7EB2}\x{7EB3}\x{7EB4}\x{7EB5}\x{7EB6}' . '\x{7EB7}\x{7EB8}\x{7EB9}\x{7EBA}\x{7EBB}\x{7EBC}\x{7EBD}\x{7EBE}\x{7EBF}' . '\x{7EC0}\x{7EC1}\x{7EC2}\x{7EC3}\x{7EC4}\x{7EC5}\x{7EC6}\x{7EC7}\x{7EC8}' . '\x{7EC9}\x{7ECA}\x{7ECB}\x{7ECC}\x{7ECD}\x{7ECE}\x{7ECF}\x{7ED0}\x{7ED1}' . '\x{7ED2}\x{7ED3}\x{7ED4}\x{7ED5}\x{7ED6}\x{7ED7}\x{7ED8}\x{7ED9}\x{7EDA}' . '\x{7EDB}\x{7EDC}\x{7EDD}\x{7EDE}\x{7EDF}\x{7EE0}\x{7EE1}\x{7EE2}\x{7EE3}' . '\x{7EE4}\x{7EE5}\x{7EE6}\x{7EE7}\x{7EE8}\x{7EE9}\x{7EEA}\x{7EEB}\x{7EEC}' . '\x{7EED}\x{7EEE}\x{7EEF}\x{7EF0}\x{7EF1}\x{7EF2}\x{7EF3}\x{7EF4}\x{7EF5}' . '\x{7EF6}\x{7EF7}\x{7EF8}\x{7EF9}\x{7EFA}\x{7EFB}\x{7EFC}\x{7EFD}\x{7EFE}' . '\x{7EFF}\x{7F00}\x{7F01}\x{7F02}\x{7F03}\x{7F04}\x{7F05}\x{7F06}\x{7F07}' . '\x{7F08}\x{7F09}\x{7F0A}\x{7F0B}\x{7F0C}\x{7F0D}\x{7F0E}\x{7F0F}\x{7F10}' . '\x{7F11}\x{7F12}\x{7F13}\x{7F14}\x{7F15}\x{7F16}\x{7F17}\x{7F18}\x{7F19}' . '\x{7F1A}\x{7F1B}\x{7F1C}\x{7F1D}\x{7F1E}\x{7F1F}\x{7F20}\x{7F21}\x{7F22}' . '\x{7F23}\x{7F24}\x{7F25}\x{7F26}\x{7F27}\x{7F28}\x{7F29}\x{7F2A}\x{7F2B}' . '\x{7F2C}\x{7F2D}\x{7F2E}\x{7F2F}\x{7F30}\x{7F31}\x{7F32}\x{7F33}\x{7F34}' . '\x{7F35}\x{7F36}\x{7F37}\x{7F38}\x{7F39}\x{7F3A}\x{7F3D}\x{7F3E}\x{7F3F}' . '\x{7F40}\x{7F42}\x{7F43}\x{7F44}\x{7F45}\x{7F47}\x{7F48}\x{7F49}\x{7F4A}' . '\x{7F4B}\x{7F4C}\x{7F4D}\x{7F4E}\x{7F4F}\x{7F50}\x{7F51}\x{7F52}\x{7F53}' . '\x{7F54}\x{7F55}\x{7F56}\x{7F57}\x{7F58}\x{7F5A}\x{7F5B}\x{7F5C}\x{7F5D}' . '\x{7F5E}\x{7F5F}\x{7F60}\x{7F61}\x{7F62}\x{7F63}\x{7F64}\x{7F65}\x{7F66}' . '\x{7F67}\x{7F68}\x{7F69}\x{7F6A}\x{7F6B}\x{7F6C}\x{7F6D}\x{7F6E}\x{7F6F}' . '\x{7F70}\x{7F71}\x{7F72}\x{7F73}\x{7F74}\x{7F75}\x{7F76}\x{7F77}\x{7F78}' . '\x{7F79}\x{7F7A}\x{7F7B}\x{7F7C}\x{7F7D}\x{7F7E}\x{7F7F}\x{7F80}\x{7F81}' . '\x{7F82}\x{7F83}\x{7F85}\x{7F86}\x{7F87}\x{7F88}\x{7F89}\x{7F8A}\x{7F8B}' . '\x{7F8C}\x{7F8D}\x{7F8E}\x{7F8F}\x{7F91}\x{7F92}\x{7F93}\x{7F94}\x{7F95}' . '\x{7F96}\x{7F98}\x{7F9A}\x{7F9B}\x{7F9C}\x{7F9D}\x{7F9E}\x{7F9F}\x{7FA0}' . '\x{7FA1}\x{7FA2}\x{7FA3}\x{7FA4}\x{7FA5}\x{7FA6}\x{7FA7}\x{7FA8}\x{7FA9}' . '\x{7FAA}\x{7FAB}\x{7FAC}\x{7FAD}\x{7FAE}\x{7FAF}\x{7FB0}\x{7FB1}\x{7FB2}' . '\x{7FB3}\x{7FB5}\x{7FB6}\x{7FB7}\x{7FB8}\x{7FB9}\x{7FBA}\x{7FBB}\x{7FBC}' . '\x{7FBD}\x{7FBE}\x{7FBF}\x{7FC0}\x{7FC1}\x{7FC2}\x{7FC3}\x{7FC4}\x{7FC5}' . '\x{7FC6}\x{7FC7}\x{7FC8}\x{7FC9}\x{7FCA}\x{7FCB}\x{7FCC}\x{7FCD}\x{7FCE}' . '\x{7FCF}\x{7FD0}\x{7FD1}\x{7FD2}\x{7FD3}\x{7FD4}\x{7FD5}\x{7FD7}\x{7FD8}' . '\x{7FD9}\x{7FDA}\x{7FDB}\x{7FDC}\x{7FDE}\x{7FDF}\x{7FE0}\x{7FE1}\x{7FE2}' . '\x{7FE3}\x{7FE5}\x{7FE6}\x{7FE7}\x{7FE8}\x{7FE9}\x{7FEA}\x{7FEB}\x{7FEC}' . '\x{7FED}\x{7FEE}\x{7FEF}\x{7FF0}\x{7FF1}\x{7FF2}\x{7FF3}\x{7FF4}\x{7FF5}' . '\x{7FF6}\x{7FF7}\x{7FF8}\x{7FF9}\x{7FFA}\x{7FFB}\x{7FFC}\x{7FFD}\x{7FFE}' . '\x{7FFF}\x{8000}\x{8001}\x{8002}\x{8003}\x{8004}\x{8005}\x{8006}\x{8007}' . '\x{8008}\x{8009}\x{800B}\x{800C}\x{800D}\x{800E}\x{800F}\x{8010}\x{8011}' . '\x{8012}\x{8013}\x{8014}\x{8015}\x{8016}\x{8017}\x{8018}\x{8019}\x{801A}' . '\x{801B}\x{801C}\x{801D}\x{801E}\x{801F}\x{8020}\x{8021}\x{8022}\x{8023}' . '\x{8024}\x{8025}\x{8026}\x{8027}\x{8028}\x{8029}\x{802A}\x{802B}\x{802C}' . '\x{802D}\x{802E}\x{8030}\x{8031}\x{8032}\x{8033}\x{8034}\x{8035}\x{8036}' . '\x{8037}\x{8038}\x{8039}\x{803A}\x{803B}\x{803D}\x{803E}\x{803F}\x{8041}' . '\x{8042}\x{8043}\x{8044}\x{8045}\x{8046}\x{8047}\x{8048}\x{8049}\x{804A}' . '\x{804B}\x{804C}\x{804D}\x{804E}\x{804F}\x{8050}\x{8051}\x{8052}\x{8053}' . '\x{8054}\x{8055}\x{8056}\x{8057}\x{8058}\x{8059}\x{805A}\x{805B}\x{805C}' . '\x{805D}\x{805E}\x{805F}\x{8060}\x{8061}\x{8062}\x{8063}\x{8064}\x{8065}' . '\x{8067}\x{8068}\x{8069}\x{806A}\x{806B}\x{806C}\x{806D}\x{806E}\x{806F}' . '\x{8070}\x{8071}\x{8072}\x{8073}\x{8074}\x{8075}\x{8076}\x{8077}\x{8078}' . '\x{8079}\x{807A}\x{807B}\x{807C}\x{807D}\x{807E}\x{807F}\x{8080}\x{8081}' . '\x{8082}\x{8083}\x{8084}\x{8085}\x{8086}\x{8087}\x{8089}\x{808A}\x{808B}' . '\x{808C}\x{808D}\x{808F}\x{8090}\x{8091}\x{8092}\x{8093}\x{8095}\x{8096}' . '\x{8097}\x{8098}\x{8099}\x{809A}\x{809B}\x{809C}\x{809D}\x{809E}\x{809F}' . '\x{80A0}\x{80A1}\x{80A2}\x{80A3}\x{80A4}\x{80A5}\x{80A9}\x{80AA}\x{80AB}' . '\x{80AD}\x{80AE}\x{80AF}\x{80B0}\x{80B1}\x{80B2}\x{80B4}\x{80B5}\x{80B6}' . '\x{80B7}\x{80B8}\x{80BA}\x{80BB}\x{80BC}\x{80BD}\x{80BE}\x{80BF}\x{80C0}' . '\x{80C1}\x{80C2}\x{80C3}\x{80C4}\x{80C5}\x{80C6}\x{80C7}\x{80C8}\x{80C9}' . '\x{80CA}\x{80CB}\x{80CC}\x{80CD}\x{80CE}\x{80CF}\x{80D0}\x{80D1}\x{80D2}' . '\x{80D3}\x{80D4}\x{80D5}\x{80D6}\x{80D7}\x{80D8}\x{80D9}\x{80DA}\x{80DB}' . '\x{80DC}\x{80DD}\x{80DE}\x{80E0}\x{80E1}\x{80E2}\x{80E3}\x{80E4}\x{80E5}' . '\x{80E6}\x{80E7}\x{80E8}\x{80E9}\x{80EA}\x{80EB}\x{80EC}\x{80ED}\x{80EE}' . '\x{80EF}\x{80F0}\x{80F1}\x{80F2}\x{80F3}\x{80F4}\x{80F5}\x{80F6}\x{80F7}' . '\x{80F8}\x{80F9}\x{80FA}\x{80FB}\x{80FC}\x{80FD}\x{80FE}\x{80FF}\x{8100}' . '\x{8101}\x{8102}\x{8105}\x{8106}\x{8107}\x{8108}\x{8109}\x{810A}\x{810B}' . '\x{810C}\x{810D}\x{810E}\x{810F}\x{8110}\x{8111}\x{8112}\x{8113}\x{8114}' . '\x{8115}\x{8116}\x{8118}\x{8119}\x{811A}\x{811B}\x{811C}\x{811D}\x{811E}' . '\x{811F}\x{8120}\x{8121}\x{8122}\x{8123}\x{8124}\x{8125}\x{8126}\x{8127}' . '\x{8128}\x{8129}\x{812A}\x{812B}\x{812C}\x{812D}\x{812E}\x{812F}\x{8130}' . '\x{8131}\x{8132}\x{8136}\x{8137}\x{8138}\x{8139}\x{813A}\x{813B}\x{813C}' . '\x{813D}\x{813E}\x{813F}\x{8140}\x{8141}\x{8142}\x{8143}\x{8144}\x{8145}' . '\x{8146}\x{8147}\x{8148}\x{8149}\x{814A}\x{814B}\x{814C}\x{814D}\x{814E}' . '\x{814F}\x{8150}\x{8151}\x{8152}\x{8153}\x{8154}\x{8155}\x{8156}\x{8157}' . '\x{8158}\x{8159}\x{815A}\x{815B}\x{815C}\x{815D}\x{815E}\x{8160}\x{8161}' . '\x{8162}\x{8163}\x{8164}\x{8165}\x{8166}\x{8167}\x{8168}\x{8169}\x{816A}' . '\x{816B}\x{816C}\x{816D}\x{816E}\x{816F}\x{8170}\x{8171}\x{8172}\x{8173}' . '\x{8174}\x{8175}\x{8176}\x{8177}\x{8178}\x{8179}\x{817A}\x{817B}\x{817C}' . '\x{817D}\x{817E}\x{817F}\x{8180}\x{8181}\x{8182}\x{8183}\x{8185}\x{8186}' . '\x{8187}\x{8188}\x{8189}\x{818A}\x{818B}\x{818C}\x{818D}\x{818E}\x{818F}' . '\x{8191}\x{8192}\x{8193}\x{8194}\x{8195}\x{8197}\x{8198}\x{8199}\x{819A}' . '\x{819B}\x{819C}\x{819D}\x{819E}\x{819F}\x{81A0}\x{81A1}\x{81A2}\x{81A3}' . '\x{81A4}\x{81A5}\x{81A6}\x{81A7}\x{81A8}\x{81A9}\x{81AA}\x{81AB}\x{81AC}' . '\x{81AD}\x{81AE}\x{81AF}\x{81B0}\x{81B1}\x{81B2}\x{81B3}\x{81B4}\x{81B5}' . '\x{81B6}\x{81B7}\x{81B8}\x{81B9}\x{81BA}\x{81BB}\x{81BC}\x{81BD}\x{81BE}' . '\x{81BF}\x{81C0}\x{81C1}\x{81C2}\x{81C3}\x{81C4}\x{81C5}\x{81C6}\x{81C7}' . '\x{81C8}\x{81C9}\x{81CA}\x{81CC}\x{81CD}\x{81CE}\x{81CF}\x{81D0}\x{81D1}' . '\x{81D2}\x{81D4}\x{81D5}\x{81D6}\x{81D7}\x{81D8}\x{81D9}\x{81DA}\x{81DB}' . '\x{81DC}\x{81DD}\x{81DE}\x{81DF}\x{81E0}\x{81E1}\x{81E2}\x{81E3}\x{81E5}' . '\x{81E6}\x{81E7}\x{81E8}\x{81E9}\x{81EA}\x{81EB}\x{81EC}\x{81ED}\x{81EE}' . '\x{81F1}\x{81F2}\x{81F3}\x{81F4}\x{81F5}\x{81F6}\x{81F7}\x{81F8}\x{81F9}' . '\x{81FA}\x{81FB}\x{81FC}\x{81FD}\x{81FE}\x{81FF}\x{8200}\x{8201}\x{8202}' . '\x{8203}\x{8204}\x{8205}\x{8206}\x{8207}\x{8208}\x{8209}\x{820A}\x{820B}' . '\x{820C}\x{820D}\x{820E}\x{820F}\x{8210}\x{8211}\x{8212}\x{8214}\x{8215}' . '\x{8216}\x{8218}\x{8219}\x{821A}\x{821B}\x{821C}\x{821D}\x{821E}\x{821F}' . '\x{8220}\x{8221}\x{8222}\x{8223}\x{8225}\x{8226}\x{8227}\x{8228}\x{8229}' . '\x{822A}\x{822B}\x{822C}\x{822D}\x{822F}\x{8230}\x{8231}\x{8232}\x{8233}' . '\x{8234}\x{8235}\x{8236}\x{8237}\x{8238}\x{8239}\x{823A}\x{823B}\x{823C}' . '\x{823D}\x{823E}\x{823F}\x{8240}\x{8242}\x{8243}\x{8244}\x{8245}\x{8246}' . '\x{8247}\x{8248}\x{8249}\x{824A}\x{824B}\x{824C}\x{824D}\x{824E}\x{824F}' . '\x{8250}\x{8251}\x{8252}\x{8253}\x{8254}\x{8255}\x{8256}\x{8257}\x{8258}' . '\x{8259}\x{825A}\x{825B}\x{825C}\x{825D}\x{825E}\x{825F}\x{8260}\x{8261}' . '\x{8263}\x{8264}\x{8266}\x{8267}\x{8268}\x{8269}\x{826A}\x{826B}\x{826C}' . '\x{826D}\x{826E}\x{826F}\x{8270}\x{8271}\x{8272}\x{8273}\x{8274}\x{8275}' . '\x{8276}\x{8277}\x{8278}\x{8279}\x{827A}\x{827B}\x{827C}\x{827D}\x{827E}' . '\x{827F}\x{8280}\x{8281}\x{8282}\x{8283}\x{8284}\x{8285}\x{8286}\x{8287}' . '\x{8288}\x{8289}\x{828A}\x{828B}\x{828D}\x{828E}\x{828F}\x{8290}\x{8291}' . '\x{8292}\x{8293}\x{8294}\x{8295}\x{8296}\x{8297}\x{8298}\x{8299}\x{829A}' . '\x{829B}\x{829C}\x{829D}\x{829E}\x{829F}\x{82A0}\x{82A1}\x{82A2}\x{82A3}' . '\x{82A4}\x{82A5}\x{82A6}\x{82A7}\x{82A8}\x{82A9}\x{82AA}\x{82AB}\x{82AC}' . '\x{82AD}\x{82AE}\x{82AF}\x{82B0}\x{82B1}\x{82B3}\x{82B4}\x{82B5}\x{82B6}' . '\x{82B7}\x{82B8}\x{82B9}\x{82BA}\x{82BB}\x{82BC}\x{82BD}\x{82BE}\x{82BF}' . '\x{82C0}\x{82C1}\x{82C2}\x{82C3}\x{82C4}\x{82C5}\x{82C6}\x{82C7}\x{82C8}' . '\x{82C9}\x{82CA}\x{82CB}\x{82CC}\x{82CD}\x{82CE}\x{82CF}\x{82D0}\x{82D1}' . '\x{82D2}\x{82D3}\x{82D4}\x{82D5}\x{82D6}\x{82D7}\x{82D8}\x{82D9}\x{82DA}' . '\x{82DB}\x{82DC}\x{82DD}\x{82DE}\x{82DF}\x{82E0}\x{82E1}\x{82E3}\x{82E4}' . '\x{82E5}\x{82E6}\x{82E7}\x{82E8}\x{82E9}\x{82EA}\x{82EB}\x{82EC}\x{82ED}' . '\x{82EE}\x{82EF}\x{82F0}\x{82F1}\x{82F2}\x{82F3}\x{82F4}\x{82F5}\x{82F6}' . '\x{82F7}\x{82F8}\x{82F9}\x{82FA}\x{82FB}\x{82FD}\x{82FE}\x{82FF}\x{8300}' . '\x{8301}\x{8302}\x{8303}\x{8304}\x{8305}\x{8306}\x{8307}\x{8308}\x{8309}' . '\x{830B}\x{830C}\x{830D}\x{830E}\x{830F}\x{8311}\x{8312}\x{8313}\x{8314}' . '\x{8315}\x{8316}\x{8317}\x{8318}\x{8319}\x{831A}\x{831B}\x{831C}\x{831D}' . '\x{831E}\x{831F}\x{8320}\x{8321}\x{8322}\x{8323}\x{8324}\x{8325}\x{8326}' . '\x{8327}\x{8328}\x{8329}\x{832A}\x{832B}\x{832C}\x{832D}\x{832E}\x{832F}' . '\x{8331}\x{8332}\x{8333}\x{8334}\x{8335}\x{8336}\x{8337}\x{8338}\x{8339}' . '\x{833A}\x{833B}\x{833C}\x{833D}\x{833E}\x{833F}\x{8340}\x{8341}\x{8342}' . '\x{8343}\x{8344}\x{8345}\x{8346}\x{8347}\x{8348}\x{8349}\x{834A}\x{834B}' . '\x{834C}\x{834D}\x{834E}\x{834F}\x{8350}\x{8351}\x{8352}\x{8353}\x{8354}' . '\x{8356}\x{8357}\x{8358}\x{8359}\x{835A}\x{835B}\x{835C}\x{835D}\x{835E}' . '\x{835F}\x{8360}\x{8361}\x{8362}\x{8363}\x{8364}\x{8365}\x{8366}\x{8367}' . '\x{8368}\x{8369}\x{836A}\x{836B}\x{836C}\x{836D}\x{836E}\x{836F}\x{8370}' . '\x{8371}\x{8372}\x{8373}\x{8374}\x{8375}\x{8376}\x{8377}\x{8378}\x{8379}' . '\x{837A}\x{837B}\x{837C}\x{837D}\x{837E}\x{837F}\x{8380}\x{8381}\x{8382}' . '\x{8383}\x{8384}\x{8385}\x{8386}\x{8387}\x{8388}\x{8389}\x{838A}\x{838B}' . '\x{838C}\x{838D}\x{838E}\x{838F}\x{8390}\x{8391}\x{8392}\x{8393}\x{8394}' . '\x{8395}\x{8396}\x{8397}\x{8398}\x{8399}\x{839A}\x{839B}\x{839C}\x{839D}' . '\x{839E}\x{83A0}\x{83A1}\x{83A2}\x{83A3}\x{83A4}\x{83A5}\x{83A6}\x{83A7}' . '\x{83A8}\x{83A9}\x{83AA}\x{83AB}\x{83AC}\x{83AD}\x{83AE}\x{83AF}\x{83B0}' . '\x{83B1}\x{83B2}\x{83B3}\x{83B4}\x{83B6}\x{83B7}\x{83B8}\x{83B9}\x{83BA}' . '\x{83BB}\x{83BC}\x{83BD}\x{83BF}\x{83C0}\x{83C1}\x{83C2}\x{83C3}\x{83C4}' . '\x{83C5}\x{83C6}\x{83C7}\x{83C8}\x{83C9}\x{83CA}\x{83CB}\x{83CC}\x{83CD}' . '\x{83CE}\x{83CF}\x{83D0}\x{83D1}\x{83D2}\x{83D3}\x{83D4}\x{83D5}\x{83D6}' . '\x{83D7}\x{83D8}\x{83D9}\x{83DA}\x{83DB}\x{83DC}\x{83DD}\x{83DE}\x{83DF}' . '\x{83E0}\x{83E1}\x{83E2}\x{83E3}\x{83E4}\x{83E5}\x{83E7}\x{83E8}\x{83E9}' . '\x{83EA}\x{83EB}\x{83EC}\x{83EE}\x{83EF}\x{83F0}\x{83F1}\x{83F2}\x{83F3}' . '\x{83F4}\x{83F5}\x{83F6}\x{83F7}\x{83F8}\x{83F9}\x{83FA}\x{83FB}\x{83FC}' . '\x{83FD}\x{83FE}\x{83FF}\x{8400}\x{8401}\x{8402}\x{8403}\x{8404}\x{8405}' . '\x{8406}\x{8407}\x{8408}\x{8409}\x{840A}\x{840B}\x{840C}\x{840D}\x{840E}' . '\x{840F}\x{8410}\x{8411}\x{8412}\x{8413}\x{8415}\x{8418}\x{8419}\x{841A}' . '\x{841B}\x{841C}\x{841D}\x{841E}\x{8421}\x{8422}\x{8423}\x{8424}\x{8425}' . '\x{8426}\x{8427}\x{8428}\x{8429}\x{842A}\x{842B}\x{842C}\x{842D}\x{842E}' . '\x{842F}\x{8430}\x{8431}\x{8432}\x{8433}\x{8434}\x{8435}\x{8436}\x{8437}' . '\x{8438}\x{8439}\x{843A}\x{843B}\x{843C}\x{843D}\x{843E}\x{843F}\x{8440}' . '\x{8441}\x{8442}\x{8443}\x{8444}\x{8445}\x{8446}\x{8447}\x{8448}\x{8449}' . '\x{844A}\x{844B}\x{844C}\x{844D}\x{844E}\x{844F}\x{8450}\x{8451}\x{8452}' . '\x{8453}\x{8454}\x{8455}\x{8456}\x{8457}\x{8459}\x{845A}\x{845B}\x{845C}' . '\x{845D}\x{845E}\x{845F}\x{8460}\x{8461}\x{8462}\x{8463}\x{8464}\x{8465}' . '\x{8466}\x{8467}\x{8468}\x{8469}\x{846A}\x{846B}\x{846C}\x{846D}\x{846E}' . '\x{846F}\x{8470}\x{8471}\x{8472}\x{8473}\x{8474}\x{8475}\x{8476}\x{8477}' . '\x{8478}\x{8479}\x{847A}\x{847B}\x{847C}\x{847D}\x{847E}\x{847F}\x{8480}' . '\x{8481}\x{8482}\x{8484}\x{8485}\x{8486}\x{8487}\x{8488}\x{8489}\x{848A}' . '\x{848B}\x{848C}\x{848D}\x{848E}\x{848F}\x{8490}\x{8491}\x{8492}\x{8493}' . '\x{8494}\x{8496}\x{8497}\x{8498}\x{8499}\x{849A}\x{849B}\x{849C}\x{849D}' . '\x{849E}\x{849F}\x{84A0}\x{84A1}\x{84A2}\x{84A3}\x{84A4}\x{84A5}\x{84A6}' . '\x{84A7}\x{84A8}\x{84A9}\x{84AA}\x{84AB}\x{84AC}\x{84AE}\x{84AF}\x{84B0}' . '\x{84B1}\x{84B2}\x{84B3}\x{84B4}\x{84B5}\x{84B6}\x{84B8}\x{84B9}\x{84BA}' . '\x{84BB}\x{84BC}\x{84BD}\x{84BE}\x{84BF}\x{84C0}\x{84C1}\x{84C2}\x{84C4}' . '\x{84C5}\x{84C6}\x{84C7}\x{84C8}\x{84C9}\x{84CA}\x{84CB}\x{84CC}\x{84CD}' . '\x{84CE}\x{84CF}\x{84D0}\x{84D1}\x{84D2}\x{84D3}\x{84D4}\x{84D5}\x{84D6}' . '\x{84D7}\x{84D8}\x{84D9}\x{84DB}\x{84DC}\x{84DD}\x{84DE}\x{84DF}\x{84E0}' . '\x{84E1}\x{84E2}\x{84E3}\x{84E4}\x{84E5}\x{84E6}\x{84E7}\x{84E8}\x{84E9}' . '\x{84EA}\x{84EB}\x{84EC}\x{84EE}\x{84EF}\x{84F0}\x{84F1}\x{84F2}\x{84F3}' . '\x{84F4}\x{84F5}\x{84F6}\x{84F7}\x{84F8}\x{84F9}\x{84FA}\x{84FB}\x{84FC}' . '\x{84FD}\x{84FE}\x{84FF}\x{8500}\x{8501}\x{8502}\x{8503}\x{8504}\x{8506}' . '\x{8507}\x{8508}\x{8509}\x{850A}\x{850B}\x{850C}\x{850D}\x{850E}\x{850F}' . '\x{8511}\x{8512}\x{8513}\x{8514}\x{8515}\x{8516}\x{8517}\x{8518}\x{8519}' . '\x{851A}\x{851B}\x{851C}\x{851D}\x{851E}\x{851F}\x{8520}\x{8521}\x{8522}' . '\x{8523}\x{8524}\x{8525}\x{8526}\x{8527}\x{8528}\x{8529}\x{852A}\x{852B}' . '\x{852C}\x{852D}\x{852E}\x{852F}\x{8530}\x{8531}\x{8534}\x{8535}\x{8536}' . '\x{8537}\x{8538}\x{8539}\x{853A}\x{853B}\x{853C}\x{853D}\x{853E}\x{853F}' . '\x{8540}\x{8541}\x{8542}\x{8543}\x{8544}\x{8545}\x{8546}\x{8547}\x{8548}' . '\x{8549}\x{854A}\x{854B}\x{854D}\x{854E}\x{854F}\x{8551}\x{8552}\x{8553}' . '\x{8554}\x{8555}\x{8556}\x{8557}\x{8558}\x{8559}\x{855A}\x{855B}\x{855C}' . '\x{855D}\x{855E}\x{855F}\x{8560}\x{8561}\x{8562}\x{8563}\x{8564}\x{8565}' . '\x{8566}\x{8567}\x{8568}\x{8569}\x{856A}\x{856B}\x{856C}\x{856D}\x{856E}' . '\x{856F}\x{8570}\x{8571}\x{8572}\x{8573}\x{8574}\x{8575}\x{8576}\x{8577}' . '\x{8578}\x{8579}\x{857A}\x{857B}\x{857C}\x{857D}\x{857E}\x{8580}\x{8581}' . '\x{8582}\x{8583}\x{8584}\x{8585}\x{8586}\x{8587}\x{8588}\x{8589}\x{858A}' . '\x{858B}\x{858C}\x{858D}\x{858E}\x{858F}\x{8590}\x{8591}\x{8592}\x{8594}' . '\x{8595}\x{8596}\x{8598}\x{8599}\x{859A}\x{859B}\x{859C}\x{859D}\x{859E}' . '\x{859F}\x{85A0}\x{85A1}\x{85A2}\x{85A3}\x{85A4}\x{85A5}\x{85A6}\x{85A7}' . '\x{85A8}\x{85A9}\x{85AA}\x{85AB}\x{85AC}\x{85AD}\x{85AE}\x{85AF}\x{85B0}' . '\x{85B1}\x{85B3}\x{85B4}\x{85B5}\x{85B6}\x{85B7}\x{85B8}\x{85B9}\x{85BA}' . '\x{85BC}\x{85BD}\x{85BE}\x{85BF}\x{85C0}\x{85C1}\x{85C2}\x{85C3}\x{85C4}' . '\x{85C5}\x{85C6}\x{85C7}\x{85C8}\x{85C9}\x{85CA}\x{85CB}\x{85CD}\x{85CE}' . '\x{85CF}\x{85D0}\x{85D1}\x{85D2}\x{85D3}\x{85D4}\x{85D5}\x{85D6}\x{85D7}' . '\x{85D8}\x{85D9}\x{85DA}\x{85DB}\x{85DC}\x{85DD}\x{85DE}\x{85DF}\x{85E0}' . '\x{85E1}\x{85E2}\x{85E3}\x{85E4}\x{85E5}\x{85E6}\x{85E7}\x{85E8}\x{85E9}' . '\x{85EA}\x{85EB}\x{85EC}\x{85ED}\x{85EF}\x{85F0}\x{85F1}\x{85F2}\x{85F4}' . '\x{85F5}\x{85F6}\x{85F7}\x{85F8}\x{85F9}\x{85FA}\x{85FB}\x{85FD}\x{85FE}' . '\x{85FF}\x{8600}\x{8601}\x{8602}\x{8604}\x{8605}\x{8606}\x{8607}\x{8608}' . '\x{8609}\x{860A}\x{860B}\x{860C}\x{860F}\x{8611}\x{8612}\x{8613}\x{8614}' . '\x{8616}\x{8617}\x{8618}\x{8619}\x{861A}\x{861B}\x{861C}\x{861E}\x{861F}' . '\x{8620}\x{8621}\x{8622}\x{8623}\x{8624}\x{8625}\x{8626}\x{8627}\x{8628}' . '\x{8629}\x{862A}\x{862B}\x{862C}\x{862D}\x{862E}\x{862F}\x{8630}\x{8631}' . '\x{8632}\x{8633}\x{8634}\x{8635}\x{8636}\x{8638}\x{8639}\x{863A}\x{863B}' . '\x{863C}\x{863D}\x{863E}\x{863F}\x{8640}\x{8641}\x{8642}\x{8643}\x{8644}' . '\x{8645}\x{8646}\x{8647}\x{8648}\x{8649}\x{864A}\x{864B}\x{864C}\x{864D}' . '\x{864E}\x{864F}\x{8650}\x{8651}\x{8652}\x{8653}\x{8654}\x{8655}\x{8656}' . '\x{8658}\x{8659}\x{865A}\x{865B}\x{865C}\x{865D}\x{865E}\x{865F}\x{8660}' . '\x{8661}\x{8662}\x{8663}\x{8664}\x{8665}\x{8666}\x{8667}\x{8668}\x{8669}' . '\x{866A}\x{866B}\x{866C}\x{866D}\x{866E}\x{866F}\x{8670}\x{8671}\x{8672}' . '\x{8673}\x{8674}\x{8676}\x{8677}\x{8678}\x{8679}\x{867A}\x{867B}\x{867C}' . '\x{867D}\x{867E}\x{867F}\x{8680}\x{8681}\x{8682}\x{8683}\x{8684}\x{8685}' . '\x{8686}\x{8687}\x{8688}\x{868A}\x{868B}\x{868C}\x{868D}\x{868E}\x{868F}' . '\x{8690}\x{8691}\x{8693}\x{8694}\x{8695}\x{8696}\x{8697}\x{8698}\x{8699}' . '\x{869A}\x{869B}\x{869C}\x{869D}\x{869E}\x{869F}\x{86A1}\x{86A2}\x{86A3}' . '\x{86A4}\x{86A5}\x{86A7}\x{86A8}\x{86A9}\x{86AA}\x{86AB}\x{86AC}\x{86AD}' . '\x{86AE}\x{86AF}\x{86B0}\x{86B1}\x{86B2}\x{86B3}\x{86B4}\x{86B5}\x{86B6}' . '\x{86B7}\x{86B8}\x{86B9}\x{86BA}\x{86BB}\x{86BC}\x{86BD}\x{86BE}\x{86BF}' . '\x{86C0}\x{86C1}\x{86C2}\x{86C3}\x{86C4}\x{86C5}\x{86C6}\x{86C7}\x{86C8}' . '\x{86C9}\x{86CA}\x{86CB}\x{86CC}\x{86CE}\x{86CF}\x{86D0}\x{86D1}\x{86D2}' . '\x{86D3}\x{86D4}\x{86D6}\x{86D7}\x{86D8}\x{86D9}\x{86DA}\x{86DB}\x{86DC}' . '\x{86DD}\x{86DE}\x{86DF}\x{86E1}\x{86E2}\x{86E3}\x{86E4}\x{86E5}\x{86E6}' . '\x{86E8}\x{86E9}\x{86EA}\x{86EB}\x{86EC}\x{86ED}\x{86EE}\x{86EF}\x{86F0}' . '\x{86F1}\x{86F2}\x{86F3}\x{86F4}\x{86F5}\x{86F6}\x{86F7}\x{86F8}\x{86F9}' . '\x{86FA}\x{86FB}\x{86FC}\x{86FE}\x{86FF}\x{8700}\x{8701}\x{8702}\x{8703}' . '\x{8704}\x{8705}\x{8706}\x{8707}\x{8708}\x{8709}\x{870A}\x{870B}\x{870C}' . '\x{870D}\x{870E}\x{870F}\x{8710}\x{8711}\x{8712}\x{8713}\x{8714}\x{8715}' . '\x{8716}\x{8717}\x{8718}\x{8719}\x{871A}\x{871B}\x{871C}\x{871E}\x{871F}' . '\x{8720}\x{8721}\x{8722}\x{8723}\x{8724}\x{8725}\x{8726}\x{8727}\x{8728}' . '\x{8729}\x{872A}\x{872B}\x{872C}\x{872D}\x{872E}\x{8730}\x{8731}\x{8732}' . '\x{8733}\x{8734}\x{8735}\x{8736}\x{8737}\x{8738}\x{8739}\x{873A}\x{873B}' . '\x{873C}\x{873E}\x{873F}\x{8740}\x{8741}\x{8742}\x{8743}\x{8744}\x{8746}' . '\x{8747}\x{8748}\x{8749}\x{874A}\x{874C}\x{874D}\x{874E}\x{874F}\x{8750}' . '\x{8751}\x{8752}\x{8753}\x{8754}\x{8755}\x{8756}\x{8757}\x{8758}\x{8759}' . '\x{875A}\x{875B}\x{875C}\x{875D}\x{875E}\x{875F}\x{8760}\x{8761}\x{8762}' . '\x{8763}\x{8764}\x{8765}\x{8766}\x{8767}\x{8768}\x{8769}\x{876A}\x{876B}' . '\x{876C}\x{876D}\x{876E}\x{876F}\x{8770}\x{8772}\x{8773}\x{8774}\x{8775}' . '\x{8776}\x{8777}\x{8778}\x{8779}\x{877A}\x{877B}\x{877C}\x{877D}\x{877E}' . '\x{8780}\x{8781}\x{8782}\x{8783}\x{8784}\x{8785}\x{8786}\x{8787}\x{8788}' . '\x{8789}\x{878A}\x{878B}\x{878C}\x{878D}\x{878F}\x{8790}\x{8791}\x{8792}' . '\x{8793}\x{8794}\x{8795}\x{8796}\x{8797}\x{8798}\x{879A}\x{879B}\x{879C}' . '\x{879D}\x{879E}\x{879F}\x{87A0}\x{87A1}\x{87A2}\x{87A3}\x{87A4}\x{87A5}' . '\x{87A6}\x{87A7}\x{87A8}\x{87A9}\x{87AA}\x{87AB}\x{87AC}\x{87AD}\x{87AE}' . '\x{87AF}\x{87B0}\x{87B1}\x{87B2}\x{87B3}\x{87B4}\x{87B5}\x{87B6}\x{87B7}' . '\x{87B8}\x{87B9}\x{87BA}\x{87BB}\x{87BC}\x{87BD}\x{87BE}\x{87BF}\x{87C0}' . '\x{87C1}\x{87C2}\x{87C3}\x{87C4}\x{87C5}\x{87C6}\x{87C7}\x{87C8}\x{87C9}' . '\x{87CA}\x{87CB}\x{87CC}\x{87CD}\x{87CE}\x{87CF}\x{87D0}\x{87D1}\x{87D2}' . '\x{87D3}\x{87D4}\x{87D5}\x{87D6}\x{87D7}\x{87D8}\x{87D9}\x{87DB}\x{87DC}' . '\x{87DD}\x{87DE}\x{87DF}\x{87E0}\x{87E1}\x{87E2}\x{87E3}\x{87E4}\x{87E5}' . '\x{87E6}\x{87E7}\x{87E8}\x{87E9}\x{87EA}\x{87EB}\x{87EC}\x{87ED}\x{87EE}' . '\x{87EF}\x{87F1}\x{87F2}\x{87F3}\x{87F4}\x{87F5}\x{87F6}\x{87F7}\x{87F8}' . '\x{87F9}\x{87FA}\x{87FB}\x{87FC}\x{87FD}\x{87FE}\x{87FF}\x{8800}\x{8801}' . '\x{8802}\x{8803}\x{8804}\x{8805}\x{8806}\x{8808}\x{8809}\x{880A}\x{880B}' . '\x{880C}\x{880D}\x{880E}\x{880F}\x{8810}\x{8811}\x{8813}\x{8814}\x{8815}' . '\x{8816}\x{8817}\x{8818}\x{8819}\x{881A}\x{881B}\x{881C}\x{881D}\x{881E}' . '\x{881F}\x{8820}\x{8821}\x{8822}\x{8823}\x{8824}\x{8825}\x{8826}\x{8827}' . '\x{8828}\x{8829}\x{882A}\x{882B}\x{882C}\x{882E}\x{882F}\x{8830}\x{8831}' . '\x{8832}\x{8833}\x{8834}\x{8835}\x{8836}\x{8837}\x{8838}\x{8839}\x{883B}' . '\x{883C}\x{883D}\x{883E}\x{883F}\x{8840}\x{8841}\x{8842}\x{8843}\x{8844}' . '\x{8845}\x{8846}\x{8848}\x{8849}\x{884A}\x{884B}\x{884C}\x{884D}\x{884E}' . '\x{884F}\x{8850}\x{8851}\x{8852}\x{8853}\x{8854}\x{8855}\x{8856}\x{8857}' . '\x{8859}\x{885A}\x{885B}\x{885D}\x{885E}\x{8860}\x{8861}\x{8862}\x{8863}' . '\x{8864}\x{8865}\x{8866}\x{8867}\x{8868}\x{8869}\x{886A}\x{886B}\x{886C}' . '\x{886D}\x{886E}\x{886F}\x{8870}\x{8871}\x{8872}\x{8873}\x{8874}\x{8875}' . '\x{8876}\x{8877}\x{8878}\x{8879}\x{887B}\x{887C}\x{887D}\x{887E}\x{887F}' . '\x{8880}\x{8881}\x{8882}\x{8883}\x{8884}\x{8885}\x{8886}\x{8887}\x{8888}' . '\x{8889}\x{888A}\x{888B}\x{888C}\x{888D}\x{888E}\x{888F}\x{8890}\x{8891}' . '\x{8892}\x{8893}\x{8894}\x{8895}\x{8896}\x{8897}\x{8898}\x{8899}\x{889A}' . '\x{889B}\x{889C}\x{889D}\x{889E}\x{889F}\x{88A0}\x{88A1}\x{88A2}\x{88A3}' . '\x{88A4}\x{88A5}\x{88A6}\x{88A7}\x{88A8}\x{88A9}\x{88AA}\x{88AB}\x{88AC}' . '\x{88AD}\x{88AE}\x{88AF}\x{88B0}\x{88B1}\x{88B2}\x{88B3}\x{88B4}\x{88B6}' . '\x{88B7}\x{88B8}\x{88B9}\x{88BA}\x{88BB}\x{88BC}\x{88BD}\x{88BE}\x{88BF}' . '\x{88C0}\x{88C1}\x{88C2}\x{88C3}\x{88C4}\x{88C5}\x{88C6}\x{88C7}\x{88C8}' . '\x{88C9}\x{88CA}\x{88CB}\x{88CC}\x{88CD}\x{88CE}\x{88CF}\x{88D0}\x{88D1}' . '\x{88D2}\x{88D3}\x{88D4}\x{88D5}\x{88D6}\x{88D7}\x{88D8}\x{88D9}\x{88DA}' . '\x{88DB}\x{88DC}\x{88DD}\x{88DE}\x{88DF}\x{88E0}\x{88E1}\x{88E2}\x{88E3}' . '\x{88E4}\x{88E5}\x{88E7}\x{88E8}\x{88EA}\x{88EB}\x{88EC}\x{88EE}\x{88EF}' . '\x{88F0}\x{88F1}\x{88F2}\x{88F3}\x{88F4}\x{88F5}\x{88F6}\x{88F7}\x{88F8}' . '\x{88F9}\x{88FA}\x{88FB}\x{88FC}\x{88FD}\x{88FE}\x{88FF}\x{8900}\x{8901}' . '\x{8902}\x{8904}\x{8905}\x{8906}\x{8907}\x{8908}\x{8909}\x{890A}\x{890B}' . '\x{890C}\x{890D}\x{890E}\x{8910}\x{8911}\x{8912}\x{8913}\x{8914}\x{8915}' . '\x{8916}\x{8917}\x{8918}\x{8919}\x{891A}\x{891B}\x{891C}\x{891D}\x{891E}' . '\x{891F}\x{8920}\x{8921}\x{8922}\x{8923}\x{8925}\x{8926}\x{8927}\x{8928}' . '\x{8929}\x{892A}\x{892B}\x{892C}\x{892D}\x{892E}\x{892F}\x{8930}\x{8931}' . '\x{8932}\x{8933}\x{8934}\x{8935}\x{8936}\x{8937}\x{8938}\x{8939}\x{893A}' . '\x{893B}\x{893C}\x{893D}\x{893E}\x{893F}\x{8940}\x{8941}\x{8942}\x{8943}' . '\x{8944}\x{8945}\x{8946}\x{8947}\x{8948}\x{8949}\x{894A}\x{894B}\x{894C}' . '\x{894E}\x{894F}\x{8950}\x{8951}\x{8952}\x{8953}\x{8954}\x{8955}\x{8956}' . '\x{8957}\x{8958}\x{8959}\x{895A}\x{895B}\x{895C}\x{895D}\x{895E}\x{895F}' . '\x{8960}\x{8961}\x{8962}\x{8963}\x{8964}\x{8966}\x{8967}\x{8968}\x{8969}' . '\x{896A}\x{896B}\x{896C}\x{896D}\x{896E}\x{896F}\x{8970}\x{8971}\x{8972}' . '\x{8973}\x{8974}\x{8976}\x{8977}\x{8978}\x{8979}\x{897A}\x{897B}\x{897C}' . '\x{897E}\x{897F}\x{8980}\x{8981}\x{8982}\x{8983}\x{8984}\x{8985}\x{8986}' . '\x{8987}\x{8988}\x{8989}\x{898A}\x{898B}\x{898C}\x{898E}\x{898F}\x{8991}' . '\x{8992}\x{8993}\x{8995}\x{8996}\x{8997}\x{8998}\x{899A}\x{899B}\x{899C}' . '\x{899D}\x{899E}\x{899F}\x{89A0}\x{89A1}\x{89A2}\x{89A3}\x{89A4}\x{89A5}' . '\x{89A6}\x{89A7}\x{89A8}\x{89AA}\x{89AB}\x{89AC}\x{89AD}\x{89AE}\x{89AF}' . '\x{89B1}\x{89B2}\x{89B3}\x{89B5}\x{89B6}\x{89B7}\x{89B8}\x{89B9}\x{89BA}' . '\x{89BD}\x{89BE}\x{89BF}\x{89C0}\x{89C1}\x{89C2}\x{89C3}\x{89C4}\x{89C5}' . '\x{89C6}\x{89C7}\x{89C8}\x{89C9}\x{89CA}\x{89CB}\x{89CC}\x{89CD}\x{89CE}' . '\x{89CF}\x{89D0}\x{89D1}\x{89D2}\x{89D3}\x{89D4}\x{89D5}\x{89D6}\x{89D7}' . '\x{89D8}\x{89D9}\x{89DA}\x{89DB}\x{89DC}\x{89DD}\x{89DE}\x{89DF}\x{89E0}' . '\x{89E1}\x{89E2}\x{89E3}\x{89E4}\x{89E5}\x{89E6}\x{89E7}\x{89E8}\x{89E9}' . '\x{89EA}\x{89EB}\x{89EC}\x{89ED}\x{89EF}\x{89F0}\x{89F1}\x{89F2}\x{89F3}' . '\x{89F4}\x{89F6}\x{89F7}\x{89F8}\x{89FA}\x{89FB}\x{89FC}\x{89FE}\x{89FF}' . '\x{8A00}\x{8A01}\x{8A02}\x{8A03}\x{8A04}\x{8A07}\x{8A08}\x{8A09}\x{8A0A}' . '\x{8A0B}\x{8A0C}\x{8A0D}\x{8A0E}\x{8A0F}\x{8A10}\x{8A11}\x{8A12}\x{8A13}' . '\x{8A15}\x{8A16}\x{8A17}\x{8A18}\x{8A1A}\x{8A1B}\x{8A1C}\x{8A1D}\x{8A1E}' . '\x{8A1F}\x{8A22}\x{8A23}\x{8A24}\x{8A25}\x{8A26}\x{8A27}\x{8A28}\x{8A29}' . '\x{8A2A}\x{8A2C}\x{8A2D}\x{8A2E}\x{8A2F}\x{8A30}\x{8A31}\x{8A32}\x{8A34}' . '\x{8A35}\x{8A36}\x{8A37}\x{8A38}\x{8A39}\x{8A3A}\x{8A3B}\x{8A3C}\x{8A3E}' . '\x{8A3F}\x{8A40}\x{8A41}\x{8A42}\x{8A43}\x{8A44}\x{8A45}\x{8A46}\x{8A47}' . '\x{8A48}\x{8A49}\x{8A4A}\x{8A4C}\x{8A4D}\x{8A4E}\x{8A4F}\x{8A50}\x{8A51}' . '\x{8A52}\x{8A53}\x{8A54}\x{8A55}\x{8A56}\x{8A57}\x{8A58}\x{8A59}\x{8A5A}' . '\x{8A5B}\x{8A5C}\x{8A5D}\x{8A5E}\x{8A5F}\x{8A60}\x{8A61}\x{8A62}\x{8A63}' . '\x{8A65}\x{8A66}\x{8A67}\x{8A68}\x{8A69}\x{8A6A}\x{8A6B}\x{8A6C}\x{8A6D}' . '\x{8A6E}\x{8A6F}\x{8A70}\x{8A71}\x{8A72}\x{8A73}\x{8A74}\x{8A75}\x{8A76}' . '\x{8A77}\x{8A79}\x{8A7A}\x{8A7B}\x{8A7C}\x{8A7E}\x{8A7F}\x{8A80}\x{8A81}' . '\x{8A82}\x{8A83}\x{8A84}\x{8A85}\x{8A86}\x{8A87}\x{8A89}\x{8A8A}\x{8A8B}' . '\x{8A8C}\x{8A8D}\x{8A8E}\x{8A8F}\x{8A90}\x{8A91}\x{8A92}\x{8A93}\x{8A94}' . '\x{8A95}\x{8A96}\x{8A97}\x{8A98}\x{8A99}\x{8A9A}\x{8A9B}\x{8A9C}\x{8A9D}' . '\x{8A9E}\x{8AA0}\x{8AA1}\x{8AA2}\x{8AA3}\x{8AA4}\x{8AA5}\x{8AA6}\x{8AA7}' . '\x{8AA8}\x{8AA9}\x{8AAA}\x{8AAB}\x{8AAC}\x{8AAE}\x{8AB0}\x{8AB1}\x{8AB2}' . '\x{8AB3}\x{8AB4}\x{8AB5}\x{8AB6}\x{8AB8}\x{8AB9}\x{8ABA}\x{8ABB}\x{8ABC}' . '\x{8ABD}\x{8ABE}\x{8ABF}\x{8AC0}\x{8AC1}\x{8AC2}\x{8AC3}\x{8AC4}\x{8AC5}' . '\x{8AC6}\x{8AC7}\x{8AC8}\x{8AC9}\x{8ACA}\x{8ACB}\x{8ACC}\x{8ACD}\x{8ACE}' . '\x{8ACF}\x{8AD1}\x{8AD2}\x{8AD3}\x{8AD4}\x{8AD5}\x{8AD6}\x{8AD7}\x{8AD8}' . '\x{8AD9}\x{8ADA}\x{8ADB}\x{8ADC}\x{8ADD}\x{8ADE}\x{8ADF}\x{8AE0}\x{8AE1}' . '\x{8AE2}\x{8AE3}\x{8AE4}\x{8AE5}\x{8AE6}\x{8AE7}\x{8AE8}\x{8AE9}\x{8AEA}' . '\x{8AEB}\x{8AED}\x{8AEE}\x{8AEF}\x{8AF0}\x{8AF1}\x{8AF2}\x{8AF3}\x{8AF4}' . '\x{8AF5}\x{8AF6}\x{8AF7}\x{8AF8}\x{8AF9}\x{8AFA}\x{8AFB}\x{8AFC}\x{8AFD}' . '\x{8AFE}\x{8AFF}\x{8B00}\x{8B01}\x{8B02}\x{8B03}\x{8B04}\x{8B05}\x{8B06}' . '\x{8B07}\x{8B08}\x{8B09}\x{8B0A}\x{8B0B}\x{8B0D}\x{8B0E}\x{8B0F}\x{8B10}' . '\x{8B11}\x{8B12}\x{8B13}\x{8B14}\x{8B15}\x{8B16}\x{8B17}\x{8B18}\x{8B19}' . '\x{8B1A}\x{8B1B}\x{8B1C}\x{8B1D}\x{8B1E}\x{8B1F}\x{8B20}\x{8B21}\x{8B22}' . '\x{8B23}\x{8B24}\x{8B25}\x{8B26}\x{8B27}\x{8B28}\x{8B2A}\x{8B2B}\x{8B2C}' . '\x{8B2D}\x{8B2E}\x{8B2F}\x{8B30}\x{8B31}\x{8B33}\x{8B34}\x{8B35}\x{8B36}' . '\x{8B37}\x{8B39}\x{8B3A}\x{8B3B}\x{8B3C}\x{8B3D}\x{8B3E}\x{8B40}\x{8B41}' . '\x{8B42}\x{8B43}\x{8B44}\x{8B45}\x{8B46}\x{8B47}\x{8B48}\x{8B49}\x{8B4A}' . '\x{8B4B}\x{8B4C}\x{8B4D}\x{8B4E}\x{8B4F}\x{8B50}\x{8B51}\x{8B52}\x{8B53}' . '\x{8B54}\x{8B55}\x{8B56}\x{8B57}\x{8B58}\x{8B59}\x{8B5A}\x{8B5B}\x{8B5C}' . '\x{8B5D}\x{8B5E}\x{8B5F}\x{8B60}\x{8B63}\x{8B64}\x{8B65}\x{8B66}\x{8B67}' . '\x{8B68}\x{8B6A}\x{8B6B}\x{8B6C}\x{8B6D}\x{8B6E}\x{8B6F}\x{8B70}\x{8B71}' . '\x{8B73}\x{8B74}\x{8B76}\x{8B77}\x{8B78}\x{8B79}\x{8B7A}\x{8B7B}\x{8B7D}' . '\x{8B7E}\x{8B7F}\x{8B80}\x{8B82}\x{8B83}\x{8B84}\x{8B85}\x{8B86}\x{8B88}' . '\x{8B89}\x{8B8A}\x{8B8B}\x{8B8C}\x{8B8E}\x{8B90}\x{8B91}\x{8B92}\x{8B93}' . '\x{8B94}\x{8B95}\x{8B96}\x{8B97}\x{8B98}\x{8B99}\x{8B9A}\x{8B9C}\x{8B9D}' . '\x{8B9E}\x{8B9F}\x{8BA0}\x{8BA1}\x{8BA2}\x{8BA3}\x{8BA4}\x{8BA5}\x{8BA6}' . '\x{8BA7}\x{8BA8}\x{8BA9}\x{8BAA}\x{8BAB}\x{8BAC}\x{8BAD}\x{8BAE}\x{8BAF}' . '\x{8BB0}\x{8BB1}\x{8BB2}\x{8BB3}\x{8BB4}\x{8BB5}\x{8BB6}\x{8BB7}\x{8BB8}' . '\x{8BB9}\x{8BBA}\x{8BBB}\x{8BBC}\x{8BBD}\x{8BBE}\x{8BBF}\x{8BC0}\x{8BC1}' . '\x{8BC2}\x{8BC3}\x{8BC4}\x{8BC5}\x{8BC6}\x{8BC7}\x{8BC8}\x{8BC9}\x{8BCA}' . '\x{8BCB}\x{8BCC}\x{8BCD}\x{8BCE}\x{8BCF}\x{8BD0}\x{8BD1}\x{8BD2}\x{8BD3}' . '\x{8BD4}\x{8BD5}\x{8BD6}\x{8BD7}\x{8BD8}\x{8BD9}\x{8BDA}\x{8BDB}\x{8BDC}' . '\x{8BDD}\x{8BDE}\x{8BDF}\x{8BE0}\x{8BE1}\x{8BE2}\x{8BE3}\x{8BE4}\x{8BE5}' . '\x{8BE6}\x{8BE7}\x{8BE8}\x{8BE9}\x{8BEA}\x{8BEB}\x{8BEC}\x{8BED}\x{8BEE}' . '\x{8BEF}\x{8BF0}\x{8BF1}\x{8BF2}\x{8BF3}\x{8BF4}\x{8BF5}\x{8BF6}\x{8BF7}' . '\x{8BF8}\x{8BF9}\x{8BFA}\x{8BFB}\x{8BFC}\x{8BFD}\x{8BFE}\x{8BFF}\x{8C00}' . '\x{8C01}\x{8C02}\x{8C03}\x{8C04}\x{8C05}\x{8C06}\x{8C07}\x{8C08}\x{8C09}' . '\x{8C0A}\x{8C0B}\x{8C0C}\x{8C0D}\x{8C0E}\x{8C0F}\x{8C10}\x{8C11}\x{8C12}' . '\x{8C13}\x{8C14}\x{8C15}\x{8C16}\x{8C17}\x{8C18}\x{8C19}\x{8C1A}\x{8C1B}' . '\x{8C1C}\x{8C1D}\x{8C1E}\x{8C1F}\x{8C20}\x{8C21}\x{8C22}\x{8C23}\x{8C24}' . '\x{8C25}\x{8C26}\x{8C27}\x{8C28}\x{8C29}\x{8C2A}\x{8C2B}\x{8C2C}\x{8C2D}' . '\x{8C2E}\x{8C2F}\x{8C30}\x{8C31}\x{8C32}\x{8C33}\x{8C34}\x{8C35}\x{8C36}' . '\x{8C37}\x{8C39}\x{8C3A}\x{8C3B}\x{8C3C}\x{8C3D}\x{8C3E}\x{8C3F}\x{8C41}' . '\x{8C42}\x{8C43}\x{8C45}\x{8C46}\x{8C47}\x{8C48}\x{8C49}\x{8C4A}\x{8C4B}' . '\x{8C4C}\x{8C4D}\x{8C4E}\x{8C4F}\x{8C50}\x{8C54}\x{8C55}\x{8C56}\x{8C57}' . '\x{8C59}\x{8C5A}\x{8C5B}\x{8C5C}\x{8C5D}\x{8C5E}\x{8C5F}\x{8C60}\x{8C61}' . '\x{8C62}\x{8C63}\x{8C64}\x{8C65}\x{8C66}\x{8C67}\x{8C68}\x{8C69}\x{8C6A}' . '\x{8C6B}\x{8C6C}\x{8C6D}\x{8C6E}\x{8C6F}\x{8C70}\x{8C71}\x{8C72}\x{8C73}' . '\x{8C75}\x{8C76}\x{8C77}\x{8C78}\x{8C79}\x{8C7A}\x{8C7B}\x{8C7D}\x{8C7E}' . '\x{8C80}\x{8C81}\x{8C82}\x{8C84}\x{8C85}\x{8C86}\x{8C88}\x{8C89}\x{8C8A}' . '\x{8C8C}\x{8C8D}\x{8C8F}\x{8C90}\x{8C91}\x{8C92}\x{8C93}\x{8C94}\x{8C95}' . '\x{8C96}\x{8C97}\x{8C98}\x{8C99}\x{8C9A}\x{8C9C}\x{8C9D}\x{8C9E}\x{8C9F}' . '\x{8CA0}\x{8CA1}\x{8CA2}\x{8CA3}\x{8CA4}\x{8CA5}\x{8CA7}\x{8CA8}\x{8CA9}' . '\x{8CAA}\x{8CAB}\x{8CAC}\x{8CAD}\x{8CAE}\x{8CAF}\x{8CB0}\x{8CB1}\x{8CB2}' . '\x{8CB3}\x{8CB4}\x{8CB5}\x{8CB6}\x{8CB7}\x{8CB8}\x{8CB9}\x{8CBA}\x{8CBB}' . '\x{8CBC}\x{8CBD}\x{8CBE}\x{8CBF}\x{8CC0}\x{8CC1}\x{8CC2}\x{8CC3}\x{8CC4}' . '\x{8CC5}\x{8CC6}\x{8CC7}\x{8CC8}\x{8CC9}\x{8CCA}\x{8CCC}\x{8CCE}\x{8CCF}' . '\x{8CD0}\x{8CD1}\x{8CD2}\x{8CD3}\x{8CD4}\x{8CD5}\x{8CD7}\x{8CD9}\x{8CDA}' . '\x{8CDB}\x{8CDC}\x{8CDD}\x{8CDE}\x{8CDF}\x{8CE0}\x{8CE1}\x{8CE2}\x{8CE3}' . '\x{8CE4}\x{8CE5}\x{8CE6}\x{8CE7}\x{8CE8}\x{8CEA}\x{8CEB}\x{8CEC}\x{8CED}' . '\x{8CEE}\x{8CEF}\x{8CF0}\x{8CF1}\x{8CF2}\x{8CF3}\x{8CF4}\x{8CF5}\x{8CF6}' . '\x{8CF8}\x{8CF9}\x{8CFA}\x{8CFB}\x{8CFC}\x{8CFD}\x{8CFE}\x{8CFF}\x{8D00}' . '\x{8D02}\x{8D03}\x{8D04}\x{8D05}\x{8D06}\x{8D07}\x{8D08}\x{8D09}\x{8D0A}' . '\x{8D0B}\x{8D0C}\x{8D0D}\x{8D0E}\x{8D0F}\x{8D10}\x{8D13}\x{8D14}\x{8D15}' . '\x{8D16}\x{8D17}\x{8D18}\x{8D19}\x{8D1A}\x{8D1B}\x{8D1C}\x{8D1D}\x{8D1E}' . '\x{8D1F}\x{8D20}\x{8D21}\x{8D22}\x{8D23}\x{8D24}\x{8D25}\x{8D26}\x{8D27}' . '\x{8D28}\x{8D29}\x{8D2A}\x{8D2B}\x{8D2C}\x{8D2D}\x{8D2E}\x{8D2F}\x{8D30}' . '\x{8D31}\x{8D32}\x{8D33}\x{8D34}\x{8D35}\x{8D36}\x{8D37}\x{8D38}\x{8D39}' . '\x{8D3A}\x{8D3B}\x{8D3C}\x{8D3D}\x{8D3E}\x{8D3F}\x{8D40}\x{8D41}\x{8D42}' . '\x{8D43}\x{8D44}\x{8D45}\x{8D46}\x{8D47}\x{8D48}\x{8D49}\x{8D4A}\x{8D4B}' . '\x{8D4C}\x{8D4D}\x{8D4E}\x{8D4F}\x{8D50}\x{8D51}\x{8D52}\x{8D53}\x{8D54}' . '\x{8D55}\x{8D56}\x{8D57}\x{8D58}\x{8D59}\x{8D5A}\x{8D5B}\x{8D5C}\x{8D5D}' . '\x{8D5E}\x{8D5F}\x{8D60}\x{8D61}\x{8D62}\x{8D63}\x{8D64}\x{8D65}\x{8D66}' . '\x{8D67}\x{8D68}\x{8D69}\x{8D6A}\x{8D6B}\x{8D6C}\x{8D6D}\x{8D6E}\x{8D6F}' . '\x{8D70}\x{8D71}\x{8D72}\x{8D73}\x{8D74}\x{8D75}\x{8D76}\x{8D77}\x{8D78}' . '\x{8D79}\x{8D7A}\x{8D7B}\x{8D7D}\x{8D7E}\x{8D7F}\x{8D80}\x{8D81}\x{8D82}' . '\x{8D83}\x{8D84}\x{8D85}\x{8D86}\x{8D87}\x{8D88}\x{8D89}\x{8D8A}\x{8D8B}' . '\x{8D8C}\x{8D8D}\x{8D8E}\x{8D8F}\x{8D90}\x{8D91}\x{8D92}\x{8D93}\x{8D94}' . '\x{8D95}\x{8D96}\x{8D97}\x{8D98}\x{8D99}\x{8D9A}\x{8D9B}\x{8D9C}\x{8D9D}' . '\x{8D9E}\x{8D9F}\x{8DA0}\x{8DA1}\x{8DA2}\x{8DA3}\x{8DA4}\x{8DA5}\x{8DA7}' . '\x{8DA8}\x{8DA9}\x{8DAA}\x{8DAB}\x{8DAC}\x{8DAD}\x{8DAE}\x{8DAF}\x{8DB0}' . '\x{8DB1}\x{8DB2}\x{8DB3}\x{8DB4}\x{8DB5}\x{8DB6}\x{8DB7}\x{8DB8}\x{8DB9}' . '\x{8DBA}\x{8DBB}\x{8DBC}\x{8DBD}\x{8DBE}\x{8DBF}\x{8DC1}\x{8DC2}\x{8DC3}' . '\x{8DC4}\x{8DC5}\x{8DC6}\x{8DC7}\x{8DC8}\x{8DC9}\x{8DCA}\x{8DCB}\x{8DCC}' . '\x{8DCD}\x{8DCE}\x{8DCF}\x{8DD0}\x{8DD1}\x{8DD2}\x{8DD3}\x{8DD4}\x{8DD5}' . '\x{8DD6}\x{8DD7}\x{8DD8}\x{8DD9}\x{8DDA}\x{8DDB}\x{8DDC}\x{8DDD}\x{8DDE}' . '\x{8DDF}\x{8DE0}\x{8DE1}\x{8DE2}\x{8DE3}\x{8DE4}\x{8DE6}\x{8DE7}\x{8DE8}' . '\x{8DE9}\x{8DEA}\x{8DEB}\x{8DEC}\x{8DED}\x{8DEE}\x{8DEF}\x{8DF0}\x{8DF1}' . '\x{8DF2}\x{8DF3}\x{8DF4}\x{8DF5}\x{8DF6}\x{8DF7}\x{8DF8}\x{8DF9}\x{8DFA}' . '\x{8DFB}\x{8DFC}\x{8DFD}\x{8DFE}\x{8DFF}\x{8E00}\x{8E02}\x{8E03}\x{8E04}' . '\x{8E05}\x{8E06}\x{8E07}\x{8E08}\x{8E09}\x{8E0A}\x{8E0C}\x{8E0D}\x{8E0E}' . '\x{8E0F}\x{8E10}\x{8E11}\x{8E12}\x{8E13}\x{8E14}\x{8E15}\x{8E16}\x{8E17}' . '\x{8E18}\x{8E19}\x{8E1A}\x{8E1B}\x{8E1C}\x{8E1D}\x{8E1E}\x{8E1F}\x{8E20}' . '\x{8E21}\x{8E22}\x{8E23}\x{8E24}\x{8E25}\x{8E26}\x{8E27}\x{8E28}\x{8E29}' . '\x{8E2A}\x{8E2B}\x{8E2C}\x{8E2D}\x{8E2E}\x{8E2F}\x{8E30}\x{8E31}\x{8E33}' . '\x{8E34}\x{8E35}\x{8E36}\x{8E37}\x{8E38}\x{8E39}\x{8E3A}\x{8E3B}\x{8E3C}' . '\x{8E3D}\x{8E3E}\x{8E3F}\x{8E40}\x{8E41}\x{8E42}\x{8E43}\x{8E44}\x{8E45}' . '\x{8E47}\x{8E48}\x{8E49}\x{8E4A}\x{8E4B}\x{8E4C}\x{8E4D}\x{8E4E}\x{8E50}' . '\x{8E51}\x{8E52}\x{8E53}\x{8E54}\x{8E55}\x{8E56}\x{8E57}\x{8E58}\x{8E59}' . '\x{8E5A}\x{8E5B}\x{8E5C}\x{8E5D}\x{8E5E}\x{8E5F}\x{8E60}\x{8E61}\x{8E62}' . '\x{8E63}\x{8E64}\x{8E65}\x{8E66}\x{8E67}\x{8E68}\x{8E69}\x{8E6A}\x{8E6B}' . '\x{8E6C}\x{8E6D}\x{8E6F}\x{8E70}\x{8E71}\x{8E72}\x{8E73}\x{8E74}\x{8E76}' . '\x{8E78}\x{8E7A}\x{8E7B}\x{8E7C}\x{8E7D}\x{8E7E}\x{8E7F}\x{8E80}\x{8E81}' . '\x{8E82}\x{8E83}\x{8E84}\x{8E85}\x{8E86}\x{8E87}\x{8E88}\x{8E89}\x{8E8A}' . '\x{8E8B}\x{8E8C}\x{8E8D}\x{8E8E}\x{8E8F}\x{8E90}\x{8E91}\x{8E92}\x{8E93}' . '\x{8E94}\x{8E95}\x{8E96}\x{8E97}\x{8E98}\x{8E9A}\x{8E9C}\x{8E9D}\x{8E9E}' . '\x{8E9F}\x{8EA0}\x{8EA1}\x{8EA3}\x{8EA4}\x{8EA5}\x{8EA6}\x{8EA7}\x{8EA8}' . '\x{8EA9}\x{8EAA}\x{8EAB}\x{8EAC}\x{8EAD}\x{8EAE}\x{8EAF}\x{8EB0}\x{8EB1}' . '\x{8EB2}\x{8EB4}\x{8EB5}\x{8EB8}\x{8EB9}\x{8EBA}\x{8EBB}\x{8EBC}\x{8EBD}' . '\x{8EBE}\x{8EBF}\x{8EC0}\x{8EC2}\x{8EC3}\x{8EC5}\x{8EC6}\x{8EC7}\x{8EC8}' . '\x{8EC9}\x{8ECA}\x{8ECB}\x{8ECC}\x{8ECD}\x{8ECE}\x{8ECF}\x{8ED0}\x{8ED1}' . '\x{8ED2}\x{8ED3}\x{8ED4}\x{8ED5}\x{8ED6}\x{8ED7}\x{8ED8}\x{8EDA}\x{8EDB}' . '\x{8EDC}\x{8EDD}\x{8EDE}\x{8EDF}\x{8EE0}\x{8EE1}\x{8EE4}\x{8EE5}\x{8EE6}' . '\x{8EE7}\x{8EE8}\x{8EE9}\x{8EEA}\x{8EEB}\x{8EEC}\x{8EED}\x{8EEE}\x{8EEF}' . '\x{8EF1}\x{8EF2}\x{8EF3}\x{8EF4}\x{8EF5}\x{8EF6}\x{8EF7}\x{8EF8}\x{8EF9}' . '\x{8EFA}\x{8EFB}\x{8EFC}\x{8EFD}\x{8EFE}\x{8EFF}\x{8F00}\x{8F01}\x{8F02}' . '\x{8F03}\x{8F04}\x{8F05}\x{8F06}\x{8F07}\x{8F08}\x{8F09}\x{8F0A}\x{8F0B}' . '\x{8F0D}\x{8F0E}\x{8F10}\x{8F11}\x{8F12}\x{8F13}\x{8F14}\x{8F15}\x{8F16}' . '\x{8F17}\x{8F18}\x{8F1A}\x{8F1B}\x{8F1C}\x{8F1D}\x{8F1E}\x{8F1F}\x{8F20}' . '\x{8F21}\x{8F22}\x{8F23}\x{8F24}\x{8F25}\x{8F26}\x{8F27}\x{8F28}\x{8F29}' . '\x{8F2A}\x{8F2B}\x{8F2C}\x{8F2E}\x{8F2F}\x{8F30}\x{8F31}\x{8F32}\x{8F33}' . '\x{8F34}\x{8F35}\x{8F36}\x{8F37}\x{8F38}\x{8F39}\x{8F3B}\x{8F3C}\x{8F3D}' . '\x{8F3E}\x{8F3F}\x{8F40}\x{8F42}\x{8F43}\x{8F44}\x{8F45}\x{8F46}\x{8F47}' . '\x{8F48}\x{8F49}\x{8F4A}\x{8F4B}\x{8F4C}\x{8F4D}\x{8F4E}\x{8F4F}\x{8F50}' . '\x{8F51}\x{8F52}\x{8F53}\x{8F54}\x{8F55}\x{8F56}\x{8F57}\x{8F58}\x{8F59}' . '\x{8F5A}\x{8F5B}\x{8F5D}\x{8F5E}\x{8F5F}\x{8F60}\x{8F61}\x{8F62}\x{8F63}' . '\x{8F64}\x{8F65}\x{8F66}\x{8F67}\x{8F68}\x{8F69}\x{8F6A}\x{8F6B}\x{8F6C}' . '\x{8F6D}\x{8F6E}\x{8F6F}\x{8F70}\x{8F71}\x{8F72}\x{8F73}\x{8F74}\x{8F75}' . '\x{8F76}\x{8F77}\x{8F78}\x{8F79}\x{8F7A}\x{8F7B}\x{8F7C}\x{8F7D}\x{8F7E}' . '\x{8F7F}\x{8F80}\x{8F81}\x{8F82}\x{8F83}\x{8F84}\x{8F85}\x{8F86}\x{8F87}' . '\x{8F88}\x{8F89}\x{8F8A}\x{8F8B}\x{8F8C}\x{8F8D}\x{8F8E}\x{8F8F}\x{8F90}' . '\x{8F91}\x{8F92}\x{8F93}\x{8F94}\x{8F95}\x{8F96}\x{8F97}\x{8F98}\x{8F99}' . '\x{8F9A}\x{8F9B}\x{8F9C}\x{8F9E}\x{8F9F}\x{8FA0}\x{8FA1}\x{8FA2}\x{8FA3}' . '\x{8FA5}\x{8FA6}\x{8FA7}\x{8FA8}\x{8FA9}\x{8FAA}\x{8FAB}\x{8FAC}\x{8FAD}' . '\x{8FAE}\x{8FAF}\x{8FB0}\x{8FB1}\x{8FB2}\x{8FB4}\x{8FB5}\x{8FB6}\x{8FB7}' . '\x{8FB8}\x{8FB9}\x{8FBB}\x{8FBC}\x{8FBD}\x{8FBE}\x{8FBF}\x{8FC0}\x{8FC1}' . '\x{8FC2}\x{8FC4}\x{8FC5}\x{8FC6}\x{8FC7}\x{8FC8}\x{8FC9}\x{8FCB}\x{8FCC}' . '\x{8FCD}\x{8FCE}\x{8FCF}\x{8FD0}\x{8FD1}\x{8FD2}\x{8FD3}\x{8FD4}\x{8FD5}' . '\x{8FD6}\x{8FD7}\x{8FD8}\x{8FD9}\x{8FDA}\x{8FDB}\x{8FDC}\x{8FDD}\x{8FDE}' . '\x{8FDF}\x{8FE0}\x{8FE1}\x{8FE2}\x{8FE3}\x{8FE4}\x{8FE5}\x{8FE6}\x{8FE8}' . '\x{8FE9}\x{8FEA}\x{8FEB}\x{8FEC}\x{8FED}\x{8FEE}\x{8FEF}\x{8FF0}\x{8FF1}' . '\x{8FF2}\x{8FF3}\x{8FF4}\x{8FF5}\x{8FF6}\x{8FF7}\x{8FF8}\x{8FF9}\x{8FFA}' . '\x{8FFB}\x{8FFC}\x{8FFD}\x{8FFE}\x{8FFF}\x{9000}\x{9001}\x{9002}\x{9003}' . '\x{9004}\x{9005}\x{9006}\x{9007}\x{9008}\x{9009}\x{900A}\x{900B}\x{900C}' . '\x{900D}\x{900F}\x{9010}\x{9011}\x{9012}\x{9013}\x{9014}\x{9015}\x{9016}' . '\x{9017}\x{9018}\x{9019}\x{901A}\x{901B}\x{901C}\x{901D}\x{901E}\x{901F}' . '\x{9020}\x{9021}\x{9022}\x{9023}\x{9024}\x{9025}\x{9026}\x{9027}\x{9028}' . '\x{9029}\x{902B}\x{902D}\x{902E}\x{902F}\x{9030}\x{9031}\x{9032}\x{9033}' . '\x{9034}\x{9035}\x{9036}\x{9038}\x{903A}\x{903B}\x{903C}\x{903D}\x{903E}' . '\x{903F}\x{9041}\x{9042}\x{9043}\x{9044}\x{9045}\x{9047}\x{9048}\x{9049}' . '\x{904A}\x{904B}\x{904C}\x{904D}\x{904E}\x{904F}\x{9050}\x{9051}\x{9052}' . '\x{9053}\x{9054}\x{9055}\x{9056}\x{9057}\x{9058}\x{9059}\x{905A}\x{905B}' . '\x{905C}\x{905D}\x{905E}\x{905F}\x{9060}\x{9061}\x{9062}\x{9063}\x{9064}' . '\x{9065}\x{9066}\x{9067}\x{9068}\x{9069}\x{906A}\x{906B}\x{906C}\x{906D}' . '\x{906E}\x{906F}\x{9070}\x{9071}\x{9072}\x{9073}\x{9074}\x{9075}\x{9076}' . '\x{9077}\x{9078}\x{9079}\x{907A}\x{907B}\x{907C}\x{907D}\x{907E}\x{907F}' . '\x{9080}\x{9081}\x{9082}\x{9083}\x{9084}\x{9085}\x{9086}\x{9087}\x{9088}' . '\x{9089}\x{908A}\x{908B}\x{908C}\x{908D}\x{908E}\x{908F}\x{9090}\x{9091}' . '\x{9092}\x{9093}\x{9094}\x{9095}\x{9096}\x{9097}\x{9098}\x{9099}\x{909A}' . '\x{909B}\x{909C}\x{909D}\x{909E}\x{909F}\x{90A0}\x{90A1}\x{90A2}\x{90A3}' . '\x{90A4}\x{90A5}\x{90A6}\x{90A7}\x{90A8}\x{90A9}\x{90AA}\x{90AC}\x{90AD}' . '\x{90AE}\x{90AF}\x{90B0}\x{90B1}\x{90B2}\x{90B3}\x{90B4}\x{90B5}\x{90B6}' . '\x{90B7}\x{90B8}\x{90B9}\x{90BA}\x{90BB}\x{90BC}\x{90BD}\x{90BE}\x{90BF}' . '\x{90C0}\x{90C1}\x{90C2}\x{90C3}\x{90C4}\x{90C5}\x{90C6}\x{90C7}\x{90C8}' . '\x{90C9}\x{90CA}\x{90CB}\x{90CE}\x{90CF}\x{90D0}\x{90D1}\x{90D3}\x{90D4}' . '\x{90D5}\x{90D6}\x{90D7}\x{90D8}\x{90D9}\x{90DA}\x{90DB}\x{90DC}\x{90DD}' . '\x{90DE}\x{90DF}\x{90E0}\x{90E1}\x{90E2}\x{90E3}\x{90E4}\x{90E5}\x{90E6}' . '\x{90E7}\x{90E8}\x{90E9}\x{90EA}\x{90EB}\x{90EC}\x{90ED}\x{90EE}\x{90EF}' . '\x{90F0}\x{90F1}\x{90F2}\x{90F3}\x{90F4}\x{90F5}\x{90F7}\x{90F8}\x{90F9}' . '\x{90FA}\x{90FB}\x{90FC}\x{90FD}\x{90FE}\x{90FF}\x{9100}\x{9101}\x{9102}' . '\x{9103}\x{9104}\x{9105}\x{9106}\x{9107}\x{9108}\x{9109}\x{910B}\x{910C}' . '\x{910D}\x{910E}\x{910F}\x{9110}\x{9111}\x{9112}\x{9113}\x{9114}\x{9115}' . '\x{9116}\x{9117}\x{9118}\x{9119}\x{911A}\x{911B}\x{911C}\x{911D}\x{911E}' . '\x{911F}\x{9120}\x{9121}\x{9122}\x{9123}\x{9124}\x{9125}\x{9126}\x{9127}' . '\x{9128}\x{9129}\x{912A}\x{912B}\x{912C}\x{912D}\x{912E}\x{912F}\x{9130}' . '\x{9131}\x{9132}\x{9133}\x{9134}\x{9135}\x{9136}\x{9137}\x{9138}\x{9139}' . '\x{913A}\x{913B}\x{913E}\x{913F}\x{9140}\x{9141}\x{9142}\x{9143}\x{9144}' . '\x{9145}\x{9146}\x{9147}\x{9148}\x{9149}\x{914A}\x{914B}\x{914C}\x{914D}' . '\x{914E}\x{914F}\x{9150}\x{9151}\x{9152}\x{9153}\x{9154}\x{9155}\x{9156}' . '\x{9157}\x{9158}\x{915A}\x{915B}\x{915C}\x{915D}\x{915E}\x{915F}\x{9160}' . '\x{9161}\x{9162}\x{9163}\x{9164}\x{9165}\x{9166}\x{9167}\x{9168}\x{9169}' . '\x{916A}\x{916B}\x{916C}\x{916D}\x{916E}\x{916F}\x{9170}\x{9171}\x{9172}' . '\x{9173}\x{9174}\x{9175}\x{9176}\x{9177}\x{9178}\x{9179}\x{917A}\x{917C}' . '\x{917D}\x{917E}\x{917F}\x{9180}\x{9181}\x{9182}\x{9183}\x{9184}\x{9185}' . '\x{9186}\x{9187}\x{9188}\x{9189}\x{918A}\x{918B}\x{918C}\x{918D}\x{918E}' . '\x{918F}\x{9190}\x{9191}\x{9192}\x{9193}\x{9194}\x{9196}\x{9199}\x{919A}' . '\x{919B}\x{919C}\x{919D}\x{919E}\x{919F}\x{91A0}\x{91A1}\x{91A2}\x{91A3}' . '\x{91A5}\x{91A6}\x{91A7}\x{91A8}\x{91AA}\x{91AB}\x{91AC}\x{91AD}\x{91AE}' . '\x{91AF}\x{91B0}\x{91B1}\x{91B2}\x{91B3}\x{91B4}\x{91B5}\x{91B6}\x{91B7}' . '\x{91B9}\x{91BA}\x{91BB}\x{91BC}\x{91BD}\x{91BE}\x{91C0}\x{91C1}\x{91C2}' . '\x{91C3}\x{91C5}\x{91C6}\x{91C7}\x{91C9}\x{91CA}\x{91CB}\x{91CC}\x{91CD}' . '\x{91CE}\x{91CF}\x{91D0}\x{91D1}\x{91D2}\x{91D3}\x{91D4}\x{91D5}\x{91D7}' . '\x{91D8}\x{91D9}\x{91DA}\x{91DB}\x{91DC}\x{91DD}\x{91DE}\x{91DF}\x{91E2}' . '\x{91E3}\x{91E4}\x{91E5}\x{91E6}\x{91E7}\x{91E8}\x{91E9}\x{91EA}\x{91EB}' . '\x{91EC}\x{91ED}\x{91EE}\x{91F0}\x{91F1}\x{91F2}\x{91F3}\x{91F4}\x{91F5}' . '\x{91F7}\x{91F8}\x{91F9}\x{91FA}\x{91FB}\x{91FD}\x{91FE}\x{91FF}\x{9200}' . '\x{9201}\x{9202}\x{9203}\x{9204}\x{9205}\x{9206}\x{9207}\x{9208}\x{9209}' . '\x{920A}\x{920B}\x{920C}\x{920D}\x{920E}\x{920F}\x{9210}\x{9211}\x{9212}' . '\x{9214}\x{9215}\x{9216}\x{9217}\x{9218}\x{9219}\x{921A}\x{921B}\x{921C}' . '\x{921D}\x{921E}\x{9220}\x{9221}\x{9223}\x{9224}\x{9225}\x{9226}\x{9227}' . '\x{9228}\x{9229}\x{922A}\x{922B}\x{922D}\x{922E}\x{922F}\x{9230}\x{9231}' . '\x{9232}\x{9233}\x{9234}\x{9235}\x{9236}\x{9237}\x{9238}\x{9239}\x{923A}' . '\x{923B}\x{923C}\x{923D}\x{923E}\x{923F}\x{9240}\x{9241}\x{9242}\x{9245}' . '\x{9246}\x{9247}\x{9248}\x{9249}\x{924A}\x{924B}\x{924C}\x{924D}\x{924E}' . '\x{924F}\x{9250}\x{9251}\x{9252}\x{9253}\x{9254}\x{9255}\x{9256}\x{9257}' . '\x{9258}\x{9259}\x{925A}\x{925B}\x{925C}\x{925D}\x{925E}\x{925F}\x{9260}' . '\x{9261}\x{9262}\x{9263}\x{9264}\x{9265}\x{9266}\x{9267}\x{9268}\x{926B}' . '\x{926C}\x{926D}\x{926E}\x{926F}\x{9270}\x{9272}\x{9273}\x{9274}\x{9275}' . '\x{9276}\x{9277}\x{9278}\x{9279}\x{927A}\x{927B}\x{927C}\x{927D}\x{927E}' . '\x{927F}\x{9280}\x{9282}\x{9283}\x{9285}\x{9286}\x{9287}\x{9288}\x{9289}' . '\x{928A}\x{928B}\x{928C}\x{928D}\x{928E}\x{928F}\x{9290}\x{9291}\x{9292}' . '\x{9293}\x{9294}\x{9295}\x{9296}\x{9297}\x{9298}\x{9299}\x{929A}\x{929B}' . '\x{929C}\x{929D}\x{929F}\x{92A0}\x{92A1}\x{92A2}\x{92A3}\x{92A4}\x{92A5}' . '\x{92A6}\x{92A7}\x{92A8}\x{92A9}\x{92AA}\x{92AB}\x{92AC}\x{92AD}\x{92AE}' . '\x{92AF}\x{92B0}\x{92B1}\x{92B2}\x{92B3}\x{92B4}\x{92B5}\x{92B6}\x{92B7}' . '\x{92B8}\x{92B9}\x{92BA}\x{92BB}\x{92BC}\x{92BE}\x{92BF}\x{92C0}\x{92C1}' . '\x{92C2}\x{92C3}\x{92C4}\x{92C5}\x{92C6}\x{92C7}\x{92C8}\x{92C9}\x{92CA}' . '\x{92CB}\x{92CC}\x{92CD}\x{92CE}\x{92CF}\x{92D0}\x{92D1}\x{92D2}\x{92D3}' . '\x{92D5}\x{92D6}\x{92D7}\x{92D8}\x{92D9}\x{92DA}\x{92DC}\x{92DD}\x{92DE}' . '\x{92DF}\x{92E0}\x{92E1}\x{92E3}\x{92E4}\x{92E5}\x{92E6}\x{92E7}\x{92E8}' . '\x{92E9}\x{92EA}\x{92EB}\x{92EC}\x{92ED}\x{92EE}\x{92EF}\x{92F0}\x{92F1}' . '\x{92F2}\x{92F3}\x{92F4}\x{92F5}\x{92F6}\x{92F7}\x{92F8}\x{92F9}\x{92FA}' . '\x{92FB}\x{92FC}\x{92FD}\x{92FE}\x{92FF}\x{9300}\x{9301}\x{9302}\x{9303}' . '\x{9304}\x{9305}\x{9306}\x{9307}\x{9308}\x{9309}\x{930A}\x{930B}\x{930C}' . '\x{930D}\x{930E}\x{930F}\x{9310}\x{9311}\x{9312}\x{9313}\x{9314}\x{9315}' . '\x{9316}\x{9317}\x{9318}\x{9319}\x{931A}\x{931B}\x{931D}\x{931E}\x{931F}' . '\x{9320}\x{9321}\x{9322}\x{9323}\x{9324}\x{9325}\x{9326}\x{9327}\x{9328}' . '\x{9329}\x{932A}\x{932B}\x{932D}\x{932E}\x{932F}\x{9332}\x{9333}\x{9334}' . '\x{9335}\x{9336}\x{9337}\x{9338}\x{9339}\x{933A}\x{933B}\x{933C}\x{933D}' . '\x{933E}\x{933F}\x{9340}\x{9341}\x{9342}\x{9343}\x{9344}\x{9345}\x{9346}' . '\x{9347}\x{9348}\x{9349}\x{934A}\x{934B}\x{934C}\x{934D}\x{934E}\x{934F}' . '\x{9350}\x{9351}\x{9352}\x{9353}\x{9354}\x{9355}\x{9356}\x{9357}\x{9358}' . '\x{9359}\x{935A}\x{935B}\x{935C}\x{935D}\x{935E}\x{935F}\x{9360}\x{9361}' . '\x{9363}\x{9364}\x{9365}\x{9366}\x{9367}\x{9369}\x{936A}\x{936C}\x{936D}' . '\x{936E}\x{9370}\x{9371}\x{9372}\x{9374}\x{9375}\x{9376}\x{9377}\x{9379}' . '\x{937A}\x{937B}\x{937C}\x{937D}\x{937E}\x{9380}\x{9382}\x{9383}\x{9384}' . '\x{9385}\x{9386}\x{9387}\x{9388}\x{9389}\x{938A}\x{938C}\x{938D}\x{938E}' . '\x{938F}\x{9390}\x{9391}\x{9392}\x{9393}\x{9394}\x{9395}\x{9396}\x{9397}' . '\x{9398}\x{9399}\x{939A}\x{939B}\x{939D}\x{939E}\x{939F}\x{93A1}\x{93A2}' . '\x{93A3}\x{93A4}\x{93A5}\x{93A6}\x{93A7}\x{93A8}\x{93A9}\x{93AA}\x{93AC}' . '\x{93AD}\x{93AE}\x{93AF}\x{93B0}\x{93B1}\x{93B2}\x{93B3}\x{93B4}\x{93B5}' . '\x{93B6}\x{93B7}\x{93B8}\x{93B9}\x{93BA}\x{93BC}\x{93BD}\x{93BE}\x{93BF}' . '\x{93C0}\x{93C1}\x{93C2}\x{93C3}\x{93C4}\x{93C5}\x{93C6}\x{93C7}\x{93C8}' . '\x{93C9}\x{93CA}\x{93CB}\x{93CC}\x{93CD}\x{93CE}\x{93CF}\x{93D0}\x{93D1}' . '\x{93D2}\x{93D3}\x{93D4}\x{93D5}\x{93D6}\x{93D7}\x{93D8}\x{93D9}\x{93DA}' . '\x{93DB}\x{93DC}\x{93DD}\x{93DE}\x{93DF}\x{93E1}\x{93E2}\x{93E3}\x{93E4}' . '\x{93E6}\x{93E7}\x{93E8}\x{93E9}\x{93EA}\x{93EB}\x{93EC}\x{93ED}\x{93EE}' . '\x{93EF}\x{93F0}\x{93F1}\x{93F2}\x{93F4}\x{93F5}\x{93F6}\x{93F7}\x{93F8}' . '\x{93F9}\x{93FA}\x{93FB}\x{93FC}\x{93FD}\x{93FE}\x{93FF}\x{9400}\x{9401}' . '\x{9403}\x{9404}\x{9405}\x{9406}\x{9407}\x{9408}\x{9409}\x{940A}\x{940B}' . '\x{940C}\x{940D}\x{940E}\x{940F}\x{9410}\x{9411}\x{9412}\x{9413}\x{9414}' . '\x{9415}\x{9416}\x{9418}\x{9419}\x{941B}\x{941D}\x{9420}\x{9422}\x{9423}' . '\x{9425}\x{9426}\x{9427}\x{9428}\x{9429}\x{942A}\x{942B}\x{942C}\x{942D}' . '\x{942E}\x{942F}\x{9430}\x{9431}\x{9432}\x{9433}\x{9434}\x{9435}\x{9436}' . '\x{9437}\x{9438}\x{9439}\x{943A}\x{943B}\x{943C}\x{943D}\x{943E}\x{943F}' . '\x{9440}\x{9441}\x{9442}\x{9444}\x{9445}\x{9446}\x{9447}\x{9448}\x{9449}' . '\x{944A}\x{944B}\x{944C}\x{944D}\x{944F}\x{9450}\x{9451}\x{9452}\x{9453}' . '\x{9454}\x{9455}\x{9456}\x{9457}\x{9458}\x{9459}\x{945B}\x{945C}\x{945D}' . '\x{945E}\x{945F}\x{9460}\x{9461}\x{9462}\x{9463}\x{9464}\x{9465}\x{9466}' . '\x{9467}\x{9468}\x{9469}\x{946A}\x{946B}\x{946D}\x{946E}\x{946F}\x{9470}' . '\x{9471}\x{9472}\x{9473}\x{9474}\x{9475}\x{9476}\x{9477}\x{9478}\x{9479}' . '\x{947A}\x{947C}\x{947D}\x{947E}\x{947F}\x{9480}\x{9481}\x{9482}\x{9483}' . '\x{9484}\x{9485}\x{9486}\x{9487}\x{9488}\x{9489}\x{948A}\x{948B}\x{948C}' . '\x{948D}\x{948E}\x{948F}\x{9490}\x{9491}\x{9492}\x{9493}\x{9494}\x{9495}' . '\x{9496}\x{9497}\x{9498}\x{9499}\x{949A}\x{949B}\x{949C}\x{949D}\x{949E}' . '\x{949F}\x{94A0}\x{94A1}\x{94A2}\x{94A3}\x{94A4}\x{94A5}\x{94A6}\x{94A7}' . '\x{94A8}\x{94A9}\x{94AA}\x{94AB}\x{94AC}\x{94AD}\x{94AE}\x{94AF}\x{94B0}' . '\x{94B1}\x{94B2}\x{94B3}\x{94B4}\x{94B5}\x{94B6}\x{94B7}\x{94B8}\x{94B9}' . '\x{94BA}\x{94BB}\x{94BC}\x{94BD}\x{94BE}\x{94BF}\x{94C0}\x{94C1}\x{94C2}' . '\x{94C3}\x{94C4}\x{94C5}\x{94C6}\x{94C7}\x{94C8}\x{94C9}\x{94CA}\x{94CB}' . '\x{94CC}\x{94CD}\x{94CE}\x{94CF}\x{94D0}\x{94D1}\x{94D2}\x{94D3}\x{94D4}' . '\x{94D5}\x{94D6}\x{94D7}\x{94D8}\x{94D9}\x{94DA}\x{94DB}\x{94DC}\x{94DD}' . '\x{94DE}\x{94DF}\x{94E0}\x{94E1}\x{94E2}\x{94E3}\x{94E4}\x{94E5}\x{94E6}' . '\x{94E7}\x{94E8}\x{94E9}\x{94EA}\x{94EB}\x{94EC}\x{94ED}\x{94EE}\x{94EF}' . '\x{94F0}\x{94F1}\x{94F2}\x{94F3}\x{94F4}\x{94F5}\x{94F6}\x{94F7}\x{94F8}' . '\x{94F9}\x{94FA}\x{94FB}\x{94FC}\x{94FD}\x{94FE}\x{94FF}\x{9500}\x{9501}' . '\x{9502}\x{9503}\x{9504}\x{9505}\x{9506}\x{9507}\x{9508}\x{9509}\x{950A}' . '\x{950B}\x{950C}\x{950D}\x{950E}\x{950F}\x{9510}\x{9511}\x{9512}\x{9513}' . '\x{9514}\x{9515}\x{9516}\x{9517}\x{9518}\x{9519}\x{951A}\x{951B}\x{951C}' . '\x{951D}\x{951E}\x{951F}\x{9520}\x{9521}\x{9522}\x{9523}\x{9524}\x{9525}' . '\x{9526}\x{9527}\x{9528}\x{9529}\x{952A}\x{952B}\x{952C}\x{952D}\x{952E}' . '\x{952F}\x{9530}\x{9531}\x{9532}\x{9533}\x{9534}\x{9535}\x{9536}\x{9537}' . '\x{9538}\x{9539}\x{953A}\x{953B}\x{953C}\x{953D}\x{953E}\x{953F}\x{9540}' . '\x{9541}\x{9542}\x{9543}\x{9544}\x{9545}\x{9546}\x{9547}\x{9548}\x{9549}' . '\x{954A}\x{954B}\x{954C}\x{954D}\x{954E}\x{954F}\x{9550}\x{9551}\x{9552}' . '\x{9553}\x{9554}\x{9555}\x{9556}\x{9557}\x{9558}\x{9559}\x{955A}\x{955B}' . '\x{955C}\x{955D}\x{955E}\x{955F}\x{9560}\x{9561}\x{9562}\x{9563}\x{9564}' . '\x{9565}\x{9566}\x{9567}\x{9568}\x{9569}\x{956A}\x{956B}\x{956C}\x{956D}' . '\x{956E}\x{956F}\x{9570}\x{9571}\x{9572}\x{9573}\x{9574}\x{9575}\x{9576}' . '\x{9577}\x{957A}\x{957B}\x{957C}\x{957D}\x{957F}\x{9580}\x{9581}\x{9582}' . '\x{9583}\x{9584}\x{9586}\x{9587}\x{9588}\x{9589}\x{958A}\x{958B}\x{958C}' . '\x{958D}\x{958E}\x{958F}\x{9590}\x{9591}\x{9592}\x{9593}\x{9594}\x{9595}' . '\x{9596}\x{9598}\x{9599}\x{959A}\x{959B}\x{959C}\x{959D}\x{959E}\x{959F}' . '\x{95A1}\x{95A2}\x{95A3}\x{95A4}\x{95A5}\x{95A6}\x{95A7}\x{95A8}\x{95A9}' . '\x{95AA}\x{95AB}\x{95AC}\x{95AD}\x{95AE}\x{95AF}\x{95B0}\x{95B1}\x{95B2}' . '\x{95B5}\x{95B6}\x{95B7}\x{95B9}\x{95BA}\x{95BB}\x{95BC}\x{95BD}\x{95BE}' . '\x{95BF}\x{95C0}\x{95C2}\x{95C3}\x{95C4}\x{95C5}\x{95C6}\x{95C7}\x{95C8}' . '\x{95C9}\x{95CA}\x{95CB}\x{95CC}\x{95CD}\x{95CE}\x{95CF}\x{95D0}\x{95D1}' . '\x{95D2}\x{95D3}\x{95D4}\x{95D5}\x{95D6}\x{95D7}\x{95D8}\x{95DA}\x{95DB}' . '\x{95DC}\x{95DE}\x{95DF}\x{95E0}\x{95E1}\x{95E2}\x{95E3}\x{95E4}\x{95E5}' . '\x{95E6}\x{95E7}\x{95E8}\x{95E9}\x{95EA}\x{95EB}\x{95EC}\x{95ED}\x{95EE}' . '\x{95EF}\x{95F0}\x{95F1}\x{95F2}\x{95F3}\x{95F4}\x{95F5}\x{95F6}\x{95F7}' . '\x{95F8}\x{95F9}\x{95FA}\x{95FB}\x{95FC}\x{95FD}\x{95FE}\x{95FF}\x{9600}' . '\x{9601}\x{9602}\x{9603}\x{9604}\x{9605}\x{9606}\x{9607}\x{9608}\x{9609}' . '\x{960A}\x{960B}\x{960C}\x{960D}\x{960E}\x{960F}\x{9610}\x{9611}\x{9612}' . '\x{9613}\x{9614}\x{9615}\x{9616}\x{9617}\x{9618}\x{9619}\x{961A}\x{961B}' . '\x{961C}\x{961D}\x{961E}\x{961F}\x{9620}\x{9621}\x{9622}\x{9623}\x{9624}' . '\x{9627}\x{9628}\x{962A}\x{962B}\x{962C}\x{962D}\x{962E}\x{962F}\x{9630}' . '\x{9631}\x{9632}\x{9633}\x{9634}\x{9635}\x{9636}\x{9637}\x{9638}\x{9639}' . '\x{963A}\x{963B}\x{963C}\x{963D}\x{963F}\x{9640}\x{9641}\x{9642}\x{9643}' . '\x{9644}\x{9645}\x{9646}\x{9647}\x{9648}\x{9649}\x{964A}\x{964B}\x{964C}' . '\x{964D}\x{964E}\x{964F}\x{9650}\x{9651}\x{9652}\x{9653}\x{9654}\x{9655}' . '\x{9658}\x{9659}\x{965A}\x{965B}\x{965C}\x{965D}\x{965E}\x{965F}\x{9660}' . '\x{9661}\x{9662}\x{9663}\x{9664}\x{9666}\x{9667}\x{9668}\x{9669}\x{966A}' . '\x{966B}\x{966C}\x{966D}\x{966E}\x{966F}\x{9670}\x{9671}\x{9672}\x{9673}' . '\x{9674}\x{9675}\x{9676}\x{9677}\x{9678}\x{967C}\x{967D}\x{967E}\x{9680}' . '\x{9683}\x{9684}\x{9685}\x{9686}\x{9687}\x{9688}\x{9689}\x{968A}\x{968B}' . '\x{968D}\x{968E}\x{968F}\x{9690}\x{9691}\x{9692}\x{9693}\x{9694}\x{9695}' . '\x{9697}\x{9698}\x{9699}\x{969B}\x{969C}\x{969E}\x{96A0}\x{96A1}\x{96A2}' . '\x{96A3}\x{96A4}\x{96A5}\x{96A6}\x{96A7}\x{96A8}\x{96A9}\x{96AA}\x{96AC}' . '\x{96AD}\x{96AE}\x{96B0}\x{96B1}\x{96B3}\x{96B4}\x{96B6}\x{96B7}\x{96B8}' . '\x{96B9}\x{96BA}\x{96BB}\x{96BC}\x{96BD}\x{96BE}\x{96BF}\x{96C0}\x{96C1}' . '\x{96C2}\x{96C3}\x{96C4}\x{96C5}\x{96C6}\x{96C7}\x{96C8}\x{96C9}\x{96CA}' . '\x{96CB}\x{96CC}\x{96CD}\x{96CE}\x{96CF}\x{96D0}\x{96D1}\x{96D2}\x{96D3}' . '\x{96D4}\x{96D5}\x{96D6}\x{96D7}\x{96D8}\x{96D9}\x{96DA}\x{96DB}\x{96DC}' . '\x{96DD}\x{96DE}\x{96DF}\x{96E0}\x{96E1}\x{96E2}\x{96E3}\x{96E5}\x{96E8}' . '\x{96E9}\x{96EA}\x{96EB}\x{96EC}\x{96ED}\x{96EE}\x{96EF}\x{96F0}\x{96F1}' . '\x{96F2}\x{96F3}\x{96F4}\x{96F5}\x{96F6}\x{96F7}\x{96F8}\x{96F9}\x{96FA}' . '\x{96FB}\x{96FD}\x{96FE}\x{96FF}\x{9700}\x{9701}\x{9702}\x{9703}\x{9704}' . '\x{9705}\x{9706}\x{9707}\x{9708}\x{9709}\x{970A}\x{970B}\x{970C}\x{970D}' . '\x{970E}\x{970F}\x{9710}\x{9711}\x{9712}\x{9713}\x{9715}\x{9716}\x{9718}' . '\x{9719}\x{971C}\x{971D}\x{971E}\x{971F}\x{9720}\x{9721}\x{9722}\x{9723}' . '\x{9724}\x{9725}\x{9726}\x{9727}\x{9728}\x{9729}\x{972A}\x{972B}\x{972C}' . '\x{972D}\x{972E}\x{972F}\x{9730}\x{9731}\x{9732}\x{9735}\x{9736}\x{9738}' . '\x{9739}\x{973A}\x{973B}\x{973C}\x{973D}\x{973E}\x{973F}\x{9742}\x{9743}' . '\x{9744}\x{9745}\x{9746}\x{9747}\x{9748}\x{9749}\x{974A}\x{974B}\x{974C}' . '\x{974E}\x{974F}\x{9750}\x{9751}\x{9752}\x{9753}\x{9754}\x{9755}\x{9756}' . '\x{9758}\x{9759}\x{975A}\x{975B}\x{975C}\x{975D}\x{975E}\x{975F}\x{9760}' . '\x{9761}\x{9762}\x{9765}\x{9766}\x{9767}\x{9768}\x{9769}\x{976A}\x{976B}' . '\x{976C}\x{976D}\x{976E}\x{976F}\x{9770}\x{9772}\x{9773}\x{9774}\x{9776}' . '\x{9777}\x{9778}\x{9779}\x{977A}\x{977B}\x{977C}\x{977D}\x{977E}\x{977F}' . '\x{9780}\x{9781}\x{9782}\x{9783}\x{9784}\x{9785}\x{9786}\x{9788}\x{978A}' . '\x{978B}\x{978C}\x{978D}\x{978E}\x{978F}\x{9790}\x{9791}\x{9792}\x{9793}' . '\x{9794}\x{9795}\x{9796}\x{9797}\x{9798}\x{9799}\x{979A}\x{979C}\x{979D}' . '\x{979E}\x{979F}\x{97A0}\x{97A1}\x{97A2}\x{97A3}\x{97A4}\x{97A5}\x{97A6}' . '\x{97A7}\x{97A8}\x{97AA}\x{97AB}\x{97AC}\x{97AD}\x{97AE}\x{97AF}\x{97B2}' . '\x{97B3}\x{97B4}\x{97B6}\x{97B7}\x{97B8}\x{97B9}\x{97BA}\x{97BB}\x{97BC}' . '\x{97BD}\x{97BF}\x{97C1}\x{97C2}\x{97C3}\x{97C4}\x{97C5}\x{97C6}\x{97C7}' . '\x{97C8}\x{97C9}\x{97CA}\x{97CB}\x{97CC}\x{97CD}\x{97CE}\x{97CF}\x{97D0}' . '\x{97D1}\x{97D3}\x{97D4}\x{97D5}\x{97D6}\x{97D7}\x{97D8}\x{97D9}\x{97DA}' . '\x{97DB}\x{97DC}\x{97DD}\x{97DE}\x{97DF}\x{97E0}\x{97E1}\x{97E2}\x{97E3}' . '\x{97E4}\x{97E5}\x{97E6}\x{97E7}\x{97E8}\x{97E9}\x{97EA}\x{97EB}\x{97EC}' . '\x{97ED}\x{97EE}\x{97EF}\x{97F0}\x{97F1}\x{97F2}\x{97F3}\x{97F4}\x{97F5}' . '\x{97F6}\x{97F7}\x{97F8}\x{97F9}\x{97FA}\x{97FB}\x{97FD}\x{97FE}\x{97FF}' . '\x{9800}\x{9801}\x{9802}\x{9803}\x{9804}\x{9805}\x{9806}\x{9807}\x{9808}' . '\x{9809}\x{980A}\x{980B}\x{980C}\x{980D}\x{980E}\x{980F}\x{9810}\x{9811}' . '\x{9812}\x{9813}\x{9814}\x{9815}\x{9816}\x{9817}\x{9818}\x{9819}\x{981A}' . '\x{981B}\x{981C}\x{981D}\x{981E}\x{9820}\x{9821}\x{9822}\x{9823}\x{9824}' . '\x{9826}\x{9827}\x{9828}\x{9829}\x{982B}\x{982D}\x{982E}\x{982F}\x{9830}' . '\x{9831}\x{9832}\x{9834}\x{9835}\x{9836}\x{9837}\x{9838}\x{9839}\x{983B}' . '\x{983C}\x{983D}\x{983F}\x{9840}\x{9841}\x{9843}\x{9844}\x{9845}\x{9846}' . '\x{9848}\x{9849}\x{984A}\x{984C}\x{984D}\x{984E}\x{984F}\x{9850}\x{9851}' . '\x{9852}\x{9853}\x{9854}\x{9855}\x{9857}\x{9858}\x{9859}\x{985A}\x{985B}' . '\x{985C}\x{985D}\x{985E}\x{985F}\x{9860}\x{9861}\x{9862}\x{9863}\x{9864}' . '\x{9865}\x{9867}\x{9869}\x{986A}\x{986B}\x{986C}\x{986D}\x{986E}\x{986F}' . '\x{9870}\x{9871}\x{9872}\x{9873}\x{9874}\x{9875}\x{9876}\x{9877}\x{9878}' . '\x{9879}\x{987A}\x{987B}\x{987C}\x{987D}\x{987E}\x{987F}\x{9880}\x{9881}' . '\x{9882}\x{9883}\x{9884}\x{9885}\x{9886}\x{9887}\x{9888}\x{9889}\x{988A}' . '\x{988B}\x{988C}\x{988D}\x{988E}\x{988F}\x{9890}\x{9891}\x{9892}\x{9893}' . '\x{9894}\x{9895}\x{9896}\x{9897}\x{9898}\x{9899}\x{989A}\x{989B}\x{989C}' . '\x{989D}\x{989E}\x{989F}\x{98A0}\x{98A1}\x{98A2}\x{98A3}\x{98A4}\x{98A5}' . '\x{98A6}\x{98A7}\x{98A8}\x{98A9}\x{98AA}\x{98AB}\x{98AC}\x{98AD}\x{98AE}' . '\x{98AF}\x{98B0}\x{98B1}\x{98B2}\x{98B3}\x{98B4}\x{98B5}\x{98B6}\x{98B8}' . '\x{98B9}\x{98BA}\x{98BB}\x{98BC}\x{98BD}\x{98BE}\x{98BF}\x{98C0}\x{98C1}' . '\x{98C2}\x{98C3}\x{98C4}\x{98C5}\x{98C6}\x{98C8}\x{98C9}\x{98CB}\x{98CC}' . '\x{98CD}\x{98CE}\x{98CF}\x{98D0}\x{98D1}\x{98D2}\x{98D3}\x{98D4}\x{98D5}' . '\x{98D6}\x{98D7}\x{98D8}\x{98D9}\x{98DA}\x{98DB}\x{98DC}\x{98DD}\x{98DE}' . '\x{98DF}\x{98E0}\x{98E2}\x{98E3}\x{98E5}\x{98E6}\x{98E7}\x{98E8}\x{98E9}' . '\x{98EA}\x{98EB}\x{98ED}\x{98EF}\x{98F0}\x{98F2}\x{98F3}\x{98F4}\x{98F5}' . '\x{98F6}\x{98F7}\x{98F9}\x{98FA}\x{98FC}\x{98FD}\x{98FE}\x{98FF}\x{9900}' . '\x{9901}\x{9902}\x{9903}\x{9904}\x{9905}\x{9906}\x{9907}\x{9908}\x{9909}' . '\x{990A}\x{990B}\x{990C}\x{990D}\x{990E}\x{990F}\x{9910}\x{9911}\x{9912}' . '\x{9913}\x{9914}\x{9915}\x{9916}\x{9917}\x{9918}\x{991A}\x{991B}\x{991C}' . '\x{991D}\x{991E}\x{991F}\x{9920}\x{9921}\x{9922}\x{9923}\x{9924}\x{9925}' . '\x{9926}\x{9927}\x{9928}\x{9929}\x{992A}\x{992B}\x{992C}\x{992D}\x{992E}' . '\x{992F}\x{9930}\x{9931}\x{9932}\x{9933}\x{9934}\x{9935}\x{9936}\x{9937}' . '\x{9938}\x{9939}\x{993A}\x{993C}\x{993D}\x{993E}\x{993F}\x{9940}\x{9941}' . '\x{9942}\x{9943}\x{9945}\x{9946}\x{9947}\x{9948}\x{9949}\x{994A}\x{994B}' . '\x{994C}\x{994E}\x{994F}\x{9950}\x{9951}\x{9952}\x{9953}\x{9954}\x{9955}' . '\x{9956}\x{9957}\x{9958}\x{9959}\x{995B}\x{995C}\x{995E}\x{995F}\x{9960}' . '\x{9961}\x{9962}\x{9963}\x{9964}\x{9965}\x{9966}\x{9967}\x{9968}\x{9969}' . '\x{996A}\x{996B}\x{996C}\x{996D}\x{996E}\x{996F}\x{9970}\x{9971}\x{9972}' . '\x{9973}\x{9974}\x{9975}\x{9976}\x{9977}\x{9978}\x{9979}\x{997A}\x{997B}' . '\x{997C}\x{997D}\x{997E}\x{997F}\x{9980}\x{9981}\x{9982}\x{9983}\x{9984}' . '\x{9985}\x{9986}\x{9987}\x{9988}\x{9989}\x{998A}\x{998B}\x{998C}\x{998D}' . '\x{998E}\x{998F}\x{9990}\x{9991}\x{9992}\x{9993}\x{9994}\x{9995}\x{9996}' . '\x{9997}\x{9998}\x{9999}\x{999A}\x{999B}\x{999C}\x{999D}\x{999E}\x{999F}' . '\x{99A0}\x{99A1}\x{99A2}\x{99A3}\x{99A4}\x{99A5}\x{99A6}\x{99A7}\x{99A8}' . '\x{99A9}\x{99AA}\x{99AB}\x{99AC}\x{99AD}\x{99AE}\x{99AF}\x{99B0}\x{99B1}' . '\x{99B2}\x{99B3}\x{99B4}\x{99B5}\x{99B6}\x{99B7}\x{99B8}\x{99B9}\x{99BA}' . '\x{99BB}\x{99BC}\x{99BD}\x{99BE}\x{99C0}\x{99C1}\x{99C2}\x{99C3}\x{99C4}' . '\x{99C6}\x{99C7}\x{99C8}\x{99C9}\x{99CA}\x{99CB}\x{99CC}\x{99CD}\x{99CE}' . '\x{99CF}\x{99D0}\x{99D1}\x{99D2}\x{99D3}\x{99D4}\x{99D5}\x{99D6}\x{99D7}' . '\x{99D8}\x{99D9}\x{99DA}\x{99DB}\x{99DC}\x{99DD}\x{99DE}\x{99DF}\x{99E1}' . '\x{99E2}\x{99E3}\x{99E4}\x{99E5}\x{99E7}\x{99E8}\x{99E9}\x{99EA}\x{99EC}' . '\x{99ED}\x{99EE}\x{99EF}\x{99F0}\x{99F1}\x{99F2}\x{99F3}\x{99F4}\x{99F6}' . '\x{99F7}\x{99F8}\x{99F9}\x{99FA}\x{99FB}\x{99FC}\x{99FD}\x{99FE}\x{99FF}' . '\x{9A00}\x{9A01}\x{9A02}\x{9A03}\x{9A04}\x{9A05}\x{9A06}\x{9A07}\x{9A08}' . '\x{9A09}\x{9A0A}\x{9A0B}\x{9A0C}\x{9A0D}\x{9A0E}\x{9A0F}\x{9A11}\x{9A14}' . '\x{9A15}\x{9A16}\x{9A19}\x{9A1A}\x{9A1B}\x{9A1C}\x{9A1D}\x{9A1E}\x{9A1F}' . '\x{9A20}\x{9A21}\x{9A22}\x{9A23}\x{9A24}\x{9A25}\x{9A26}\x{9A27}\x{9A29}' . '\x{9A2A}\x{9A2B}\x{9A2C}\x{9A2D}\x{9A2E}\x{9A2F}\x{9A30}\x{9A31}\x{9A32}' . '\x{9A33}\x{9A34}\x{9A35}\x{9A36}\x{9A37}\x{9A38}\x{9A39}\x{9A3A}\x{9A3C}' . '\x{9A3D}\x{9A3E}\x{9A3F}\x{9A40}\x{9A41}\x{9A42}\x{9A43}\x{9A44}\x{9A45}' . '\x{9A46}\x{9A47}\x{9A48}\x{9A49}\x{9A4A}\x{9A4B}\x{9A4C}\x{9A4D}\x{9A4E}' . '\x{9A4F}\x{9A50}\x{9A52}\x{9A53}\x{9A54}\x{9A55}\x{9A56}\x{9A57}\x{9A59}' . '\x{9A5A}\x{9A5B}\x{9A5C}\x{9A5E}\x{9A5F}\x{9A60}\x{9A61}\x{9A62}\x{9A64}' . '\x{9A65}\x{9A66}\x{9A67}\x{9A68}\x{9A69}\x{9A6A}\x{9A6B}\x{9A6C}\x{9A6D}' . '\x{9A6E}\x{9A6F}\x{9A70}\x{9A71}\x{9A72}\x{9A73}\x{9A74}\x{9A75}\x{9A76}' . '\x{9A77}\x{9A78}\x{9A79}\x{9A7A}\x{9A7B}\x{9A7C}\x{9A7D}\x{9A7E}\x{9A7F}' . '\x{9A80}\x{9A81}\x{9A82}\x{9A83}\x{9A84}\x{9A85}\x{9A86}\x{9A87}\x{9A88}' . '\x{9A89}\x{9A8A}\x{9A8B}\x{9A8C}\x{9A8D}\x{9A8E}\x{9A8F}\x{9A90}\x{9A91}' . '\x{9A92}\x{9A93}\x{9A94}\x{9A95}\x{9A96}\x{9A97}\x{9A98}\x{9A99}\x{9A9A}' . '\x{9A9B}\x{9A9C}\x{9A9D}\x{9A9E}\x{9A9F}\x{9AA0}\x{9AA1}\x{9AA2}\x{9AA3}' . '\x{9AA4}\x{9AA5}\x{9AA6}\x{9AA7}\x{9AA8}\x{9AAA}\x{9AAB}\x{9AAC}\x{9AAD}' . '\x{9AAE}\x{9AAF}\x{9AB0}\x{9AB1}\x{9AB2}\x{9AB3}\x{9AB4}\x{9AB5}\x{9AB6}' . '\x{9AB7}\x{9AB8}\x{9AB9}\x{9ABA}\x{9ABB}\x{9ABC}\x{9ABE}\x{9ABF}\x{9AC0}' . '\x{9AC1}\x{9AC2}\x{9AC3}\x{9AC4}\x{9AC5}\x{9AC6}\x{9AC7}\x{9AC9}\x{9ACA}' . '\x{9ACB}\x{9ACC}\x{9ACD}\x{9ACE}\x{9ACF}\x{9AD0}\x{9AD1}\x{9AD2}\x{9AD3}' . '\x{9AD4}\x{9AD5}\x{9AD6}\x{9AD8}\x{9AD9}\x{9ADA}\x{9ADB}\x{9ADC}\x{9ADD}' . '\x{9ADE}\x{9ADF}\x{9AE1}\x{9AE2}\x{9AE3}\x{9AE5}\x{9AE6}\x{9AE7}\x{9AEA}' . '\x{9AEB}\x{9AEC}\x{9AED}\x{9AEE}\x{9AEF}\x{9AF1}\x{9AF2}\x{9AF3}\x{9AF4}' . '\x{9AF5}\x{9AF6}\x{9AF7}\x{9AF8}\x{9AF9}\x{9AFA}\x{9AFB}\x{9AFC}\x{9AFD}' . '\x{9AFE}\x{9AFF}\x{9B01}\x{9B03}\x{9B04}\x{9B05}\x{9B06}\x{9B07}\x{9B08}' . '\x{9B0A}\x{9B0B}\x{9B0C}\x{9B0D}\x{9B0E}\x{9B0F}\x{9B10}\x{9B11}\x{9B12}' . '\x{9B13}\x{9B15}\x{9B16}\x{9B17}\x{9B18}\x{9B19}\x{9B1A}\x{9B1C}\x{9B1D}' . '\x{9B1E}\x{9B1F}\x{9B20}\x{9B21}\x{9B22}\x{9B23}\x{9B24}\x{9B25}\x{9B26}' . '\x{9B27}\x{9B28}\x{9B29}\x{9B2A}\x{9B2B}\x{9B2C}\x{9B2D}\x{9B2E}\x{9B2F}' . '\x{9B30}\x{9B31}\x{9B32}\x{9B33}\x{9B35}\x{9B36}\x{9B37}\x{9B38}\x{9B39}' . '\x{9B3A}\x{9B3B}\x{9B3C}\x{9B3E}\x{9B3F}\x{9B41}\x{9B42}\x{9B43}\x{9B44}' . '\x{9B45}\x{9B46}\x{9B47}\x{9B48}\x{9B49}\x{9B4A}\x{9B4B}\x{9B4C}\x{9B4D}' . '\x{9B4E}\x{9B4F}\x{9B51}\x{9B52}\x{9B53}\x{9B54}\x{9B55}\x{9B56}\x{9B58}' . '\x{9B59}\x{9B5A}\x{9B5B}\x{9B5C}\x{9B5D}\x{9B5E}\x{9B5F}\x{9B60}\x{9B61}' . '\x{9B63}\x{9B64}\x{9B65}\x{9B66}\x{9B67}\x{9B68}\x{9B69}\x{9B6A}\x{9B6B}' . '\x{9B6C}\x{9B6D}\x{9B6E}\x{9B6F}\x{9B70}\x{9B71}\x{9B73}\x{9B74}\x{9B75}' . '\x{9B76}\x{9B77}\x{9B78}\x{9B79}\x{9B7A}\x{9B7B}\x{9B7C}\x{9B7D}\x{9B7E}' . '\x{9B7F}\x{9B80}\x{9B81}\x{9B82}\x{9B83}\x{9B84}\x{9B85}\x{9B86}\x{9B87}' . '\x{9B88}\x{9B8A}\x{9B8B}\x{9B8D}\x{9B8E}\x{9B8F}\x{9B90}\x{9B91}\x{9B92}' . '\x{9B93}\x{9B94}\x{9B95}\x{9B96}\x{9B97}\x{9B98}\x{9B9A}\x{9B9B}\x{9B9C}' . '\x{9B9D}\x{9B9E}\x{9B9F}\x{9BA0}\x{9BA1}\x{9BA2}\x{9BA3}\x{9BA4}\x{9BA5}' . '\x{9BA6}\x{9BA7}\x{9BA8}\x{9BA9}\x{9BAA}\x{9BAB}\x{9BAC}\x{9BAD}\x{9BAE}' . '\x{9BAF}\x{9BB0}\x{9BB1}\x{9BB2}\x{9BB3}\x{9BB4}\x{9BB5}\x{9BB6}\x{9BB7}' . '\x{9BB8}\x{9BB9}\x{9BBA}\x{9BBB}\x{9BBC}\x{9BBD}\x{9BBE}\x{9BBF}\x{9BC0}' . '\x{9BC1}\x{9BC3}\x{9BC4}\x{9BC5}\x{9BC6}\x{9BC7}\x{9BC8}\x{9BC9}\x{9BCA}' . '\x{9BCB}\x{9BCC}\x{9BCD}\x{9BCE}\x{9BCF}\x{9BD0}\x{9BD1}\x{9BD2}\x{9BD3}' . '\x{9BD4}\x{9BD5}\x{9BD6}\x{9BD7}\x{9BD8}\x{9BD9}\x{9BDA}\x{9BDB}\x{9BDC}' . '\x{9BDD}\x{9BDE}\x{9BDF}\x{9BE0}\x{9BE1}\x{9BE2}\x{9BE3}\x{9BE4}\x{9BE5}' . '\x{9BE6}\x{9BE7}\x{9BE8}\x{9BE9}\x{9BEA}\x{9BEB}\x{9BEC}\x{9BED}\x{9BEE}' . '\x{9BEF}\x{9BF0}\x{9BF1}\x{9BF2}\x{9BF3}\x{9BF4}\x{9BF5}\x{9BF7}\x{9BF8}' . '\x{9BF9}\x{9BFA}\x{9BFB}\x{9BFC}\x{9BFD}\x{9BFE}\x{9BFF}\x{9C02}\x{9C05}' . '\x{9C06}\x{9C07}\x{9C08}\x{9C09}\x{9C0A}\x{9C0B}\x{9C0C}\x{9C0D}\x{9C0E}' . '\x{9C0F}\x{9C10}\x{9C11}\x{9C12}\x{9C13}\x{9C14}\x{9C15}\x{9C16}\x{9C17}' . '\x{9C18}\x{9C19}\x{9C1A}\x{9C1B}\x{9C1C}\x{9C1D}\x{9C1E}\x{9C1F}\x{9C20}' . '\x{9C21}\x{9C22}\x{9C23}\x{9C24}\x{9C25}\x{9C26}\x{9C27}\x{9C28}\x{9C29}' . '\x{9C2A}\x{9C2B}\x{9C2C}\x{9C2D}\x{9C2F}\x{9C30}\x{9C31}\x{9C32}\x{9C33}' . '\x{9C34}\x{9C35}\x{9C36}\x{9C37}\x{9C38}\x{9C39}\x{9C3A}\x{9C3B}\x{9C3C}' . '\x{9C3D}\x{9C3E}\x{9C3F}\x{9C40}\x{9C41}\x{9C43}\x{9C44}\x{9C45}\x{9C46}' . '\x{9C47}\x{9C48}\x{9C49}\x{9C4A}\x{9C4B}\x{9C4C}\x{9C4D}\x{9C4E}\x{9C50}' . '\x{9C52}\x{9C53}\x{9C54}\x{9C55}\x{9C56}\x{9C57}\x{9C58}\x{9C59}\x{9C5A}' . '\x{9C5B}\x{9C5C}\x{9C5D}\x{9C5E}\x{9C5F}\x{9C60}\x{9C62}\x{9C63}\x{9C65}' . '\x{9C66}\x{9C67}\x{9C68}\x{9C69}\x{9C6A}\x{9C6B}\x{9C6C}\x{9C6D}\x{9C6E}' . '\x{9C6F}\x{9C70}\x{9C71}\x{9C72}\x{9C73}\x{9C74}\x{9C75}\x{9C77}\x{9C78}' . '\x{9C79}\x{9C7A}\x{9C7C}\x{9C7D}\x{9C7E}\x{9C7F}\x{9C80}\x{9C81}\x{9C82}' . '\x{9C83}\x{9C84}\x{9C85}\x{9C86}\x{9C87}\x{9C88}\x{9C89}\x{9C8A}\x{9C8B}' . '\x{9C8C}\x{9C8D}\x{9C8E}\x{9C8F}\x{9C90}\x{9C91}\x{9C92}\x{9C93}\x{9C94}' . '\x{9C95}\x{9C96}\x{9C97}\x{9C98}\x{9C99}\x{9C9A}\x{9C9B}\x{9C9C}\x{9C9D}' . '\x{9C9E}\x{9C9F}\x{9CA0}\x{9CA1}\x{9CA2}\x{9CA3}\x{9CA4}\x{9CA5}\x{9CA6}' . '\x{9CA7}\x{9CA8}\x{9CA9}\x{9CAA}\x{9CAB}\x{9CAC}\x{9CAD}\x{9CAE}\x{9CAF}' . '\x{9CB0}\x{9CB1}\x{9CB2}\x{9CB3}\x{9CB4}\x{9CB5}\x{9CB6}\x{9CB7}\x{9CB8}' . '\x{9CB9}\x{9CBA}\x{9CBB}\x{9CBC}\x{9CBD}\x{9CBE}\x{9CBF}\x{9CC0}\x{9CC1}' . '\x{9CC2}\x{9CC3}\x{9CC4}\x{9CC5}\x{9CC6}\x{9CC7}\x{9CC8}\x{9CC9}\x{9CCA}' . '\x{9CCB}\x{9CCC}\x{9CCD}\x{9CCE}\x{9CCF}\x{9CD0}\x{9CD1}\x{9CD2}\x{9CD3}' . '\x{9CD4}\x{9CD5}\x{9CD6}\x{9CD7}\x{9CD8}\x{9CD9}\x{9CDA}\x{9CDB}\x{9CDC}' . '\x{9CDD}\x{9CDE}\x{9CDF}\x{9CE0}\x{9CE1}\x{9CE2}\x{9CE3}\x{9CE4}\x{9CE5}' . '\x{9CE6}\x{9CE7}\x{9CE8}\x{9CE9}\x{9CEA}\x{9CEB}\x{9CEC}\x{9CED}\x{9CEE}' . '\x{9CEF}\x{9CF0}\x{9CF1}\x{9CF2}\x{9CF3}\x{9CF4}\x{9CF5}\x{9CF6}\x{9CF7}' . '\x{9CF8}\x{9CF9}\x{9CFA}\x{9CFB}\x{9CFC}\x{9CFD}\x{9CFE}\x{9CFF}\x{9D00}' . '\x{9D01}\x{9D02}\x{9D03}\x{9D04}\x{9D05}\x{9D06}\x{9D07}\x{9D08}\x{9D09}' . '\x{9D0A}\x{9D0B}\x{9D0F}\x{9D10}\x{9D12}\x{9D13}\x{9D14}\x{9D15}\x{9D16}' . '\x{9D17}\x{9D18}\x{9D19}\x{9D1A}\x{9D1B}\x{9D1C}\x{9D1D}\x{9D1E}\x{9D1F}' . '\x{9D20}\x{9D21}\x{9D22}\x{9D23}\x{9D24}\x{9D25}\x{9D26}\x{9D28}\x{9D29}' . '\x{9D2B}\x{9D2D}\x{9D2E}\x{9D2F}\x{9D30}\x{9D31}\x{9D32}\x{9D33}\x{9D34}' . '\x{9D36}\x{9D37}\x{9D38}\x{9D39}\x{9D3A}\x{9D3B}\x{9D3D}\x{9D3E}\x{9D3F}' . '\x{9D40}\x{9D41}\x{9D42}\x{9D43}\x{9D45}\x{9D46}\x{9D47}\x{9D48}\x{9D49}' . '\x{9D4A}\x{9D4B}\x{9D4C}\x{9D4D}\x{9D4E}\x{9D4F}\x{9D50}\x{9D51}\x{9D52}' . '\x{9D53}\x{9D54}\x{9D55}\x{9D56}\x{9D57}\x{9D58}\x{9D59}\x{9D5A}\x{9D5B}' . '\x{9D5C}\x{9D5D}\x{9D5E}\x{9D5F}\x{9D60}\x{9D61}\x{9D62}\x{9D63}\x{9D64}' . '\x{9D65}\x{9D66}\x{9D67}\x{9D68}\x{9D69}\x{9D6A}\x{9D6B}\x{9D6C}\x{9D6E}' . '\x{9D6F}\x{9D70}\x{9D71}\x{9D72}\x{9D73}\x{9D74}\x{9D75}\x{9D76}\x{9D77}' . '\x{9D78}\x{9D79}\x{9D7A}\x{9D7B}\x{9D7C}\x{9D7D}\x{9D7E}\x{9D7F}\x{9D80}' . '\x{9D81}\x{9D82}\x{9D83}\x{9D84}\x{9D85}\x{9D86}\x{9D87}\x{9D88}\x{9D89}' . '\x{9D8A}\x{9D8B}\x{9D8C}\x{9D8D}\x{9D8E}\x{9D90}\x{9D91}\x{9D92}\x{9D93}' . '\x{9D94}\x{9D96}\x{9D97}\x{9D98}\x{9D99}\x{9D9A}\x{9D9B}\x{9D9C}\x{9D9D}' . '\x{9D9E}\x{9D9F}\x{9DA0}\x{9DA1}\x{9DA2}\x{9DA3}\x{9DA4}\x{9DA5}\x{9DA6}' . '\x{9DA7}\x{9DA8}\x{9DA9}\x{9DAA}\x{9DAB}\x{9DAC}\x{9DAD}\x{9DAF}\x{9DB0}' . '\x{9DB1}\x{9DB2}\x{9DB3}\x{9DB4}\x{9DB5}\x{9DB6}\x{9DB7}\x{9DB8}\x{9DB9}' . '\x{9DBA}\x{9DBB}\x{9DBC}\x{9DBE}\x{9DBF}\x{9DC1}\x{9DC2}\x{9DC3}\x{9DC4}' . '\x{9DC5}\x{9DC7}\x{9DC8}\x{9DC9}\x{9DCA}\x{9DCB}\x{9DCC}\x{9DCD}\x{9DCE}' . '\x{9DCF}\x{9DD0}\x{9DD1}\x{9DD2}\x{9DD3}\x{9DD4}\x{9DD5}\x{9DD6}\x{9DD7}' . '\x{9DD8}\x{9DD9}\x{9DDA}\x{9DDB}\x{9DDC}\x{9DDD}\x{9DDE}\x{9DDF}\x{9DE0}' . '\x{9DE1}\x{9DE2}\x{9DE3}\x{9DE4}\x{9DE5}\x{9DE6}\x{9DE7}\x{9DE8}\x{9DE9}' . '\x{9DEB}\x{9DEC}\x{9DED}\x{9DEE}\x{9DEF}\x{9DF0}\x{9DF1}\x{9DF2}\x{9DF3}' . '\x{9DF4}\x{9DF5}\x{9DF6}\x{9DF7}\x{9DF8}\x{9DF9}\x{9DFA}\x{9DFB}\x{9DFD}' . '\x{9DFE}\x{9DFF}\x{9E00}\x{9E01}\x{9E02}\x{9E03}\x{9E04}\x{9E05}\x{9E06}' . '\x{9E07}\x{9E08}\x{9E09}\x{9E0A}\x{9E0B}\x{9E0C}\x{9E0D}\x{9E0F}\x{9E10}' . '\x{9E11}\x{9E12}\x{9E13}\x{9E14}\x{9E15}\x{9E17}\x{9E18}\x{9E19}\x{9E1A}' . '\x{9E1B}\x{9E1D}\x{9E1E}\x{9E1F}\x{9E20}\x{9E21}\x{9E22}\x{9E23}\x{9E24}' . '\x{9E25}\x{9E26}\x{9E27}\x{9E28}\x{9E29}\x{9E2A}\x{9E2B}\x{9E2C}\x{9E2D}' . '\x{9E2E}\x{9E2F}\x{9E30}\x{9E31}\x{9E32}\x{9E33}\x{9E34}\x{9E35}\x{9E36}' . '\x{9E37}\x{9E38}\x{9E39}\x{9E3A}\x{9E3B}\x{9E3C}\x{9E3D}\x{9E3E}\x{9E3F}' . '\x{9E40}\x{9E41}\x{9E42}\x{9E43}\x{9E44}\x{9E45}\x{9E46}\x{9E47}\x{9E48}' . '\x{9E49}\x{9E4A}\x{9E4B}\x{9E4C}\x{9E4D}\x{9E4E}\x{9E4F}\x{9E50}\x{9E51}' . '\x{9E52}\x{9E53}\x{9E54}\x{9E55}\x{9E56}\x{9E57}\x{9E58}\x{9E59}\x{9E5A}' . '\x{9E5B}\x{9E5C}\x{9E5D}\x{9E5E}\x{9E5F}\x{9E60}\x{9E61}\x{9E62}\x{9E63}' . '\x{9E64}\x{9E65}\x{9E66}\x{9E67}\x{9E68}\x{9E69}\x{9E6A}\x{9E6B}\x{9E6C}' . '\x{9E6D}\x{9E6E}\x{9E6F}\x{9E70}\x{9E71}\x{9E72}\x{9E73}\x{9E74}\x{9E75}' . '\x{9E76}\x{9E77}\x{9E79}\x{9E7A}\x{9E7C}\x{9E7D}\x{9E7E}\x{9E7F}\x{9E80}' . '\x{9E81}\x{9E82}\x{9E83}\x{9E84}\x{9E85}\x{9E86}\x{9E87}\x{9E88}\x{9E89}' . '\x{9E8A}\x{9E8B}\x{9E8C}\x{9E8D}\x{9E8E}\x{9E91}\x{9E92}\x{9E93}\x{9E94}' . '\x{9E96}\x{9E97}\x{9E99}\x{9E9A}\x{9E9B}\x{9E9C}\x{9E9D}\x{9E9F}\x{9EA0}' . '\x{9EA1}\x{9EA3}\x{9EA4}\x{9EA5}\x{9EA6}\x{9EA7}\x{9EA8}\x{9EA9}\x{9EAA}' . '\x{9EAD}\x{9EAE}\x{9EAF}\x{9EB0}\x{9EB2}\x{9EB3}\x{9EB4}\x{9EB5}\x{9EB6}' . '\x{9EB7}\x{9EB8}\x{9EBB}\x{9EBC}\x{9EBD}\x{9EBE}\x{9EBF}\x{9EC0}\x{9EC1}' . '\x{9EC2}\x{9EC3}\x{9EC4}\x{9EC5}\x{9EC6}\x{9EC7}\x{9EC8}\x{9EC9}\x{9ECA}' . '\x{9ECB}\x{9ECC}\x{9ECD}\x{9ECE}\x{9ECF}\x{9ED0}\x{9ED1}\x{9ED2}\x{9ED3}' . '\x{9ED4}\x{9ED5}\x{9ED6}\x{9ED7}\x{9ED8}\x{9ED9}\x{9EDA}\x{9EDB}\x{9EDC}' . '\x{9EDD}\x{9EDE}\x{9EDF}\x{9EE0}\x{9EE1}\x{9EE2}\x{9EE3}\x{9EE4}\x{9EE5}' . '\x{9EE6}\x{9EE7}\x{9EE8}\x{9EE9}\x{9EEA}\x{9EEB}\x{9EED}\x{9EEE}\x{9EEF}' . '\x{9EF0}\x{9EF2}\x{9EF3}\x{9EF4}\x{9EF5}\x{9EF6}\x{9EF7}\x{9EF8}\x{9EF9}' . '\x{9EFA}\x{9EFB}\x{9EFC}\x{9EFD}\x{9EFE}\x{9EFF}\x{9F00}\x{9F01}\x{9F02}' . '\x{9F04}\x{9F05}\x{9F06}\x{9F07}\x{9F08}\x{9F09}\x{9F0A}\x{9F0B}\x{9F0C}' . '\x{9F0D}\x{9F0E}\x{9F0F}\x{9F10}\x{9F12}\x{9F13}\x{9F15}\x{9F16}\x{9F17}' . '\x{9F18}\x{9F19}\x{9F1A}\x{9F1B}\x{9F1C}\x{9F1D}\x{9F1E}\x{9F1F}\x{9F20}' . '\x{9F22}\x{9F23}\x{9F24}\x{9F25}\x{9F27}\x{9F28}\x{9F29}\x{9F2A}\x{9F2B}' . '\x{9F2C}\x{9F2D}\x{9F2E}\x{9F2F}\x{9F30}\x{9F31}\x{9F32}\x{9F33}\x{9F34}' . '\x{9F35}\x{9F36}\x{9F37}\x{9F38}\x{9F39}\x{9F3A}\x{9F3B}\x{9F3C}\x{9F3D}' . '\x{9F3E}\x{9F3F}\x{9F40}\x{9F41}\x{9F42}\x{9F43}\x{9F44}\x{9F46}\x{9F47}' . '\x{9F48}\x{9F49}\x{9F4A}\x{9F4B}\x{9F4C}\x{9F4D}\x{9F4E}\x{9F4F}\x{9F50}' . '\x{9F51}\x{9F52}\x{9F54}\x{9F55}\x{9F56}\x{9F57}\x{9F58}\x{9F59}\x{9F5A}' . '\x{9F5B}\x{9F5C}\x{9F5D}\x{9F5E}\x{9F5F}\x{9F60}\x{9F61}\x{9F63}\x{9F64}' . '\x{9F65}\x{9F66}\x{9F67}\x{9F68}\x{9F69}\x{9F6A}\x{9F6B}\x{9F6C}\x{9F6E}' . '\x{9F6F}\x{9F70}\x{9F71}\x{9F72}\x{9F73}\x{9F74}\x{9F75}\x{9F76}\x{9F77}' . '\x{9F78}\x{9F79}\x{9F7A}\x{9F7B}\x{9F7C}\x{9F7D}\x{9F7E}\x{9F7F}\x{9F80}' . '\x{9F81}\x{9F82}\x{9F83}\x{9F84}\x{9F85}\x{9F86}\x{9F87}\x{9F88}\x{9F89}' . '\x{9F8A}\x{9F8B}\x{9F8C}\x{9F8D}\x{9F8E}\x{9F8F}\x{9F90}\x{9F91}\x{9F92}' . '\x{9F93}\x{9F94}\x{9F95}\x{9F96}\x{9F97}\x{9F98}\x{9F99}\x{9F9A}\x{9F9B}' . '\x{9F9C}\x{9F9D}\x{9F9E}\x{9F9F}\x{9FA0}\x{9FA2}\x{9FA4}\x{9FA5}]{1,20}$/iu', ); &lt;?php
 namespace Zend\Validator\Hostname; return array( 1 =&gt; '/^[\x{002d}0-9a-zäåæéöøü]{1,63}$/iu', 2 =&gt; '/^[\x{002d}0-9a-záéíñóúü]{1,63}$/iu', 3 =&gt; '/^[\x{002d}0-9a-záéíóöúüőű]{1,63}$/iu', 4 =&gt; '/^[\x{002d}0-9a-záæéíðóöúýþ]{1,63}$/iu', 5 =&gt; '/^[\x{AC00}-\x{D7A3}]{1,17}$/iu', 6 =&gt; '/^[\x{002d}0-9a-ząčėęįšūųž]{1,63}$/iu', 7 =&gt; '/^[\x{002d}0-9a-zāčēģīķļņōŗšūž]{1,63}$/iu', 8 =&gt; '/^[\x{002d}0-9a-zàáä-éêñ-ôöøüčđńŋšŧž]{1,63}$/iu', 9 =&gt; '/^[\x{002d}0-9a-zóąćęłńśźż]{1,63}$/iu', 10 =&gt; '/^[\x{002d}0-9a-záàâãçéêíóôõú]{1,63}$/iu', 11 =&gt; '/^[\x{002d}0-9a-z\x{3005}-\x{3007}\x{3041}-\x{3093}\x{309D}\x{309E}\x{30A1}-\x{30F6}\x{30FC}' . '\x{30FD}\x{30FE}\x{4E00}\x{4E01}\x{4E03}\x{4E07}\x{4E08}\x{4E09}\x{4E0A}' . '\x{4E0B}\x{4E0D}\x{4E0E}\x{4E10}\x{4E11}\x{4E14}\x{4E15}\x{4E16}\x{4E17}' . '\x{4E18}\x{4E19}\x{4E1E}\x{4E21}\x{4E26}\x{4E2A}\x{4E2D}\x{4E31}\x{4E32}' . '\x{4E36}\x{4E38}\x{4E39}\x{4E3B}\x{4E3C}\x{4E3F}\x{4E42}\x{4E43}\x{4E45}' . '\x{4E4B}\x{4E4D}\x{4E4E}\x{4E4F}\x{4E55}\x{4E56}\x{4E57}\x{4E58}\x{4E59}' . '\x{4E5D}\x{4E5E}\x{4E5F}\x{4E62}\x{4E71}\x{4E73}\x{4E7E}\x{4E80}\x{4E82}' . '\x{4E85}\x{4E86}\x{4E88}\x{4E89}\x{4E8A}\x{4E8B}\x{4E8C}\x{4E8E}\x{4E91}' . '\x{4E92}\x{4E94}\x{4E95}\x{4E98}\x{4E99}\x{4E9B}\x{4E9C}\x{4E9E}\x{4E9F}' . '\x{4EA0}\x{4EA1}\x{4EA2}\x{4EA4}\x{4EA5}\x{4EA6}\x{4EA8}\x{4EAB}\x{4EAC}' . '\x{4EAD}\x{4EAE}\x{4EB0}\x{4EB3}\x{4EB6}\x{4EBA}\x{4EC0}\x{4EC1}\x{4EC2}' . '\x{4EC4}\x{4EC6}\x{4EC7}\x{4ECA}\x{4ECB}\x{4ECD}\x{4ECE}\x{4ECF}\x{4ED4}' . '\x{4ED5}\x{4ED6}\x{4ED7}\x{4ED8}\x{4ED9}\x{4EDD}\x{4EDE}\x{4EDF}\x{4EE3}' . '\x{4EE4}\x{4EE5}\x{4EED}\x{4EEE}\x{4EF0}\x{4EF2}\x{4EF6}\x{4EF7}\x{4EFB}' . '\x{4F01}\x{4F09}\x{4F0A}\x{4F0D}\x{4F0E}\x{4F0F}\x{4F10}\x{4F11}\x{4F1A}' . '\x{4F1C}\x{4F1D}\x{4F2F}\x{4F30}\x{4F34}\x{4F36}\x{4F38}\x{4F3A}\x{4F3C}' . '\x{4F3D}\x{4F43}\x{4F46}\x{4F47}\x{4F4D}\x{4F4E}\x{4F4F}\x{4F50}\x{4F51}' . '\x{4F53}\x{4F55}\x{4F57}\x{4F59}\x{4F5A}\x{4F5B}\x{4F5C}\x{4F5D}\x{4F5E}' . '\x{4F69}\x{4F6F}\x{4F70}\x{4F73}\x{4F75}\x{4F76}\x{4F7B}\x{4F7C}\x{4F7F}' . '\x{4F83}\x{4F86}\x{4F88}\x{4F8B}\x{4F8D}\x{4F8F}\x{4F91}\x{4F96}\x{4F98}' . '\x{4F9B}\x{4F9D}\x{4FA0}\x{4FA1}\x{4FAB}\x{4FAD}\x{4FAE}\x{4FAF}\x{4FB5}' . '\x{4FB6}\x{4FBF}\x{4FC2}\x{4FC3}\x{4FC4}\x{4FCA}\x{4FCE}\x{4FD0}\x{4FD1}' . '\x{4FD4}\x{4FD7}\x{4FD8}\x{4FDA}\x{4FDB}\x{4FDD}\x{4FDF}\x{4FE1}\x{4FE3}' . '\x{4FE4}\x{4FE5}\x{4FEE}\x{4FEF}\x{4FF3}\x{4FF5}\x{4FF6}\x{4FF8}\x{4FFA}' . '\x{4FFE}\x{5005}\x{5006}\x{5009}\x{500B}\x{500D}\x{500F}\x{5011}\x{5012}' . '\x{5014}\x{5016}\x{5019}\x{501A}\x{501F}\x{5021}\x{5023}\x{5024}\x{5025}' . '\x{5026}\x{5028}\x{5029}\x{502A}\x{502B}\x{502C}\x{502D}\x{5036}\x{5039}' . '\x{5043}\x{5047}\x{5048}\x{5049}\x{504F}\x{5050}\x{5055}\x{5056}\x{505A}' . '\x{505C}\x{5065}\x{506C}\x{5072}\x{5074}\x{5075}\x{5076}\x{5078}\x{507D}' . '\x{5080}\x{5085}\x{508D}\x{5091}\x{5098}\x{5099}\x{509A}\x{50AC}\x{50AD}' . '\x{50B2}\x{50B3}\x{50B4}\x{50B5}\x{50B7}\x{50BE}\x{50C2}\x{50C5}\x{50C9}' . '\x{50CA}\x{50CD}\x{50CF}\x{50D1}\x{50D5}\x{50D6}\x{50DA}\x{50DE}\x{50E3}' . '\x{50E5}\x{50E7}\x{50ED}\x{50EE}\x{50F5}\x{50F9}\x{50FB}\x{5100}\x{5101}' . '\x{5102}\x{5104}\x{5109}\x{5112}\x{5114}\x{5115}\x{5116}\x{5118}\x{511A}' . '\x{511F}\x{5121}\x{512A}\x{5132}\x{5137}\x{513A}\x{513B}\x{513C}\x{513F}' . '\x{5140}\x{5141}\x{5143}\x{5144}\x{5145}\x{5146}\x{5147}\x{5148}\x{5149}' . '\x{514B}\x{514C}\x{514D}\x{514E}\x{5150}\x{5152}\x{5154}\x{515A}\x{515C}' . '\x{5162}\x{5165}\x{5168}\x{5169}\x{516A}\x{516B}\x{516C}\x{516D}\x{516E}' . '\x{5171}\x{5175}\x{5176}\x{5177}\x{5178}\x{517C}\x{5180}\x{5182}\x{5185}' . '\x{5186}\x{5189}\x{518A}\x{518C}\x{518D}\x{518F}\x{5190}\x{5191}\x{5192}' . '\x{5193}\x{5195}\x{5196}\x{5197}\x{5199}\x{51A0}\x{51A2}\x{51A4}\x{51A5}' . '\x{51A6}\x{51A8}\x{51A9}\x{51AA}\x{51AB}\x{51AC}\x{51B0}\x{51B1}\x{51B2}' . '\x{51B3}\x{51B4}\x{51B5}\x{51B6}\x{51B7}\x{51BD}\x{51C4}\x{51C5}\x{51C6}' . '\x{51C9}\x{51CB}\x{51CC}\x{51CD}\x{51D6}\x{51DB}\x{51DC}\x{51DD}\x{51E0}' . '\x{51E1}\x{51E6}\x{51E7}\x{51E9}\x{51EA}\x{51ED}\x{51F0}\x{51F1}\x{51F5}' . '\x{51F6}\x{51F8}\x{51F9}\x{51FA}\x{51FD}\x{51FE}\x{5200}\x{5203}\x{5204}' . '\x{5206}\x{5207}\x{5208}\x{520A}\x{520B}\x{520E}\x{5211}\x{5214}\x{5217}' . '\x{521D}\x{5224}\x{5225}\x{5227}\x{5229}\x{522A}\x{522E}\x{5230}\x{5233}' . '\x{5236}\x{5237}\x{5238}\x{5239}\x{523A}\x{523B}\x{5243}\x{5244}\x{5247}' . '\x{524A}\x{524B}\x{524C}\x{524D}\x{524F}\x{5254}\x{5256}\x{525B}\x{525E}' . '\x{5263}\x{5264}\x{5265}\x{5269}\x{526A}\x{526F}\x{5270}\x{5271}\x{5272}' . '\x{5273}\x{5274}\x{5275}\x{527D}\x{527F}\x{5283}\x{5287}\x{5288}\x{5289}' . '\x{528D}\x{5291}\x{5292}\x{5294}\x{529B}\x{529F}\x{52A0}\x{52A3}\x{52A9}' . '\x{52AA}\x{52AB}\x{52AC}\x{52AD}\x{52B1}\x{52B4}\x{52B5}\x{52B9}\x{52BC}' . '\x{52BE}\x{52C1}\x{52C3}\x{52C5}\x{52C7}\x{52C9}\x{52CD}\x{52D2}\x{52D5}' . '\x{52D7}\x{52D8}\x{52D9}\x{52DD}\x{52DE}\x{52DF}\x{52E0}\x{52E2}\x{52E3}' . '\x{52E4}\x{52E6}\x{52E7}\x{52F2}\x{52F3}\x{52F5}\x{52F8}\x{52F9}\x{52FA}' . '\x{52FE}\x{52FF}\x{5301}\x{5302}\x{5305}\x{5306}\x{5308}\x{530D}\x{530F}' . '\x{5310}\x{5315}\x{5316}\x{5317}\x{5319}\x{531A}\x{531D}\x{5320}\x{5321}' . '\x{5323}\x{532A}\x{532F}\x{5331}\x{5333}\x{5338}\x{5339}\x{533A}\x{533B}' . '\x{533F}\x{5340}\x{5341}\x{5343}\x{5345}\x{5346}\x{5347}\x{5348}\x{5349}' . '\x{534A}\x{534D}\x{5351}\x{5352}\x{5353}\x{5354}\x{5357}\x{5358}\x{535A}' . '\x{535C}\x{535E}\x{5360}\x{5366}\x{5369}\x{536E}\x{536F}\x{5370}\x{5371}' . '\x{5373}\x{5374}\x{5375}\x{5377}\x{5378}\x{537B}\x{537F}\x{5382}\x{5384}' . '\x{5396}\x{5398}\x{539A}\x{539F}\x{53A0}\x{53A5}\x{53A6}\x{53A8}\x{53A9}' . '\x{53AD}\x{53AE}\x{53B0}\x{53B3}\x{53B6}\x{53BB}\x{53C2}\x{53C3}\x{53C8}' . '\x{53C9}\x{53CA}\x{53CB}\x{53CC}\x{53CD}\x{53CE}\x{53D4}\x{53D6}\x{53D7}' . '\x{53D9}\x{53DB}\x{53DF}\x{53E1}\x{53E2}\x{53E3}\x{53E4}\x{53E5}\x{53E8}' . '\x{53E9}\x{53EA}\x{53EB}\x{53EC}\x{53ED}\x{53EE}\x{53EF}\x{53F0}\x{53F1}' . '\x{53F2}\x{53F3}\x{53F6}\x{53F7}\x{53F8}\x{53FA}\x{5401}\x{5403}\x{5404}' . '\x{5408}\x{5409}\x{540A}\x{540B}\x{540C}\x{540D}\x{540E}\x{540F}\x{5410}' . '\x{5411}\x{541B}\x{541D}\x{541F}\x{5420}\x{5426}\x{5429}\x{542B}\x{542C}' . '\x{542D}\x{542E}\x{5436}\x{5438}\x{5439}\x{543B}\x{543C}\x{543D}\x{543E}' . '\x{5440}\x{5442}\x{5446}\x{5448}\x{5449}\x{544A}\x{544E}\x{5451}\x{545F}' . '\x{5468}\x{546A}\x{5470}\x{5471}\x{5473}\x{5475}\x{5476}\x{5477}\x{547B}' . '\x{547C}\x{547D}\x{5480}\x{5484}\x{5486}\x{548B}\x{548C}\x{548E}\x{548F}' . '\x{5490}\x{5492}\x{54A2}\x{54A4}\x{54A5}\x{54A8}\x{54AB}\x{54AC}\x{54AF}' . '\x{54B2}\x{54B3}\x{54B8}\x{54BC}\x{54BD}\x{54BE}\x{54C0}\x{54C1}\x{54C2}' . '\x{54C4}\x{54C7}\x{54C8}\x{54C9}\x{54D8}\x{54E1}\x{54E2}\x{54E5}\x{54E6}' . '\x{54E8}\x{54E9}\x{54ED}\x{54EE}\x{54F2}\x{54FA}\x{54FD}\x{5504}\x{5506}' . '\x{5507}\x{550F}\x{5510}\x{5514}\x{5516}\x{552E}\x{552F}\x{5531}\x{5533}' . '\x{5538}\x{5539}\x{553E}\x{5540}\x{5544}\x{5545}\x{5546}\x{554C}\x{554F}' . '\x{5553}\x{5556}\x{5557}\x{555C}\x{555D}\x{5563}\x{557B}\x{557C}\x{557E}' . '\x{5580}\x{5583}\x{5584}\x{5587}\x{5589}\x{558A}\x{558B}\x{5598}\x{5599}' . '\x{559A}\x{559C}\x{559D}\x{559E}\x{559F}\x{55A7}\x{55A8}\x{55A9}\x{55AA}' . '\x{55AB}\x{55AC}\x{55AE}\x{55B0}\x{55B6}\x{55C4}\x{55C5}\x{55C7}\x{55D4}' . '\x{55DA}\x{55DC}\x{55DF}\x{55E3}\x{55E4}\x{55F7}\x{55F9}\x{55FD}\x{55FE}' . '\x{5606}\x{5609}\x{5614}\x{5616}\x{5617}\x{5618}\x{561B}\x{5629}\x{562F}' . '\x{5631}\x{5632}\x{5634}\x{5636}\x{5638}\x{5642}\x{564C}\x{564E}\x{5650}' . '\x{565B}\x{5664}\x{5668}\x{566A}\x{566B}\x{566C}\x{5674}\x{5678}\x{567A}' . '\x{5680}\x{5686}\x{5687}\x{568A}\x{568F}\x{5694}\x{56A0}\x{56A2}\x{56A5}' . '\x{56AE}\x{56B4}\x{56B6}\x{56BC}\x{56C0}\x{56C1}\x{56C2}\x{56C3}\x{56C8}' . '\x{56CE}\x{56D1}\x{56D3}\x{56D7}\x{56D8}\x{56DA}\x{56DB}\x{56DE}\x{56E0}' . '\x{56E3}\x{56EE}\x{56F0}\x{56F2}\x{56F3}\x{56F9}\x{56FA}\x{56FD}\x{56FF}' . '\x{5700}\x{5703}\x{5704}\x{5708}\x{5709}\x{570B}\x{570D}\x{570F}\x{5712}' . '\x{5713}\x{5716}\x{5718}\x{571C}\x{571F}\x{5726}\x{5727}\x{5728}\x{572D}' . '\x{5730}\x{5737}\x{5738}\x{573B}\x{5740}\x{5742}\x{5747}\x{574A}\x{574E}' . '\x{574F}\x{5750}\x{5751}\x{5761}\x{5764}\x{5766}\x{5769}\x{576A}\x{577F}' . '\x{5782}\x{5788}\x{5789}\x{578B}\x{5793}\x{57A0}\x{57A2}\x{57A3}\x{57A4}' . '\x{57AA}\x{57B0}\x{57B3}\x{57C0}\x{57C3}\x{57C6}\x{57CB}\x{57CE}\x{57D2}' . '\x{57D3}\x{57D4}\x{57D6}\x{57DC}\x{57DF}\x{57E0}\x{57E3}\x{57F4}\x{57F7}' . '\x{57F9}\x{57FA}\x{57FC}\x{5800}\x{5802}\x{5805}\x{5806}\x{580A}\x{580B}' . '\x{5815}\x{5819}\x{581D}\x{5821}\x{5824}\x{582A}\x{582F}\x{5830}\x{5831}' . '\x{5834}\x{5835}\x{583A}\x{583D}\x{5840}\x{5841}\x{584A}\x{584B}\x{5851}' . '\x{5852}\x{5854}\x{5857}\x{5858}\x{5859}\x{585A}\x{585E}\x{5862}\x{5869}' . '\x{586B}\x{5870}\x{5872}\x{5875}\x{5879}\x{587E}\x{5883}\x{5885}\x{5893}' . '\x{5897}\x{589C}\x{589F}\x{58A8}\x{58AB}\x{58AE}\x{58B3}\x{58B8}\x{58B9}' . '\x{58BA}\x{58BB}\x{58BE}\x{58C1}\x{58C5}\x{58C7}\x{58CA}\x{58CC}\x{58D1}' . '\x{58D3}\x{58D5}\x{58D7}\x{58D8}\x{58D9}\x{58DC}\x{58DE}\x{58DF}\x{58E4}' . '\x{58E5}\x{58EB}\x{58EC}\x{58EE}\x{58EF}\x{58F0}\x{58F1}\x{58F2}\x{58F7}' . '\x{58F9}\x{58FA}\x{58FB}\x{58FC}\x{58FD}\x{5902}\x{5909}\x{590A}\x{590F}' . '\x{5910}\x{5915}\x{5916}\x{5918}\x{5919}\x{591A}\x{591B}\x{591C}\x{5922}' . '\x{5925}\x{5927}\x{5929}\x{592A}\x{592B}\x{592C}\x{592D}\x{592E}\x{5931}' . '\x{5932}\x{5937}\x{5938}\x{593E}\x{5944}\x{5947}\x{5948}\x{5949}\x{594E}' . '\x{594F}\x{5950}\x{5951}\x{5954}\x{5955}\x{5957}\x{5958}\x{595A}\x{5960}' . '\x{5962}\x{5965}\x{5967}\x{5968}\x{5969}\x{596A}\x{596C}\x{596E}\x{5973}' . '\x{5974}\x{5978}\x{597D}\x{5981}\x{5982}\x{5983}\x{5984}\x{598A}\x{598D}' . '\x{5993}\x{5996}\x{5999}\x{599B}\x{599D}\x{59A3}\x{59A5}\x{59A8}\x{59AC}' . '\x{59B2}\x{59B9}\x{59BB}\x{59BE}\x{59C6}\x{59C9}\x{59CB}\x{59D0}\x{59D1}' . '\x{59D3}\x{59D4}\x{59D9}\x{59DA}\x{59DC}\x{59E5}\x{59E6}\x{59E8}\x{59EA}' . '\x{59EB}\x{59F6}\x{59FB}\x{59FF}\x{5A01}\x{5A03}\x{5A09}\x{5A11}\x{5A18}' . '\x{5A1A}\x{5A1C}\x{5A1F}\x{5A20}\x{5A25}\x{5A29}\x{5A2F}\x{5A35}\x{5A36}' . '\x{5A3C}\x{5A40}\x{5A41}\x{5A46}\x{5A49}\x{5A5A}\x{5A62}\x{5A66}\x{5A6A}' . '\x{5A6C}\x{5A7F}\x{5A92}\x{5A9A}\x{5A9B}\x{5ABC}\x{5ABD}\x{5ABE}\x{5AC1}' . '\x{5AC2}\x{5AC9}\x{5ACB}\x{5ACC}\x{5AD0}\x{5AD6}\x{5AD7}\x{5AE1}\x{5AE3}' . '\x{5AE6}\x{5AE9}\x{5AFA}\x{5AFB}\x{5B09}\x{5B0B}\x{5B0C}\x{5B16}\x{5B22}' . '\x{5B2A}\x{5B2C}\x{5B30}\x{5B32}\x{5B36}\x{5B3E}\x{5B40}\x{5B43}\x{5B45}' . '\x{5B50}\x{5B51}\x{5B54}\x{5B55}\x{5B57}\x{5B58}\x{5B5A}\x{5B5B}\x{5B5C}' . '\x{5B5D}\x{5B5F}\x{5B63}\x{5B64}\x{5B65}\x{5B66}\x{5B69}\x{5B6B}\x{5B70}' . '\x{5B71}\x{5B73}\x{5B75}\x{5B78}\x{5B7A}\x{5B80}\x{5B83}\x{5B85}\x{5B87}' . '\x{5B88}\x{5B89}\x{5B8B}\x{5B8C}\x{5B8D}\x{5B8F}\x{5B95}\x{5B97}\x{5B98}' . '\x{5B99}\x{5B9A}\x{5B9B}\x{5B9C}\x{5B9D}\x{5B9F}\x{5BA2}\x{5BA3}\x{5BA4}' . '\x{5BA5}\x{5BA6}\x{5BAE}\x{5BB0}\x{5BB3}\x{5BB4}\x{5BB5}\x{5BB6}\x{5BB8}' . '\x{5BB9}\x{5BBF}\x{5BC2}\x{5BC3}\x{5BC4}\x{5BC5}\x{5BC6}\x{5BC7}\x{5BC9}' . '\x{5BCC}\x{5BD0}\x{5BD2}\x{5BD3}\x{5BD4}\x{5BDB}\x{5BDD}\x{5BDE}\x{5BDF}' . '\x{5BE1}\x{5BE2}\x{5BE4}\x{5BE5}\x{5BE6}\x{5BE7}\x{5BE8}\x{5BE9}\x{5BEB}' . '\x{5BEE}\x{5BF0}\x{5BF3}\x{5BF5}\x{5BF6}\x{5BF8}\x{5BFA}\x{5BFE}\x{5BFF}' . '\x{5C01}\x{5C02}\x{5C04}\x{5C05}\x{5C06}\x{5C07}\x{5C08}\x{5C09}\x{5C0A}' . '\x{5C0B}\x{5C0D}\x{5C0E}\x{5C0F}\x{5C11}\x{5C13}\x{5C16}\x{5C1A}\x{5C20}' . '\x{5C22}\x{5C24}\x{5C28}\x{5C2D}\x{5C31}\x{5C38}\x{5C39}\x{5C3A}\x{5C3B}' . '\x{5C3C}\x{5C3D}\x{5C3E}\x{5C3F}\x{5C40}\x{5C41}\x{5C45}\x{5C46}\x{5C48}' . '\x{5C4A}\x{5C4B}\x{5C4D}\x{5C4E}\x{5C4F}\x{5C50}\x{5C51}\x{5C53}\x{5C55}' . '\x{5C5E}\x{5C60}\x{5C61}\x{5C64}\x{5C65}\x{5C6C}\x{5C6E}\x{5C6F}\x{5C71}' . '\x{5C76}\x{5C79}\x{5C8C}\x{5C90}\x{5C91}\x{5C94}\x{5CA1}\x{5CA8}\x{5CA9}' . '\x{5CAB}\x{5CAC}\x{5CB1}\x{5CB3}\x{5CB6}\x{5CB7}\x{5CB8}\x{5CBB}\x{5CBC}' . '\x{5CBE}\x{5CC5}\x{5CC7}\x{5CD9}\x{5CE0}\x{5CE1}\x{5CE8}\x{5CE9}\x{5CEA}' . '\x{5CED}\x{5CEF}\x{5CF0}\x{5CF6}\x{5CFA}\x{5CFB}\x{5CFD}\x{5D07}\x{5D0B}' . '\x{5D0E}\x{5D11}\x{5D14}\x{5D15}\x{5D16}\x{5D17}\x{5D18}\x{5D19}\x{5D1A}' . '\x{5D1B}\x{5D1F}\x{5D22}\x{5D29}\x{5D4B}\x{5D4C}\x{5D4E}\x{5D50}\x{5D52}' . '\x{5D5C}\x{5D69}\x{5D6C}\x{5D6F}\x{5D73}\x{5D76}\x{5D82}\x{5D84}\x{5D87}' . '\x{5D8B}\x{5D8C}\x{5D90}\x{5D9D}\x{5DA2}\x{5DAC}\x{5DAE}\x{5DB7}\x{5DBA}' . '\x{5DBC}\x{5DBD}\x{5DC9}\x{5DCC}\x{5DCD}\x{5DD2}\x{5DD3}\x{5DD6}\x{5DDB}' . '\x{5DDD}\x{5DDE}\x{5DE1}\x{5DE3}\x{5DE5}\x{5DE6}\x{5DE7}\x{5DE8}\x{5DEB}' . '\x{5DEE}\x{5DF1}\x{5DF2}\x{5DF3}\x{5DF4}\x{5DF5}\x{5DF7}\x{5DFB}\x{5DFD}' . '\x{5DFE}\x{5E02}\x{5E03}\x{5E06}\x{5E0B}\x{5E0C}\x{5E11}\x{5E16}\x{5E19}' . '\x{5E1A}\x{5E1B}\x{5E1D}\x{5E25}\x{5E2B}\x{5E2D}\x{5E2F}\x{5E30}\x{5E33}' . '\x{5E36}\x{5E37}\x{5E38}\x{5E3D}\x{5E40}\x{5E43}\x{5E44}\x{5E45}\x{5E47}' . '\x{5E4C}\x{5E4E}\x{5E54}\x{5E55}\x{5E57}\x{5E5F}\x{5E61}\x{5E62}\x{5E63}' . '\x{5E64}\x{5E72}\x{5E73}\x{5E74}\x{5E75}\x{5E76}\x{5E78}\x{5E79}\x{5E7A}' . '\x{5E7B}\x{5E7C}\x{5E7D}\x{5E7E}\x{5E7F}\x{5E81}\x{5E83}\x{5E84}\x{5E87}' . '\x{5E8A}\x{5E8F}\x{5E95}\x{5E96}\x{5E97}\x{5E9A}\x{5E9C}\x{5EA0}\x{5EA6}' . '\x{5EA7}\x{5EAB}\x{5EAD}\x{5EB5}\x{5EB6}\x{5EB7}\x{5EB8}\x{5EC1}\x{5EC2}' . '\x{5EC3}\x{5EC8}\x{5EC9}\x{5ECA}\x{5ECF}\x{5ED0}\x{5ED3}\x{5ED6}\x{5EDA}' . '\x{5EDB}\x{5EDD}\x{5EDF}\x{5EE0}\x{5EE1}\x{5EE2}\x{5EE3}\x{5EE8}\x{5EE9}' . '\x{5EEC}\x{5EF0}\x{5EF1}\x{5EF3}\x{5EF4}\x{5EF6}\x{5EF7}\x{5EF8}\x{5EFA}' . '\x{5EFB}\x{5EFC}\x{5EFE}\x{5EFF}\x{5F01}\x{5F03}\x{5F04}\x{5F09}\x{5F0A}' . '\x{5F0B}\x{5F0C}\x{5F0D}\x{5F0F}\x{5F10}\x{5F11}\x{5F13}\x{5F14}\x{5F15}' . '\x{5F16}\x{5F17}\x{5F18}\x{5F1B}\x{5F1F}\x{5F25}\x{5F26}\x{5F27}\x{5F29}' . '\x{5F2D}\x{5F2F}\x{5F31}\x{5F35}\x{5F37}\x{5F38}\x{5F3C}\x{5F3E}\x{5F41}' . '\x{5F48}\x{5F4A}\x{5F4C}\x{5F4E}\x{5F51}\x{5F53}\x{5F56}\x{5F57}\x{5F59}' . '\x{5F5C}\x{5F5D}\x{5F61}\x{5F62}\x{5F66}\x{5F69}\x{5F6A}\x{5F6B}\x{5F6C}' . '\x{5F6D}\x{5F70}\x{5F71}\x{5F73}\x{5F77}\x{5F79}\x{5F7C}\x{5F7F}\x{5F80}' . '\x{5F81}\x{5F82}\x{5F83}\x{5F84}\x{5F85}\x{5F87}\x{5F88}\x{5F8A}\x{5F8B}' . '\x{5F8C}\x{5F90}\x{5F91}\x{5F92}\x{5F93}\x{5F97}\x{5F98}\x{5F99}\x{5F9E}' . '\x{5FA0}\x{5FA1}\x{5FA8}\x{5FA9}\x{5FAA}\x{5FAD}\x{5FAE}\x{5FB3}\x{5FB4}' . '\x{5FB9}\x{5FBC}\x{5FBD}\x{5FC3}\x{5FC5}\x{5FCC}\x{5FCD}\x{5FD6}\x{5FD7}' . '\x{5FD8}\x{5FD9}\x{5FDC}\x{5FDD}\x{5FE0}\x{5FE4}\x{5FEB}\x{5FF0}\x{5FF1}' . '\x{5FF5}\x{5FF8}\x{5FFB}\x{5FFD}\x{5FFF}\x{600E}\x{600F}\x{6010}\x{6012}' . '\x{6015}\x{6016}\x{6019}\x{601B}\x{601C}\x{601D}\x{6020}\x{6021}\x{6025}' . '\x{6026}\x{6027}\x{6028}\x{6029}\x{602A}\x{602B}\x{602F}\x{6031}\x{603A}' . '\x{6041}\x{6042}\x{6043}\x{6046}\x{604A}\x{604B}\x{604D}\x{6050}\x{6052}' . '\x{6055}\x{6059}\x{605A}\x{605F}\x{6060}\x{6062}\x{6063}\x{6064}\x{6065}' . '\x{6068}\x{6069}\x{606A}\x{606B}\x{606C}\x{606D}\x{606F}\x{6070}\x{6075}' . '\x{6077}\x{6081}\x{6083}\x{6084}\x{6089}\x{608B}\x{608C}\x{608D}\x{6092}' . '\x{6094}\x{6096}\x{6097}\x{609A}\x{609B}\x{609F}\x{60A0}\x{60A3}\x{60A6}' . '\x{60A7}\x{60A9}\x{60AA}\x{60B2}\x{60B3}\x{60B4}\x{60B5}\x{60B6}\x{60B8}' . '\x{60BC}\x{60BD}\x{60C5}\x{60C6}\x{60C7}\x{60D1}\x{60D3}\x{60D8}\x{60DA}' . '\x{60DC}\x{60DF}\x{60E0}\x{60E1}\x{60E3}\x{60E7}\x{60E8}\x{60F0}\x{60F1}' . '\x{60F3}\x{60F4}\x{60F6}\x{60F7}\x{60F9}\x{60FA}\x{60FB}\x{6100}\x{6101}' . '\x{6103}\x{6106}\x{6108}\x{6109}\x{610D}\x{610E}\x{610F}\x{6115}\x{611A}' . '\x{611B}\x{611F}\x{6121}\x{6127}\x{6128}\x{612C}\x{6134}\x{613C}\x{613D}' . '\x{613E}\x{613F}\x{6142}\x{6144}\x{6147}\x{6148}\x{614A}\x{614B}\x{614C}' . '\x{614D}\x{614E}\x{6153}\x{6155}\x{6158}\x{6159}\x{615A}\x{615D}\x{615F}' . '\x{6162}\x{6163}\x{6165}\x{6167}\x{6168}\x{616B}\x{616E}\x{616F}\x{6170}' . '\x{6171}\x{6173}\x{6174}\x{6175}\x{6176}\x{6177}\x{617E}\x{6182}\x{6187}' . '\x{618A}\x{618E}\x{6190}\x{6191}\x{6194}\x{6196}\x{6199}\x{619A}\x{61A4}' . '\x{61A7}\x{61A9}\x{61AB}\x{61AC}\x{61AE}\x{61B2}\x{61B6}\x{61BA}\x{61BE}' . '\x{61C3}\x{61C6}\x{61C7}\x{61C8}\x{61C9}\x{61CA}\x{61CB}\x{61CC}\x{61CD}' . '\x{61D0}\x{61E3}\x{61E6}\x{61F2}\x{61F4}\x{61F6}\x{61F7}\x{61F8}\x{61FA}' . '\x{61FC}\x{61FD}\x{61FE}\x{61FF}\x{6200}\x{6208}\x{6209}\x{620A}\x{620C}' . '\x{620D}\x{620E}\x{6210}\x{6211}\x{6212}\x{6214}\x{6216}\x{621A}\x{621B}' . '\x{621D}\x{621E}\x{621F}\x{6221}\x{6226}\x{622A}\x{622E}\x{622F}\x{6230}' . '\x{6232}\x{6233}\x{6234}\x{6238}\x{623B}\x{623F}\x{6240}\x{6241}\x{6247}' . '\x{6248}\x{6249}\x{624B}\x{624D}\x{624E}\x{6253}\x{6255}\x{6258}\x{625B}' . '\x{625E}\x{6260}\x{6263}\x{6268}\x{626E}\x{6271}\x{6276}\x{6279}\x{627C}' . '\x{627E}\x{627F}\x{6280}\x{6282}\x{6283}\x{6284}\x{6289}\x{628A}\x{6291}' . '\x{6292}\x{6293}\x{6294}\x{6295}\x{6296}\x{6297}\x{6298}\x{629B}\x{629C}' . '\x{629E}\x{62AB}\x{62AC}\x{62B1}\x{62B5}\x{62B9}\x{62BB}\x{62BC}\x{62BD}' . '\x{62C2}\x{62C5}\x{62C6}\x{62C7}\x{62C8}\x{62C9}\x{62CA}\x{62CC}\x{62CD}' . '\x{62CF}\x{62D0}\x{62D1}\x{62D2}\x{62D3}\x{62D4}\x{62D7}\x{62D8}\x{62D9}' . '\x{62DB}\x{62DC}\x{62DD}\x{62E0}\x{62E1}\x{62EC}\x{62ED}\x{62EE}\x{62EF}' . '\x{62F1}\x{62F3}\x{62F5}\x{62F6}\x{62F7}\x{62FE}\x{62FF}\x{6301}\x{6302}' . '\x{6307}\x{6308}\x{6309}\x{630C}\x{6311}\x{6319}\x{631F}\x{6327}\x{6328}' . '\x{632B}\x{632F}\x{633A}\x{633D}\x{633E}\x{633F}\x{6349}\x{634C}\x{634D}' . '\x{634F}\x{6350}\x{6355}\x{6357}\x{635C}\x{6367}\x{6368}\x{6369}\x{636B}' . '\x{636E}\x{6372}\x{6376}\x{6377}\x{637A}\x{637B}\x{6380}\x{6383}\x{6388}' . '\x{6389}\x{638C}\x{638E}\x{638F}\x{6392}\x{6396}\x{6398}\x{639B}\x{639F}' . '\x{63A0}\x{63A1}\x{63A2}\x{63A3}\x{63A5}\x{63A7}\x{63A8}\x{63A9}\x{63AA}' . '\x{63AB}\x{63AC}\x{63B2}\x{63B4}\x{63B5}\x{63BB}\x{63BE}\x{63C0}\x{63C3}' . '\x{63C4}\x{63C6}\x{63C9}\x{63CF}\x{63D0}\x{63D2}\x{63D6}\x{63DA}\x{63DB}' . '\x{63E1}\x{63E3}\x{63E9}\x{63EE}\x{63F4}\x{63F6}\x{63FA}\x{6406}\x{640D}' . '\x{640F}\x{6413}\x{6416}\x{6417}\x{641C}\x{6426}\x{6428}\x{642C}\x{642D}' . '\x{6434}\x{6436}\x{643A}\x{643E}\x{6442}\x{644E}\x{6458}\x{6467}\x{6469}' . '\x{646F}\x{6476}\x{6478}\x{647A}\x{6483}\x{6488}\x{6492}\x{6493}\x{6495}' . '\x{649A}\x{649E}\x{64A4}\x{64A5}\x{64A9}\x{64AB}\x{64AD}\x{64AE}\x{64B0}' . '\x{64B2}\x{64B9}\x{64BB}\x{64BC}\x{64C1}\x{64C2}\x{64C5}\x{64C7}\x{64CD}' . '\x{64D2}\x{64D4}\x{64D8}\x{64DA}\x{64E0}\x{64E1}\x{64E2}\x{64E3}\x{64E6}' . '\x{64E7}\x{64EC}\x{64EF}\x{64F1}\x{64F2}\x{64F4}\x{64F6}\x{64FA}\x{64FD}' . '\x{64FE}\x{6500}\x{6505}\x{6518}\x{651C}\x{651D}\x{6523}\x{6524}\x{652A}' . '\x{652B}\x{652C}\x{652F}\x{6534}\x{6535}\x{6536}\x{6537}\x{6538}\x{6539}' . '\x{653B}\x{653E}\x{653F}\x{6545}\x{6548}\x{654D}\x{654F}\x{6551}\x{6555}' . '\x{6556}\x{6557}\x{6558}\x{6559}\x{655D}\x{655E}\x{6562}\x{6563}\x{6566}' . '\x{656C}\x{6570}\x{6572}\x{6574}\x{6575}\x{6577}\x{6578}\x{6582}\x{6583}' . '\x{6587}\x{6588}\x{6589}\x{658C}\x{658E}\x{6590}\x{6591}\x{6597}\x{6599}' . '\x{659B}\x{659C}\x{659F}\x{65A1}\x{65A4}\x{65A5}\x{65A7}\x{65AB}\x{65AC}' . '\x{65AD}\x{65AF}\x{65B0}\x{65B7}\x{65B9}\x{65BC}\x{65BD}\x{65C1}\x{65C3}' . '\x{65C4}\x{65C5}\x{65C6}\x{65CB}\x{65CC}\x{65CF}\x{65D2}\x{65D7}\x{65D9}' . '\x{65DB}\x{65E0}\x{65E1}\x{65E2}\x{65E5}\x{65E6}\x{65E7}\x{65E8}\x{65E9}' . '\x{65EC}\x{65ED}\x{65F1}\x{65FA}\x{65FB}\x{6602}\x{6603}\x{6606}\x{6607}' . '\x{660A}\x{660C}\x{660E}\x{660F}\x{6613}\x{6614}\x{661C}\x{661F}\x{6620}' . '\x{6625}\x{6627}\x{6628}\x{662D}\x{662F}\x{6634}\x{6635}\x{6636}\x{663C}' . '\x{663F}\x{6641}\x{6642}\x{6643}\x{6644}\x{6649}\x{664B}\x{664F}\x{6652}' . '\x{665D}\x{665E}\x{665F}\x{6662}\x{6664}\x{6666}\x{6667}\x{6668}\x{6669}' . '\x{666E}\x{666F}\x{6670}\x{6674}\x{6676}\x{667A}\x{6681}\x{6683}\x{6684}' . '\x{6687}\x{6688}\x{6689}\x{668E}\x{6691}\x{6696}\x{6697}\x{6698}\x{669D}' . '\x{66A2}\x{66A6}\x{66AB}\x{66AE}\x{66B4}\x{66B8}\x{66B9}\x{66BC}\x{66BE}' . '\x{66C1}\x{66C4}\x{66C7}\x{66C9}\x{66D6}\x{66D9}\x{66DA}\x{66DC}\x{66DD}' . '\x{66E0}\x{66E6}\x{66E9}\x{66F0}\x{66F2}\x{66F3}\x{66F4}\x{66F5}\x{66F7}' . '\x{66F8}\x{66F9}\x{66FC}\x{66FD}\x{66FE}\x{66FF}\x{6700}\x{6703}\x{6708}' . '\x{6709}\x{670B}\x{670D}\x{670F}\x{6714}\x{6715}\x{6716}\x{6717}\x{671B}' . '\x{671D}\x{671E}\x{671F}\x{6726}\x{6727}\x{6728}\x{672A}\x{672B}\x{672C}' . '\x{672D}\x{672E}\x{6731}\x{6734}\x{6736}\x{6737}\x{6738}\x{673A}\x{673D}' . '\x{673F}\x{6741}\x{6746}\x{6749}\x{674E}\x{674F}\x{6750}\x{6751}\x{6753}' . '\x{6756}\x{6759}\x{675C}\x{675E}\x{675F}\x{6760}\x{6761}\x{6762}\x{6763}' . '\x{6764}\x{6765}\x{676A}\x{676D}\x{676F}\x{6770}\x{6771}\x{6772}\x{6773}' . '\x{6775}\x{6777}\x{677C}\x{677E}\x{677F}\x{6785}\x{6787}\x{6789}\x{678B}' . '\x{678C}\x{6790}\x{6795}\x{6797}\x{679A}\x{679C}\x{679D}\x{67A0}\x{67A1}' . '\x{67A2}\x{67A6}\x{67A9}\x{67AF}\x{67B3}\x{67B4}\x{67B6}\x{67B7}\x{67B8}' . '\x{67B9}\x{67C1}\x{67C4}\x{67C6}\x{67CA}\x{67CE}\x{67CF}\x{67D0}\x{67D1}' . '\x{67D3}\x{67D4}\x{67D8}\x{67DA}\x{67DD}\x{67DE}\x{67E2}\x{67E4}\x{67E7}' . '\x{67E9}\x{67EC}\x{67EE}\x{67EF}\x{67F1}\x{67F3}\x{67F4}\x{67F5}\x{67FB}' . '\x{67FE}\x{67FF}\x{6802}\x{6803}\x{6804}\x{6813}\x{6816}\x{6817}\x{681E}' . '\x{6821}\x{6822}\x{6829}\x{682A}\x{682B}\x{6832}\x{6834}\x{6838}\x{6839}' . '\x{683C}\x{683D}\x{6840}\x{6841}\x{6842}\x{6843}\x{6846}\x{6848}\x{684D}' . '\x{684E}\x{6850}\x{6851}\x{6853}\x{6854}\x{6859}\x{685C}\x{685D}\x{685F}' . '\x{6863}\x{6867}\x{6874}\x{6876}\x{6877}\x{687E}\x{687F}\x{6881}\x{6883}' . '\x{6885}\x{688D}\x{688F}\x{6893}\x{6894}\x{6897}\x{689B}\x{689D}\x{689F}' . '\x{68A0}\x{68A2}\x{68A6}\x{68A7}\x{68A8}\x{68AD}\x{68AF}\x{68B0}\x{68B1}' . '\x{68B3}\x{68B5}\x{68B6}\x{68B9}\x{68BA}\x{68BC}\x{68C4}\x{68C6}\x{68C9}' . '\x{68CA}\x{68CB}\x{68CD}\x{68D2}\x{68D4}\x{68D5}\x{68D7}\x{68D8}\x{68DA}' . '\x{68DF}\x{68E0}\x{68E1}\x{68E3}\x{68E7}\x{68EE}\x{68EF}\x{68F2}\x{68F9}' . '\x{68FA}\x{6900}\x{6901}\x{6904}\x{6905}\x{6908}\x{690B}\x{690C}\x{690D}' . '\x{690E}\x{690F}\x{6912}\x{6919}\x{691A}\x{691B}\x{691C}\x{6921}\x{6922}' . '\x{6923}\x{6925}\x{6926}\x{6928}\x{692A}\x{6930}\x{6934}\x{6936}\x{6939}' . '\x{693D}\x{693F}\x{694A}\x{6953}\x{6954}\x{6955}\x{6959}\x{695A}\x{695C}' . '\x{695D}\x{695E}\x{6960}\x{6961}\x{6962}\x{696A}\x{696B}\x{696D}\x{696E}' . '\x{696F}\x{6973}\x{6974}\x{6975}\x{6977}\x{6978}\x{6979}\x{697C}\x{697D}' . '\x{697E}\x{6981}\x{6982}\x{698A}\x{698E}\x{6991}\x{6994}\x{6995}\x{699B}' . '\x{699C}\x{69A0}\x{69A7}\x{69AE}\x{69B1}\x{69B2}\x{69B4}\x{69BB}\x{69BE}' . '\x{69BF}\x{69C1}\x{69C3}\x{69C7}\x{69CA}\x{69CB}\x{69CC}\x{69CD}\x{69CE}' . '\x{69D0}\x{69D3}\x{69D8}\x{69D9}\x{69DD}\x{69DE}\x{69E7}\x{69E8}\x{69EB}' . '\x{69ED}\x{69F2}\x{69F9}\x{69FB}\x{69FD}\x{69FF}\x{6A02}\x{6A05}\x{6A0A}' . '\x{6A0B}\x{6A0C}\x{6A12}\x{6A13}\x{6A14}\x{6A17}\x{6A19}\x{6A1B}\x{6A1E}' . '\x{6A1F}\x{6A21}\x{6A22}\x{6A23}\x{6A29}\x{6A2A}\x{6A2B}\x{6A2E}\x{6A35}' . '\x{6A36}\x{6A38}\x{6A39}\x{6A3A}\x{6A3D}\x{6A44}\x{6A47}\x{6A48}\x{6A4B}' . '\x{6A58}\x{6A59}\x{6A5F}\x{6A61}\x{6A62}\x{6A66}\x{6A72}\x{6A78}\x{6A7F}' . '\x{6A80}\x{6A84}\x{6A8D}\x{6A8E}\x{6A90}\x{6A97}\x{6A9C}\x{6AA0}\x{6AA2}' . '\x{6AA3}\x{6AAA}\x{6AAC}\x{6AAE}\x{6AB3}\x{6AB8}\x{6ABB}\x{6AC1}\x{6AC2}' . '\x{6AC3}\x{6AD1}\x{6AD3}\x{6ADA}\x{6ADB}\x{6ADE}\x{6ADF}\x{6AE8}\x{6AEA}' . '\x{6AFA}\x{6AFB}\x{6B04}\x{6B05}\x{6B0A}\x{6B12}\x{6B16}\x{6B1D}\x{6B1F}' . '\x{6B20}\x{6B21}\x{6B23}\x{6B27}\x{6B32}\x{6B37}\x{6B38}\x{6B39}\x{6B3A}' . '\x{6B3D}\x{6B3E}\x{6B43}\x{6B47}\x{6B49}\x{6B4C}\x{6B4E}\x{6B50}\x{6B53}' . '\x{6B54}\x{6B59}\x{6B5B}\x{6B5F}\x{6B61}\x{6B62}\x{6B63}\x{6B64}\x{6B66}' . '\x{6B69}\x{6B6A}\x{6B6F}\x{6B73}\x{6B74}\x{6B78}\x{6B79}\x{6B7B}\x{6B7F}' . '\x{6B80}\x{6B83}\x{6B84}\x{6B86}\x{6B89}\x{6B8A}\x{6B8B}\x{6B8D}\x{6B95}' . '\x{6B96}\x{6B98}\x{6B9E}\x{6BA4}\x{6BAA}\x{6BAB}\x{6BAF}\x{6BB1}\x{6BB2}' . '\x{6BB3}\x{6BB4}\x{6BB5}\x{6BB7}\x{6BBA}\x{6BBB}\x{6BBC}\x{6BBF}\x{6BC0}' . '\x{6BC5}\x{6BC6}\x{6BCB}\x{6BCD}\x{6BCE}\x{6BD2}\x{6BD3}\x{6BD4}\x{6BD8}' . '\x{6BDB}\x{6BDF}\x{6BEB}\x{6BEC}\x{6BEF}\x{6BF3}\x{6C08}\x{6C0F}\x{6C11}' . '\x{6C13}\x{6C14}\x{6C17}\x{6C1B}\x{6C23}\x{6C24}\x{6C34}\x{6C37}\x{6C38}' . '\x{6C3E}\x{6C40}\x{6C41}\x{6C42}\x{6C4E}\x{6C50}\x{6C55}\x{6C57}\x{6C5A}' . '\x{6C5D}\x{6C5E}\x{6C5F}\x{6C60}\x{6C62}\x{6C68}\x{6C6A}\x{6C70}\x{6C72}' . '\x{6C73}\x{6C7A}\x{6C7D}\x{6C7E}\x{6C81}\x{6C82}\x{6C83}\x{6C88}\x{6C8C}' . '\x{6C8D}\x{6C90}\x{6C92}\x{6C93}\x{6C96}\x{6C99}\x{6C9A}\x{6C9B}\x{6CA1}' . '\x{6CA2}\x{6CAB}\x{6CAE}\x{6CB1}\x{6CB3}\x{6CB8}\x{6CB9}\x{6CBA}\x{6CBB}' . '\x{6CBC}\x{6CBD}\x{6CBE}\x{6CBF}\x{6CC1}\x{6CC4}\x{6CC5}\x{6CC9}\x{6CCA}' . '\x{6CCC}\x{6CD3}\x{6CD5}\x{6CD7}\x{6CD9}\x{6CDB}\x{6CDD}\x{6CE1}\x{6CE2}' . '\x{6CE3}\x{6CE5}\x{6CE8}\x{6CEA}\x{6CEF}\x{6CF0}\x{6CF1}\x{6CF3}\x{6D0B}' . '\x{6D0C}\x{6D12}\x{6D17}\x{6D19}\x{6D1B}\x{6D1E}\x{6D1F}\x{6D25}\x{6D29}' . '\x{6D2A}\x{6D2B}\x{6D32}\x{6D33}\x{6D35}\x{6D36}\x{6D38}\x{6D3B}\x{6D3D}' . '\x{6D3E}\x{6D41}\x{6D44}\x{6D45}\x{6D59}\x{6D5A}\x{6D5C}\x{6D63}\x{6D64}' . '\x{6D66}\x{6D69}\x{6D6A}\x{6D6C}\x{6D6E}\x{6D74}\x{6D77}\x{6D78}\x{6D79}' . '\x{6D85}\x{6D88}\x{6D8C}\x{6D8E}\x{6D93}\x{6D95}\x{6D99}\x{6D9B}\x{6D9C}' . '\x{6DAF}\x{6DB2}\x{6DB5}\x{6DB8}\x{6DBC}\x{6DC0}\x{6DC5}\x{6DC6}\x{6DC7}' . '\x{6DCB}\x{6DCC}\x{6DD1}\x{6DD2}\x{6DD5}\x{6DD8}\x{6DD9}\x{6DDE}\x{6DE1}' . '\x{6DE4}\x{6DE6}\x{6DE8}\x{6DEA}\x{6DEB}\x{6DEC}\x{6DEE}\x{6DF1}\x{6DF3}' . '\x{6DF5}\x{6DF7}\x{6DF9}\x{6DFA}\x{6DFB}\x{6E05}\x{6E07}\x{6E08}\x{6E09}' . '\x{6E0A}\x{6E0B}\x{6E13}\x{6E15}\x{6E19}\x{6E1A}\x{6E1B}\x{6E1D}\x{6E1F}' . '\x{6E20}\x{6E21}\x{6E23}\x{6E24}\x{6E25}\x{6E26}\x{6E29}\x{6E2B}\x{6E2C}' . '\x{6E2D}\x{6E2E}\x{6E2F}\x{6E38}\x{6E3A}\x{6E3E}\x{6E43}\x{6E4A}\x{6E4D}' . '\x{6E4E}\x{6E56}\x{6E58}\x{6E5B}\x{6E5F}\x{6E67}\x{6E6B}\x{6E6E}\x{6E6F}' . '\x{6E72}\x{6E76}\x{6E7E}\x{6E7F}\x{6E80}\x{6E82}\x{6E8C}\x{6E8F}\x{6E90}' . '\x{6E96}\x{6E98}\x{6E9C}\x{6E9D}\x{6E9F}\x{6EA2}\x{6EA5}\x{6EAA}\x{6EAF}' . '\x{6EB2}\x{6EB6}\x{6EB7}\x{6EBA}\x{6EBD}\x{6EC2}\x{6EC4}\x{6EC5}\x{6EC9}' . '\x{6ECB}\x{6ECC}\x{6ED1}\x{6ED3}\x{6ED4}\x{6ED5}\x{6EDD}\x{6EDE}\x{6EEC}' . '\x{6EEF}\x{6EF2}\x{6EF4}\x{6EF7}\x{6EF8}\x{6EFE}\x{6EFF}\x{6F01}\x{6F02}' . '\x{6F06}\x{6F09}\x{6F0F}\x{6F11}\x{6F13}\x{6F14}\x{6F15}\x{6F20}\x{6F22}' . '\x{6F23}\x{6F2B}\x{6F2C}\x{6F31}\x{6F32}\x{6F38}\x{6F3E}\x{6F3F}\x{6F41}' . '\x{6F45}\x{6F54}\x{6F58}\x{6F5B}\x{6F5C}\x{6F5F}\x{6F64}\x{6F66}\x{6F6D}' . '\x{6F6E}\x{6F6F}\x{6F70}\x{6F74}\x{6F78}\x{6F7A}\x{6F7C}\x{6F80}\x{6F81}' . '\x{6F82}\x{6F84}\x{6F86}\x{6F8E}\x{6F91}\x{6F97}\x{6FA1}\x{6FA3}\x{6FA4}' . '\x{6FAA}\x{6FB1}\x{6FB3}\x{6FB9}\x{6FC0}\x{6FC1}\x{6FC2}\x{6FC3}\x{6FC6}' . '\x{6FD4}\x{6FD5}\x{6FD8}\x{6FDB}\x{6FDF}\x{6FE0}\x{6FE1}\x{6FE4}\x{6FEB}' . '\x{6FEC}\x{6FEE}\x{6FEF}\x{6FF1}\x{6FF3}\x{6FF6}\x{6FFA}\x{6FFE}\x{7001}' . '\x{7009}\x{700B}\x{700F}\x{7011}\x{7015}\x{7018}\x{701A}\x{701B}\x{701D}' . '\x{701E}\x{701F}\x{7026}\x{7027}\x{702C}\x{7030}\x{7032}\x{703E}\x{704C}' . '\x{7051}\x{7058}\x{7063}\x{706B}\x{706F}\x{7070}\x{7078}\x{707C}\x{707D}' . '\x{7089}\x{708A}\x{708E}\x{7092}\x{7099}\x{70AC}\x{70AD}\x{70AE}\x{70AF}' . '\x{70B3}\x{70B8}\x{70B9}\x{70BA}\x{70C8}\x{70CB}\x{70CF}\x{70D9}\x{70DD}' . '\x{70DF}\x{70F1}\x{70F9}\x{70FD}\x{7109}\x{7114}\x{7119}\x{711A}\x{711C}' . '\x{7121}\x{7126}\x{7136}\x{713C}\x{7149}\x{714C}\x{714E}\x{7155}\x{7156}' . '\x{7159}\x{7162}\x{7164}\x{7165}\x{7166}\x{7167}\x{7169}\x{716C}\x{716E}' . '\x{717D}\x{7184}\x{7188}\x{718A}\x{718F}\x{7194}\x{7195}\x{7199}\x{719F}' . '\x{71A8}\x{71AC}\x{71B1}\x{71B9}\x{71BE}\x{71C3}\x{71C8}\x{71C9}\x{71CE}' . '\x{71D0}\x{71D2}\x{71D4}\x{71D5}\x{71D7}\x{71DF}\x{71E0}\x{71E5}\x{71E6}' . '\x{71E7}\x{71EC}\x{71ED}\x{71EE}\x{71F5}\x{71F9}\x{71FB}\x{71FC}\x{71FF}' . '\x{7206}\x{720D}\x{7210}\x{721B}\x{7228}\x{722A}\x{722C}\x{722D}\x{7230}' . '\x{7232}\x{7235}\x{7236}\x{723A}\x{723B}\x{723C}\x{723D}\x{723E}\x{723F}' . '\x{7240}\x{7246}\x{7247}\x{7248}\x{724B}\x{724C}\x{7252}\x{7258}\x{7259}' . '\x{725B}\x{725D}\x{725F}\x{7261}\x{7262}\x{7267}\x{7269}\x{7272}\x{7274}' . '\x{7279}\x{727D}\x{727E}\x{7280}\x{7281}\x{7282}\x{7287}\x{7292}\x{7296}' . '\x{72A0}\x{72A2}\x{72A7}\x{72AC}\x{72AF}\x{72B2}\x{72B6}\x{72B9}\x{72C2}' . '\x{72C3}\x{72C4}\x{72C6}\x{72CE}\x{72D0}\x{72D2}\x{72D7}\x{72D9}\x{72DB}' . '\x{72E0}\x{72E1}\x{72E2}\x{72E9}\x{72EC}\x{72ED}\x{72F7}\x{72F8}\x{72F9}' . '\x{72FC}\x{72FD}\x{730A}\x{7316}\x{7317}\x{731B}\x{731C}\x{731D}\x{731F}' . '\x{7325}\x{7329}\x{732A}\x{732B}\x{732E}\x{732F}\x{7334}\x{7336}\x{7337}' . '\x{733E}\x{733F}\x{7344}\x{7345}\x{734E}\x{734F}\x{7357}\x{7363}\x{7368}' . '\x{736A}\x{7370}\x{7372}\x{7375}\x{7378}\x{737A}\x{737B}\x{7384}\x{7387}' . '\x{7389}\x{738B}\x{7396}\x{73A9}\x{73B2}\x{73B3}\x{73BB}\x{73C0}\x{73C2}' . '\x{73C8}\x{73CA}\x{73CD}\x{73CE}\x{73DE}\x{73E0}\x{73E5}\x{73EA}\x{73ED}' . '\x{73EE}\x{73F1}\x{73F8}\x{73FE}\x{7403}\x{7405}\x{7406}\x{7409}\x{7422}' . '\x{7425}\x{7432}\x{7433}\x{7434}\x{7435}\x{7436}\x{743A}\x{743F}\x{7441}' . '\x{7455}\x{7459}\x{745A}\x{745B}\x{745C}\x{745E}\x{745F}\x{7460}\x{7463}' . '\x{7464}\x{7469}\x{746A}\x{746F}\x{7470}\x{7473}\x{7476}\x{747E}\x{7483}' . '\x{748B}\x{749E}\x{74A2}\x{74A7}\x{74B0}\x{74BD}\x{74CA}\x{74CF}\x{74D4}' . '\x{74DC}\x{74E0}\x{74E2}\x{74E3}\x{74E6}\x{74E7}\x{74E9}\x{74EE}\x{74F0}' . '\x{74F1}\x{74F2}\x{74F6}\x{74F7}\x{74F8}\x{7503}\x{7504}\x{7505}\x{750C}' . '\x{750D}\x{750E}\x{7511}\x{7513}\x{7515}\x{7518}\x{751A}\x{751C}\x{751E}' . '\x{751F}\x{7523}\x{7525}\x{7526}\x{7528}\x{752B}\x{752C}\x{7530}\x{7531}' . '\x{7532}\x{7533}\x{7537}\x{7538}\x{753A}\x{753B}\x{753C}\x{7544}\x{7546}' . '\x{7549}\x{754A}\x{754B}\x{754C}\x{754D}\x{754F}\x{7551}\x{7554}\x{7559}' . '\x{755A}\x{755B}\x{755C}\x{755D}\x{7560}\x{7562}\x{7564}\x{7565}\x{7566}' . '\x{7567}\x{7569}\x{756A}\x{756B}\x{756D}\x{7570}\x{7573}\x{7574}\x{7576}' . '\x{7577}\x{7578}\x{757F}\x{7582}\x{7586}\x{7587}\x{7589}\x{758A}\x{758B}' . '\x{758E}\x{758F}\x{7591}\x{7594}\x{759A}\x{759D}\x{75A3}\x{75A5}\x{75AB}' . '\x{75B1}\x{75B2}\x{75B3}\x{75B5}\x{75B8}\x{75B9}\x{75BC}\x{75BD}\x{75BE}' . '\x{75C2}\x{75C3}\x{75C5}\x{75C7}\x{75CA}\x{75CD}\x{75D2}\x{75D4}\x{75D5}' . '\x{75D8}\x{75D9}\x{75DB}\x{75DE}\x{75E2}\x{75E3}\x{75E9}\x{75F0}\x{75F2}' . '\x{75F3}\x{75F4}\x{75FA}\x{75FC}\x{75FE}\x{75FF}\x{7601}\x{7609}\x{760B}' . '\x{760D}\x{761F}\x{7620}\x{7621}\x{7622}\x{7624}\x{7627}\x{7630}\x{7634}' . '\x{763B}\x{7642}\x{7646}\x{7647}\x{7648}\x{764C}\x{7652}\x{7656}\x{7658}' . '\x{765C}\x{7661}\x{7662}\x{7667}\x{7668}\x{7669}\x{766A}\x{766C}\x{7670}' . '\x{7672}\x{7676}\x{7678}\x{767A}\x{767B}\x{767C}\x{767D}\x{767E}\x{7680}' . '\x{7683}\x{7684}\x{7686}\x{7687}\x{7688}\x{768B}\x{768E}\x{7690}\x{7693}' . '\x{7696}\x{7699}\x{769A}\x{76AE}\x{76B0}\x{76B4}\x{76B7}\x{76B8}\x{76B9}' . '\x{76BA}\x{76BF}\x{76C2}\x{76C3}\x{76C6}\x{76C8}\x{76CA}\x{76CD}\x{76D2}' . '\x{76D6}\x{76D7}\x{76DB}\x{76DC}\x{76DE}\x{76DF}\x{76E1}\x{76E3}\x{76E4}' . '\x{76E5}\x{76E7}\x{76EA}\x{76EE}\x{76F2}\x{76F4}\x{76F8}\x{76FB}\x{76FE}' . '\x{7701}\x{7704}\x{7707}\x{7708}\x{7709}\x{770B}\x{770C}\x{771B}\x{771E}' . '\x{771F}\x{7720}\x{7724}\x{7725}\x{7726}\x{7729}\x{7737}\x{7738}\x{773A}' . '\x{773C}\x{7740}\x{7747}\x{775A}\x{775B}\x{7761}\x{7763}\x{7765}\x{7766}' . '\x{7768}\x{776B}\x{7779}\x{777E}\x{777F}\x{778B}\x{778E}\x{7791}\x{779E}' . '\x{77A0}\x{77A5}\x{77AC}\x{77AD}\x{77B0}\x{77B3}\x{77B6}\x{77B9}\x{77BB}' . '\x{77BC}\x{77BD}\x{77BF}\x{77C7}\x{77CD}\x{77D7}\x{77DA}\x{77DB}\x{77DC}' . '\x{77E2}\x{77E3}\x{77E5}\x{77E7}\x{77E9}\x{77ED}\x{77EE}\x{77EF}\x{77F3}' . '\x{77FC}\x{7802}\x{780C}\x{7812}\x{7814}\x{7815}\x{7820}\x{7825}\x{7826}' . '\x{7827}\x{7832}\x{7834}\x{783A}\x{783F}\x{7845}\x{785D}\x{786B}\x{786C}' . '\x{786F}\x{7872}\x{7874}\x{787C}\x{7881}\x{7886}\x{7887}\x{788C}\x{788D}' . '\x{788E}\x{7891}\x{7893}\x{7895}\x{7897}\x{789A}\x{78A3}\x{78A7}\x{78A9}' . '\x{78AA}\x{78AF}\x{78B5}\x{78BA}\x{78BC}\x{78BE}\x{78C1}\x{78C5}\x{78C6}' . '\x{78CA}\x{78CB}\x{78D0}\x{78D1}\x{78D4}\x{78DA}\x{78E7}\x{78E8}\x{78EC}' . '\x{78EF}\x{78F4}\x{78FD}\x{7901}\x{7907}\x{790E}\x{7911}\x{7912}\x{7919}' . '\x{7926}\x{792A}\x{792B}\x{792C}\x{793A}\x{793C}\x{793E}\x{7940}\x{7941}' . '\x{7947}\x{7948}\x{7949}\x{7950}\x{7953}\x{7955}\x{7956}\x{7957}\x{795A}' . '\x{795D}\x{795E}\x{795F}\x{7960}\x{7962}\x{7965}\x{7968}\x{796D}\x{7977}' . '\x{797A}\x{797F}\x{7980}\x{7981}\x{7984}\x{7985}\x{798A}\x{798D}\x{798E}' . '\x{798F}\x{799D}\x{79A6}\x{79A7}\x{79AA}\x{79AE}\x{79B0}\x{79B3}\x{79B9}' . '\x{79BA}\x{79BD}\x{79BE}\x{79BF}\x{79C0}\x{79C1}\x{79C9}\x{79CB}\x{79D1}' . '\x{79D2}\x{79D5}\x{79D8}\x{79DF}\x{79E1}\x{79E3}\x{79E4}\x{79E6}\x{79E7}' . '\x{79E9}\x{79EC}\x{79F0}\x{79FB}\x{7A00}\x{7A08}\x{7A0B}\x{7A0D}\x{7A0E}' . '\x{7A14}\x{7A17}\x{7A18}\x{7A19}\x{7A1A}\x{7A1C}\x{7A1F}\x{7A20}\x{7A2E}' . '\x{7A31}\x{7A32}\x{7A37}\x{7A3B}\x{7A3C}\x{7A3D}\x{7A3E}\x{7A3F}\x{7A40}' . '\x{7A42}\x{7A43}\x{7A46}\x{7A49}\x{7A4D}\x{7A4E}\x{7A4F}\x{7A50}\x{7A57}' . '\x{7A61}\x{7A62}\x{7A63}\x{7A69}\x{7A6B}\x{7A70}\x{7A74}\x{7A76}\x{7A79}' . '\x{7A7A}\x{7A7D}\x{7A7F}\x{7A81}\x{7A83}\x{7A84}\x{7A88}\x{7A92}\x{7A93}' . '\x{7A95}\x{7A96}\x{7A97}\x{7A98}\x{7A9F}\x{7AA9}\x{7AAA}\x{7AAE}\x{7AAF}' . '\x{7AB0}\x{7AB6}\x{7ABA}\x{7ABF}\x{7AC3}\x{7AC4}\x{7AC5}\x{7AC7}\x{7AC8}' . '\x{7ACA}\x{7ACB}\x{7ACD}\x{7ACF}\x{7AD2}\x{7AD3}\x{7AD5}\x{7AD9}\x{7ADA}' . '\x{7ADC}\x{7ADD}\x{7ADF}\x{7AE0}\x{7AE1}\x{7AE2}\x{7AE3}\x{7AE5}\x{7AE6}' . '\x{7AEA}\x{7AED}\x{7AEF}\x{7AF0}\x{7AF6}\x{7AF8}\x{7AF9}\x{7AFA}\x{7AFF}' . '\x{7B02}\x{7B04}\x{7B06}\x{7B08}\x{7B0A}\x{7B0B}\x{7B0F}\x{7B11}\x{7B18}' . '\x{7B19}\x{7B1B}\x{7B1E}\x{7B20}\x{7B25}\x{7B26}\x{7B28}\x{7B2C}\x{7B33}' . '\x{7B35}\x{7B36}\x{7B39}\x{7B45}\x{7B46}\x{7B48}\x{7B49}\x{7B4B}\x{7B4C}' . '\x{7B4D}\x{7B4F}\x{7B50}\x{7B51}\x{7B52}\x{7B54}\x{7B56}\x{7B5D}\x{7B65}' . '\x{7B67}\x{7B6C}\x{7B6E}\x{7B70}\x{7B71}\x{7B74}\x{7B75}\x{7B7A}\x{7B86}' . '\x{7B87}\x{7B8B}\x{7B8D}\x{7B8F}\x{7B92}\x{7B94}\x{7B95}\x{7B97}\x{7B98}' . '\x{7B99}\x{7B9A}\x{7B9C}\x{7B9D}\x{7B9F}\x{7BA1}\x{7BAA}\x{7BAD}\x{7BB1}' . '\x{7BB4}\x{7BB8}\x{7BC0}\x{7BC1}\x{7BC4}\x{7BC6}\x{7BC7}\x{7BC9}\x{7BCB}' . '\x{7BCC}\x{7BCF}\x{7BDD}\x{7BE0}\x{7BE4}\x{7BE5}\x{7BE6}\x{7BE9}\x{7BED}' . '\x{7BF3}\x{7BF6}\x{7BF7}\x{7C00}\x{7C07}\x{7C0D}\x{7C11}\x{7C12}\x{7C13}' . '\x{7C14}\x{7C17}\x{7C1F}\x{7C21}\x{7C23}\x{7C27}\x{7C2A}\x{7C2B}\x{7C37}' . '\x{7C38}\x{7C3D}\x{7C3E}\x{7C3F}\x{7C40}\x{7C43}\x{7C4C}\x{7C4D}\x{7C4F}' . '\x{7C50}\x{7C54}\x{7C56}\x{7C58}\x{7C5F}\x{7C60}\x{7C64}\x{7C65}\x{7C6C}' . '\x{7C73}\x{7C75}\x{7C7E}\x{7C81}\x{7C82}\x{7C83}\x{7C89}\x{7C8B}\x{7C8D}' . '\x{7C90}\x{7C92}\x{7C95}\x{7C97}\x{7C98}\x{7C9B}\x{7C9F}\x{7CA1}\x{7CA2}' . '\x{7CA4}\x{7CA5}\x{7CA7}\x{7CA8}\x{7CAB}\x{7CAD}\x{7CAE}\x{7CB1}\x{7CB2}' . '\x{7CB3}\x{7CB9}\x{7CBD}\x{7CBE}\x{7CC0}\x{7CC2}\x{7CC5}\x{7CCA}\x{7CCE}' . '\x{7CD2}\x{7CD6}\x{7CD8}\x{7CDC}\x{7CDE}\x{7CDF}\x{7CE0}\x{7CE2}\x{7CE7}' . '\x{7CEF}\x{7CF2}\x{7CF4}\x{7CF6}\x{7CF8}\x{7CFA}\x{7CFB}\x{7CFE}\x{7D00}' . '\x{7D02}\x{7D04}\x{7D05}\x{7D06}\x{7D0A}\x{7D0B}\x{7D0D}\x{7D10}\x{7D14}' . '\x{7D15}\x{7D17}\x{7D18}\x{7D19}\x{7D1A}\x{7D1B}\x{7D1C}\x{7D20}\x{7D21}' . '\x{7D22}\x{7D2B}\x{7D2C}\x{7D2E}\x{7D2F}\x{7D30}\x{7D32}\x{7D33}\x{7D35}' . '\x{7D39}\x{7D3A}\x{7D3F}\x{7D42}\x{7D43}\x{7D44}\x{7D45}\x{7D46}\x{7D4B}' . '\x{7D4C}\x{7D4E}\x{7D4F}\x{7D50}\x{7D56}\x{7D5B}\x{7D5E}\x{7D61}\x{7D62}' . '\x{7D63}\x{7D66}\x{7D68}\x{7D6E}\x{7D71}\x{7D72}\x{7D73}\x{7D75}\x{7D76}' . '\x{7D79}\x{7D7D}\x{7D89}\x{7D8F}\x{7D93}\x{7D99}\x{7D9A}\x{7D9B}\x{7D9C}' . '\x{7D9F}\x{7DA2}\x{7DA3}\x{7DAB}\x{7DAC}\x{7DAD}\x{7DAE}\x{7DAF}\x{7DB0}' . '\x{7DB1}\x{7DB2}\x{7DB4}\x{7DB5}\x{7DB8}\x{7DBA}\x{7DBB}\x{7DBD}\x{7DBE}' . '\x{7DBF}\x{7DC7}\x{7DCA}\x{7DCB}\x{7DCF}\x{7DD1}\x{7DD2}\x{7DD5}\x{7DD8}' . '\x{7DDA}\x{7DDC}\x{7DDD}\x{7DDE}\x{7DE0}\x{7DE1}\x{7DE4}\x{7DE8}\x{7DE9}' . '\x{7DEC}\x{7DEF}\x{7DF2}\x{7DF4}\x{7DFB}\x{7E01}\x{7E04}\x{7E05}\x{7E09}' . '\x{7E0A}\x{7E0B}\x{7E12}\x{7E1B}\x{7E1E}\x{7E1F}\x{7E21}\x{7E22}\x{7E23}' . '\x{7E26}\x{7E2B}\x{7E2E}\x{7E31}\x{7E32}\x{7E35}\x{7E37}\x{7E39}\x{7E3A}' . '\x{7E3B}\x{7E3D}\x{7E3E}\x{7E41}\x{7E43}\x{7E46}\x{7E4A}\x{7E4B}\x{7E4D}' . '\x{7E54}\x{7E55}\x{7E56}\x{7E59}\x{7E5A}\x{7E5D}\x{7E5E}\x{7E66}\x{7E67}' . '\x{7E69}\x{7E6A}\x{7E6D}\x{7E70}\x{7E79}\x{7E7B}\x{7E7C}\x{7E7D}\x{7E7F}' . '\x{7E82}\x{7E83}\x{7E88}\x{7E89}\x{7E8C}\x{7E8E}\x{7E8F}\x{7E90}\x{7E92}' . '\x{7E93}\x{7E94}\x{7E96}\x{7E9B}\x{7E9C}\x{7F36}\x{7F38}\x{7F3A}\x{7F45}' . '\x{7F4C}\x{7F4D}\x{7F4E}\x{7F50}\x{7F51}\x{7F54}\x{7F55}\x{7F58}\x{7F5F}' . '\x{7F60}\x{7F67}\x{7F68}\x{7F69}\x{7F6A}\x{7F6B}\x{7F6E}\x{7F70}\x{7F72}' . '\x{7F75}\x{7F77}\x{7F78}\x{7F79}\x{7F82}\x{7F83}\x{7F85}\x{7F86}\x{7F87}' . '\x{7F88}\x{7F8A}\x{7F8C}\x{7F8E}\x{7F94}\x{7F9A}\x{7F9D}\x{7F9E}\x{7FA3}' . '\x{7FA4}\x{7FA8}\x{7FA9}\x{7FAE}\x{7FAF}\x{7FB2}\x{7FB6}\x{7FB8}\x{7FB9}' . '\x{7FBD}\x{7FC1}\x{7FC5}\x{7FC6}\x{7FCA}\x{7FCC}\x{7FD2}\x{7FD4}\x{7FD5}' . '\x{7FE0}\x{7FE1}\x{7FE6}\x{7FE9}\x{7FEB}\x{7FF0}\x{7FF3}\x{7FF9}\x{7FFB}' . '\x{7FFC}\x{8000}\x{8001}\x{8003}\x{8004}\x{8005}\x{8006}\x{800B}\x{800C}' . '\x{8010}\x{8012}\x{8015}\x{8017}\x{8018}\x{8019}\x{801C}\x{8021}\x{8028}' . '\x{8033}\x{8036}\x{803B}\x{803D}\x{803F}\x{8046}\x{804A}\x{8052}\x{8056}' . '\x{8058}\x{805A}\x{805E}\x{805F}\x{8061}\x{8062}\x{8068}\x{806F}\x{8070}' . '\x{8072}\x{8073}\x{8074}\x{8076}\x{8077}\x{8079}\x{807D}\x{807E}\x{807F}' . '\x{8084}\x{8085}\x{8086}\x{8087}\x{8089}\x{808B}\x{808C}\x{8093}\x{8096}' . '\x{8098}\x{809A}\x{809B}\x{809D}\x{80A1}\x{80A2}\x{80A5}\x{80A9}\x{80AA}' . '\x{80AC}\x{80AD}\x{80AF}\x{80B1}\x{80B2}\x{80B4}\x{80BA}\x{80C3}\x{80C4}' . '\x{80C6}\x{80CC}\x{80CE}\x{80D6}\x{80D9}\x{80DA}\x{80DB}\x{80DD}\x{80DE}' . '\x{80E1}\x{80E4}\x{80E5}\x{80EF}\x{80F1}\x{80F4}\x{80F8}\x{80FC}\x{80FD}' . '\x{8102}\x{8105}\x{8106}\x{8107}\x{8108}\x{8109}\x{810A}\x{811A}\x{811B}' . '\x{8123}\x{8129}\x{812F}\x{8131}\x{8133}\x{8139}\x{813E}\x{8146}\x{814B}' . '\x{814E}\x{8150}\x{8151}\x{8153}\x{8154}\x{8155}\x{815F}\x{8165}\x{8166}' . '\x{816B}\x{816E}\x{8170}\x{8171}\x{8174}\x{8178}\x{8179}\x{817A}\x{817F}' . '\x{8180}\x{8182}\x{8183}\x{8188}\x{818A}\x{818F}\x{8193}\x{8195}\x{819A}' . '\x{819C}\x{819D}\x{81A0}\x{81A3}\x{81A4}\x{81A8}\x{81A9}\x{81B0}\x{81B3}' . '\x{81B5}\x{81B8}\x{81BA}\x{81BD}\x{81BE}\x{81BF}\x{81C0}\x{81C2}\x{81C6}' . '\x{81C8}\x{81C9}\x{81CD}\x{81D1}\x{81D3}\x{81D8}\x{81D9}\x{81DA}\x{81DF}' . '\x{81E0}\x{81E3}\x{81E5}\x{81E7}\x{81E8}\x{81EA}\x{81ED}\x{81F3}\x{81F4}' . '\x{81FA}\x{81FB}\x{81FC}\x{81FE}\x{8201}\x{8202}\x{8205}\x{8207}\x{8208}' . '\x{8209}\x{820A}\x{820C}\x{820D}\x{820E}\x{8210}\x{8212}\x{8216}\x{8217}' . '\x{8218}\x{821B}\x{821C}\x{821E}\x{821F}\x{8229}\x{822A}\x{822B}\x{822C}' . '\x{822E}\x{8233}\x{8235}\x{8236}\x{8237}\x{8238}\x{8239}\x{8240}\x{8247}' . '\x{8258}\x{8259}\x{825A}\x{825D}\x{825F}\x{8262}\x{8264}\x{8266}\x{8268}' . '\x{826A}\x{826B}\x{826E}\x{826F}\x{8271}\x{8272}\x{8276}\x{8277}\x{8278}' . '\x{827E}\x{828B}\x{828D}\x{8292}\x{8299}\x{829D}\x{829F}\x{82A5}\x{82A6}' . '\x{82AB}\x{82AC}\x{82AD}\x{82AF}\x{82B1}\x{82B3}\x{82B8}\x{82B9}\x{82BB}' . '\x{82BD}\x{82C5}\x{82D1}\x{82D2}\x{82D3}\x{82D4}\x{82D7}\x{82D9}\x{82DB}' . '\x{82DC}\x{82DE}\x{82DF}\x{82E1}\x{82E3}\x{82E5}\x{82E6}\x{82E7}\x{82EB}' . '\x{82F1}\x{82F3}\x{82F4}\x{82F9}\x{82FA}\x{82FB}\x{8302}\x{8303}\x{8304}' . '\x{8305}\x{8306}\x{8309}\x{830E}\x{8316}\x{8317}\x{8318}\x{831C}\x{8323}' . '\x{8328}\x{832B}\x{832F}\x{8331}\x{8332}\x{8334}\x{8335}\x{8336}\x{8338}' . '\x{8339}\x{8340}\x{8345}\x{8349}\x{834A}\x{834F}\x{8350}\x{8352}\x{8358}' . '\x{8373}\x{8375}\x{8377}\x{837B}\x{837C}\x{8385}\x{8387}\x{8389}\x{838A}' . '\x{838E}\x{8393}\x{8396}\x{839A}\x{839E}\x{839F}\x{83A0}\x{83A2}\x{83A8}' . '\x{83AA}\x{83AB}\x{83B1}\x{83B5}\x{83BD}\x{83C1}\x{83C5}\x{83CA}\x{83CC}' . '\x{83CE}\x{83D3}\x{83D6}\x{83D8}\x{83DC}\x{83DF}\x{83E0}\x{83E9}\x{83EB}' . '\x{83EF}\x{83F0}\x{83F1}\x{83F2}\x{83F4}\x{83F7}\x{83FB}\x{83FD}\x{8403}' . '\x{8404}\x{8407}\x{840B}\x{840C}\x{840D}\x{840E}\x{8413}\x{8420}\x{8422}' . '\x{8429}\x{842A}\x{842C}\x{8431}\x{8435}\x{8438}\x{843C}\x{843D}\x{8446}' . '\x{8449}\x{844E}\x{8457}\x{845B}\x{8461}\x{8462}\x{8463}\x{8466}\x{8469}' . '\x{846B}\x{846C}\x{846D}\x{846E}\x{846F}\x{8471}\x{8475}\x{8477}\x{8479}' . '\x{847A}\x{8482}\x{8484}\x{848B}\x{8490}\x{8494}\x{8499}\x{849C}\x{849F}' . '\x{84A1}\x{84AD}\x{84B2}\x{84B8}\x{84B9}\x{84BB}\x{84BC}\x{84BF}\x{84C1}' . '\x{84C4}\x{84C6}\x{84C9}\x{84CA}\x{84CB}\x{84CD}\x{84D0}\x{84D1}\x{84D6}' . '\x{84D9}\x{84DA}\x{84EC}\x{84EE}\x{84F4}\x{84FC}\x{84FF}\x{8500}\x{8506}' . '\x{8511}\x{8513}\x{8514}\x{8515}\x{8517}\x{8518}\x{851A}\x{851F}\x{8521}' . '\x{8526}\x{852C}\x{852D}\x{8535}\x{853D}\x{8540}\x{8541}\x{8543}\x{8548}' . '\x{8549}\x{854A}\x{854B}\x{854E}\x{8555}\x{8557}\x{8558}\x{855A}\x{8563}' . '\x{8568}\x{8569}\x{856A}\x{856D}\x{8577}\x{857E}\x{8580}\x{8584}\x{8587}' . '\x{8588}\x{858A}\x{8590}\x{8591}\x{8594}\x{8597}\x{8599}\x{859B}\x{859C}' . '\x{85A4}\x{85A6}\x{85A8}\x{85A9}\x{85AA}\x{85AB}\x{85AC}\x{85AE}\x{85AF}' . '\x{85B9}\x{85BA}\x{85C1}\x{85C9}\x{85CD}\x{85CF}\x{85D0}\x{85D5}\x{85DC}' . '\x{85DD}\x{85E4}\x{85E5}\x{85E9}\x{85EA}\x{85F7}\x{85F9}\x{85FA}\x{85FB}' . '\x{85FE}\x{8602}\x{8606}\x{8607}\x{860A}\x{860B}\x{8613}\x{8616}\x{8617}' . '\x{861A}\x{8622}\x{862D}\x{862F}\x{8630}\x{863F}\x{864D}\x{864E}\x{8650}' . '\x{8654}\x{8655}\x{865A}\x{865C}\x{865E}\x{865F}\x{8667}\x{866B}\x{8671}' . '\x{8679}\x{867B}\x{868A}\x{868B}\x{868C}\x{8693}\x{8695}\x{86A3}\x{86A4}' . '\x{86A9}\x{86AA}\x{86AB}\x{86AF}\x{86B0}\x{86B6}\x{86C4}\x{86C6}\x{86C7}' . '\x{86C9}\x{86CB}\x{86CD}\x{86CE}\x{86D4}\x{86D9}\x{86DB}\x{86DE}\x{86DF}' . '\x{86E4}\x{86E9}\x{86EC}\x{86ED}\x{86EE}\x{86EF}\x{86F8}\x{86F9}\x{86FB}' . '\x{86FE}\x{8700}\x{8702}\x{8703}\x{8706}\x{8708}\x{8709}\x{870A}\x{870D}' . '\x{8711}\x{8712}\x{8718}\x{871A}\x{871C}\x{8725}\x{8729}\x{8734}\x{8737}' . '\x{873B}\x{873F}\x{8749}\x{874B}\x{874C}\x{874E}\x{8753}\x{8755}\x{8757}' . '\x{8759}\x{875F}\x{8760}\x{8763}\x{8766}\x{8768}\x{876A}\x{876E}\x{8774}' . '\x{8776}\x{8778}\x{877F}\x{8782}\x{878D}\x{879F}\x{87A2}\x{87AB}\x{87AF}' . '\x{87B3}\x{87BA}\x{87BB}\x{87BD}\x{87C0}\x{87C4}\x{87C6}\x{87C7}\x{87CB}' . '\x{87D0}\x{87D2}\x{87E0}\x{87EF}\x{87F2}\x{87F6}\x{87F7}\x{87F9}\x{87FB}' . '\x{87FE}\x{8805}\x{880D}\x{880E}\x{880F}\x{8811}\x{8815}\x{8816}\x{8821}' . '\x{8822}\x{8823}\x{8827}\x{8831}\x{8836}\x{8839}\x{883B}\x{8840}\x{8842}' . '\x{8844}\x{8846}\x{884C}\x{884D}\x{8852}\x{8853}\x{8857}\x{8859}\x{885B}' . '\x{885D}\x{885E}\x{8861}\x{8862}\x{8863}\x{8868}\x{886B}\x{8870}\x{8872}' . '\x{8875}\x{8877}\x{887D}\x{887E}\x{887F}\x{8881}\x{8882}\x{8888}\x{888B}' . '\x{888D}\x{8892}\x{8896}\x{8897}\x{8899}\x{889E}\x{88A2}\x{88A4}\x{88AB}' . '\x{88AE}\x{88B0}\x{88B1}\x{88B4}\x{88B5}\x{88B7}\x{88BF}\x{88C1}\x{88C2}' . '\x{88C3}\x{88C4}\x{88C5}\x{88CF}\x{88D4}\x{88D5}\x{88D8}\x{88D9}\x{88DC}' . '\x{88DD}\x{88DF}\x{88E1}\x{88E8}\x{88F2}\x{88F3}\x{88F4}\x{88F8}\x{88F9}' . '\x{88FC}\x{88FD}\x{88FE}\x{8902}\x{8904}\x{8907}\x{890A}\x{890C}\x{8910}' . '\x{8912}\x{8913}\x{891D}\x{891E}\x{8925}\x{892A}\x{892B}\x{8936}\x{8938}' . '\x{893B}\x{8941}\x{8943}\x{8944}\x{894C}\x{894D}\x{8956}\x{895E}\x{895F}' . '\x{8960}\x{8964}\x{8966}\x{896A}\x{896D}\x{896F}\x{8972}\x{8974}\x{8977}' . '\x{897E}\x{897F}\x{8981}\x{8983}\x{8986}\x{8987}\x{8988}\x{898A}\x{898B}' . '\x{898F}\x{8993}\x{8996}\x{8997}\x{8998}\x{899A}\x{89A1}\x{89A6}\x{89A7}' . '\x{89A9}\x{89AA}\x{89AC}\x{89AF}\x{89B2}\x{89B3}\x{89BA}\x{89BD}\x{89BF}' . '\x{89C0}\x{89D2}\x{89DA}\x{89DC}\x{89DD}\x{89E3}\x{89E6}\x{89E7}\x{89F4}' . '\x{89F8}\x{8A00}\x{8A02}\x{8A03}\x{8A08}\x{8A0A}\x{8A0C}\x{8A0E}\x{8A10}' . '\x{8A13}\x{8A16}\x{8A17}\x{8A18}\x{8A1B}\x{8A1D}\x{8A1F}\x{8A23}\x{8A25}' . '\x{8A2A}\x{8A2D}\x{8A31}\x{8A33}\x{8A34}\x{8A36}\x{8A3A}\x{8A3B}\x{8A3C}' . '\x{8A41}\x{8A46}\x{8A48}\x{8A50}\x{8A51}\x{8A52}\x{8A54}\x{8A55}\x{8A5B}' . '\x{8A5E}\x{8A60}\x{8A62}\x{8A63}\x{8A66}\x{8A69}\x{8A6B}\x{8A6C}\x{8A6D}' . '\x{8A6E}\x{8A70}\x{8A71}\x{8A72}\x{8A73}\x{8A7C}\x{8A82}\x{8A84}\x{8A85}' . '\x{8A87}\x{8A89}\x{8A8C}\x{8A8D}\x{8A91}\x{8A93}\x{8A95}\x{8A98}\x{8A9A}' . '\x{8A9E}\x{8AA0}\x{8AA1}\x{8AA3}\x{8AA4}\x{8AA5}\x{8AA6}\x{8AA8}\x{8AAC}' . '\x{8AAD}\x{8AB0}\x{8AB2}\x{8AB9}\x{8ABC}\x{8ABF}\x{8AC2}\x{8AC4}\x{8AC7}' . '\x{8ACB}\x{8ACC}\x{8ACD}\x{8ACF}\x{8AD2}\x{8AD6}\x{8ADA}\x{8ADB}\x{8ADC}' . '\x{8ADE}\x{8AE0}\x{8AE1}\x{8AE2}\x{8AE4}\x{8AE6}\x{8AE7}\x{8AEB}\x{8AED}' . '\x{8AEE}\x{8AF1}\x{8AF3}\x{8AF7}\x{8AF8}\x{8AFA}\x{8AFE}\x{8B00}\x{8B01}' . '\x{8B02}\x{8B04}\x{8B07}\x{8B0C}\x{8B0E}\x{8B10}\x{8B14}\x{8B16}\x{8B17}' . '\x{8B19}\x{8B1A}\x{8B1B}\x{8B1D}\x{8B20}\x{8B21}\x{8B26}\x{8B28}\x{8B2B}' . '\x{8B2C}\x{8B33}\x{8B39}\x{8B3E}\x{8B41}\x{8B49}\x{8B4C}\x{8B4E}\x{8B4F}' . '\x{8B56}\x{8B58}\x{8B5A}\x{8B5B}\x{8B5C}\x{8B5F}\x{8B66}\x{8B6B}\x{8B6C}' . '\x{8B6F}\x{8B70}\x{8B71}\x{8B72}\x{8B74}\x{8B77}\x{8B7D}\x{8B80}\x{8B83}' . '\x{8B8A}\x{8B8C}\x{8B8E}\x{8B90}\x{8B92}\x{8B93}\x{8B96}\x{8B99}\x{8B9A}' . '\x{8C37}\x{8C3A}\x{8C3F}\x{8C41}\x{8C46}\x{8C48}\x{8C4A}\x{8C4C}\x{8C4E}' . '\x{8C50}\x{8C55}\x{8C5A}\x{8C61}\x{8C62}\x{8C6A}\x{8C6B}\x{8C6C}\x{8C78}' . '\x{8C79}\x{8C7A}\x{8C7C}\x{8C82}\x{8C85}\x{8C89}\x{8C8A}\x{8C8C}\x{8C8D}' . '\x{8C8E}\x{8C94}\x{8C98}\x{8C9D}\x{8C9E}\x{8CA0}\x{8CA1}\x{8CA2}\x{8CA7}' . '\x{8CA8}\x{8CA9}\x{8CAA}\x{8CAB}\x{8CAC}\x{8CAD}\x{8CAE}\x{8CAF}\x{8CB0}' . '\x{8CB2}\x{8CB3}\x{8CB4}\x{8CB6}\x{8CB7}\x{8CB8}\x{8CBB}\x{8CBC}\x{8CBD}' . '\x{8CBF}\x{8CC0}\x{8CC1}\x{8CC2}\x{8CC3}\x{8CC4}\x{8CC7}\x{8CC8}\x{8CCA}' . '\x{8CCD}\x{8CCE}\x{8CD1}\x{8CD3}\x{8CDA}\x{8CDB}\x{8CDC}\x{8CDE}\x{8CE0}' . '\x{8CE2}\x{8CE3}\x{8CE4}\x{8CE6}\x{8CEA}\x{8CED}\x{8CFA}\x{8CFB}\x{8CFC}' . '\x{8CFD}\x{8D04}\x{8D05}\x{8D07}\x{8D08}\x{8D0A}\x{8D0B}\x{8D0D}\x{8D0F}' . '\x{8D10}\x{8D13}\x{8D14}\x{8D16}\x{8D64}\x{8D66}\x{8D67}\x{8D6B}\x{8D6D}' . '\x{8D70}\x{8D71}\x{8D73}\x{8D74}\x{8D77}\x{8D81}\x{8D85}\x{8D8A}\x{8D99}' . '\x{8DA3}\x{8DA8}\x{8DB3}\x{8DBA}\x{8DBE}\x{8DC2}\x{8DCB}\x{8DCC}\x{8DCF}' . '\x{8DD6}\x{8DDA}\x{8DDB}\x{8DDD}\x{8DDF}\x{8DE1}\x{8DE3}\x{8DE8}\x{8DEA}' . '\x{8DEB}\x{8DEF}\x{8DF3}\x{8DF5}\x{8DFC}\x{8DFF}\x{8E08}\x{8E09}\x{8E0A}' . '\x{8E0F}\x{8E10}\x{8E1D}\x{8E1E}\x{8E1F}\x{8E2A}\x{8E30}\x{8E34}\x{8E35}' . '\x{8E42}\x{8E44}\x{8E47}\x{8E48}\x{8E49}\x{8E4A}\x{8E4C}\x{8E50}\x{8E55}' . '\x{8E59}\x{8E5F}\x{8E60}\x{8E63}\x{8E64}\x{8E72}\x{8E74}\x{8E76}\x{8E7C}' . '\x{8E81}\x{8E84}\x{8E85}\x{8E87}\x{8E8A}\x{8E8B}\x{8E8D}\x{8E91}\x{8E93}' . '\x{8E94}\x{8E99}\x{8EA1}\x{8EAA}\x{8EAB}\x{8EAC}\x{8EAF}\x{8EB0}\x{8EB1}' . '\x{8EBE}\x{8EC5}\x{8EC6}\x{8EC8}\x{8ECA}\x{8ECB}\x{8ECC}\x{8ECD}\x{8ED2}' . '\x{8EDB}\x{8EDF}\x{8EE2}\x{8EE3}\x{8EEB}\x{8EF8}\x{8EFB}\x{8EFC}\x{8EFD}' . '\x{8EFE}\x{8F03}\x{8F05}\x{8F09}\x{8F0A}\x{8F0C}\x{8F12}\x{8F13}\x{8F14}' . '\x{8F15}\x{8F19}\x{8F1B}\x{8F1C}\x{8F1D}\x{8F1F}\x{8F26}\x{8F29}\x{8F2A}' . '\x{8F2F}\x{8F33}\x{8F38}\x{8F39}\x{8F3B}\x{8F3E}\x{8F3F}\x{8F42}\x{8F44}' . '\x{8F45}\x{8F46}\x{8F49}\x{8F4C}\x{8F4D}\x{8F4E}\x{8F57}\x{8F5C}\x{8F5F}' . '\x{8F61}\x{8F62}\x{8F63}\x{8F64}\x{8F9B}\x{8F9C}\x{8F9E}\x{8F9F}\x{8FA3}' . '\x{8FA7}\x{8FA8}\x{8FAD}\x{8FAE}\x{8FAF}\x{8FB0}\x{8FB1}\x{8FB2}\x{8FB7}' . '\x{8FBA}\x{8FBB}\x{8FBC}\x{8FBF}\x{8FC2}\x{8FC4}\x{8FC5}\x{8FCE}\x{8FD1}' . '\x{8FD4}\x{8FDA}\x{8FE2}\x{8FE5}\x{8FE6}\x{8FE9}\x{8FEA}\x{8FEB}\x{8FED}' . '\x{8FEF}\x{8FF0}\x{8FF4}\x{8FF7}\x{8FF8}\x{8FF9}\x{8FFA}\x{8FFD}\x{9000}' . '\x{9001}\x{9003}\x{9005}\x{9006}\x{900B}\x{900D}\x{900E}\x{900F}\x{9010}' . '\x{9011}\x{9013}\x{9014}\x{9015}\x{9016}\x{9017}\x{9019}\x{901A}\x{901D}' . '\x{901E}\x{901F}\x{9020}\x{9021}\x{9022}\x{9023}\x{9027}\x{902E}\x{9031}' . '\x{9032}\x{9035}\x{9036}\x{9038}\x{9039}\x{903C}\x{903E}\x{9041}\x{9042}' . '\x{9045}\x{9047}\x{9049}\x{904A}\x{904B}\x{904D}\x{904E}\x{904F}\x{9050}' . '\x{9051}\x{9052}\x{9053}\x{9054}\x{9055}\x{9056}\x{9058}\x{9059}\x{905C}' . '\x{905E}\x{9060}\x{9061}\x{9063}\x{9065}\x{9068}\x{9069}\x{906D}\x{906E}' . '\x{906F}\x{9072}\x{9075}\x{9076}\x{9077}\x{9078}\x{907A}\x{907C}\x{907D}' . '\x{907F}\x{9080}\x{9081}\x{9082}\x{9083}\x{9084}\x{9087}\x{9089}\x{908A}' . '\x{908F}\x{9091}\x{90A3}\x{90A6}\x{90A8}\x{90AA}\x{90AF}\x{90B1}\x{90B5}' . '\x{90B8}\x{90C1}\x{90CA}\x{90CE}\x{90DB}\x{90E1}\x{90E2}\x{90E4}\x{90E8}' . '\x{90ED}\x{90F5}\x{90F7}\x{90FD}\x{9102}\x{9112}\x{9119}\x{912D}\x{9130}' . '\x{9132}\x{9149}\x{914A}\x{914B}\x{914C}\x{914D}\x{914E}\x{9152}\x{9154}' . '\x{9156}\x{9158}\x{9162}\x{9163}\x{9165}\x{9169}\x{916A}\x{916C}\x{9172}' . '\x{9173}\x{9175}\x{9177}\x{9178}\x{9182}\x{9187}\x{9189}\x{918B}\x{918D}' . '\x{9190}\x{9192}\x{9197}\x{919C}\x{91A2}\x{91A4}\x{91AA}\x{91AB}\x{91AF}' . '\x{91B4}\x{91B5}\x{91B8}\x{91BA}\x{91C0}\x{91C1}\x{91C6}\x{91C7}\x{91C8}' . '\x{91C9}\x{91CB}\x{91CC}\x{91CD}\x{91CE}\x{91CF}\x{91D0}\x{91D1}\x{91D6}' . '\x{91D8}\x{91DB}\x{91DC}\x{91DD}\x{91DF}\x{91E1}\x{91E3}\x{91E6}\x{91E7}' . '\x{91F5}\x{91F6}\x{91FC}\x{91FF}\x{920D}\x{920E}\x{9211}\x{9214}\x{9215}' . '\x{921E}\x{9229}\x{922C}\x{9234}\x{9237}\x{923F}\x{9244}\x{9245}\x{9248}' . '\x{9249}\x{924B}\x{9250}\x{9257}\x{925A}\x{925B}\x{925E}\x{9262}\x{9264}' . '\x{9266}\x{9271}\x{927E}\x{9280}\x{9283}\x{9285}\x{9291}\x{9293}\x{9295}' . '\x{9296}\x{9298}\x{929A}\x{929B}\x{929C}\x{92AD}\x{92B7}\x{92B9}\x{92CF}' . '\x{92D2}\x{92E4}\x{92E9}\x{92EA}\x{92ED}\x{92F2}\x{92F3}\x{92F8}\x{92FA}' . '\x{92FC}\x{9306}\x{930F}\x{9310}\x{9318}\x{9319}\x{931A}\x{9320}\x{9322}' . '\x{9323}\x{9326}\x{9328}\x{932B}\x{932C}\x{932E}\x{932F}\x{9332}\x{9335}' . '\x{933A}\x{933B}\x{9344}\x{934B}\x{934D}\x{9354}\x{9356}\x{935B}\x{935C}' . '\x{9360}\x{936C}\x{936E}\x{9375}\x{937C}\x{937E}\x{938C}\x{9394}\x{9396}' . '\x{9397}\x{939A}\x{93A7}\x{93AC}\x{93AD}\x{93AE}\x{93B0}\x{93B9}\x{93C3}' . '\x{93C8}\x{93D0}\x{93D1}\x{93D6}\x{93D7}\x{93D8}\x{93DD}\x{93E1}\x{93E4}' . '\x{93E5}\x{93E8}\x{9403}\x{9407}\x{9410}\x{9413}\x{9414}\x{9418}\x{9419}' . '\x{941A}\x{9421}\x{942B}\x{9435}\x{9436}\x{9438}\x{943A}\x{9441}\x{9444}' . '\x{9451}\x{9452}\x{9453}\x{945A}\x{945B}\x{945E}\x{9460}\x{9462}\x{946A}' . '\x{9470}\x{9475}\x{9477}\x{947C}\x{947D}\x{947E}\x{947F}\x{9481}\x{9577}' . '\x{9580}\x{9582}\x{9583}\x{9587}\x{9589}\x{958A}\x{958B}\x{958F}\x{9591}' . '\x{9593}\x{9594}\x{9596}\x{9598}\x{9599}\x{95A0}\x{95A2}\x{95A3}\x{95A4}' . '\x{95A5}\x{95A7}\x{95A8}\x{95AD}\x{95B2}\x{95B9}\x{95BB}\x{95BC}\x{95BE}' . '\x{95C3}\x{95C7}\x{95CA}\x{95CC}\x{95CD}\x{95D4}\x{95D5}\x{95D6}\x{95D8}' . '\x{95DC}\x{95E1}\x{95E2}\x{95E5}\x{961C}\x{9621}\x{9628}\x{962A}\x{962E}' . '\x{962F}\x{9632}\x{963B}\x{963F}\x{9640}\x{9642}\x{9644}\x{964B}\x{964C}' . '\x{964D}\x{964F}\x{9650}\x{965B}\x{965C}\x{965D}\x{965E}\x{965F}\x{9662}' . '\x{9663}\x{9664}\x{9665}\x{9666}\x{966A}\x{966C}\x{9670}\x{9672}\x{9673}' . '\x{9675}\x{9676}\x{9677}\x{9678}\x{967A}\x{967D}\x{9685}\x{9686}\x{9688}' . '\x{968A}\x{968B}\x{968D}\x{968E}\x{968F}\x{9694}\x{9695}\x{9697}\x{9698}' . '\x{9699}\x{969B}\x{969C}\x{96A0}\x{96A3}\x{96A7}\x{96A8}\x{96AA}\x{96B0}' . '\x{96B1}\x{96B2}\x{96B4}\x{96B6}\x{96B7}\x{96B8}\x{96B9}\x{96BB}\x{96BC}' . '\x{96C0}\x{96C1}\x{96C4}\x{96C5}\x{96C6}\x{96C7}\x{96C9}\x{96CB}\x{96CC}' . '\x{96CD}\x{96CE}\x{96D1}\x{96D5}\x{96D6}\x{96D9}\x{96DB}\x{96DC}\x{96E2}' . '\x{96E3}\x{96E8}\x{96EA}\x{96EB}\x{96F0}\x{96F2}\x{96F6}\x{96F7}\x{96F9}' . '\x{96FB}\x{9700}\x{9704}\x{9706}\x{9707}\x{9708}\x{970A}\x{970D}\x{970E}' . '\x{970F}\x{9711}\x{9713}\x{9716}\x{9719}\x{971C}\x{971E}\x{9724}\x{9727}' . '\x{972A}\x{9730}\x{9732}\x{9738}\x{9739}\x{973D}\x{973E}\x{9742}\x{9744}' . '\x{9746}\x{9748}\x{9749}\x{9752}\x{9756}\x{9759}\x{975C}\x{975E}\x{9760}' . '\x{9761}\x{9762}\x{9764}\x{9766}\x{9768}\x{9769}\x{976B}\x{976D}\x{9771}' . '\x{9774}\x{9779}\x{977A}\x{977C}\x{9781}\x{9784}\x{9785}\x{9786}\x{978B}' . '\x{978D}\x{978F}\x{9790}\x{9798}\x{979C}\x{97A0}\x{97A3}\x{97A6}\x{97A8}' . '\x{97AB}\x{97AD}\x{97B3}\x{97B4}\x{97C3}\x{97C6}\x{97C8}\x{97CB}\x{97D3}' . '\x{97DC}\x{97ED}\x{97EE}\x{97F2}\x{97F3}\x{97F5}\x{97F6}\x{97FB}\x{97FF}' . '\x{9801}\x{9802}\x{9803}\x{9805}\x{9806}\x{9808}\x{980C}\x{980F}\x{9810}' . '\x{9811}\x{9812}\x{9813}\x{9817}\x{9818}\x{981A}\x{9821}\x{9824}\x{982C}' . '\x{982D}\x{9834}\x{9837}\x{9838}\x{983B}\x{983C}\x{983D}\x{9846}\x{984B}' . '\x{984C}\x{984D}\x{984E}\x{984F}\x{9854}\x{9855}\x{9858}\x{985B}\x{985E}' . '\x{9867}\x{986B}\x{986F}\x{9870}\x{9871}\x{9873}\x{9874}\x{98A8}\x{98AA}' . '\x{98AF}\x{98B1}\x{98B6}\x{98C3}\x{98C4}\x{98C6}\x{98DB}\x{98DC}\x{98DF}' . '\x{98E2}\x{98E9}\x{98EB}\x{98ED}\x{98EE}\x{98EF}\x{98F2}\x{98F4}\x{98FC}' . '\x{98FD}\x{98FE}\x{9903}\x{9905}\x{9909}\x{990A}\x{990C}\x{9910}\x{9912}' . '\x{9913}\x{9914}\x{9918}\x{991D}\x{991E}\x{9920}\x{9921}\x{9924}\x{9928}' . '\x{992C}\x{992E}\x{993D}\x{993E}\x{9942}\x{9945}\x{9949}\x{994B}\x{994C}' . '\x{9950}\x{9951}\x{9952}\x{9955}\x{9957}\x{9996}\x{9997}\x{9998}\x{9999}' . '\x{99A5}\x{99A8}\x{99AC}\x{99AD}\x{99AE}\x{99B3}\x{99B4}\x{99BC}\x{99C1}' . '\x{99C4}\x{99C5}\x{99C6}\x{99C8}\x{99D0}\x{99D1}\x{99D2}\x{99D5}\x{99D8}' . '\x{99DB}\x{99DD}\x{99DF}\x{99E2}\x{99ED}\x{99EE}\x{99F1}\x{99F2}\x{99F8}' . '\x{99FB}\x{99FF}\x{9A01}\x{9A05}\x{9A0E}\x{9A0F}\x{9A12}\x{9A13}\x{9A19}' . '\x{9A28}\x{9A2B}\x{9A30}\x{9A37}\x{9A3E}\x{9A40}\x{9A42}\x{9A43}\x{9A45}' . '\x{9A4D}\x{9A55}\x{9A57}\x{9A5A}\x{9A5B}\x{9A5F}\x{9A62}\x{9A64}\x{9A65}' . '\x{9A69}\x{9A6A}\x{9A6B}\x{9AA8}\x{9AAD}\x{9AB0}\x{9AB8}\x{9ABC}\x{9AC0}' . '\x{9AC4}\x{9ACF}\x{9AD1}\x{9AD3}\x{9AD4}\x{9AD8}\x{9ADE}\x{9ADF}\x{9AE2}' . '\x{9AE3}\x{9AE6}\x{9AEA}\x{9AEB}\x{9AED}\x{9AEE}\x{9AEF}\x{9AF1}\x{9AF4}' . '\x{9AF7}\x{9AFB}\x{9B06}\x{9B18}\x{9B1A}\x{9B1F}\x{9B22}\x{9B23}\x{9B25}' . '\x{9B27}\x{9B28}\x{9B29}\x{9B2A}\x{9B2E}\x{9B2F}\x{9B31}\x{9B32}\x{9B3B}' . '\x{9B3C}\x{9B41}\x{9B42}\x{9B43}\x{9B44}\x{9B45}\x{9B4D}\x{9B4E}\x{9B4F}' . '\x{9B51}\x{9B54}\x{9B58}\x{9B5A}\x{9B6F}\x{9B74}\x{9B83}\x{9B8E}\x{9B91}' . '\x{9B92}\x{9B93}\x{9B96}\x{9B97}\x{9B9F}\x{9BA0}\x{9BA8}\x{9BAA}\x{9BAB}' . '\x{9BAD}\x{9BAE}\x{9BB4}\x{9BB9}\x{9BC0}\x{9BC6}\x{9BC9}\x{9BCA}\x{9BCF}' . '\x{9BD1}\x{9BD2}\x{9BD4}\x{9BD6}\x{9BDB}\x{9BE1}\x{9BE2}\x{9BE3}\x{9BE4}' . '\x{9BE8}\x{9BF0}\x{9BF1}\x{9BF2}\x{9BF5}\x{9C04}\x{9C06}\x{9C08}\x{9C09}' . '\x{9C0A}\x{9C0C}\x{9C0D}\x{9C10}\x{9C12}\x{9C13}\x{9C14}\x{9C15}\x{9C1B}' . '\x{9C21}\x{9C24}\x{9C25}\x{9C2D}\x{9C2E}\x{9C2F}\x{9C30}\x{9C32}\x{9C39}' . '\x{9C3A}\x{9C3B}\x{9C3E}\x{9C46}\x{9C47}\x{9C48}\x{9C52}\x{9C57}\x{9C5A}' . '\x{9C60}\x{9C67}\x{9C76}\x{9C78}\x{9CE5}\x{9CE7}\x{9CE9}\x{9CEB}\x{9CEC}' . '\x{9CF0}\x{9CF3}\x{9CF4}\x{9CF6}\x{9D03}\x{9D06}\x{9D07}\x{9D08}\x{9D09}' . '\x{9D0E}\x{9D12}\x{9D15}\x{9D1B}\x{9D1F}\x{9D23}\x{9D26}\x{9D28}\x{9D2A}' . '\x{9D2B}\x{9D2C}\x{9D3B}\x{9D3E}\x{9D3F}\x{9D41}\x{9D44}\x{9D46}\x{9D48}' . '\x{9D50}\x{9D51}\x{9D59}\x{9D5C}\x{9D5D}\x{9D5E}\x{9D60}\x{9D61}\x{9D64}' . '\x{9D6C}\x{9D6F}\x{9D72}\x{9D7A}\x{9D87}\x{9D89}\x{9D8F}\x{9D9A}\x{9DA4}' . '\x{9DA9}\x{9DAB}\x{9DAF}\x{9DB2}\x{9DB4}\x{9DB8}\x{9DBA}\x{9DBB}\x{9DC1}' . '\x{9DC2}\x{9DC4}\x{9DC6}\x{9DCF}\x{9DD3}\x{9DD9}\x{9DE6}\x{9DED}\x{9DEF}' . '\x{9DF2}\x{9DF8}\x{9DF9}\x{9DFA}\x{9DFD}\x{9E1A}\x{9E1B}\x{9E1E}\x{9E75}' . '\x{9E78}\x{9E79}\x{9E7D}\x{9E7F}\x{9E81}\x{9E88}\x{9E8B}\x{9E8C}\x{9E91}' . '\x{9E92}\x{9E93}\x{9E95}\x{9E97}\x{9E9D}\x{9E9F}\x{9EA5}\x{9EA6}\x{9EA9}' . '\x{9EAA}\x{9EAD}\x{9EB8}\x{9EB9}\x{9EBA}\x{9EBB}\x{9EBC}\x{9EBE}\x{9EBF}' . '\x{9EC4}\x{9ECC}\x{9ECD}\x{9ECE}\x{9ECF}\x{9ED0}\x{9ED2}\x{9ED4}\x{9ED8}' . '\x{9ED9}\x{9EDB}\x{9EDC}\x{9EDD}\x{9EDE}\x{9EE0}\x{9EE5}\x{9EE8}\x{9EEF}' . '\x{9EF4}\x{9EF6}\x{9EF7}\x{9EF9}\x{9EFB}\x{9EFC}\x{9EFD}\x{9F07}\x{9F08}' . '\x{9F0E}\x{9F13}\x{9F15}\x{9F20}\x{9F21}\x{9F2C}\x{9F3B}\x{9F3E}\x{9F4A}' . '\x{9F4B}\x{9F4E}\x{9F4F}\x{9F52}\x{9F54}\x{9F5F}\x{9F60}\x{9F61}\x{9F62}' . '\x{9F63}\x{9F66}\x{9F67}\x{9F6A}\x{9F6C}\x{9F72}\x{9F76}\x{9F77}\x{9F8D}' . '\x{9F95}\x{9F9C}\x{9F9D}\x{9FA0}]{1,15}$/iu', 12 =&gt; '/^[\x{002d}0-9a-z\x{3447}\x{3473}\x{359E}\x{360E}\x{361A}\x{3918}\x{396E}\x{39CF}\x{39D0}' . '\x{39DF}\x{3A73}\x{3B4E}\x{3C6E}\x{3CE0}\x{4056}\x{415F}\x{4337}\x{43AC}' . '\x{43B1}\x{43DD}\x{44D6}\x{464C}\x{4661}\x{4723}\x{4729}\x{477C}\x{478D}' . '\x{4947}\x{497A}\x{497D}\x{4982}\x{4983}\x{4985}\x{4986}\x{499B}\x{499F}' . '\x{49B6}\x{49B7}\x{4C77}\x{4C9F}\x{4CA0}\x{4CA1}\x{4CA2}\x{4CA3}\x{4D13}' . '\x{4D14}\x{4D15}\x{4D16}\x{4D17}\x{4D18}\x{4D19}\x{4DAE}\x{4E00}\x{4E01}' . '\x{4E02}\x{4E03}\x{4E04}\x{4E05}\x{4E06}\x{4E07}\x{4E08}\x{4E09}\x{4E0A}' . '\x{4E0B}\x{4E0C}\x{4E0D}\x{4E0E}\x{4E0F}\x{4E10}\x{4E11}\x{4E13}\x{4E14}' . '\x{4E15}\x{4E16}\x{4E17}\x{4E18}\x{4E19}\x{4E1A}\x{4E1B}\x{4E1C}\x{4E1D}' . '\x{4E1E}\x{4E1F}\x{4E20}\x{4E21}\x{4E22}\x{4E23}\x{4E24}\x{4E25}\x{4E26}' . '\x{4E27}\x{4E28}\x{4E2A}\x{4E2B}\x{4E2C}\x{4E2D}\x{4E2E}\x{4E2F}\x{4E30}' . '\x{4E31}\x{4E32}\x{4E33}\x{4E34}\x{4E35}\x{4E36}\x{4E37}\x{4E38}\x{4E39}' . '\x{4E3A}\x{4E3B}\x{4E3C}\x{4E3D}\x{4E3E}\x{4E3F}\x{4E40}\x{4E41}\x{4E42}' . '\x{4E43}\x{4E44}\x{4E45}\x{4E46}\x{4E47}\x{4E48}\x{4E49}\x{4E4A}\x{4E4B}' . '\x{4E4C}\x{4E4D}\x{4E4E}\x{4E4F}\x{4E50}\x{4E51}\x{4E52}\x{4E53}\x{4E54}' . '\x{4E56}\x{4E57}\x{4E58}\x{4E59}\x{4E5A}\x{4E5B}\x{4E5C}\x{4E5D}\x{4E5E}' . '\x{4E5F}\x{4E60}\x{4E61}\x{4E62}\x{4E63}\x{4E64}\x{4E65}\x{4E66}\x{4E67}' . '\x{4E69}\x{4E6A}\x{4E6B}\x{4E6C}\x{4E6D}\x{4E6E}\x{4E6F}\x{4E70}\x{4E71}' . '\x{4E72}\x{4E73}\x{4E74}\x{4E75}\x{4E76}\x{4E77}\x{4E78}\x{4E7A}\x{4E7B}' . '\x{4E7C}\x{4E7D}\x{4E7E}\x{4E7F}\x{4E80}\x{4E81}\x{4E82}\x{4E83}\x{4E84}' . '\x{4E85}\x{4E86}\x{4E87}\x{4E88}\x{4E89}\x{4E8B}\x{4E8C}\x{4E8D}\x{4E8E}' . '\x{4E8F}\x{4E90}\x{4E91}\x{4E92}\x{4E93}\x{4E94}\x{4E95}\x{4E97}\x{4E98}' . '\x{4E99}\x{4E9A}\x{4E9B}\x{4E9C}\x{4E9D}\x{4E9E}\x{4E9F}\x{4EA0}\x{4EA1}' . '\x{4EA2}\x{4EA4}\x{4EA5}\x{4EA6}\x{4EA7}\x{4EA8}\x{4EA9}\x{4EAA}\x{4EAB}' . '\x{4EAC}\x{4EAD}\x{4EAE}\x{4EAF}\x{4EB0}\x{4EB1}\x{4EB2}\x{4EB3}\x{4EB4}' . '\x{4EB5}\x{4EB6}\x{4EB7}\x{4EB8}\x{4EB9}\x{4EBA}\x{4EBB}\x{4EBD}\x{4EBE}' . '\x{4EBF}\x{4EC0}\x{4EC1}\x{4EC2}\x{4EC3}\x{4EC4}\x{4EC5}\x{4EC6}\x{4EC7}' . '\x{4EC8}\x{4EC9}\x{4ECA}\x{4ECB}\x{4ECD}\x{4ECE}\x{4ECF}\x{4ED0}\x{4ED1}' . '\x{4ED2}\x{4ED3}\x{4ED4}\x{4ED5}\x{4ED6}\x{4ED7}\x{4ED8}\x{4ED9}\x{4EDA}' . '\x{4EDB}\x{4EDC}\x{4EDD}\x{4EDE}\x{4EDF}\x{4EE0}\x{4EE1}\x{4EE2}\x{4EE3}' . '\x{4EE4}\x{4EE5}\x{4EE6}\x{4EE8}\x{4EE9}\x{4EEA}\x{4EEB}\x{4EEC}\x{4EEF}' . '\x{4EF0}\x{4EF1}\x{4EF2}\x{4EF3}\x{4EF4}\x{4EF5}\x{4EF6}\x{4EF7}\x{4EFB}' . '\x{4EFD}\x{4EFF}\x{4F00}\x{4F01}\x{4F02}\x{4F03}\x{4F04}\x{4F05}\x{4F06}' . '\x{4F08}\x{4F09}\x{4F0A}\x{4F0B}\x{4F0C}\x{4F0D}\x{4F0E}\x{4F0F}\x{4F10}' . '\x{4F11}\x{4F12}\x{4F13}\x{4F14}\x{4F15}\x{4F17}\x{4F18}\x{4F19}\x{4F1A}' . '\x{4F1B}\x{4F1C}\x{4F1D}\x{4F1E}\x{4F1F}\x{4F20}\x{4F21}\x{4F22}\x{4F23}' . '\x{4F24}\x{4F25}\x{4F26}\x{4F27}\x{4F29}\x{4F2A}\x{4F2B}\x{4F2C}\x{4F2D}' . '\x{4F2E}\x{4F2F}\x{4F30}\x{4F32}\x{4F33}\x{4F34}\x{4F36}\x{4F38}\x{4F39}' . '\x{4F3A}\x{4F3B}\x{4F3C}\x{4F3D}\x{4F3E}\x{4F3F}\x{4F41}\x{4F42}\x{4F43}' . '\x{4F45}\x{4F46}\x{4F47}\x{4F48}\x{4F49}\x{4F4A}\x{4F4B}\x{4F4C}\x{4F4D}' . '\x{4F4E}\x{4F4F}\x{4F50}\x{4F51}\x{4F52}\x{4F53}\x{4F54}\x{4F55}\x{4F56}' . '\x{4F57}\x{4F58}\x{4F59}\x{4F5A}\x{4F5B}\x{4F5C}\x{4F5D}\x{4F5E}\x{4F5F}' . '\x{4F60}\x{4F61}\x{4F62}\x{4F63}\x{4F64}\x{4F65}\x{4F66}\x{4F67}\x{4F68}' . '\x{4F69}\x{4F6A}\x{4F6B}\x{4F6C}\x{4F6D}\x{4F6E}\x{4F6F}\x{4F70}\x{4F72}' . '\x{4F73}\x{4F74}\x{4F75}\x{4F76}\x{4F77}\x{4F78}\x{4F79}\x{4F7A}\x{4F7B}' . '\x{4F7C}\x{4F7D}\x{4F7E}\x{4F7F}\x{4F80}\x{4F81}\x{4F82}\x{4F83}\x{4F84}' . '\x{4F85}\x{4F86}\x{4F87}\x{4F88}\x{4F89}\x{4F8A}\x{4F8B}\x{4F8D}\x{4F8F}' . '\x{4F90}\x{4F91}\x{4F92}\x{4F93}\x{4F94}\x{4F95}\x{4F96}\x{4F97}\x{4F98}' . '\x{4F99}\x{4F9A}\x{4F9B}\x{4F9C}\x{4F9D}\x{4F9E}\x{4F9F}\x{4FA0}\x{4FA1}' . '\x{4FA3}\x{4FA4}\x{4FA5}\x{4FA6}\x{4FA7}\x{4FA8}\x{4FA9}\x{4FAA}\x{4FAB}' . '\x{4FAC}\x{4FAE}\x{4FAF}\x{4FB0}\x{4FB1}\x{4FB2}\x{4FB3}\x{4FB4}\x{4FB5}' . '\x{4FB6}\x{4FB7}\x{4FB8}\x{4FB9}\x{4FBA}\x{4FBB}\x{4FBC}\x{4FBE}\x{4FBF}' . '\x{4FC0}\x{4FC1}\x{4FC2}\x{4FC3}\x{4FC4}\x{4FC5}\x{4FC7}\x{4FC9}\x{4FCA}' . '\x{4FCB}\x{4FCD}\x{4FCE}\x{4FCF}\x{4FD0}\x{4FD1}\x{4FD2}\x{4FD3}\x{4FD4}' . '\x{4FD5}\x{4FD6}\x{4FD7}\x{4FD8}\x{4FD9}\x{4FDA}\x{4FDB}\x{4FDC}\x{4FDD}' . '\x{4FDE}\x{4FDF}\x{4FE0}\x{4FE1}\x{4FE3}\x{4FE4}\x{4FE5}\x{4FE6}\x{4FE7}' . '\x{4FE8}\x{4FE9}\x{4FEA}\x{4FEB}\x{4FEC}\x{4FED}\x{4FEE}\x{4FEF}\x{4FF0}' . '\x{4FF1}\x{4FF2}\x{4FF3}\x{4FF4}\x{4FF5}\x{4FF6}\x{4FF7}\x{4FF8}\x{4FF9}' . '\x{4FFA}\x{4FFB}\x{4FFE}\x{4FFF}\x{5000}\x{5001}\x{5002}\x{5003}\x{5004}' . '\x{5005}\x{5006}\x{5007}\x{5008}\x{5009}\x{500A}\x{500B}\x{500C}\x{500D}' . '\x{500E}\x{500F}\x{5011}\x{5012}\x{5013}\x{5014}\x{5015}\x{5016}\x{5017}' . '\x{5018}\x{5019}\x{501A}\x{501B}\x{501C}\x{501D}\x{501E}\x{501F}\x{5020}' . '\x{5021}\x{5022}\x{5023}\x{5024}\x{5025}\x{5026}\x{5027}\x{5028}\x{5029}' . '\x{502A}\x{502B}\x{502C}\x{502D}\x{502E}\x{502F}\x{5030}\x{5031}\x{5032}' . '\x{5033}\x{5035}\x{5036}\x{5037}\x{5039}\x{503A}\x{503B}\x{503C}\x{503E}' . '\x{503F}\x{5040}\x{5041}\x{5043}\x{5044}\x{5045}\x{5046}\x{5047}\x{5048}' . '\x{5049}\x{504A}\x{504B}\x{504C}\x{504D}\x{504E}\x{504F}\x{5051}\x{5053}' . '\x{5054}\x{5055}\x{5056}\x{5057}\x{5059}\x{505A}\x{505B}\x{505C}\x{505D}' . '\x{505E}\x{505F}\x{5060}\x{5061}\x{5062}\x{5063}\x{5064}\x{5065}\x{5066}' . '\x{5067}\x{5068}\x{5069}\x{506A}\x{506B}\x{506C}\x{506D}\x{506E}\x{506F}' . '\x{5070}\x{5071}\x{5072}\x{5073}\x{5074}\x{5075}\x{5076}\x{5077}\x{5078}' . '\x{5079}\x{507A}\x{507B}\x{507D}\x{507E}\x{507F}\x{5080}\x{5082}\x{5083}' . '\x{5084}\x{5085}\x{5086}\x{5087}\x{5088}\x{5089}\x{508A}\x{508B}\x{508C}' . '\x{508D}\x{508E}\x{508F}\x{5090}\x{5091}\x{5092}\x{5094}\x{5095}\x{5096}' . '\x{5098}\x{5099}\x{509A}\x{509B}\x{509C}\x{509D}\x{509E}\x{50A2}\x{50A3}' . '\x{50A4}\x{50A5}\x{50A6}\x{50A7}\x{50A8}\x{50A9}\x{50AA}\x{50AB}\x{50AC}' . '\x{50AD}\x{50AE}\x{50AF}\x{50B0}\x{50B1}\x{50B2}\x{50B3}\x{50B4}\x{50B5}' . '\x{50B6}\x{50B7}\x{50B8}\x{50BA}\x{50BB}\x{50BC}\x{50BD}\x{50BE}\x{50BF}' . '\x{50C0}\x{50C1}\x{50C2}\x{50C4}\x{50C5}\x{50C6}\x{50C7}\x{50C8}\x{50C9}' . '\x{50CA}\x{50CB}\x{50CC}\x{50CD}\x{50CE}\x{50CF}\x{50D0}\x{50D1}\x{50D2}' . '\x{50D3}\x{50D4}\x{50D5}\x{50D6}\x{50D7}\x{50D9}\x{50DA}\x{50DB}\x{50DC}' . '\x{50DD}\x{50DE}\x{50E0}\x{50E3}\x{50E4}\x{50E5}\x{50E6}\x{50E7}\x{50E8}' . '\x{50E9}\x{50EA}\x{50EC}\x{50ED}\x{50EE}\x{50EF}\x{50F0}\x{50F1}\x{50F2}' . '\x{50F3}\x{50F5}\x{50F6}\x{50F8}\x{50F9}\x{50FA}\x{50FB}\x{50FC}\x{50FD}' . '\x{50FE}\x{50FF}\x{5100}\x{5101}\x{5102}\x{5103}\x{5104}\x{5105}\x{5106}' . '\x{5107}\x{5108}\x{5109}\x{510A}\x{510B}\x{510C}\x{510D}\x{510E}\x{510F}' . '\x{5110}\x{5111}\x{5112}\x{5113}\x{5114}\x{5115}\x{5116}\x{5117}\x{5118}' . '\x{5119}\x{511A}\x{511C}\x{511D}\x{511E}\x{511F}\x{5120}\x{5121}\x{5122}' . '\x{5123}\x{5124}\x{5125}\x{5126}\x{5127}\x{5129}\x{512A}\x{512C}\x{512D}' . '\x{512E}\x{512F}\x{5130}\x{5131}\x{5132}\x{5133}\x{5134}\x{5135}\x{5136}' . '\x{5137}\x{5138}\x{5139}\x{513A}\x{513B}\x{513C}\x{513D}\x{513E}\x{513F}' . '\x{5140}\x{5141}\x{5143}\x{5144}\x{5145}\x{5146}\x{5147}\x{5148}\x{5149}' . '\x{514B}\x{514C}\x{514D}\x{514E}\x{5150}\x{5151}\x{5152}\x{5154}\x{5155}' . '\x{5156}\x{5157}\x{5159}\x{515A}\x{515B}\x{515C}\x{515D}\x{515E}\x{515F}' . '\x{5161}\x{5162}\x{5163}\x{5165}\x{5166}\x{5167}\x{5168}\x{5169}\x{516A}' . '\x{516B}\x{516C}\x{516D}\x{516E}\x{516F}\x{5170}\x{5171}\x{5173}\x{5174}' . '\x{5175}\x{5176}\x{5177}\x{5178}\x{5179}\x{517A}\x{517B}\x{517C}\x{517D}' . '\x{517F}\x{5180}\x{5181}\x{5182}\x{5185}\x{5186}\x{5187}\x{5188}\x{5189}' . '\x{518A}\x{518B}\x{518C}\x{518D}\x{518F}\x{5190}\x{5191}\x{5192}\x{5193}' . '\x{5194}\x{5195}\x{5196}\x{5197}\x{5198}\x{5199}\x{519A}\x{519B}\x{519C}' . '\x{519D}\x{519E}\x{519F}\x{51A0}\x{51A2}\x{51A4}\x{51A5}\x{51A6}\x{51A7}' . '\x{51A8}\x{51AA}\x{51AB}\x{51AC}\x{51AE}\x{51AF}\x{51B0}\x{51B1}\x{51B2}' . '\x{51B3}\x{51B5}\x{51B6}\x{51B7}\x{51B9}\x{51BB}\x{51BC}\x{51BD}\x{51BE}' . '\x{51BF}\x{51C0}\x{51C1}\x{51C3}\x{51C4}\x{51C5}\x{51C6}\x{51C7}\x{51C8}' . '\x{51C9}\x{51CA}\x{51CB}\x{51CC}\x{51CD}\x{51CE}\x{51CF}\x{51D0}\x{51D1}' . '\x{51D4}\x{51D5}\x{51D6}\x{51D7}\x{51D8}\x{51D9}\x{51DA}\x{51DB}\x{51DC}' . '\x{51DD}\x{51DE}\x{51E0}\x{51E1}\x{51E2}\x{51E3}\x{51E4}\x{51E5}\x{51E7}' . '\x{51E8}\x{51E9}\x{51EA}\x{51EB}\x{51ED}\x{51EF}\x{51F0}\x{51F1}\x{51F3}' . '\x{51F4}\x{51F5}\x{51F6}\x{51F7}\x{51F8}\x{51F9}\x{51FA}\x{51FB}\x{51FC}' . '\x{51FD}\x{51FE}\x{51FF}\x{5200}\x{5201}\x{5202}\x{5203}\x{5204}\x{5205}' . '\x{5206}\x{5207}\x{5208}\x{5209}\x{520A}\x{520B}\x{520C}\x{520D}\x{520E}' . '\x{520F}\x{5210}\x{5211}\x{5212}\x{5213}\x{5214}\x{5215}\x{5216}\x{5217}' . '\x{5218}\x{5219}\x{521A}\x{521B}\x{521C}\x{521D}\x{521E}\x{521F}\x{5220}' . '\x{5221}\x{5222}\x{5223}\x{5224}\x{5225}\x{5226}\x{5228}\x{5229}\x{522A}' . '\x{522B}\x{522C}\x{522D}\x{522E}\x{522F}\x{5230}\x{5231}\x{5232}\x{5233}' . '\x{5234}\x{5235}\x{5236}\x{5237}\x{5238}\x{5239}\x{523A}\x{523B}\x{523C}' . '\x{523D}\x{523E}\x{523F}\x{5240}\x{5241}\x{5242}\x{5243}\x{5244}\x{5245}' . '\x{5246}\x{5247}\x{5248}\x{5249}\x{524A}\x{524B}\x{524C}\x{524D}\x{524E}' . '\x{5250}\x{5251}\x{5252}\x{5254}\x{5255}\x{5256}\x{5257}\x{5258}\x{5259}' . '\x{525A}\x{525B}\x{525C}\x{525D}\x{525E}\x{525F}\x{5260}\x{5261}\x{5262}' . '\x{5263}\x{5264}\x{5265}\x{5267}\x{5268}\x{5269}\x{526A}\x{526B}\x{526C}' . '\x{526D}\x{526E}\x{526F}\x{5270}\x{5272}\x{5273}\x{5274}\x{5275}\x{5276}' . '\x{5277}\x{5278}\x{527A}\x{527B}\x{527C}\x{527D}\x{527E}\x{527F}\x{5280}' . '\x{5281}\x{5282}\x{5283}\x{5284}\x{5286}\x{5287}\x{5288}\x{5289}\x{528A}' . '\x{528B}\x{528C}\x{528D}\x{528F}\x{5290}\x{5291}\x{5292}\x{5293}\x{5294}' . '\x{5295}\x{5296}\x{5297}\x{5298}\x{5299}\x{529A}\x{529B}\x{529C}\x{529D}' . '\x{529E}\x{529F}\x{52A0}\x{52A1}\x{52A2}\x{52A3}\x{52A5}\x{52A6}\x{52A7}' . '\x{52A8}\x{52A9}\x{52AA}\x{52AB}\x{52AC}\x{52AD}\x{52AE}\x{52AF}\x{52B0}' . '\x{52B1}\x{52B2}\x{52B3}\x{52B4}\x{52B5}\x{52B6}\x{52B7}\x{52B8}\x{52B9}' . '\x{52BA}\x{52BB}\x{52BC}\x{52BD}\x{52BE}\x{52BF}\x{52C0}\x{52C1}\x{52C2}' . '\x{52C3}\x{52C6}\x{52C7}\x{52C9}\x{52CA}\x{52CB}\x{52CD}\x{52CF}\x{52D0}' . '\x{52D2}\x{52D3}\x{52D5}\x{52D6}\x{52D7}\x{52D8}\x{52D9}\x{52DA}\x{52DB}' . '\x{52DC}\x{52DD}\x{52DE}\x{52DF}\x{52E0}\x{52E2}\x{52E3}\x{52E4}\x{52E6}' . '\x{52E7}\x{52E8}\x{52E9}\x{52EA}\x{52EB}\x{52EC}\x{52ED}\x{52EF}\x{52F0}' . '\x{52F1}\x{52F2}\x{52F3}\x{52F4}\x{52F5}\x{52F6}\x{52F7}\x{52F8}\x{52F9}' . '\x{52FA}\x{52FB}\x{52FC}\x{52FD}\x{52FE}\x{52FF}\x{5300}\x{5301}\x{5302}' . '\x{5305}\x{5306}\x{5307}\x{5308}\x{5309}\x{530A}\x{530B}\x{530C}\x{530D}' . '\x{530E}\x{530F}\x{5310}\x{5311}\x{5312}\x{5313}\x{5314}\x{5315}\x{5316}' . '\x{5317}\x{5319}\x{531A}\x{531C}\x{531D}\x{531F}\x{5320}\x{5321}\x{5322}' . '\x{5323}\x{5324}\x{5325}\x{5326}\x{5328}\x{532A}\x{532B}\x{532C}\x{532D}' . '\x{532E}\x{532F}\x{5330}\x{5331}\x{5333}\x{5334}\x{5337}\x{5339}\x{533A}' . '\x{533B}\x{533C}\x{533D}\x{533E}\x{533F}\x{5340}\x{5341}\x{5343}\x{5344}' . '\x{5345}\x{5346}\x{5347}\x{5348}\x{5349}\x{534A}\x{534B}\x{534C}\x{534D}' . '\x{534E}\x{534F}\x{5350}\x{5351}\x{5352}\x{5353}\x{5354}\x{5355}\x{5356}' . '\x{5357}\x{5358}\x{5359}\x{535A}\x{535C}\x{535E}\x{535F}\x{5360}\x{5361}' . '\x{5362}\x{5363}\x{5364}\x{5365}\x{5366}\x{5367}\x{5369}\x{536B}\x{536C}' . '\x{536E}\x{536F}\x{5370}\x{5371}\x{5372}\x{5373}\x{5374}\x{5375}\x{5376}' . '\x{5377}\x{5378}\x{5379}\x{537A}\x{537B}\x{537C}\x{537D}\x{537E}\x{537F}' . '\x{5381}\x{5382}\x{5383}\x{5384}\x{5385}\x{5386}\x{5387}\x{5388}\x{5389}' . '\x{538A}\x{538B}\x{538C}\x{538D}\x{538E}\x{538F}\x{5390}\x{5391}\x{5392}' . '\x{5393}\x{5394}\x{5395}\x{5396}\x{5397}\x{5398}\x{5399}\x{539A}\x{539B}' . '\x{539C}\x{539D}\x{539E}\x{539F}\x{53A0}\x{53A2}\x{53A3}\x{53A4}\x{53A5}' . '\x{53A6}\x{53A7}\x{53A8}\x{53A9}\x{53AC}\x{53AD}\x{53AE}\x{53B0}\x{53B1}' . '\x{53B2}\x{53B3}\x{53B4}\x{53B5}\x{53B6}\x{53B7}\x{53B8}\x{53B9}\x{53BB}' . '\x{53BC}\x{53BD}\x{53BE}\x{53BF}\x{53C0}\x{53C1}\x{53C2}\x{53C3}\x{53C4}' . '\x{53C6}\x{53C7}\x{53C8}\x{53C9}\x{53CA}\x{53CB}\x{53CC}\x{53CD}\x{53CE}' . '\x{53D0}\x{53D1}\x{53D2}\x{53D3}\x{53D4}\x{53D5}\x{53D6}\x{53D7}\x{53D8}' . '\x{53D9}\x{53DB}\x{53DC}\x{53DF}\x{53E0}\x{53E1}\x{53E2}\x{53E3}\x{53E4}' . '\x{53E5}\x{53E6}\x{53E8}\x{53E9}\x{53EA}\x{53EB}\x{53EC}\x{53ED}\x{53EE}' . '\x{53EF}\x{53F0}\x{53F1}\x{53F2}\x{53F3}\x{53F4}\x{53F5}\x{53F6}\x{53F7}' . '\x{53F8}\x{53F9}\x{53FA}\x{53FB}\x{53FC}\x{53FD}\x{53FE}\x{5401}\x{5402}' . '\x{5403}\x{5404}\x{5405}\x{5406}\x{5407}\x{5408}\x{5409}\x{540A}\x{540B}' . '\x{540C}\x{540D}\x{540E}\x{540F}\x{5410}\x{5411}\x{5412}\x{5413}\x{5414}' . '\x{5415}\x{5416}\x{5417}\x{5418}\x{5419}\x{541B}\x{541C}\x{541D}\x{541E}' . '\x{541F}\x{5420}\x{5421}\x{5423}\x{5424}\x{5425}\x{5426}\x{5427}\x{5428}' . '\x{5429}\x{542A}\x{542B}\x{542C}\x{542D}\x{542E}\x{542F}\x{5430}\x{5431}' . '\x{5432}\x{5433}\x{5434}\x{5435}\x{5436}\x{5437}\x{5438}\x{5439}\x{543A}' . '\x{543B}\x{543C}\x{543D}\x{543E}\x{543F}\x{5440}\x{5441}\x{5442}\x{5443}' . '\x{5444}\x{5445}\x{5446}\x{5447}\x{5448}\x{5449}\x{544A}\x{544B}\x{544D}' . '\x{544E}\x{544F}\x{5450}\x{5451}\x{5452}\x{5453}\x{5454}\x{5455}\x{5456}' . '\x{5457}\x{5458}\x{5459}\x{545A}\x{545B}\x{545C}\x{545E}\x{545F}\x{5460}' . '\x{5461}\x{5462}\x{5463}\x{5464}\x{5465}\x{5466}\x{5467}\x{5468}\x{546A}' . '\x{546B}\x{546C}\x{546D}\x{546E}\x{546F}\x{5470}\x{5471}\x{5472}\x{5473}' . '\x{5474}\x{5475}\x{5476}\x{5477}\x{5478}\x{5479}\x{547A}\x{547B}\x{547C}' . '\x{547D}\x{547E}\x{547F}\x{5480}\x{5481}\x{5482}\x{5483}\x{5484}\x{5485}' . '\x{5486}\x{5487}\x{5488}\x{5489}\x{548B}\x{548C}\x{548D}\x{548E}\x{548F}' . '\x{5490}\x{5491}\x{5492}\x{5493}\x{5494}\x{5495}\x{5496}\x{5497}\x{5498}' . '\x{5499}\x{549A}\x{549B}\x{549C}\x{549D}\x{549E}\x{549F}\x{54A0}\x{54A1}' . '\x{54A2}\x{54A3}\x{54A4}\x{54A5}\x{54A6}\x{54A7}\x{54A8}\x{54A9}\x{54AA}' . '\x{54AB}\x{54AC}\x{54AD}\x{54AE}\x{54AF}\x{54B0}\x{54B1}\x{54B2}\x{54B3}' . '\x{54B4}\x{54B6}\x{54B7}\x{54B8}\x{54B9}\x{54BA}\x{54BB}\x{54BC}\x{54BD}' . '\x{54BE}\x{54BF}\x{54C0}\x{54C1}\x{54C2}\x{54C3}\x{54C4}\x{54C5}\x{54C6}' . '\x{54C7}\x{54C8}\x{54C9}\x{54CA}\x{54CB}\x{54CC}\x{54CD}\x{54CE}\x{54CF}' . '\x{54D0}\x{54D1}\x{54D2}\x{54D3}\x{54D4}\x{54D5}\x{54D6}\x{54D7}\x{54D8}' . '\x{54D9}\x{54DA}\x{54DB}\x{54DC}\x{54DD}\x{54DE}\x{54DF}\x{54E0}\x{54E1}' . '\x{54E2}\x{54E3}\x{54E4}\x{54E5}\x{54E6}\x{54E7}\x{54E8}\x{54E9}\x{54EA}' . '\x{54EB}\x{54EC}\x{54ED}\x{54EE}\x{54EF}\x{54F0}\x{54F1}\x{54F2}\x{54F3}' . '\x{54F4}\x{54F5}\x{54F7}\x{54F8}\x{54F9}\x{54FA}\x{54FB}\x{54FC}\x{54FD}' . '\x{54FE}\x{54FF}\x{5500}\x{5501}\x{5502}\x{5503}\x{5504}\x{5505}\x{5506}' . '\x{5507}\x{5508}\x{5509}\x{550A}\x{550B}\x{550C}\x{550D}\x{550E}\x{550F}' . '\x{5510}\x{5511}\x{5512}\x{5513}\x{5514}\x{5516}\x{5517}\x{551A}\x{551B}' . '\x{551C}\x{551D}\x{551E}\x{551F}\x{5520}\x{5521}\x{5522}\x{5523}\x{5524}' . '\x{5525}\x{5526}\x{5527}\x{5528}\x{5529}\x{552A}\x{552B}\x{552C}\x{552D}' . '\x{552E}\x{552F}\x{5530}\x{5531}\x{5532}\x{5533}\x{5534}\x{5535}\x{5536}' . '\x{5537}\x{5538}\x{5539}\x{553A}\x{553B}\x{553C}\x{553D}\x{553E}\x{553F}' . '\x{5540}\x{5541}\x{5542}\x{5543}\x{5544}\x{5545}\x{5546}\x{5548}\x{5549}' . '\x{554A}\x{554B}\x{554C}\x{554D}\x{554E}\x{554F}\x{5550}\x{5551}\x{5552}' . '\x{5553}\x{5554}\x{5555}\x{5556}\x{5557}\x{5558}\x{5559}\x{555A}\x{555B}' . '\x{555C}\x{555D}\x{555E}\x{555F}\x{5561}\x{5562}\x{5563}\x{5564}\x{5565}' . '\x{5566}\x{5567}\x{5568}\x{5569}\x{556A}\x{556B}\x{556C}\x{556D}\x{556E}' . '\x{556F}\x{5570}\x{5571}\x{5572}\x{5573}\x{5574}\x{5575}\x{5576}\x{5577}' . '\x{5578}\x{5579}\x{557B}\x{557C}\x{557D}\x{557E}\x{557F}\x{5580}\x{5581}' . '\x{5582}\x{5583}\x{5584}\x{5585}\x{5586}\x{5587}\x{5588}\x{5589}\x{558A}' . '\x{558B}\x{558C}\x{558D}\x{558E}\x{558F}\x{5590}\x{5591}\x{5592}\x{5593}' . '\x{5594}\x{5595}\x{5596}\x{5597}\x{5598}\x{5599}\x{559A}\x{559B}\x{559C}' . '\x{559D}\x{559E}\x{559F}\x{55A0}\x{55A1}\x{55A2}\x{55A3}\x{55A4}\x{55A5}' . '\x{55A6}\x{55A7}\x{55A8}\x{55A9}\x{55AA}\x{55AB}\x{55AC}\x{55AD}\x{55AE}' . '\x{55AF}\x{55B0}\x{55B1}\x{55B2}\x{55B3}\x{55B4}\x{55B5}\x{55B6}\x{55B7}' . '\x{55B8}\x{55B9}\x{55BA}\x{55BB}\x{55BC}\x{55BD}\x{55BE}\x{55BF}\x{55C0}' . '\x{55C1}\x{55C2}\x{55C3}\x{55C4}\x{55C5}\x{55C6}\x{55C7}\x{55C8}\x{55C9}' . '\x{55CA}\x{55CB}\x{55CC}\x{55CD}\x{55CE}\x{55CF}\x{55D0}\x{55D1}\x{55D2}' . '\x{55D3}\x{55D4}\x{55D5}\x{55D6}\x{55D7}\x{55D8}\x{55D9}\x{55DA}\x{55DB}' . '\x{55DC}\x{55DD}\x{55DE}\x{55DF}\x{55E1}\x{55E2}\x{55E3}\x{55E4}\x{55E5}' . '\x{55E6}\x{55E7}\x{55E8}\x{55E9}\x{55EA}\x{55EB}\x{55EC}\x{55ED}\x{55EE}' . '\x{55EF}\x{55F0}\x{55F1}\x{55F2}\x{55F3}\x{55F4}\x{55F5}\x{55F6}\x{55F7}' . '\x{55F9}\x{55FA}\x{55FB}\x{55FC}\x{55FD}\x{55FE}\x{55FF}\x{5600}\x{5601}' . '\x{5602}\x{5603}\x{5604}\x{5606}\x{5607}\x{5608}\x{5609}\x{560C}\x{560D}' . '\x{560E}\x{560F}\x{5610}\x{5611}\x{5612}\x{5613}\x{5614}\x{5615}\x{5616}' . '\x{5617}\x{5618}\x{5619}\x{561A}\x{561B}\x{561C}\x{561D}\x{561E}\x{561F}' . '\x{5621}\x{5622}\x{5623}\x{5624}\x{5625}\x{5626}\x{5627}\x{5628}\x{5629}' . '\x{562A}\x{562C}\x{562D}\x{562E}\x{562F}\x{5630}\x{5631}\x{5632}\x{5633}' . '\x{5634}\x{5635}\x{5636}\x{5638}\x{5639}\x{563A}\x{563B}\x{563D}\x{563E}' . '\x{563F}\x{5640}\x{5641}\x{5642}\x{5643}\x{5645}\x{5646}\x{5647}\x{5648}' . '\x{5649}\x{564A}\x{564C}\x{564D}\x{564E}\x{564F}\x{5650}\x{5652}\x{5653}' . '\x{5654}\x{5655}\x{5657}\x{5658}\x{5659}\x{565A}\x{565B}\x{565C}\x{565D}' . '\x{565E}\x{5660}\x{5662}\x{5663}\x{5664}\x{5665}\x{5666}\x{5667}\x{5668}' . '\x{5669}\x{566A}\x{566B}\x{566C}\x{566D}\x{566E}\x{566F}\x{5670}\x{5671}' . '\x{5672}\x{5673}\x{5674}\x{5676}\x{5677}\x{5678}\x{5679}\x{567A}\x{567B}' . '\x{567C}\x{567E}\x{567F}\x{5680}\x{5681}\x{5682}\x{5683}\x{5684}\x{5685}' . '\x{5686}\x{5687}\x{568A}\x{568C}\x{568D}\x{568E}\x{568F}\x{5690}\x{5691}' . '\x{5692}\x{5693}\x{5694}\x{5695}\x{5697}\x{5698}\x{5699}\x{569A}\x{569B}' . '\x{569C}\x{569D}\x{569F}\x{56A0}\x{56A1}\x{56A3}\x{56A4}\x{56A5}\x{56A6}' . '\x{56A7}\x{56A8}\x{56A9}\x{56AA}\x{56AB}\x{56AC}\x{56AD}\x{56AE}\x{56AF}' . '\x{56B0}\x{56B1}\x{56B2}\x{56B3}\x{56B4}\x{56B5}\x{56B6}\x{56B7}\x{56B8}' . '\x{56B9}\x{56BB}\x{56BC}\x{56BD}\x{56BE}\x{56BF}\x{56C0}\x{56C1}\x{56C2}' . '\x{56C3}\x{56C4}\x{56C5}\x{56C6}\x{56C7}\x{56C8}\x{56C9}\x{56CA}\x{56CB}' . '\x{56CC}\x{56CD}\x{56CE}\x{56D0}\x{56D1}\x{56D2}\x{56D3}\x{56D4}\x{56D5}' . '\x{56D6}\x{56D7}\x{56D8}\x{56DA}\x{56DB}\x{56DC}\x{56DD}\x{56DE}\x{56DF}' . '\x{56E0}\x{56E1}\x{56E2}\x{56E3}\x{56E4}\x{56E5}\x{56E7}\x{56E8}\x{56E9}' . '\x{56EA}\x{56EB}\x{56EC}\x{56ED}\x{56EE}\x{56EF}\x{56F0}\x{56F1}\x{56F2}' . '\x{56F3}\x{56F4}\x{56F5}\x{56F7}\x{56F9}\x{56FA}\x{56FD}\x{56FE}\x{56FF}' . '\x{5700}\x{5701}\x{5702}\x{5703}\x{5704}\x{5706}\x{5707}\x{5708}\x{5709}' . '\x{570A}\x{570B}\x{570C}\x{570D}\x{570E}\x{570F}\x{5710}\x{5712}\x{5713}' . '\x{5714}\x{5715}\x{5716}\x{5718}\x{5719}\x{571A}\x{571B}\x{571C}\x{571D}' . '\x{571E}\x{571F}\x{5720}\x{5722}\x{5723}\x{5725}\x{5726}\x{5727}\x{5728}' . '\x{5729}\x{572A}\x{572B}\x{572C}\x{572D}\x{572E}\x{572F}\x{5730}\x{5731}' . '\x{5732}\x{5733}\x{5734}\x{5735}\x{5736}\x{5737}\x{5738}\x{5739}\x{573A}' . '\x{573B}\x{573C}\x{573E}\x{573F}\x{5740}\x{5741}\x{5742}\x{5744}\x{5745}' . '\x{5746}\x{5747}\x{5749}\x{574A}\x{574B}\x{574C}\x{574D}\x{574E}\x{574F}' . '\x{5750}\x{5751}\x{5752}\x{5753}\x{5754}\x{5757}\x{5759}\x{575A}\x{575B}' . '\x{575C}\x{575D}\x{575E}\x{575F}\x{5760}\x{5761}\x{5762}\x{5764}\x{5765}' . '\x{5766}\x{5767}\x{5768}\x{5769}\x{576A}\x{576B}\x{576C}\x{576D}\x{576F}' . '\x{5770}\x{5771}\x{5772}\x{5773}\x{5774}\x{5775}\x{5776}\x{5777}\x{5779}' . '\x{577A}\x{577B}\x{577C}\x{577D}\x{577E}\x{577F}\x{5780}\x{5782}\x{5783}' . '\x{5784}\x{5785}\x{5786}\x{5788}\x{5789}\x{578A}\x{578B}\x{578C}\x{578D}' . '\x{578E}\x{578F}\x{5790}\x{5791}\x{5792}\x{5793}\x{5794}\x{5795}\x{5797}' . '\x{5798}\x{5799}\x{579A}\x{579B}\x{579C}\x{579D}\x{579E}\x{579F}\x{57A0}' . '\x{57A1}\x{57A2}\x{57A3}\x{57A4}\x{57A5}\x{57A6}\x{57A7}\x{57A9}\x{57AA}' . '\x{57AB}\x{57AC}\x{57AD}\x{57AE}\x{57AF}\x{57B0}\x{57B1}\x{57B2}\x{57B3}' . '\x{57B4}\x{57B5}\x{57B6}\x{57B7}\x{57B8}\x{57B9}\x{57BA}\x{57BB}\x{57BC}' . '\x{57BD}\x{57BE}\x{57BF}\x{57C0}\x{57C1}\x{57C2}\x{57C3}\x{57C4}\x{57C5}' . '\x{57C6}\x{57C7}\x{57C8}\x{57C9}\x{57CB}\x{57CC}\x{57CD}\x{57CE}\x{57CF}' . '\x{57D0}\x{57D2}\x{57D3}\x{57D4}\x{57D5}\x{57D6}\x{57D8}\x{57D9}\x{57DA}' . '\x{57DC}\x{57DD}\x{57DF}\x{57E0}\x{57E1}\x{57E2}\x{57E3}\x{57E4}\x{57E5}' . '\x{57E6}\x{57E7}\x{57E8}\x{57E9}\x{57EA}\x{57EB}\x{57EC}\x{57ED}\x{57EE}' . '\x{57EF}\x{57F0}\x{57F1}\x{57F2}\x{57F3}\x{57F4}\x{57F5}\x{57F6}\x{57F7}' . '\x{57F8}\x{57F9}\x{57FA}\x{57FB}\x{57FC}\x{57FD}\x{57FE}\x{57FF}\x{5800}' . '\x{5801}\x{5802}\x{5803}\x{5804}\x{5805}\x{5806}\x{5807}\x{5808}\x{5809}' . '\x{580A}\x{580B}\x{580C}\x{580D}\x{580E}\x{580F}\x{5810}\x{5811}\x{5812}' . '\x{5813}\x{5814}\x{5815}\x{5816}\x{5819}\x{581A}\x{581B}\x{581C}\x{581D}' . '\x{581E}\x{581F}\x{5820}\x{5821}\x{5822}\x{5823}\x{5824}\x{5825}\x{5826}' . '\x{5827}\x{5828}\x{5829}\x{582A}\x{582B}\x{582C}\x{582D}\x{582E}\x{582F}' . '\x{5830}\x{5831}\x{5832}\x{5833}\x{5834}\x{5835}\x{5836}\x{5837}\x{5838}' . '\x{5839}\x{583A}\x{583B}\x{583C}\x{583D}\x{583E}\x{583F}\x{5840}\x{5842}' . '\x{5843}\x{5844}\x{5845}\x{5846}\x{5847}\x{5848}\x{5849}\x{584A}\x{584B}' . '\x{584C}\x{584D}\x{584E}\x{584F}\x{5851}\x{5852}\x{5853}\x{5854}\x{5855}' . '\x{5857}\x{5858}\x{5859}\x{585A}\x{585B}\x{585C}\x{585D}\x{585E}\x{585F}' . '\x{5861}\x{5862}\x{5863}\x{5864}\x{5865}\x{5868}\x{5869}\x{586A}\x{586B}' . '\x{586C}\x{586D}\x{586E}\x{586F}\x{5870}\x{5871}\x{5872}\x{5873}\x{5874}' . '\x{5875}\x{5876}\x{5878}\x{5879}\x{587A}\x{587B}\x{587C}\x{587D}\x{587E}' . '\x{587F}\x{5880}\x{5881}\x{5882}\x{5883}\x{5884}\x{5885}\x{5886}\x{5887}' . '\x{5888}\x{5889}\x{588A}\x{588B}\x{588C}\x{588D}\x{588E}\x{588F}\x{5890}' . '\x{5891}\x{5892}\x{5893}\x{5894}\x{5896}\x{5897}\x{5898}\x{5899}\x{589A}' . '\x{589B}\x{589C}\x{589D}\x{589E}\x{589F}\x{58A0}\x{58A1}\x{58A2}\x{58A3}' . '\x{58A4}\x{58A5}\x{58A6}\x{58A7}\x{58A8}\x{58A9}\x{58AB}\x{58AC}\x{58AD}' . '\x{58AE}\x{58AF}\x{58B0}\x{58B1}\x{58B2}\x{58B3}\x{58B4}\x{58B7}\x{58B8}' . '\x{58B9}\x{58BA}\x{58BB}\x{58BC}\x{58BD}\x{58BE}\x{58BF}\x{58C1}\x{58C2}' . '\x{58C5}\x{58C6}\x{58C7}\x{58C8}\x{58C9}\x{58CA}\x{58CB}\x{58CE}\x{58CF}' . '\x{58D1}\x{58D2}\x{58D3}\x{58D4}\x{58D5}\x{58D6}\x{58D7}\x{58D8}\x{58D9}' . '\x{58DA}\x{58DB}\x{58DD}\x{58DE}\x{58DF}\x{58E0}\x{58E2}\x{58E3}\x{58E4}' . '\x{58E5}\x{58E7}\x{58E8}\x{58E9}\x{58EA}\x{58EB}\x{58EC}\x{58ED}\x{58EE}' . '\x{58EF}\x{58F0}\x{58F1}\x{58F2}\x{58F3}\x{58F4}\x{58F6}\x{58F7}\x{58F8}' . '\x{58F9}\x{58FA}\x{58FB}\x{58FC}\x{58FD}\x{58FE}\x{58FF}\x{5900}\x{5902}' . '\x{5903}\x{5904}\x{5906}\x{5907}\x{5909}\x{590A}\x{590B}\x{590C}\x{590D}' . '\x{590E}\x{590F}\x{5910}\x{5912}\x{5914}\x{5915}\x{5916}\x{5917}\x{5918}' . '\x{5919}\x{591A}\x{591B}\x{591C}\x{591D}\x{591E}\x{591F}\x{5920}\x{5921}' . '\x{5922}\x{5924}\x{5925}\x{5926}\x{5927}\x{5928}\x{5929}\x{592A}\x{592B}' . '\x{592C}\x{592D}\x{592E}\x{592F}\x{5930}\x{5931}\x{5932}\x{5934}\x{5935}' . '\x{5937}\x{5938}\x{5939}\x{593A}\x{593B}\x{593C}\x{593D}\x{593E}\x{593F}' . '\x{5940}\x{5941}\x{5942}\x{5943}\x{5944}\x{5945}\x{5946}\x{5947}\x{5948}' . '\x{5949}\x{594A}\x{594B}\x{594C}\x{594D}\x{594E}\x{594F}\x{5950}\x{5951}' . '\x{5952}\x{5953}\x{5954}\x{5955}\x{5956}\x{5957}\x{5958}\x{595A}\x{595C}' . '\x{595D}\x{595E}\x{595F}\x{5960}\x{5961}\x{5962}\x{5963}\x{5964}\x{5965}' . '\x{5966}\x{5967}\x{5968}\x{5969}\x{596A}\x{596B}\x{596C}\x{596D}\x{596E}' . '\x{596F}\x{5970}\x{5971}\x{5972}\x{5973}\x{5974}\x{5975}\x{5976}\x{5977}' . '\x{5978}\x{5979}\x{597A}\x{597B}\x{597C}\x{597D}\x{597E}\x{597F}\x{5980}' . '\x{5981}\x{5982}\x{5983}\x{5984}\x{5985}\x{5986}\x{5987}\x{5988}\x{5989}' . '\x{598A}\x{598B}\x{598C}\x{598D}\x{598E}\x{598F}\x{5990}\x{5991}\x{5992}' . '\x{5993}\x{5994}\x{5995}\x{5996}\x{5997}\x{5998}\x{5999}\x{599A}\x{599C}' . '\x{599D}\x{599E}\x{599F}\x{59A0}\x{59A1}\x{59A2}\x{59A3}\x{59A4}\x{59A5}' . '\x{59A6}\x{59A7}\x{59A8}\x{59A9}\x{59AA}\x{59AB}\x{59AC}\x{59AD}\x{59AE}' . '\x{59AF}\x{59B0}\x{59B1}\x{59B2}\x{59B3}\x{59B4}\x{59B5}\x{59B6}\x{59B8}' . '\x{59B9}\x{59BA}\x{59BB}\x{59BC}\x{59BD}\x{59BE}\x{59BF}\x{59C0}\x{59C1}' . '\x{59C2}\x{59C3}\x{59C4}\x{59C5}\x{59C6}\x{59C7}\x{59C8}\x{59C9}\x{59CA}' . '\x{59CB}\x{59CC}\x{59CD}\x{59CE}\x{59CF}\x{59D0}\x{59D1}\x{59D2}\x{59D3}' . '\x{59D4}\x{59D5}\x{59D6}\x{59D7}\x{59D8}\x{59D9}\x{59DA}\x{59DB}\x{59DC}' . '\x{59DD}\x{59DE}\x{59DF}\x{59E0}\x{59E1}\x{59E2}\x{59E3}\x{59E4}\x{59E5}' . '\x{59E6}\x{59E8}\x{59E9}\x{59EA}\x{59EB}\x{59EC}\x{59ED}\x{59EE}\x{59EF}' . '\x{59F0}\x{59F1}\x{59F2}\x{59F3}\x{59F4}\x{59F5}\x{59F6}\x{59F7}\x{59F8}' . '\x{59F9}\x{59FA}\x{59FB}\x{59FC}\x{59FD}\x{59FE}\x{59FF}\x{5A00}\x{5A01}' . '\x{5A02}\x{5A03}\x{5A04}\x{5A05}\x{5A06}\x{5A07}\x{5A08}\x{5A09}\x{5A0A}' . '\x{5A0B}\x{5A0C}\x{5A0D}\x{5A0E}\x{5A0F}\x{5A10}\x{5A11}\x{5A12}\x{5A13}' . '\x{5A14}\x{5A15}\x{5A16}\x{5A17}\x{5A18}\x{5A19}\x{5A1A}\x{5A1B}\x{5A1C}' . '\x{5A1D}\x{5A1E}\x{5A1F}\x{5A20}\x{5A21}\x{5A22}\x{5A23}\x{5A25}\x{5A27}' . '\x{5A28}\x{5A29}\x{5A2A}\x{5A2B}\x{5A2D}\x{5A2E}\x{5A2F}\x{5A31}\x{5A32}' . '\x{5A33}\x{5A34}\x{5A35}\x{5A36}\x{5A37}\x{5A38}\x{5A39}\x{5A3A}\x{5A3B}' . '\x{5A3C}\x{5A3D}\x{5A3E}\x{5A3F}\x{5A40}\x{5A41}\x{5A42}\x{5A43}\x{5A44}' . '\x{5A45}\x{5A46}\x{5A47}\x{5A48}\x{5A49}\x{5A4A}\x{5A4B}\x{5A4C}\x{5A4D}' . '\x{5A4E}\x{5A4F}\x{5A50}\x{5A51}\x{5A52}\x{5A53}\x{5A55}\x{5A56}\x{5A57}' . '\x{5A58}\x{5A5A}\x{5A5B}\x{5A5C}\x{5A5D}\x{5A5E}\x{5A5F}\x{5A60}\x{5A61}' . '\x{5A62}\x{5A63}\x{5A64}\x{5A65}\x{5A66}\x{5A67}\x{5A68}\x{5A69}\x{5A6A}' . '\x{5A6B}\x{5A6C}\x{5A6D}\x{5A6E}\x{5A70}\x{5A72}\x{5A73}\x{5A74}\x{5A75}' . '\x{5A76}\x{5A77}\x{5A78}\x{5A79}\x{5A7A}\x{5A7B}\x{5A7C}\x{5A7D}\x{5A7E}' . '\x{5A7F}\x{5A80}\x{5A81}\x{5A82}\x{5A83}\x{5A84}\x{5A85}\x{5A86}\x{5A88}' . '\x{5A89}\x{5A8A}\x{5A8B}\x{5A8C}\x{5A8E}\x{5A8F}\x{5A90}\x{5A91}\x{5A92}' . '\x{5A93}\x{5A94}\x{5A95}\x{5A96}\x{5A97}\x{5A98}\x{5A99}\x{5A9A}\x{5A9B}' . '\x{5A9C}\x{5A9D}\x{5A9E}\x{5A9F}\x{5AA0}\x{5AA1}\x{5AA2}\x{5AA3}\x{5AA4}' . '\x{5AA5}\x{5AA6}\x{5AA7}\x{5AA8}\x{5AA9}\x{5AAA}\x{5AAC}\x{5AAD}\x{5AAE}' . '\x{5AAF}\x{5AB0}\x{5AB1}\x{5AB2}\x{5AB3}\x{5AB4}\x{5AB5}\x{5AB6}\x{5AB7}' . '\x{5AB8}\x{5AB9}\x{5ABA}\x{5ABB}\x{5ABC}\x{5ABD}\x{5ABE}\x{5ABF}\x{5AC0}' . '\x{5AC1}\x{5AC2}\x{5AC3}\x{5AC4}\x{5AC5}\x{5AC6}\x{5AC7}\x{5AC8}\x{5AC9}' . '\x{5ACA}\x{5ACB}\x{5ACC}\x{5ACD}\x{5ACE}\x{5ACF}\x{5AD1}\x{5AD2}\x{5AD4}' . '\x{5AD5}\x{5AD6}\x{5AD7}\x{5AD8}\x{5AD9}\x{5ADA}\x{5ADB}\x{5ADC}\x{5ADD}' . '\x{5ADE}\x{5ADF}\x{5AE0}\x{5AE1}\x{5AE2}\x{5AE3}\x{5AE4}\x{5AE5}\x{5AE6}' . '\x{5AE7}\x{5AE8}\x{5AE9}\x{5AEA}\x{5AEB}\x{5AEC}\x{5AED}\x{5AEE}\x{5AF1}' . '\x{5AF2}\x{5AF3}\x{5AF4}\x{5AF5}\x{5AF6}\x{5AF7}\x{5AF8}\x{5AF9}\x{5AFA}' . '\x{5AFB}\x{5AFC}\x{5AFD}\x{5AFE}\x{5AFF}\x{5B00}\x{5B01}\x{5B02}\x{5B03}' . '\x{5B04}\x{5B05}\x{5B06}\x{5B07}\x{5B08}\x{5B09}\x{5B0B}\x{5B0C}\x{5B0E}' . '\x{5B0F}\x{5B10}\x{5B11}\x{5B12}\x{5B13}\x{5B14}\x{5B15}\x{5B16}\x{5B17}' . '\x{5B18}\x{5B19}\x{5B1A}\x{5B1B}\x{5B1C}\x{5B1D}\x{5B1E}\x{5B1F}\x{5B20}' . '\x{5B21}\x{5B22}\x{5B23}\x{5B24}\x{5B25}\x{5B26}\x{5B27}\x{5B28}\x{5B29}' . '\x{5B2A}\x{5B2B}\x{5B2C}\x{5B2D}\x{5B2E}\x{5B2F}\x{5B30}\x{5B31}\x{5B32}' . '\x{5B33}\x{5B34}\x{5B35}\x{5B36}\x{5B37}\x{5B38}\x{5B3A}\x{5B3B}\x{5B3C}' . '\x{5B3D}\x{5B3E}\x{5B3F}\x{5B40}\x{5B41}\x{5B42}\x{5B43}\x{5B44}\x{5B45}' . '\x{5B47}\x{5B48}\x{5B49}\x{5B4A}\x{5B4B}\x{5B4C}\x{5B4D}\x{5B4E}\x{5B50}' . '\x{5B51}\x{5B53}\x{5B54}\x{5B55}\x{5B56}\x{5B57}\x{5B58}\x{5B59}\x{5B5A}' . '\x{5B5B}\x{5B5C}\x{5B5D}\x{5B5E}\x{5B5F}\x{5B62}\x{5B63}\x{5B64}\x{5B65}' . '\x{5B66}\x{5B67}\x{5B68}\x{5B69}\x{5B6A}\x{5B6B}\x{5B6C}\x{5B6D}\x{5B6E}' . '\x{5B70}\x{5B71}\x{5B72}\x{5B73}\x{5B74}\x{5B75}\x{5B76}\x{5B77}\x{5B78}' . '\x{5B7A}\x{5B7B}\x{5B7C}\x{5B7D}\x{5B7F}\x{5B80}\x{5B81}\x{5B82}\x{5B83}' . '\x{5B84}\x{5B85}\x{5B87}\x{5B88}\x{5B89}\x{5B8A}\x{5B8B}\x{5B8C}\x{5B8D}' . '\x{5B8E}\x{5B8F}\x{5B91}\x{5B92}\x{5B93}\x{5B94}\x{5B95}\x{5B96}\x{5B97}' . '\x{5B98}\x{5B99}\x{5B9A}\x{5B9B}\x{5B9C}\x{5B9D}\x{5B9E}\x{5B9F}\x{5BA0}' . '\x{5BA1}\x{5BA2}\x{5BA3}\x{5BA4}\x{5BA5}\x{5BA6}\x{5BA7}\x{5BA8}\x{5BAA}' . '\x{5BAB}\x{5BAC}\x{5BAD}\x{5BAE}\x{5BAF}\x{5BB0}\x{5BB1}\x{5BB3}\x{5BB4}' . '\x{5BB5}\x{5BB6}\x{5BB8}\x{5BB9}\x{5BBA}\x{5BBB}\x{5BBD}\x{5BBE}\x{5BBF}' . '\x{5BC0}\x{5BC1}\x{5BC2}\x{5BC3}\x{5BC4}\x{5BC5}\x{5BC6}\x{5BC7}\x{5BCA}' . '\x{5BCB}\x{5BCC}\x{5BCD}\x{5BCE}\x{5BCF}\x{5BD0}\x{5BD1}\x{5BD2}\x{5BD3}' . '\x{5BD4}\x{5BD5}\x{5BD6}\x{5BD8}\x{5BD9}\x{5BDB}\x{5BDC}\x{5BDD}\x{5BDE}' . '\x{5BDF}\x{5BE0}\x{5BE1}\x{5BE2}\x{5BE3}\x{5BE4}\x{5BE5}\x{5BE6}\x{5BE7}' . '\x{5BE8}\x{5BE9}\x{5BEA}\x{5BEB}\x{5BEC}\x{5BED}\x{5BEE}\x{5BEF}\x{5BF0}' . '\x{5BF1}\x{5BF2}\x{5BF3}\x{5BF4}\x{5BF5}\x{5BF6}\x{5BF7}\x{5BF8}\x{5BF9}' . '\x{5BFA}\x{5BFB}\x{5BFC}\x{5BFD}\x{5BFF}\x{5C01}\x{5C03}\x{5C04}\x{5C05}' . '\x{5C06}\x{5C07}\x{5C08}\x{5C09}\x{5C0A}\x{5C0B}\x{5C0C}\x{5C0D}\x{5C0E}' . '\x{5C0F}\x{5C10}\x{5C11}\x{5C12}\x{5C13}\x{5C14}\x{5C15}\x{5C16}\x{5C17}' . '\x{5C18}\x{5C19}\x{5C1A}\x{5C1C}\x{5C1D}\x{5C1E}\x{5C1F}\x{5C20}\x{5C21}' . '\x{5C22}\x{5C24}\x{5C25}\x{5C27}\x{5C28}\x{5C2A}\x{5C2B}\x{5C2C}\x{5C2D}' . '\x{5C2E}\x{5C2F}\x{5C30}\x{5C31}\x{5C32}\x{5C33}\x{5C34}\x{5C35}\x{5C37}' . '\x{5C38}\x{5C39}\x{5C3A}\x{5C3B}\x{5C3C}\x{5C3D}\x{5C3E}\x{5C3F}\x{5C40}' . '\x{5C41}\x{5C42}\x{5C43}\x{5C44}\x{5C45}\x{5C46}\x{5C47}\x{5C48}\x{5C49}' . '\x{5C4A}\x{5C4B}\x{5C4C}\x{5C4D}\x{5C4E}\x{5C4F}\x{5C50}\x{5C51}\x{5C52}' . '\x{5C53}\x{5C54}\x{5C55}\x{5C56}\x{5C57}\x{5C58}\x{5C59}\x{5C5B}\x{5C5C}' . '\x{5C5D}\x{5C5E}\x{5C5F}\x{5C60}\x{5C61}\x{5C62}\x{5C63}\x{5C64}\x{5C65}' . '\x{5C66}\x{5C67}\x{5C68}\x{5C69}\x{5C6A}\x{5C6B}\x{5C6C}\x{5C6D}\x{5C6E}' . '\x{5C6F}\x{5C70}\x{5C71}\x{5C72}\x{5C73}\x{5C74}\x{5C75}\x{5C76}\x{5C77}' . '\x{5C78}\x{5C79}\x{5C7A}\x{5C7B}\x{5C7C}\x{5C7D}\x{5C7E}\x{5C7F}\x{5C80}' . '\x{5C81}\x{5C82}\x{5C83}\x{5C84}\x{5C86}\x{5C87}\x{5C88}\x{5C89}\x{5C8A}' . '\x{5C8B}\x{5C8C}\x{5C8D}\x{5C8E}\x{5C8F}\x{5C90}\x{5C91}\x{5C92}\x{5C93}' . '\x{5C94}\x{5C95}\x{5C96}\x{5C97}\x{5C98}\x{5C99}\x{5C9A}\x{5C9B}\x{5C9C}' . '\x{5C9D}\x{5C9E}\x{5C9F}\x{5CA0}\x{5CA1}\x{5CA2}\x{5CA3}\x{5CA4}\x{5CA5}' . '\x{5CA6}\x{5CA7}\x{5CA8}\x{5CA9}\x{5CAA}\x{5CAB}\x{5CAC}\x{5CAD}\x{5CAE}' . '\x{5CAF}\x{5CB0}\x{5CB1}\x{5CB2}\x{5CB3}\x{5CB5}\x{5CB6}\x{5CB7}\x{5CB8}' . '\x{5CBA}\x{5CBB}\x{5CBC}\x{5CBD}\x{5CBE}\x{5CBF}\x{5CC1}\x{5CC2}\x{5CC3}' . '\x{5CC4}\x{5CC5}\x{5CC6}\x{5CC7}\x{5CC8}\x{5CC9}\x{5CCA}\x{5CCB}\x{5CCC}' . '\x{5CCD}\x{5CCE}\x{5CCF}\x{5CD0}\x{5CD1}\x{5CD2}\x{5CD3}\x{5CD4}\x{5CD6}' . '\x{5CD7}\x{5CD8}\x{5CD9}\x{5CDA}\x{5CDB}\x{5CDC}\x{5CDE}\x{5CDF}\x{5CE0}' . '\x{5CE1}\x{5CE2}\x{5CE3}\x{5CE4}\x{5CE5}\x{5CE6}\x{5CE7}\x{5CE8}\x{5CE9}' . '\x{5CEA}\x{5CEB}\x{5CEC}\x{5CED}\x{5CEE}\x{5CEF}\x{5CF0}\x{5CF1}\x{5CF2}' . '\x{5CF3}\x{5CF4}\x{5CF6}\x{5CF7}\x{5CF8}\x{5CF9}\x{5CFA}\x{5CFB}\x{5CFC}' . '\x{5CFD}\x{5CFE}\x{5CFF}\x{5D00}\x{5D01}\x{5D02}\x{5D03}\x{5D04}\x{5D05}' . '\x{5D06}\x{5D07}\x{5D08}\x{5D09}\x{5D0A}\x{5D0B}\x{5D0C}\x{5D0D}\x{5D0E}' . '\x{5D0F}\x{5D10}\x{5D11}\x{5D12}\x{5D13}\x{5D14}\x{5D15}\x{5D16}\x{5D17}' . '\x{5D18}\x{5D19}\x{5D1A}\x{5D1B}\x{5D1C}\x{5D1D}\x{5D1E}\x{5D1F}\x{5D20}' . '\x{5D21}\x{5D22}\x{5D23}\x{5D24}\x{5D25}\x{5D26}\x{5D27}\x{5D28}\x{5D29}' . '\x{5D2A}\x{5D2C}\x{5D2D}\x{5D2E}\x{5D30}\x{5D31}\x{5D32}\x{5D33}\x{5D34}' . '\x{5D35}\x{5D36}\x{5D37}\x{5D38}\x{5D39}\x{5D3A}\x{5D3C}\x{5D3D}\x{5D3E}' . '\x{5D3F}\x{5D40}\x{5D41}\x{5D42}\x{5D43}\x{5D44}\x{5D45}\x{5D46}\x{5D47}' . '\x{5D48}\x{5D49}\x{5D4A}\x{5D4B}\x{5D4C}\x{5D4D}\x{5D4E}\x{5D4F}\x{5D50}' . '\x{5D51}\x{5D52}\x{5D54}\x{5D55}\x{5D56}\x{5D58}\x{5D59}\x{5D5A}\x{5D5B}' . '\x{5D5D}\x{5D5E}\x{5D5F}\x{5D61}\x{5D62}\x{5D63}\x{5D64}\x{5D65}\x{5D66}' . '\x{5D67}\x{5D68}\x{5D69}\x{5D6A}\x{5D6B}\x{5D6C}\x{5D6D}\x{5D6E}\x{5D6F}' . '\x{5D70}\x{5D71}\x{5D72}\x{5D73}\x{5D74}\x{5D75}\x{5D76}\x{5D77}\x{5D78}' . '\x{5D79}\x{5D7A}\x{5D7B}\x{5D7C}\x{5D7D}\x{5D7E}\x{5D7F}\x{5D80}\x{5D81}' . '\x{5D82}\x{5D84}\x{5D85}\x{5D86}\x{5D87}\x{5D88}\x{5D89}\x{5D8A}\x{5D8B}' . '\x{5D8C}\x{5D8D}\x{5D8E}\x{5D8F}\x{5D90}\x{5D91}\x{5D92}\x{5D93}\x{5D94}' . '\x{5D95}\x{5D97}\x{5D98}\x{5D99}\x{5D9A}\x{5D9B}\x{5D9C}\x{5D9D}\x{5D9E}' . '\x{5D9F}\x{5DA0}\x{5DA1}\x{5DA2}\x{5DA5}\x{5DA6}\x{5DA7}\x{5DA8}\x{5DA9}' . '\x{5DAA}\x{5DAC}\x{5DAD}\x{5DAE}\x{5DAF}\x{5DB0}\x{5DB1}\x{5DB2}\x{5DB4}' . '\x{5DB5}\x{5DB6}\x{5DB7}\x{5DB8}\x{5DBA}\x{5DBB}\x{5DBC}\x{5DBD}\x{5DBE}' . '\x{5DBF}\x{5DC0}\x{5DC1}\x{5DC2}\x{5DC3}\x{5DC5}\x{5DC6}\x{5DC7}\x{5DC8}' . '\x{5DC9}\x{5DCA}\x{5DCB}\x{5DCC}\x{5DCD}\x{5DCE}\x{5DCF}\x{5DD0}\x{5DD1}' . '\x{5DD2}\x{5DD3}\x{5DD4}\x{5DD5}\x{5DD6}\x{5DD8}\x{5DD9}\x{5DDB}\x{5DDD}' . '\x{5DDE}\x{5DDF}\x{5DE0}\x{5DE1}\x{5DE2}\x{5DE3}\x{5DE4}\x{5DE5}\x{5DE6}' . '\x{5DE7}\x{5DE8}\x{5DE9}\x{5DEA}\x{5DEB}\x{5DEC}\x{5DED}\x{5DEE}\x{5DEF}' . '\x{5DF0}\x{5DF1}\x{5DF2}\x{5DF3}\x{5DF4}\x{5DF5}\x{5DF7}\x{5DF8}\x{5DF9}' . '\x{5DFA}\x{5DFB}\x{5DFC}\x{5DFD}\x{5DFE}\x{5DFF}\x{5E00}\x{5E01}\x{5E02}' . '\x{5E03}\x{5E04}\x{5E05}\x{5E06}\x{5E07}\x{5E08}\x{5E09}\x{5E0A}\x{5E0B}' . '\x{5E0C}\x{5E0D}\x{5E0E}\x{5E0F}\x{5E10}\x{5E11}\x{5E13}\x{5E14}\x{5E15}' . '\x{5E16}\x{5E17}\x{5E18}\x{5E19}\x{5E1A}\x{5E1B}\x{5E1C}\x{5E1D}\x{5E1E}' . '\x{5E1F}\x{5E20}\x{5E21}\x{5E22}\x{5E23}\x{5E24}\x{5E25}\x{5E26}\x{5E27}' . '\x{5E28}\x{5E29}\x{5E2A}\x{5E2B}\x{5E2C}\x{5E2D}\x{5E2E}\x{5E2F}\x{5E30}' . '\x{5E31}\x{5E32}\x{5E33}\x{5E34}\x{5E35}\x{5E36}\x{5E37}\x{5E38}\x{5E39}' . '\x{5E3A}\x{5E3B}\x{5E3C}\x{5E3D}\x{5E3E}\x{5E40}\x{5E41}\x{5E42}\x{5E43}' . '\x{5E44}\x{5E45}\x{5E46}\x{5E47}\x{5E49}\x{5E4A}\x{5E4B}\x{5E4C}\x{5E4D}' . '\x{5E4E}\x{5E4F}\x{5E50}\x{5E52}\x{5E53}\x{5E54}\x{5E55}\x{5E56}\x{5E57}' . '\x{5E58}\x{5E59}\x{5E5A}\x{5E5B}\x{5E5C}\x{5E5D}\x{5E5E}\x{5E5F}\x{5E60}' . '\x{5E61}\x{5E62}\x{5E63}\x{5E64}\x{5E65}\x{5E66}\x{5E67}\x{5E68}\x{5E69}' . '\x{5E6A}\x{5E6B}\x{5E6C}\x{5E6D}\x{5E6E}\x{5E6F}\x{5E70}\x{5E71}\x{5E72}' . '\x{5E73}\x{5E74}\x{5E75}\x{5E76}\x{5E77}\x{5E78}\x{5E79}\x{5E7A}\x{5E7B}' . '\x{5E7C}\x{5E7D}\x{5E7E}\x{5E7F}\x{5E80}\x{5E81}\x{5E82}\x{5E83}\x{5E84}' . '\x{5E85}\x{5E86}\x{5E87}\x{5E88}\x{5E89}\x{5E8A}\x{5E8B}\x{5E8C}\x{5E8D}' . '\x{5E8E}\x{5E8F}\x{5E90}\x{5E91}\x{5E93}\x{5E94}\x{5E95}\x{5E96}\x{5E97}' . '\x{5E98}\x{5E99}\x{5E9A}\x{5E9B}\x{5E9C}\x{5E9D}\x{5E9E}\x{5E9F}\x{5EA0}' . '\x{5EA1}\x{5EA2}\x{5EA3}\x{5EA4}\x{5EA5}\x{5EA6}\x{5EA7}\x{5EA8}\x{5EA9}' . '\x{5EAA}\x{5EAB}\x{5EAC}\x{5EAD}\x{5EAE}\x{5EAF}\x{5EB0}\x{5EB1}\x{5EB2}' . '\x{5EB3}\x{5EB4}\x{5EB5}\x{5EB6}\x{5EB7}\x{5EB8}\x{5EB9}\x{5EBB}\x{5EBC}' . '\x{5EBD}\x{5EBE}\x{5EBF}\x{5EC1}\x{5EC2}\x{5EC3}\x{5EC4}\x{5EC5}\x{5EC6}' . '\x{5EC7}\x{5EC8}\x{5EC9}\x{5ECA}\x{5ECB}\x{5ECC}\x{5ECD}\x{5ECE}\x{5ECF}' . '\x{5ED0}\x{5ED1}\x{5ED2}\x{5ED3}\x{5ED4}\x{5ED5}\x{5ED6}\x{5ED7}\x{5ED8}' . '\x{5ED9}\x{5EDA}\x{5EDB}\x{5EDC}\x{5EDD}\x{5EDE}\x{5EDF}\x{5EE0}\x{5EE1}' . '\x{5EE2}\x{5EE3}\x{5EE4}\x{5EE5}\x{5EE6}\x{5EE7}\x{5EE8}\x{5EE9}\x{5EEA}' . '\x{5EEC}\x{5EED}\x{5EEE}\x{5EEF}\x{5EF0}\x{5EF1}\x{5EF2}\x{5EF3}\x{5EF4}' . '\x{5EF5}\x{5EF6}\x{5EF7}\x{5EF8}\x{5EFA}\x{5EFB}\x{5EFC}\x{5EFD}\x{5EFE}' . '\x{5EFF}\x{5F00}\x{5F01}\x{5F02}\x{5F03}\x{5F04}\x{5F05}\x{5F06}\x{5F07}' . '\x{5F08}\x{5F0A}\x{5F0B}\x{5F0C}\x{5F0D}\x{5F0F}\x{5F11}\x{5F12}\x{5F13}' . '\x{5F14}\x{5F15}\x{5F16}\x{5F17}\x{5F18}\x{5F19}\x{5F1A}\x{5F1B}\x{5F1C}' . '\x{5F1D}\x{5F1E}\x{5F1F}\x{5F20}\x{5F21}\x{5F22}\x{5F23}\x{5F24}\x{5F25}' . '\x{5F26}\x{5F27}\x{5F28}\x{5F29}\x{5F2A}\x{5F2B}\x{5F2C}\x{5F2D}\x{5F2E}' . '\x{5F2F}\x{5F30}\x{5F31}\x{5F32}\x{5F33}\x{5F34}\x{5F35}\x{5F36}\x{5F37}' . '\x{5F38}\x{5F39}\x{5F3A}\x{5F3C}\x{5F3E}\x{5F3F}\x{5F40}\x{5F41}\x{5F42}' . '\x{5F43}\x{5F44}\x{5F45}\x{5F46}\x{5F47}\x{5F48}\x{5F49}\x{5F4A}\x{5F4B}' . '\x{5F4C}\x{5F4D}\x{5F4E}\x{5F4F}\x{5F50}\x{5F51}\x{5F52}\x{5F53}\x{5F54}' . '\x{5F55}\x{5F56}\x{5F57}\x{5F58}\x{5F59}\x{5F5A}\x{5F5B}\x{5F5C}\x{5F5D}' . '\x{5F5E}\x{5F5F}\x{5F60}\x{5F61}\x{5F62}\x{5F63}\x{5F64}\x{5F65}\x{5F66}' . '\x{5F67}\x{5F68}\x{5F69}\x{5F6A}\x{5F6B}\x{5F6C}\x{5F6D}\x{5F6E}\x{5F6F}' . '\x{5F70}\x{5F71}\x{5F72}\x{5F73}\x{5F74}\x{5F75}\x{5F76}\x{5F77}\x{5F78}' . '\x{5F79}\x{5F7A}\x{5F7B}\x{5F7C}\x{5F7D}\x{5F7E}\x{5F7F}\x{5F80}\x{5F81}' . '\x{5F82}\x{5F83}\x{5F84}\x{5F85}\x{5F86}\x{5F87}\x{5F88}\x{5F89}\x{5F8A}' . '\x{5F8B}\x{5F8C}\x{5F8D}\x{5F8E}\x{5F90}\x{5F91}\x{5F92}\x{5F93}\x{5F94}' . '\x{5F95}\x{5F96}\x{5F97}\x{5F98}\x{5F99}\x{5F9B}\x{5F9C}\x{5F9D}\x{5F9E}' . '\x{5F9F}\x{5FA0}\x{5FA1}\x{5FA2}\x{5FA5}\x{5FA6}\x{5FA7}\x{5FA8}\x{5FA9}' . '\x{5FAA}\x{5FAB}\x{5FAC}\x{5FAD}\x{5FAE}\x{5FAF}\x{5FB1}\x{5FB2}\x{5FB3}' . '\x{5FB4}\x{5FB5}\x{5FB6}\x{5FB7}\x{5FB8}\x{5FB9}\x{5FBA}\x{5FBB}\x{5FBC}' . '\x{5FBD}\x{5FBE}\x{5FBF}\x{5FC0}\x{5FC1}\x{5FC3}\x{5FC4}\x{5FC5}\x{5FC6}' . '\x{5FC7}\x{5FC8}\x{5FC9}\x{5FCA}\x{5FCB}\x{5FCC}\x{5FCD}\x{5FCF}\x{5FD0}' . '\x{5FD1}\x{5FD2}\x{5FD3}\x{5FD4}\x{5FD5}\x{5FD6}\x{5FD7}\x{5FD8}\x{5FD9}' . '\x{5FDA}\x{5FDC}\x{5FDD}\x{5FDE}\x{5FE0}\x{5FE1}\x{5FE3}\x{5FE4}\x{5FE5}' . '\x{5FE6}\x{5FE7}\x{5FE8}\x{5FE9}\x{5FEA}\x{5FEB}\x{5FED}\x{5FEE}\x{5FEF}' . '\x{5FF0}\x{5FF1}\x{5FF2}\x{5FF3}\x{5FF4}\x{5FF5}\x{5FF6}\x{5FF7}\x{5FF8}' . '\x{5FF9}\x{5FFA}\x{5FFB}\x{5FFD}\x{5FFE}\x{5FFF}\x{6000}\x{6001}\x{6002}' . '\x{6003}\x{6004}\x{6005}\x{6006}\x{6007}\x{6008}\x{6009}\x{600A}\x{600B}' . '\x{600C}\x{600D}\x{600E}\x{600F}\x{6010}\x{6011}\x{6012}\x{6013}\x{6014}' . '\x{6015}\x{6016}\x{6017}\x{6018}\x{6019}\x{601A}\x{601B}\x{601C}\x{601D}' . '\x{601E}\x{601F}\x{6020}\x{6021}\x{6022}\x{6024}\x{6025}\x{6026}\x{6027}' . '\x{6028}\x{6029}\x{602A}\x{602B}\x{602C}\x{602D}\x{602E}\x{602F}\x{6030}' . '\x{6031}\x{6032}\x{6033}\x{6034}\x{6035}\x{6036}\x{6037}\x{6038}\x{6039}' . '\x{603A}\x{603B}\x{603C}\x{603D}\x{603E}\x{603F}\x{6040}\x{6041}\x{6042}' . '\x{6043}\x{6044}\x{6045}\x{6046}\x{6047}\x{6048}\x{6049}\x{604A}\x{604B}' . '\x{604C}\x{604D}\x{604E}\x{604F}\x{6050}\x{6051}\x{6052}\x{6053}\x{6054}' . '\x{6055}\x{6057}\x{6058}\x{6059}\x{605A}\x{605B}\x{605C}\x{605D}\x{605E}' . '\x{605F}\x{6062}\x{6063}\x{6064}\x{6065}\x{6066}\x{6067}\x{6068}\x{6069}' . '\x{606A}\x{606B}\x{606C}\x{606D}\x{606E}\x{606F}\x{6070}\x{6072}\x{6073}' . '\x{6075}\x{6076}\x{6077}\x{6078}\x{6079}\x{607A}\x{607B}\x{607C}\x{607D}' . '\x{607E}\x{607F}\x{6080}\x{6081}\x{6082}\x{6083}\x{6084}\x{6085}\x{6086}' . '\x{6087}\x{6088}\x{6089}\x{608A}\x{608B}\x{608C}\x{608D}\x{608E}\x{608F}' . '\x{6090}\x{6092}\x{6094}\x{6095}\x{6096}\x{6097}\x{6098}\x{6099}\x{609A}' . '\x{609B}\x{609C}\x{609D}\x{609E}\x{609F}\x{60A0}\x{60A1}\x{60A2}\x{60A3}' . '\x{60A4}\x{60A6}\x{60A7}\x{60A8}\x{60AA}\x{60AB}\x{60AC}\x{60AD}\x{60AE}' . '\x{60AF}\x{60B0}\x{60B1}\x{60B2}\x{60B3}\x{60B4}\x{60B5}\x{60B6}\x{60B7}' . '\x{60B8}\x{60B9}\x{60BA}\x{60BB}\x{60BC}\x{60BD}\x{60BE}\x{60BF}\x{60C0}' . '\x{60C1}\x{60C2}\x{60C3}\x{60C4}\x{60C5}\x{60C6}\x{60C7}\x{60C8}\x{60C9}' . '\x{60CA}\x{60CB}\x{60CC}\x{60CD}\x{60CE}\x{60CF}\x{60D0}\x{60D1}\x{60D3}' . '\x{60D4}\x{60D5}\x{60D7}\x{60D8}\x{60D9}\x{60DA}\x{60DB}\x{60DC}\x{60DD}' . '\x{60DF}\x{60E0}\x{60E1}\x{60E2}\x{60E4}\x{60E6}\x{60E7}\x{60E8}\x{60E9}' . '\x{60EA}\x{60EB}\x{60EC}\x{60ED}\x{60EE}\x{60EF}\x{60F0}\x{60F1}\x{60F2}' . '\x{60F3}\x{60F4}\x{60F5}\x{60F6}\x{60F7}\x{60F8}\x{60F9}\x{60FA}\x{60FB}' . '\x{60FC}\x{60FE}\x{60FF}\x{6100}\x{6101}\x{6103}\x{6104}\x{6105}\x{6106}' . '\x{6108}\x{6109}\x{610A}\x{610B}\x{610C}\x{610D}\x{610E}\x{610F}\x{6110}' . '\x{6112}\x{6113}\x{6114}\x{6115}\x{6116}\x{6117}\x{6118}\x{6119}\x{611A}' . '\x{611B}\x{611C}\x{611D}\x{611F}\x{6120}\x{6122}\x{6123}\x{6124}\x{6125}' . '\x{6126}\x{6127}\x{6128}\x{6129}\x{612A}\x{612B}\x{612C}\x{612D}\x{612E}' . '\x{612F}\x{6130}\x{6132}\x{6134}\x{6136}\x{6137}\x{613A}\x{613B}\x{613C}' . '\x{613D}\x{613E}\x{613F}\x{6140}\x{6141}\x{6142}\x{6143}\x{6144}\x{6145}' . '\x{6146}\x{6147}\x{6148}\x{6149}\x{614A}\x{614B}\x{614C}\x{614D}\x{614E}' . '\x{614F}\x{6150}\x{6151}\x{6152}\x{6153}\x{6154}\x{6155}\x{6156}\x{6157}' . '\x{6158}\x{6159}\x{615A}\x{615B}\x{615C}\x{615D}\x{615E}\x{615F}\x{6161}' . '\x{6162}\x{6163}\x{6164}\x{6165}\x{6166}\x{6167}\x{6168}\x{6169}\x{616A}' . '\x{616B}\x{616C}\x{616D}\x{616E}\x{6170}\x{6171}\x{6172}\x{6173}\x{6174}' . '\x{6175}\x{6176}\x{6177}\x{6178}\x{6179}\x{617A}\x{617C}\x{617E}\x{6180}' . '\x{6181}\x{6182}\x{6183}\x{6184}\x{6185}\x{6187}\x{6188}\x{6189}\x{618A}' . '\x{618B}\x{618C}\x{618D}\x{618E}\x{618F}\x{6190}\x{6191}\x{6192}\x{6193}' . '\x{6194}\x{6195}\x{6196}\x{6198}\x{6199}\x{619A}\x{619B}\x{619D}\x{619E}' . '\x{619F}\x{61A0}\x{61A1}\x{61A2}\x{61A3}\x{61A4}\x{61A5}\x{61A6}\x{61A7}' . '\x{61A8}\x{61A9}\x{61AA}\x{61AB}\x{61AC}\x{61AD}\x{61AE}\x{61AF}\x{61B0}' . '\x{61B1}\x{61B2}\x{61B3}\x{61B4}\x{61B5}\x{61B6}\x{61B7}\x{61B8}\x{61BA}' . '\x{61BC}\x{61BD}\x{61BE}\x{61BF}\x{61C0}\x{61C1}\x{61C2}\x{61C3}\x{61C4}' . '\x{61C5}\x{61C6}\x{61C7}\x{61C8}\x{61C9}\x{61CA}\x{61CB}\x{61CC}\x{61CD}' . '\x{61CE}\x{61CF}\x{61D0}\x{61D1}\x{61D2}\x{61D4}\x{61D6}\x{61D7}\x{61D8}' . '\x{61D9}\x{61DA}\x{61DB}\x{61DC}\x{61DD}\x{61DE}\x{61DF}\x{61E0}\x{61E1}' . '\x{61E2}\x{61E3}\x{61E4}\x{61E5}\x{61E6}\x{61E7}\x{61E8}\x{61E9}\x{61EA}' . '\x{61EB}\x{61ED}\x{61EE}\x{61F0}\x{61F1}\x{61F2}\x{61F3}\x{61F5}\x{61F6}' . '\x{61F7}\x{61F8}\x{61F9}\x{61FA}\x{61FB}\x{61FC}\x{61FD}\x{61FE}\x{61FF}' . '\x{6200}\x{6201}\x{6202}\x{6203}\x{6204}\x{6206}\x{6207}\x{6208}\x{6209}' . '\x{620A}\x{620B}\x{620C}\x{620D}\x{620E}\x{620F}\x{6210}\x{6211}\x{6212}' . '\x{6213}\x{6214}\x{6215}\x{6216}\x{6217}\x{6218}\x{6219}\x{621A}\x{621B}' . '\x{621C}\x{621D}\x{621E}\x{621F}\x{6220}\x{6221}\x{6222}\x{6223}\x{6224}' . '\x{6225}\x{6226}\x{6227}\x{6228}\x{6229}\x{622A}\x{622B}\x{622C}\x{622D}' . '\x{622E}\x{622F}\x{6230}\x{6231}\x{6232}\x{6233}\x{6234}\x{6236}\x{6237}' . '\x{6238}\x{623A}\x{623B}\x{623C}\x{623D}\x{623E}\x{623F}\x{6240}\x{6241}' . '\x{6242}\x{6243}\x{6244}\x{6245}\x{6246}\x{6247}\x{6248}\x{6249}\x{624A}' . '\x{624B}\x{624C}\x{624D}\x{624E}\x{624F}\x{6250}\x{6251}\x{6252}\x{6253}' . '\x{6254}\x{6255}\x{6256}\x{6258}\x{6259}\x{625A}\x{625B}\x{625C}\x{625D}' . '\x{625E}\x{625F}\x{6260}\x{6261}\x{6262}\x{6263}\x{6264}\x{6265}\x{6266}' . '\x{6267}\x{6268}\x{6269}\x{626A}\x{626B}\x{626C}\x{626D}\x{626E}\x{626F}' . '\x{6270}\x{6271}\x{6272}\x{6273}\x{6274}\x{6275}\x{6276}\x{6277}\x{6278}' . '\x{6279}\x{627A}\x{627B}\x{627C}\x{627D}\x{627E}\x{627F}\x{6280}\x{6281}' . '\x{6283}\x{6284}\x{6285}\x{6286}\x{6287}\x{6288}\x{6289}\x{628A}\x{628B}' . '\x{628C}\x{628E}\x{628F}\x{6290}\x{6291}\x{6292}\x{6293}\x{6294}\x{6295}' . '\x{6296}\x{6297}\x{6298}\x{6299}\x{629A}\x{629B}\x{629C}\x{629E}\x{629F}' . '\x{62A0}\x{62A1}\x{62A2}\x{62A3}\x{62A4}\x{62A5}\x{62A7}\x{62A8}\x{62A9}' . '\x{62AA}\x{62AB}\x{62AC}\x{62AD}\x{62AE}\x{62AF}\x{62B0}\x{62B1}\x{62B2}' . '\x{62B3}\x{62B4}\x{62B5}\x{62B6}\x{62B7}\x{62B8}\x{62B9}\x{62BA}\x{62BB}' . '\x{62BC}\x{62BD}\x{62BE}\x{62BF}\x{62C0}\x{62C1}\x{62C2}\x{62C3}\x{62C4}' . '\x{62C5}\x{62C6}\x{62C7}\x{62C8}\x{62C9}\x{62CA}\x{62CB}\x{62CC}\x{62CD}' . '\x{62CE}\x{62CF}\x{62D0}\x{62D1}\x{62D2}\x{62D3}\x{62D4}\x{62D5}\x{62D6}' . '\x{62D7}\x{62D8}\x{62D9}\x{62DA}\x{62DB}\x{62DC}\x{62DD}\x{62DF}\x{62E0}' . '\x{62E1}\x{62E2}\x{62E3}\x{62E4}\x{62E5}\x{62E6}\x{62E7}\x{62E8}\x{62E9}' . '\x{62EB}\x{62EC}\x{62ED}\x{62EE}\x{62EF}\x{62F0}\x{62F1}\x{62F2}\x{62F3}' . '\x{62F4}\x{62F5}\x{62F6}\x{62F7}\x{62F8}\x{62F9}\x{62FA}\x{62FB}\x{62FC}' . '\x{62FD}\x{62FE}\x{62FF}\x{6300}\x{6301}\x{6302}\x{6303}\x{6304}\x{6305}' . '\x{6306}\x{6307}\x{6308}\x{6309}\x{630B}\x{630C}\x{630D}\x{630E}\x{630F}' . '\x{6310}\x{6311}\x{6312}\x{6313}\x{6314}\x{6315}\x{6316}\x{6318}\x{6319}' . '\x{631A}\x{631B}\x{631C}\x{631D}\x{631E}\x{631F}\x{6320}\x{6321}\x{6322}' . '\x{6323}\x{6324}\x{6325}\x{6326}\x{6327}\x{6328}\x{6329}\x{632A}\x{632B}' . '\x{632C}\x{632D}\x{632E}\x{632F}\x{6330}\x{6332}\x{6333}\x{6334}\x{6336}' . '\x{6338}\x{6339}\x{633A}\x{633B}\x{633C}\x{633D}\x{633E}\x{6340}\x{6341}' . '\x{6342}\x{6343}\x{6344}\x{6345}\x{6346}\x{6347}\x{6348}\x{6349}\x{634A}' . '\x{634B}\x{634C}\x{634D}\x{634E}\x{634F}\x{6350}\x{6351}\x{6352}\x{6353}' . '\x{6354}\x{6355}\x{6356}\x{6357}\x{6358}\x{6359}\x{635A}\x{635C}\x{635D}' . '\x{635E}\x{635F}\x{6360}\x{6361}\x{6362}\x{6363}\x{6364}\x{6365}\x{6366}' . '\x{6367}\x{6368}\x{6369}\x{636A}\x{636B}\x{636C}\x{636D}\x{636E}\x{636F}' . '\x{6370}\x{6371}\x{6372}\x{6373}\x{6374}\x{6375}\x{6376}\x{6377}\x{6378}' . '\x{6379}\x{637A}\x{637B}\x{637C}\x{637D}\x{637E}\x{6380}\x{6381}\x{6382}' . '\x{6383}\x{6384}\x{6385}\x{6386}\x{6387}\x{6388}\x{6389}\x{638A}\x{638C}' . '\x{638D}\x{638E}\x{638F}\x{6390}\x{6391}\x{6392}\x{6394}\x{6395}\x{6396}' . '\x{6397}\x{6398}\x{6399}\x{639A}\x{639B}\x{639C}\x{639D}\x{639E}\x{639F}' . '\x{63A0}\x{63A1}\x{63A2}\x{63A3}\x{63A4}\x{63A5}\x{63A6}\x{63A7}\x{63A8}' . '\x{63A9}\x{63AA}\x{63AB}\x{63AC}\x{63AD}\x{63AE}\x{63AF}\x{63B0}\x{63B1}' . '\x{63B2}\x{63B3}\x{63B4}\x{63B5}\x{63B6}\x{63B7}\x{63B8}\x{63B9}\x{63BA}' . '\x{63BC}\x{63BD}\x{63BE}\x{63BF}\x{63C0}\x{63C1}\x{63C2}\x{63C3}\x{63C4}' . '\x{63C5}\x{63C6}\x{63C7}\x{63C8}\x{63C9}\x{63CA}\x{63CB}\x{63CC}\x{63CD}' . '\x{63CE}\x{63CF}\x{63D0}\x{63D2}\x{63D3}\x{63D4}\x{63D5}\x{63D6}\x{63D7}' . '\x{63D8}\x{63D9}\x{63DA}\x{63DB}\x{63DC}\x{63DD}\x{63DE}\x{63DF}\x{63E0}' . '\x{63E1}\x{63E2}\x{63E3}\x{63E4}\x{63E5}\x{63E6}\x{63E7}\x{63E8}\x{63E9}' . '\x{63EA}\x{63EB}\x{63EC}\x{63ED}\x{63EE}\x{63EF}\x{63F0}\x{63F1}\x{63F2}' . '\x{63F3}\x{63F4}\x{63F5}\x{63F6}\x{63F7}\x{63F8}\x{63F9}\x{63FA}\x{63FB}' . '\x{63FC}\x{63FD}\x{63FE}\x{63FF}\x{6400}\x{6401}\x{6402}\x{6403}\x{6404}' . '\x{6405}\x{6406}\x{6408}\x{6409}\x{640A}\x{640B}\x{640C}\x{640D}\x{640E}' . '\x{640F}\x{6410}\x{6411}\x{6412}\x{6413}\x{6414}\x{6415}\x{6416}\x{6417}' . '\x{6418}\x{6419}\x{641A}\x{641B}\x{641C}\x{641D}\x{641E}\x{641F}\x{6420}' . '\x{6421}\x{6422}\x{6423}\x{6424}\x{6425}\x{6426}\x{6427}\x{6428}\x{6429}' . '\x{642A}\x{642B}\x{642C}\x{642D}\x{642E}\x{642F}\x{6430}\x{6431}\x{6432}' . '\x{6433}\x{6434}\x{6435}\x{6436}\x{6437}\x{6438}\x{6439}\x{643A}\x{643D}' . '\x{643E}\x{643F}\x{6440}\x{6441}\x{6443}\x{6444}\x{6445}\x{6446}\x{6447}' . '\x{6448}\x{644A}\x{644B}\x{644C}\x{644D}\x{644E}\x{644F}\x{6450}\x{6451}' . '\x{6452}\x{6453}\x{6454}\x{6455}\x{6456}\x{6457}\x{6458}\x{6459}\x{645B}' . '\x{645C}\x{645D}\x{645E}\x{645F}\x{6460}\x{6461}\x{6462}\x{6463}\x{6464}' . '\x{6465}\x{6466}\x{6467}\x{6468}\x{6469}\x{646A}\x{646B}\x{646C}\x{646D}' . '\x{646E}\x{646F}\x{6470}\x{6471}\x{6472}\x{6473}\x{6474}\x{6475}\x{6476}' . '\x{6477}\x{6478}\x{6479}\x{647A}\x{647B}\x{647C}\x{647D}\x{647F}\x{6480}' . '\x{6481}\x{6482}\x{6483}\x{6484}\x{6485}\x{6487}\x{6488}\x{6489}\x{648A}' . '\x{648B}\x{648C}\x{648D}\x{648E}\x{648F}\x{6490}\x{6491}\x{6492}\x{6493}' . '\x{6494}\x{6495}\x{6496}\x{6497}\x{6498}\x{6499}\x{649A}\x{649B}\x{649C}' . '\x{649D}\x{649E}\x{649F}\x{64A0}\x{64A2}\x{64A3}\x{64A4}\x{64A5}\x{64A6}' . '\x{64A7}\x{64A8}\x{64A9}\x{64AA}\x{64AB}\x{64AC}\x{64AD}\x{64AE}\x{64B0}' . '\x{64B1}\x{64B2}\x{64B3}\x{64B4}\x{64B5}\x{64B7}\x{64B8}\x{64B9}\x{64BA}' . '\x{64BB}\x{64BC}\x{64BD}\x{64BE}\x{64BF}\x{64C0}\x{64C1}\x{64C2}\x{64C3}' . '\x{64C4}\x{64C5}\x{64C6}\x{64C7}\x{64C9}\x{64CA}\x{64CB}\x{64CC}\x{64CD}' . '\x{64CE}\x{64CF}\x{64D0}\x{64D1}\x{64D2}\x{64D3}\x{64D4}\x{64D6}\x{64D7}' . '\x{64D8}\x{64D9}\x{64DA}\x{64DB}\x{64DC}\x{64DD}\x{64DE}\x{64DF}\x{64E0}' . '\x{64E2}\x{64E3}\x{64E4}\x{64E6}\x{64E7}\x{64E8}\x{64E9}\x{64EA}\x{64EB}' . '\x{64EC}\x{64ED}\x{64EF}\x{64F0}\x{64F1}\x{64F2}\x{64F3}\x{64F4}\x{64F6}' . '\x{64F7}\x{64F8}\x{64FA}\x{64FB}\x{64FC}\x{64FD}\x{64FE}\x{64FF}\x{6500}' . '\x{6501}\x{6503}\x{6504}\x{6505}\x{6506}\x{6507}\x{6508}\x{6509}\x{650B}' . '\x{650C}\x{650D}\x{650E}\x{650F}\x{6510}\x{6511}\x{6512}\x{6513}\x{6514}' . '\x{6515}\x{6516}\x{6517}\x{6518}\x{6519}\x{651A}\x{651B}\x{651C}\x{651D}' . '\x{651E}\x{6520}\x{6521}\x{6522}\x{6523}\x{6524}\x{6525}\x{6526}\x{6527}' . '\x{6529}\x{652A}\x{652B}\x{652C}\x{652D}\x{652E}\x{652F}\x{6530}\x{6531}' . '\x{6532}\x{6533}\x{6534}\x{6535}\x{6536}\x{6537}\x{6538}\x{6539}\x{653A}' . '\x{653B}\x{653C}\x{653D}\x{653E}\x{653F}\x{6541}\x{6543}\x{6544}\x{6545}' . '\x{6546}\x{6547}\x{6548}\x{6549}\x{654A}\x{654B}\x{654C}\x{654D}\x{654E}' . '\x{654F}\x{6550}\x{6551}\x{6552}\x{6553}\x{6554}\x{6555}\x{6556}\x{6557}' . '\x{6558}\x{6559}\x{655B}\x{655C}\x{655D}\x{655E}\x{6560}\x{6561}\x{6562}' . '\x{6563}\x{6564}\x{6565}\x{6566}\x{6567}\x{6568}\x{6569}\x{656A}\x{656B}' . '\x{656C}\x{656E}\x{656F}\x{6570}\x{6571}\x{6572}\x{6573}\x{6574}\x{6575}' . '\x{6576}\x{6577}\x{6578}\x{6579}\x{657A}\x{657B}\x{657C}\x{657E}\x{657F}' . '\x{6580}\x{6581}\x{6582}\x{6583}\x{6584}\x{6585}\x{6586}\x{6587}\x{6588}' . '\x{6589}\x{658B}\x{658C}\x{658D}\x{658E}\x{658F}\x{6590}\x{6591}\x{6592}' . '\x{6593}\x{6594}\x{6595}\x{6596}\x{6597}\x{6598}\x{6599}\x{659B}\x{659C}' . '\x{659D}\x{659E}\x{659F}\x{65A0}\x{65A1}\x{65A2}\x{65A3}\x{65A4}\x{65A5}' . '\x{65A6}\x{65A7}\x{65A8}\x{65A9}\x{65AA}\x{65AB}\x{65AC}\x{65AD}\x{65AE}' . '\x{65AF}\x{65B0}\x{65B1}\x{65B2}\x{65B3}\x{65B4}\x{65B6}\x{65B7}\x{65B8}' . '\x{65B9}\x{65BA}\x{65BB}\x{65BC}\x{65BD}\x{65BF}\x{65C0}\x{65C1}\x{65C2}' . '\x{65C3}\x{65C4}\x{65C5}\x{65C6}\x{65C7}\x{65CA}\x{65CB}\x{65CC}\x{65CD}' . '\x{65CE}\x{65CF}\x{65D0}\x{65D2}\x{65D3}\x{65D4}\x{65D5}\x{65D6}\x{65D7}' . '\x{65DA}\x{65DB}\x{65DD}\x{65DE}\x{65DF}\x{65E0}\x{65E1}\x{65E2}\x{65E3}' . '\x{65E5}\x{65E6}\x{65E7}\x{65E8}\x{65E9}\x{65EB}\x{65EC}\x{65ED}\x{65EE}' . '\x{65EF}\x{65F0}\x{65F1}\x{65F2}\x{65F3}\x{65F4}\x{65F5}\x{65F6}\x{65F7}' . '\x{65F8}\x{65FA}\x{65FB}\x{65FC}\x{65FD}\x{6600}\x{6601}\x{6602}\x{6603}' . '\x{6604}\x{6605}\x{6606}\x{6607}\x{6608}\x{6609}\x{660A}\x{660B}\x{660C}' . '\x{660D}\x{660E}\x{660F}\x{6610}\x{6611}\x{6612}\x{6613}\x{6614}\x{6615}' . '\x{6616}\x{6618}\x{6619}\x{661A}\x{661B}\x{661C}\x{661D}\x{661F}\x{6620}' . '\x{6621}\x{6622}\x{6623}\x{6624}\x{6625}\x{6626}\x{6627}\x{6628}\x{6629}' . '\x{662A}\x{662B}\x{662D}\x{662E}\x{662F}\x{6630}\x{6631}\x{6632}\x{6633}' . '\x{6634}\x{6635}\x{6636}\x{6639}\x{663A}\x{663C}\x{663D}\x{663E}\x{6640}' . '\x{6641}\x{6642}\x{6643}\x{6644}\x{6645}\x{6646}\x{6647}\x{6649}\x{664A}' . '\x{664B}\x{664C}\x{664E}\x{664F}\x{6650}\x{6651}\x{6652}\x{6653}\x{6654}' . '\x{6655}\x{6656}\x{6657}\x{6658}\x{6659}\x{665A}\x{665B}\x{665C}\x{665D}' . '\x{665E}\x{665F}\x{6661}\x{6662}\x{6664}\x{6665}\x{6666}\x{6668}\x{6669}' . '\x{666A}\x{666B}\x{666C}\x{666D}\x{666E}\x{666F}\x{6670}\x{6671}\x{6672}' . '\x{6673}\x{6674}\x{6675}\x{6676}\x{6677}\x{6678}\x{6679}\x{667A}\x{667B}' . '\x{667C}\x{667D}\x{667E}\x{667F}\x{6680}\x{6681}\x{6682}\x{6683}\x{6684}' . '\x{6685}\x{6686}\x{6687}\x{6688}\x{6689}\x{668A}\x{668B}\x{668C}\x{668D}' . '\x{668E}\x{668F}\x{6690}\x{6691}\x{6693}\x{6694}\x{6695}\x{6696}\x{6697}' . '\x{6698}\x{6699}\x{669A}\x{669B}\x{669D}\x{669F}\x{66A0}\x{66A1}\x{66A2}' . '\x{66A3}\x{66A4}\x{66A5}\x{66A6}\x{66A7}\x{66A8}\x{66A9}\x{66AA}\x{66AB}' . '\x{66AE}\x{66AF}\x{66B0}\x{66B1}\x{66B2}\x{66B3}\x{66B4}\x{66B5}\x{66B6}' . '\x{66B7}\x{66B8}\x{66B9}\x{66BA}\x{66BB}\x{66BC}\x{66BD}\x{66BE}\x{66BF}' . '\x{66C0}\x{66C1}\x{66C2}\x{66C3}\x{66C4}\x{66C5}\x{66C6}\x{66C7}\x{66C8}' . '\x{66C9}\x{66CA}\x{66CB}\x{66CC}\x{66CD}\x{66CE}\x{66CF}\x{66D1}\x{66D2}' . '\x{66D4}\x{66D5}\x{66D6}\x{66D8}\x{66D9}\x{66DA}\x{66DB}\x{66DC}\x{66DD}' . '\x{66DE}\x{66E0}\x{66E1}\x{66E2}\x{66E3}\x{66E4}\x{66E5}\x{66E6}\x{66E7}' . '\x{66E8}\x{66E9}\x{66EA}\x{66EB}\x{66EC}\x{66ED}\x{66EE}\x{66F0}\x{66F1}' . '\x{66F2}\x{66F3}\x{66F4}\x{66F5}\x{66F6}\x{66F7}\x{66F8}\x{66F9}\x{66FA}' . '\x{66FB}\x{66FC}\x{66FE}\x{66FF}\x{6700}\x{6701}\x{6703}\x{6704}\x{6705}' . '\x{6706}\x{6708}\x{6709}\x{670A}\x{670B}\x{670C}\x{670D}\x{670E}\x{670F}' . '\x{6710}\x{6711}\x{6712}\x{6713}\x{6714}\x{6715}\x{6716}\x{6717}\x{6718}' . '\x{671A}\x{671B}\x{671C}\x{671D}\x{671E}\x{671F}\x{6720}\x{6721}\x{6722}' . '\x{6723}\x{6725}\x{6726}\x{6727}\x{6728}\x{672A}\x{672B}\x{672C}\x{672D}' . '\x{672E}\x{672F}\x{6730}\x{6731}\x{6732}\x{6733}\x{6734}\x{6735}\x{6736}' . '\x{6737}\x{6738}\x{6739}\x{673A}\x{673B}\x{673C}\x{673D}\x{673E}\x{673F}' . '\x{6740}\x{6741}\x{6742}\x{6743}\x{6744}\x{6745}\x{6746}\x{6747}\x{6748}' . '\x{6749}\x{674A}\x{674B}\x{674C}\x{674D}\x{674E}\x{674F}\x{6750}\x{6751}' . '\x{6752}\x{6753}\x{6754}\x{6755}\x{6756}\x{6757}\x{6758}\x{6759}\x{675A}' . '\x{675B}\x{675C}\x{675D}\x{675E}\x{675F}\x{6760}\x{6761}\x{6762}\x{6763}' . '\x{6764}\x{6765}\x{6766}\x{6768}\x{6769}\x{676A}\x{676B}\x{676C}\x{676D}' . '\x{676E}\x{676F}\x{6770}\x{6771}\x{6772}\x{6773}\x{6774}\x{6775}\x{6776}' . '\x{6777}\x{6778}\x{6779}\x{677A}\x{677B}\x{677C}\x{677D}\x{677E}\x{677F}' . '\x{6780}\x{6781}\x{6782}\x{6783}\x{6784}\x{6785}\x{6786}\x{6787}\x{6789}' . '\x{678A}\x{678B}\x{678C}\x{678D}\x{678E}\x{678F}\x{6790}\x{6791}\x{6792}' . '\x{6793}\x{6794}\x{6795}\x{6797}\x{6798}\x{6799}\x{679A}\x{679B}\x{679C}' . '\x{679D}\x{679E}\x{679F}\x{67A0}\x{67A1}\x{67A2}\x{67A3}\x{67A4}\x{67A5}' . '\x{67A6}\x{67A7}\x{67A8}\x{67AA}\x{67AB}\x{67AC}\x{67AD}\x{67AE}\x{67AF}' . '\x{67B0}\x{67B1}\x{67B2}\x{67B3}\x{67B4}\x{67B5}\x{67B6}\x{67B7}\x{67B8}' . '\x{67B9}\x{67BA}\x{67BB}\x{67BC}\x{67BE}\x{67C0}\x{67C1}\x{67C2}\x{67C3}' . '\x{67C4}\x{67C5}\x{67C6}\x{67C7}\x{67C8}\x{67C9}\x{67CA}\x{67CB}\x{67CC}' . '\x{67CD}\x{67CE}\x{67CF}\x{67D0}\x{67D1}\x{67D2}\x{67D3}\x{67D4}\x{67D6}' . '\x{67D8}\x{67D9}\x{67DA}\x{67DB}\x{67DC}\x{67DD}\x{67DE}\x{67DF}\x{67E0}' . '\x{67E1}\x{67E2}\x{67E3}\x{67E4}\x{67E5}\x{67E6}\x{67E7}\x{67E8}\x{67E9}' . '\x{67EA}\x{67EB}\x{67EC}\x{67ED}\x{67EE}\x{67EF}\x{67F0}\x{67F1}\x{67F2}' . '\x{67F3}\x{67F4}\x{67F5}\x{67F6}\x{67F7}\x{67F8}\x{67FA}\x{67FB}\x{67FC}' . '\x{67FD}\x{67FE}\x{67FF}\x{6800}\x{6802}\x{6803}\x{6804}\x{6805}\x{6806}' . '\x{6807}\x{6808}\x{6809}\x{680A}\x{680B}\x{680C}\x{680D}\x{680E}\x{680F}' . '\x{6810}\x{6811}\x{6812}\x{6813}\x{6814}\x{6816}\x{6817}\x{6818}\x{6819}' . '\x{681A}\x{681B}\x{681C}\x{681D}\x{681F}\x{6820}\x{6821}\x{6822}\x{6823}' . '\x{6824}\x{6825}\x{6826}\x{6828}\x{6829}\x{682A}\x{682B}\x{682C}\x{682D}' . '\x{682E}\x{682F}\x{6831}\x{6832}\x{6833}\x{6834}\x{6835}\x{6836}\x{6837}' . '\x{6838}\x{6839}\x{683A}\x{683B}\x{683C}\x{683D}\x{683E}\x{683F}\x{6840}' . '\x{6841}\x{6842}\x{6843}\x{6844}\x{6845}\x{6846}\x{6847}\x{6848}\x{6849}' . '\x{684A}\x{684B}\x{684C}\x{684D}\x{684E}\x{684F}\x{6850}\x{6851}\x{6852}' . '\x{6853}\x{6854}\x{6855}\x{6856}\x{6857}\x{685B}\x{685D}\x{6860}\x{6861}' . '\x{6862}\x{6863}\x{6864}\x{6865}\x{6866}\x{6867}\x{6868}\x{6869}\x{686A}' . '\x{686B}\x{686C}\x{686D}\x{686E}\x{686F}\x{6870}\x{6871}\x{6872}\x{6873}' . '\x{6874}\x{6875}\x{6876}\x{6877}\x{6878}\x{6879}\x{687B}\x{687C}\x{687D}' . '\x{687E}\x{687F}\x{6880}\x{6881}\x{6882}\x{6883}\x{6884}\x{6885}\x{6886}' . '\x{6887}\x{6888}\x{6889}\x{688A}\x{688B}\x{688C}\x{688D}\x{688E}\x{688F}' . '\x{6890}\x{6891}\x{6892}\x{6893}\x{6894}\x{6896}\x{6897}\x{6898}\x{689A}' . '\x{689B}\x{689C}\x{689D}\x{689E}\x{689F}\x{68A0}\x{68A1}\x{68A2}\x{68A3}' . '\x{68A4}\x{68A6}\x{68A7}\x{68A8}\x{68A9}\x{68AA}\x{68AB}\x{68AC}\x{68AD}' . '\x{68AE}\x{68AF}\x{68B0}\x{68B1}\x{68B2}\x{68B3}\x{68B4}\x{68B5}\x{68B6}' . '\x{68B7}\x{68B9}\x{68BB}\x{68BC}\x{68BD}\x{68BE}\x{68BF}\x{68C0}\x{68C1}' . '\x{68C2}\x{68C4}\x{68C6}\x{68C7}\x{68C8}\x{68C9}\x{68CA}\x{68CB}\x{68CC}' . '\x{68CD}\x{68CE}\x{68CF}\x{68D0}\x{68D1}\x{68D2}\x{68D3}\x{68D4}\x{68D5}' . '\x{68D6}\x{68D7}\x{68D8}\x{68DA}\x{68DB}\x{68DC}\x{68DD}\x{68DE}\x{68DF}' . '\x{68E0}\x{68E1}\x{68E3}\x{68E4}\x{68E6}\x{68E7}\x{68E8}\x{68E9}\x{68EA}' . '\x{68EB}\x{68EC}\x{68ED}\x{68EE}\x{68EF}\x{68F0}\x{68F1}\x{68F2}\x{68F3}' . '\x{68F4}\x{68F5}\x{68F6}\x{68F7}\x{68F8}\x{68F9}\x{68FA}\x{68FB}\x{68FC}' . '\x{68FD}\x{68FE}\x{68FF}\x{6901}\x{6902}\x{6903}\x{6904}\x{6905}\x{6906}' . '\x{6907}\x{6908}\x{690A}\x{690B}\x{690C}\x{690D}\x{690E}\x{690F}\x{6910}' . '\x{6911}\x{6912}\x{6913}\x{6914}\x{6915}\x{6916}\x{6917}\x{6918}\x{6919}' . '\x{691A}\x{691B}\x{691C}\x{691D}\x{691E}\x{691F}\x{6920}\x{6921}\x{6922}' . '\x{6923}\x{6924}\x{6925}\x{6926}\x{6927}\x{6928}\x{6929}\x{692A}\x{692B}' . '\x{692C}\x{692D}\x{692E}\x{692F}\x{6930}\x{6931}\x{6932}\x{6933}\x{6934}' . '\x{6935}\x{6936}\x{6937}\x{6938}\x{6939}\x{693A}\x{693B}\x{693C}\x{693D}' . '\x{693F}\x{6940}\x{6941}\x{6942}\x{6943}\x{6944}\x{6945}\x{6946}\x{6947}' . '\x{6948}\x{6949}\x{694A}\x{694B}\x{694C}\x{694E}\x{694F}\x{6950}\x{6951}' . '\x{6952}\x{6953}\x{6954}\x{6955}\x{6956}\x{6957}\x{6958}\x{6959}\x{695A}' . '\x{695B}\x{695C}\x{695D}\x{695E}\x{695F}\x{6960}\x{6961}\x{6962}\x{6963}' . '\x{6964}\x{6965}\x{6966}\x{6967}\x{6968}\x{6969}\x{696A}\x{696B}\x{696C}' . '\x{696D}\x{696E}\x{696F}\x{6970}\x{6971}\x{6972}\x{6973}\x{6974}\x{6975}' . '\x{6976}\x{6977}\x{6978}\x{6979}\x{697A}\x{697B}\x{697C}\x{697D}\x{697E}' . '\x{697F}\x{6980}\x{6981}\x{6982}\x{6983}\x{6984}\x{6985}\x{6986}\x{6987}' . '\x{6988}\x{6989}\x{698A}\x{698B}\x{698C}\x{698D}\x{698E}\x{698F}\x{6990}' . '\x{6991}\x{6992}\x{6993}\x{6994}\x{6995}\x{6996}\x{6997}\x{6998}\x{6999}' . '\x{699A}\x{699B}\x{699C}\x{699D}\x{699E}\x{69A0}\x{69A1}\x{69A3}\x{69A4}' . '\x{69A5}\x{69A6}\x{69A7}\x{69A8}\x{69A9}\x{69AA}\x{69AB}\x{69AC}\x{69AD}' . '\x{69AE}\x{69AF}\x{69B0}\x{69B1}\x{69B2}\x{69B3}\x{69B4}\x{69B5}\x{69B6}' . '\x{69B7}\x{69B8}\x{69B9}\x{69BA}\x{69BB}\x{69BC}\x{69BD}\x{69BE}\x{69BF}' . '\x{69C1}\x{69C2}\x{69C3}\x{69C4}\x{69C5}\x{69C6}\x{69C7}\x{69C8}\x{69C9}' . '\x{69CA}\x{69CB}\x{69CC}\x{69CD}\x{69CE}\x{69CF}\x{69D0}\x{69D3}\x{69D4}' . '\x{69D8}\x{69D9}\x{69DA}\x{69DB}\x{69DC}\x{69DD}\x{69DE}\x{69DF}\x{69E0}' . '\x{69E1}\x{69E2}\x{69E3}\x{69E4}\x{69E5}\x{69E6}\x{69E7}\x{69E8}\x{69E9}' . '\x{69EA}\x{69EB}\x{69EC}\x{69ED}\x{69EE}\x{69EF}\x{69F0}\x{69F1}\x{69F2}' . '\x{69F3}\x{69F4}\x{69F5}\x{69F6}\x{69F7}\x{69F8}\x{69FA}\x{69FB}\x{69FC}' . '\x{69FD}\x{69FE}\x{69FF}\x{6A00}\x{6A01}\x{6A02}\x{6A04}\x{6A05}\x{6A06}' . '\x{6A07}\x{6A08}\x{6A09}\x{6A0A}\x{6A0B}\x{6A0D}\x{6A0E}\x{6A0F}\x{6A10}' . '\x{6A11}\x{6A12}\x{6A13}\x{6A14}\x{6A15}\x{6A16}\x{6A17}\x{6A18}\x{6A19}' . '\x{6A1A}\x{6A1B}\x{6A1D}\x{6A1E}\x{6A1F}\x{6A20}\x{6A21}\x{6A22}\x{6A23}' . '\x{6A25}\x{6A26}\x{6A27}\x{6A28}\x{6A29}\x{6A2A}\x{6A2B}\x{6A2C}\x{6A2D}' . '\x{6A2E}\x{6A2F}\x{6A30}\x{6A31}\x{6A32}\x{6A33}\x{6A34}\x{6A35}\x{6A36}' . '\x{6A38}\x{6A39}\x{6A3A}\x{6A3B}\x{6A3C}\x{6A3D}\x{6A3E}\x{6A3F}\x{6A40}' . '\x{6A41}\x{6A42}\x{6A43}\x{6A44}\x{6A45}\x{6A46}\x{6A47}\x{6A48}\x{6A49}' . '\x{6A4B}\x{6A4C}\x{6A4D}\x{6A4E}\x{6A4F}\x{6A50}\x{6A51}\x{6A52}\x{6A54}' . '\x{6A55}\x{6A56}\x{6A57}\x{6A58}\x{6A59}\x{6A5A}\x{6A5B}\x{6A5D}\x{6A5E}' . '\x{6A5F}\x{6A60}\x{6A61}\x{6A62}\x{6A63}\x{6A64}\x{6A65}\x{6A66}\x{6A67}' . '\x{6A68}\x{6A69}\x{6A6A}\x{6A6B}\x{6A6C}\x{6A6D}\x{6A6F}\x{6A71}\x{6A72}' . '\x{6A73}\x{6A74}\x{6A75}\x{6A76}\x{6A77}\x{6A78}\x{6A79}\x{6A7A}\x{6A7B}' . '\x{6A7C}\x{6A7D}\x{6A7E}\x{6A7F}\x{6A80}\x{6A81}\x{6A82}\x{6A83}\x{6A84}' . '\x{6A85}\x{6A87}\x{6A88}\x{6A89}\x{6A8B}\x{6A8C}\x{6A8D}\x{6A8E}\x{6A90}' . '\x{6A91}\x{6A92}\x{6A93}\x{6A94}\x{6A95}\x{6A96}\x{6A97}\x{6A98}\x{6A9A}' . '\x{6A9B}\x{6A9C}\x{6A9E}\x{6A9F}\x{6AA0}\x{6AA1}\x{6AA2}\x{6AA3}\x{6AA4}' . '\x{6AA5}\x{6AA6}\x{6AA7}\x{6AA8}\x{6AA9}\x{6AAB}\x{6AAC}\x{6AAD}\x{6AAE}' . '\x{6AAF}\x{6AB0}\x{6AB2}\x{6AB3}\x{6AB4}\x{6AB5}\x{6AB6}\x{6AB7}\x{6AB8}' . '\x{6AB9}\x{6ABA}\x{6ABB}\x{6ABC}\x{6ABD}\x{6ABF}\x{6AC1}\x{6AC2}\x{6AC3}' . '\x{6AC5}\x{6AC6}\x{6AC7}\x{6ACA}\x{6ACB}\x{6ACC}\x{6ACD}\x{6ACE}\x{6ACF}' . '\x{6AD0}\x{6AD1}\x{6AD2}\x{6AD3}\x{6AD4}\x{6AD5}\x{6AD6}\x{6AD7}\x{6AD9}' . '\x{6ADA}\x{6ADB}\x{6ADC}\x{6ADD}\x{6ADE}\x{6ADF}\x{6AE0}\x{6AE1}\x{6AE2}' . '\x{6AE3}\x{6AE4}\x{6AE5}\x{6AE6}\x{6AE7}\x{6AE8}\x{6AEA}\x{6AEB}\x{6AEC}' . '\x{6AED}\x{6AEE}\x{6AEF}\x{6AF0}\x{6AF1}\x{6AF2}\x{6AF3}\x{6AF4}\x{6AF5}' . '\x{6AF6}\x{6AF7}\x{6AF8}\x{6AF9}\x{6AFA}\x{6AFB}\x{6AFC}\x{6AFD}\x{6AFE}' . '\x{6AFF}\x{6B00}\x{6B01}\x{6B02}\x{6B03}\x{6B04}\x{6B05}\x{6B06}\x{6B07}' . '\x{6B08}\x{6B09}\x{6B0A}\x{6B0B}\x{6B0C}\x{6B0D}\x{6B0F}\x{6B10}\x{6B11}' . '\x{6B12}\x{6B13}\x{6B14}\x{6B15}\x{6B16}\x{6B17}\x{6B18}\x{6B19}\x{6B1A}' . '\x{6B1C}\x{6B1D}\x{6B1E}\x{6B1F}\x{6B20}\x{6B21}\x{6B22}\x{6B23}\x{6B24}' . '\x{6B25}\x{6B26}\x{6B27}\x{6B28}\x{6B29}\x{6B2A}\x{6B2B}\x{6B2C}\x{6B2D}' . '\x{6B2F}\x{6B30}\x{6B31}\x{6B32}\x{6B33}\x{6B34}\x{6B36}\x{6B37}\x{6B38}' . '\x{6B39}\x{6B3A}\x{6B3B}\x{6B3C}\x{6B3D}\x{6B3E}\x{6B3F}\x{6B41}\x{6B42}' . '\x{6B43}\x{6B44}\x{6B45}\x{6B46}\x{6B47}\x{6B48}\x{6B49}\x{6B4A}\x{6B4B}' . '\x{6B4C}\x{6B4D}\x{6B4E}\x{6B4F}\x{6B50}\x{6B51}\x{6B52}\x{6B53}\x{6B54}' . '\x{6B55}\x{6B56}\x{6B59}\x{6B5A}\x{6B5B}\x{6B5C}\x{6B5E}\x{6B5F}\x{6B60}' . '\x{6B61}\x{6B62}\x{6B63}\x{6B64}\x{6B65}\x{6B66}\x{6B67}\x{6B69}\x{6B6A}' . '\x{6B6B}\x{6B6D}\x{6B6F}\x{6B70}\x{6B72}\x{6B73}\x{6B74}\x{6B76}\x{6B77}' . '\x{6B78}\x{6B79}\x{6B7A}\x{6B7B}\x{6B7C}\x{6B7E}\x{6B7F}\x{6B80}\x{6B81}' . '\x{6B82}\x{6B83}\x{6B84}\x{6B85}\x{6B86}\x{6B87}\x{6B88}\x{6B89}\x{6B8A}' . '\x{6B8B}\x{6B8C}\x{6B8D}\x{6B8E}\x{6B8F}\x{6B90}\x{6B91}\x{6B92}\x{6B93}' . '\x{6B94}\x{6B95}\x{6B96}\x{6B97}\x{6B98}\x{6B99}\x{6B9A}\x{6B9B}\x{6B9C}' . '\x{6B9D}\x{6B9E}\x{6B9F}\x{6BA0}\x{6BA1}\x{6BA2}\x{6BA3}\x{6BA4}\x{6BA5}' . '\x{6BA6}\x{6BA7}\x{6BA8}\x{6BA9}\x{6BAA}\x{6BAB}\x{6BAC}\x{6BAD}\x{6BAE}' . '\x{6BAF}\x{6BB0}\x{6BB2}\x{6BB3}\x{6BB4}\x{6BB5}\x{6BB6}\x{6BB7}\x{6BB9}' . '\x{6BBA}\x{6BBB}\x{6BBC}\x{6BBD}\x{6BBE}\x{6BBF}\x{6BC0}\x{6BC1}\x{6BC2}' . '\x{6BC3}\x{6BC4}\x{6BC5}\x{6BC6}\x{6BC7}\x{6BC8}\x{6BC9}\x{6BCA}\x{6BCB}' . '\x{6BCC}\x{6BCD}\x{6BCE}\x{6BCF}\x{6BD0}\x{6BD1}\x{6BD2}\x{6BD3}\x{6BD4}' . '\x{6BD5}\x{6BD6}\x{6BD7}\x{6BD8}\x{6BD9}\x{6BDA}\x{6BDB}\x{6BDC}\x{6BDD}' . '\x{6BDE}\x{6BDF}\x{6BE0}\x{6BE1}\x{6BE2}\x{6BE3}\x{6BE4}\x{6BE5}\x{6BE6}' . '\x{6BE7}\x{6BE8}\x{6BEA}\x{6BEB}\x{6BEC}\x{6BED}\x{6BEE}\x{6BEF}\x{6BF0}' . '\x{6BF2}\x{6BF3}\x{6BF5}\x{6BF6}\x{6BF7}\x{6BF8}\x{6BF9}\x{6BFB}\x{6BFC}' . '\x{6BFD}\x{6BFE}\x{6BFF}\x{6C00}\x{6C01}\x{6C02}\x{6C03}\x{6C04}\x{6C05}' . '\x{6C06}\x{6C07}\x{6C08}\x{6C09}\x{6C0B}\x{6C0C}\x{6C0D}\x{6C0E}\x{6C0F}' . '\x{6C10}\x{6C11}\x{6C12}\x{6C13}\x{6C14}\x{6C15}\x{6C16}\x{6C18}\x{6C19}' . '\x{6C1A}\x{6C1B}\x{6C1D}\x{6C1E}\x{6C1F}\x{6C20}\x{6C21}\x{6C22}\x{6C23}' . '\x{6C24}\x{6C25}\x{6C26}\x{6C27}\x{6C28}\x{6C29}\x{6C2A}\x{6C2B}\x{6C2C}' . '\x{6C2E}\x{6C2F}\x{6C30}\x{6C31}\x{6C32}\x{6C33}\x{6C34}\x{6C35}\x{6C36}' . '\x{6C37}\x{6C38}\x{6C3A}\x{6C3B}\x{6C3D}\x{6C3E}\x{6C3F}\x{6C40}\x{6C41}' . '\x{6C42}\x{6C43}\x{6C44}\x{6C46}\x{6C47}\x{6C48}\x{6C49}\x{6C4A}\x{6C4B}' . '\x{6C4C}\x{6C4D}\x{6C4E}\x{6C4F}\x{6C50}\x{6C51}\x{6C52}\x{6C53}\x{6C54}' . '\x{6C55}\x{6C56}\x{6C57}\x{6C58}\x{6C59}\x{6C5A}\x{6C5B}\x{6C5C}\x{6C5D}' . '\x{6C5E}\x{6C5F}\x{6C60}\x{6C61}\x{6C62}\x{6C63}\x{6C64}\x{6C65}\x{6C66}' . '\x{6C67}\x{6C68}\x{6C69}\x{6C6A}\x{6C6B}\x{6C6D}\x{6C6F}\x{6C70}\x{6C71}' . '\x{6C72}\x{6C73}\x{6C74}\x{6C75}\x{6C76}\x{6C77}\x{6C78}\x{6C79}\x{6C7A}' . '\x{6C7B}\x{6C7C}\x{6C7D}\x{6C7E}\x{6C7F}\x{6C80}\x{6C81}\x{6C82}\x{6C83}' . '\x{6C84}\x{6C85}\x{6C86}\x{6C87}\x{6C88}\x{6C89}\x{6C8A}\x{6C8B}\x{6C8C}' . '\x{6C8D}\x{6C8E}\x{6C8F}\x{6C90}\x{6C91}\x{6C92}\x{6C93}\x{6C94}\x{6C95}' . '\x{6C96}\x{6C97}\x{6C98}\x{6C99}\x{6C9A}\x{6C9B}\x{6C9C}\x{6C9D}\x{6C9E}' . '\x{6C9F}\x{6CA1}\x{6CA2}\x{6CA3}\x{6CA4}\x{6CA5}\x{6CA6}\x{6CA7}\x{6CA8}' . '\x{6CA9}\x{6CAA}\x{6CAB}\x{6CAC}\x{6CAD}\x{6CAE}\x{6CAF}\x{6CB0}\x{6CB1}' . '\x{6CB2}\x{6CB3}\x{6CB4}\x{6CB5}\x{6CB6}\x{6CB7}\x{6CB8}\x{6CB9}\x{6CBA}' . '\x{6CBB}\x{6CBC}\x{6CBD}\x{6CBE}\x{6CBF}\x{6CC0}\x{6CC1}\x{6CC2}\x{6CC3}' . '\x{6CC4}\x{6CC5}\x{6CC6}\x{6CC7}\x{6CC8}\x{6CC9}\x{6CCA}\x{6CCB}\x{6CCC}' . '\x{6CCD}\x{6CCE}\x{6CCF}\x{6CD0}\x{6CD1}\x{6CD2}\x{6CD3}\x{6CD4}\x{6CD5}' . '\x{6CD6}\x{6CD7}\x{6CD9}\x{6CDA}\x{6CDB}\x{6CDC}\x{6CDD}\x{6CDE}\x{6CDF}' . '\x{6CE0}\x{6CE1}\x{6CE2}\x{6CE3}\x{6CE4}\x{6CE5}\x{6CE6}\x{6CE7}\x{6CE8}' . '\x{6CE9}\x{6CEA}\x{6CEB}\x{6CEC}\x{6CED}\x{6CEE}\x{6CEF}\x{6CF0}\x{6CF1}' . '\x{6CF2}\x{6CF3}\x{6CF5}\x{6CF6}\x{6CF7}\x{6CF8}\x{6CF9}\x{6CFA}\x{6CFB}' . '\x{6CFC}\x{6CFD}\x{6CFE}\x{6CFF}\x{6D00}\x{6D01}\x{6D03}\x{6D04}\x{6D05}' . '\x{6D06}\x{6D07}\x{6D08}\x{6D09}\x{6D0A}\x{6D0B}\x{6D0C}\x{6D0D}\x{6D0E}' . '\x{6D0F}\x{6D10}\x{6D11}\x{6D12}\x{6D13}\x{6D14}\x{6D15}\x{6D16}\x{6D17}' . '\x{6D18}\x{6D19}\x{6D1A}\x{6D1B}\x{6D1D}\x{6D1E}\x{6D1F}\x{6D20}\x{6D21}' . '\x{6D22}\x{6D23}\x{6D25}\x{6D26}\x{6D27}\x{6D28}\x{6D29}\x{6D2A}\x{6D2B}' . '\x{6D2C}\x{6D2D}\x{6D2E}\x{6D2F}\x{6D30}\x{6D31}\x{6D32}\x{6D33}\x{6D34}' . '\x{6D35}\x{6D36}\x{6D37}\x{6D38}\x{6D39}\x{6D3A}\x{6D3B}\x{6D3C}\x{6D3D}' . '\x{6D3E}\x{6D3F}\x{6D40}\x{6D41}\x{6D42}\x{6D43}\x{6D44}\x{6D45}\x{6D46}' . '\x{6D47}\x{6D48}\x{6D49}\x{6D4A}\x{6D4B}\x{6D4C}\x{6D4D}\x{6D4E}\x{6D4F}' . '\x{6D50}\x{6D51}\x{6D52}\x{6D53}\x{6D54}\x{6D55}\x{6D56}\x{6D57}\x{6D58}' . '\x{6D59}\x{6D5A}\x{6D5B}\x{6D5C}\x{6D5D}\x{6D5E}\x{6D5F}\x{6D60}\x{6D61}' . '\x{6D62}\x{6D63}\x{6D64}\x{6D65}\x{6D66}\x{6D67}\x{6D68}\x{6D69}\x{6D6A}' . '\x{6D6B}\x{6D6C}\x{6D6D}\x{6D6E}\x{6D6F}\x{6D70}\x{6D72}\x{6D73}\x{6D74}' . '\x{6D75}\x{6D76}\x{6D77}\x{6D78}\x{6D79}\x{6D7A}\x{6D7B}\x{6D7C}\x{6D7D}' . '\x{6D7E}\x{6D7F}\x{6D80}\x{6D82}\x{6D83}\x{6D84}\x{6D85}\x{6D86}\x{6D87}' . '\x{6D88}\x{6D89}\x{6D8A}\x{6D8B}\x{6D8C}\x{6D8D}\x{6D8E}\x{6D8F}\x{6D90}' . '\x{6D91}\x{6D92}\x{6D93}\x{6D94}\x{6D95}\x{6D97}\x{6D98}\x{6D99}\x{6D9A}' . '\x{6D9B}\x{6D9D}\x{6D9E}\x{6D9F}\x{6DA0}\x{6DA1}\x{6DA2}\x{6DA3}\x{6DA4}' . '\x{6DA5}\x{6DA6}\x{6DA7}\x{6DA8}\x{6DA9}\x{6DAA}\x{6DAB}\x{6DAC}\x{6DAD}' . '\x{6DAE}\x{6DAF}\x{6DB2}\x{6DB3}\x{6DB4}\x{6DB5}\x{6DB7}\x{6DB8}\x{6DB9}' . '\x{6DBA}\x{6DBB}\x{6DBC}\x{6DBD}\x{6DBE}\x{6DBF}\x{6DC0}\x{6DC1}\x{6DC2}' . '\x{6DC3}\x{6DC4}\x{6DC5}\x{6DC6}\x{6DC7}\x{6DC8}\x{6DC9}\x{6DCA}\x{6DCB}' . '\x{6DCC}\x{6DCD}\x{6DCE}\x{6DCF}\x{6DD0}\x{6DD1}\x{6DD2}\x{6DD3}\x{6DD4}' . '\x{6DD5}\x{6DD6}\x{6DD7}\x{6DD8}\x{6DD9}\x{6DDA}\x{6DDB}\x{6DDC}\x{6DDD}' . '\x{6DDE}\x{6DDF}\x{6DE0}\x{6DE1}\x{6DE2}\x{6DE3}\x{6DE4}\x{6DE5}\x{6DE6}' . '\x{6DE7}\x{6DE8}\x{6DE9}\x{6DEA}\x{6DEB}\x{6DEC}\x{6DED}\x{6DEE}\x{6DEF}' . '\x{6DF0}\x{6DF1}\x{6DF2}\x{6DF3}\x{6DF4}\x{6DF5}\x{6DF6}\x{6DF7}\x{6DF8}' . '\x{6DF9}\x{6DFA}\x{6DFB}\x{6DFC}\x{6DFD}\x{6E00}\x{6E03}\x{6E04}\x{6E05}' . '\x{6E07}\x{6E08}\x{6E09}\x{6E0A}\x{6E0B}\x{6E0C}\x{6E0D}\x{6E0E}\x{6E0F}' . '\x{6E10}\x{6E11}\x{6E14}\x{6E15}\x{6E16}\x{6E17}\x{6E19}\x{6E1A}\x{6E1B}' . '\x{6E1C}\x{6E1D}\x{6E1E}\x{6E1F}\x{6E20}\x{6E21}\x{6E22}\x{6E23}\x{6E24}' . '\x{6E25}\x{6E26}\x{6E27}\x{6E28}\x{6E29}\x{6E2B}\x{6E2C}\x{6E2D}\x{6E2E}' . '\x{6E2F}\x{6E30}\x{6E31}\x{6E32}\x{6E33}\x{6E34}\x{6E35}\x{6E36}\x{6E37}' . '\x{6E38}\x{6E39}\x{6E3A}\x{6E3B}\x{6E3C}\x{6E3D}\x{6E3E}\x{6E3F}\x{6E40}' . '\x{6E41}\x{6E42}\x{6E43}\x{6E44}\x{6E45}\x{6E46}\x{6E47}\x{6E48}\x{6E49}' . '\x{6E4A}\x{6E4B}\x{6E4D}\x{6E4E}\x{6E4F}\x{6E50}\x{6E51}\x{6E52}\x{6E53}' . '\x{6E54}\x{6E55}\x{6E56}\x{6E57}\x{6E58}\x{6E59}\x{6E5A}\x{6E5B}\x{6E5C}' . '\x{6E5D}\x{6E5E}\x{6E5F}\x{6E60}\x{6E61}\x{6E62}\x{6E63}\x{6E64}\x{6E65}' . '\x{6E66}\x{6E67}\x{6E68}\x{6E69}\x{6E6A}\x{6E6B}\x{6E6D}\x{6E6E}\x{6E6F}' . '\x{6E70}\x{6E71}\x{6E72}\x{6E73}\x{6E74}\x{6E75}\x{6E77}\x{6E78}\x{6E79}' . '\x{6E7E}\x{6E7F}\x{6E80}\x{6E81}\x{6E82}\x{6E83}\x{6E84}\x{6E85}\x{6E86}' . '\x{6E87}\x{6E88}\x{6E89}\x{6E8A}\x{6E8D}\x{6E8E}\x{6E8F}\x{6E90}\x{6E91}' . '\x{6E92}\x{6E93}\x{6E94}\x{6E96}\x{6E97}\x{6E98}\x{6E99}\x{6E9A}\x{6E9B}' . '\x{6E9C}\x{6E9D}\x{6E9E}\x{6E9F}\x{6EA0}\x{6EA1}\x{6EA2}\x{6EA3}\x{6EA4}' . '\x{6EA5}\x{6EA6}\x{6EA7}\x{6EA8}\x{6EA9}\x{6EAA}\x{6EAB}\x{6EAC}\x{6EAD}' . '\x{6EAE}\x{6EAF}\x{6EB0}\x{6EB1}\x{6EB2}\x{6EB3}\x{6EB4}\x{6EB5}\x{6EB6}' . '\x{6EB7}\x{6EB8}\x{6EB9}\x{6EBA}\x{6EBB}\x{6EBC}\x{6EBD}\x{6EBE}\x{6EBF}' . '\x{6EC0}\x{6EC1}\x{6EC2}\x{6EC3}\x{6EC4}\x{6EC5}\x{6EC6}\x{6EC7}\x{6EC8}' . '\x{6EC9}\x{6ECA}\x{6ECB}\x{6ECC}\x{6ECD}\x{6ECE}\x{6ECF}\x{6ED0}\x{6ED1}' . '\x{6ED2}\x{6ED3}\x{6ED4}\x{6ED5}\x{6ED6}\x{6ED7}\x{6ED8}\x{6ED9}\x{6EDA}' . '\x{6EDC}\x{6EDE}\x{6EDF}\x{6EE0}\x{6EE1}\x{6EE2}\x{6EE4}\x{6EE5}\x{6EE6}' . '\x{6EE7}\x{6EE8}\x{6EE9}\x{6EEA}\x{6EEB}\x{6EEC}\x{6EED}\x{6EEE}\x{6EEF}' . '\x{6EF0}\x{6EF1}\x{6EF2}\x{6EF3}\x{6EF4}\x{6EF5}\x{6EF6}\x{6EF7}\x{6EF8}' . '\x{6EF9}\x{6EFA}\x{6EFB}\x{6EFC}\x{6EFD}\x{6EFE}\x{6EFF}\x{6F00}\x{6F01}' . '\x{6F02}\x{6F03}\x{6F05}\x{6F06}\x{6F07}\x{6F08}\x{6F09}\x{6F0A}\x{6F0C}' . '\x{6F0D}\x{6F0E}\x{6F0F}\x{6F10}\x{6F11}\x{6F12}\x{6F13}\x{6F14}\x{6F15}' . '\x{6F16}\x{6F17}\x{6F18}\x{6F19}\x{6F1A}\x{6F1B}\x{6F1C}\x{6F1D}\x{6F1E}' . '\x{6F1F}\x{6F20}\x{6F21}\x{6F22}\x{6F23}\x{6F24}\x{6F25}\x{6F26}\x{6F27}' . '\x{6F28}\x{6F29}\x{6F2A}\x{6F2B}\x{6F2C}\x{6F2D}\x{6F2E}\x{6F2F}\x{6F30}' . '\x{6F31}\x{6F32}\x{6F33}\x{6F34}\x{6F35}\x{6F36}\x{6F37}\x{6F38}\x{6F39}' . '\x{6F3A}\x{6F3B}\x{6F3C}\x{6F3D}\x{6F3E}\x{6F3F}\x{6F40}\x{6F41}\x{6F43}' . '\x{6F44}\x{6F45}\x{6F46}\x{6F47}\x{6F49}\x{6F4B}\x{6F4C}\x{6F4D}\x{6F4E}' . '\x{6F4F}\x{6F50}\x{6F51}\x{6F52}\x{6F53}\x{6F54}\x{6F55}\x{6F56}\x{6F57}' . '\x{6F58}\x{6F59}\x{6F5A}\x{6F5B}\x{6F5C}\x{6F5D}\x{6F5E}\x{6F5F}\x{6F60}' . '\x{6F61}\x{6F62}\x{6F63}\x{6F64}\x{6F65}\x{6F66}\x{6F67}\x{6F68}\x{6F69}' . '\x{6F6A}\x{6F6B}\x{6F6C}\x{6F6D}\x{6F6E}\x{6F6F}\x{6F70}\x{6F71}\x{6F72}' . '\x{6F73}\x{6F74}\x{6F75}\x{6F76}\x{6F77}\x{6F78}\x{6F7A}\x{6F7B}\x{6F7C}' . '\x{6F7D}\x{6F7E}\x{6F7F}\x{6F80}\x{6F81}\x{6F82}\x{6F83}\x{6F84}\x{6F85}' . '\x{6F86}\x{6F87}\x{6F88}\x{6F89}\x{6F8A}\x{6F8B}\x{6F8C}\x{6F8D}\x{6F8E}' . '\x{6F8F}\x{6F90}\x{6F91}\x{6F92}\x{6F93}\x{6F94}\x{6F95}\x{6F96}\x{6F97}' . '\x{6F99}\x{6F9B}\x{6F9C}\x{6F9D}\x{6F9E}\x{6FA0}\x{6FA1}\x{6FA2}\x{6FA3}' . '\x{6FA4}\x{6FA5}\x{6FA6}\x{6FA7}\x{6FA8}\x{6FA9}\x{6FAA}\x{6FAB}\x{6FAC}' . '\x{6FAD}\x{6FAE}\x{6FAF}\x{6FB0}\x{6FB1}\x{6FB2}\x{6FB3}\x{6FB4}\x{6FB5}' . '\x{6FB6}\x{6FB8}\x{6FB9}\x{6FBA}\x{6FBB}\x{6FBC}\x{6FBD}\x{6FBE}\x{6FBF}' . '\x{6FC0}\x{6FC1}\x{6FC2}\x{6FC3}\x{6FC4}\x{6FC6}\x{6FC7}\x{6FC8}\x{6FC9}' . '\x{6FCA}\x{6FCB}\x{6FCC}\x{6FCD}\x{6FCE}\x{6FCF}\x{6FD1}\x{6FD2}\x{6FD4}' . '\x{6FD5}\x{6FD6}\x{6FD7}\x{6FD8}\x{6FD9}\x{6FDA}\x{6FDB}\x{6FDC}\x{6FDD}' . '\x{6FDE}\x{6FDF}\x{6FE0}\x{6FE1}\x{6FE2}\x{6FE3}\x{6FE4}\x{6FE5}\x{6FE6}' . '\x{6FE7}\x{6FE8}\x{6FE9}\x{6FEA}\x{6FEB}\x{6FEC}\x{6FED}\x{6FEE}\x{6FEF}' . '\x{6FF0}\x{6FF1}\x{6FF2}\x{6FF3}\x{6FF4}\x{6FF6}\x{6FF7}\x{6FF8}\x{6FF9}' . '\x{6FFA}\x{6FFB}\x{6FFC}\x{6FFE}\x{6FFF}\x{7000}\x{7001}\x{7002}\x{7003}' . '\x{7004}\x{7005}\x{7006}\x{7007}\x{7008}\x{7009}\x{700A}\x{700B}\x{700C}' . '\x{700D}\x{700E}\x{700F}\x{7011}\x{7012}\x{7014}\x{7015}\x{7016}\x{7017}' . '\x{7018}\x{7019}\x{701A}\x{701B}\x{701C}\x{701D}\x{701F}\x{7020}\x{7021}' . '\x{7022}\x{7023}\x{7024}\x{7025}\x{7026}\x{7027}\x{7028}\x{7029}\x{702A}' . '\x{702B}\x{702C}\x{702D}\x{702E}\x{702F}\x{7030}\x{7031}\x{7032}\x{7033}' . '\x{7034}\x{7035}\x{7036}\x{7037}\x{7038}\x{7039}\x{703A}\x{703B}\x{703C}' . '\x{703D}\x{703E}\x{703F}\x{7040}\x{7041}\x{7042}\x{7043}\x{7044}\x{7045}' . '\x{7046}\x{7048}\x{7049}\x{704A}\x{704C}\x{704D}\x{704F}\x{7050}\x{7051}' . '\x{7052}\x{7053}\x{7054}\x{7055}\x{7056}\x{7057}\x{7058}\x{7059}\x{705A}' . '\x{705B}\x{705C}\x{705D}\x{705E}\x{705F}\x{7060}\x{7061}\x{7062}\x{7063}' . '\x{7064}\x{7065}\x{7066}\x{7067}\x{7068}\x{7069}\x{706A}\x{706B}\x{706C}' . '\x{706D}\x{706E}\x{706F}\x{7070}\x{7071}\x{7074}\x{7075}\x{7076}\x{7077}' . '\x{7078}\x{7079}\x{707A}\x{707C}\x{707D}\x{707E}\x{707F}\x{7080}\x{7082}' . '\x{7083}\x{7084}\x{7085}\x{7086}\x{7087}\x{7088}\x{7089}\x{708A}\x{708B}' . '\x{708C}\x{708E}\x{708F}\x{7090}\x{7091}\x{7092}\x{7093}\x{7094}\x{7095}' . '\x{7096}\x{7098}\x{7099}\x{709A}\x{709C}\x{709D}\x{709E}\x{709F}\x{70A0}' . '\x{70A1}\x{70A2}\x{70A3}\x{70A4}\x{70A5}\x{70A6}\x{70A7}\x{70A8}\x{70A9}' . '\x{70AB}\x{70AC}\x{70AD}\x{70AE}\x{70AF}\x{70B0}\x{70B1}\x{70B3}\x{70B4}' . '\x{70B5}\x{70B7}\x{70B8}\x{70B9}\x{70BA}\x{70BB}\x{70BC}\x{70BD}\x{70BE}' . '\x{70BF}\x{70C0}\x{70C1}\x{70C2}\x{70C3}\x{70C4}\x{70C5}\x{70C6}\x{70C7}' . '\x{70C8}\x{70C9}\x{70CA}\x{70CB}\x{70CC}\x{70CD}\x{70CE}\x{70CF}\x{70D0}' . '\x{70D1}\x{70D2}\x{70D3}\x{70D4}\x{70D6}\x{70D7}\x{70D8}\x{70D9}\x{70DA}' . '\x{70DB}\x{70DC}\x{70DD}\x{70DE}\x{70DF}\x{70E0}\x{70E1}\x{70E2}\x{70E3}' . '\x{70E4}\x{70E5}\x{70E6}\x{70E7}\x{70E8}\x{70E9}\x{70EA}\x{70EB}\x{70EC}' . '\x{70ED}\x{70EE}\x{70EF}\x{70F0}\x{70F1}\x{70F2}\x{70F3}\x{70F4}\x{70F5}' . '\x{70F6}\x{70F7}\x{70F8}\x{70F9}\x{70FA}\x{70FB}\x{70FC}\x{70FD}\x{70FF}' . '\x{7100}\x{7101}\x{7102}\x{7103}\x{7104}\x{7105}\x{7106}\x{7107}\x{7109}' . '\x{710A}\x{710B}\x{710C}\x{710D}\x{710E}\x{710F}\x{7110}\x{7111}\x{7112}' . '\x{7113}\x{7115}\x{7116}\x{7117}\x{7118}\x{7119}\x{711A}\x{711B}\x{711C}' . '\x{711D}\x{711E}\x{711F}\x{7120}\x{7121}\x{7122}\x{7123}\x{7125}\x{7126}' . '\x{7127}\x{7128}\x{7129}\x{712A}\x{712B}\x{712C}\x{712D}\x{712E}\x{712F}' . '\x{7130}\x{7131}\x{7132}\x{7135}\x{7136}\x{7137}\x{7138}\x{7139}\x{713A}' . '\x{713B}\x{713D}\x{713E}\x{713F}\x{7140}\x{7141}\x{7142}\x{7143}\x{7144}' . '\x{7145}\x{7146}\x{7147}\x{7148}\x{7149}\x{714A}\x{714B}\x{714C}\x{714D}' . '\x{714E}\x{714F}\x{7150}\x{7151}\x{7152}\x{7153}\x{7154}\x{7156}\x{7158}' . '\x{7159}\x{715A}\x{715B}\x{715C}\x{715D}\x{715E}\x{715F}\x{7160}\x{7161}' . '\x{7162}\x{7163}\x{7164}\x{7165}\x{7166}\x{7167}\x{7168}\x{7169}\x{716A}' . '\x{716C}\x{716E}\x{716F}\x{7170}\x{7171}\x{7172}\x{7173}\x{7174}\x{7175}' . '\x{7176}\x{7177}\x{7178}\x{7179}\x{717A}\x{717B}\x{717C}\x{717D}\x{717E}' . '\x{717F}\x{7180}\x{7181}\x{7182}\x{7183}\x{7184}\x{7185}\x{7186}\x{7187}' . '\x{7188}\x{7189}\x{718A}\x{718B}\x{718C}\x{718E}\x{718F}\x{7190}\x{7191}' . '\x{7192}\x{7193}\x{7194}\x{7195}\x{7197}\x{7198}\x{7199}\x{719A}\x{719B}' . '\x{719C}\x{719D}\x{719E}\x{719F}\x{71A0}\x{71A1}\x{71A2}\x{71A3}\x{71A4}' . '\x{71A5}\x{71A7}\x{71A8}\x{71A9}\x{71AA}\x{71AC}\x{71AD}\x{71AE}\x{71AF}' . '\x{71B0}\x{71B1}\x{71B2}\x{71B3}\x{71B4}\x{71B5}\x{71B7}\x{71B8}\x{71B9}' . '\x{71BA}\x{71BB}\x{71BC}\x{71BD}\x{71BE}\x{71BF}\x{71C0}\x{71C1}\x{71C2}' . '\x{71C3}\x{71C4}\x{71C5}\x{71C6}\x{71C7}\x{71C8}\x{71C9}\x{71CA}\x{71CB}' . '\x{71CD}\x{71CE}\x{71CF}\x{71D0}\x{71D1}\x{71D2}\x{71D4}\x{71D5}\x{71D6}' . '\x{71D7}\x{71D8}\x{71D9}\x{71DA}\x{71DB}\x{71DC}\x{71DD}\x{71DE}\x{71DF}' . '\x{71E0}\x{71E1}\x{71E2}\x{71E3}\x{71E4}\x{71E5}\x{71E6}\x{71E7}\x{71E8}' . '\x{71E9}\x{71EA}\x{71EB}\x{71EC}\x{71ED}\x{71EE}\x{71EF}\x{71F0}\x{71F1}' . '\x{71F2}\x{71F4}\x{71F5}\x{71F6}\x{71F7}\x{71F8}\x{71F9}\x{71FB}\x{71FC}' . '\x{71FD}\x{71FE}\x{71FF}\x{7201}\x{7202}\x{7203}\x{7204}\x{7205}\x{7206}' . '\x{7207}\x{7208}\x{7209}\x{720A}\x{720C}\x{720D}\x{720E}\x{720F}\x{7210}' . '\x{7212}\x{7213}\x{7214}\x{7216}\x{7218}\x{7219}\x{721A}\x{721B}\x{721C}' . '\x{721D}\x{721E}\x{721F}\x{7221}\x{7222}\x{7223}\x{7226}\x{7227}\x{7228}' . '\x{7229}\x{722A}\x{722B}\x{722C}\x{722D}\x{722E}\x{7230}\x{7231}\x{7232}' . '\x{7233}\x{7235}\x{7236}\x{7237}\x{7238}\x{7239}\x{723A}\x{723B}\x{723C}' . '\x{723D}\x{723E}\x{723F}\x{7240}\x{7241}\x{7242}\x{7243}\x{7244}\x{7246}' . '\x{7247}\x{7248}\x{7249}\x{724A}\x{724B}\x{724C}\x{724D}\x{724F}\x{7251}' . '\x{7252}\x{7253}\x{7254}\x{7256}\x{7257}\x{7258}\x{7259}\x{725A}\x{725B}' . '\x{725C}\x{725D}\x{725E}\x{725F}\x{7260}\x{7261}\x{7262}\x{7263}\x{7264}' . '\x{7265}\x{7266}\x{7267}\x{7268}\x{7269}\x{726A}\x{726B}\x{726C}\x{726D}' . '\x{726E}\x{726F}\x{7270}\x{7271}\x{7272}\x{7273}\x{7274}\x{7275}\x{7276}' . '\x{7277}\x{7278}\x{7279}\x{727A}\x{727B}\x{727C}\x{727D}\x{727E}\x{727F}' . '\x{7280}\x{7281}\x{7282}\x{7283}\x{7284}\x{7285}\x{7286}\x{7287}\x{7288}' . '\x{7289}\x{728A}\x{728B}\x{728C}\x{728D}\x{728E}\x{728F}\x{7290}\x{7291}' . '\x{7292}\x{7293}\x{7294}\x{7295}\x{7296}\x{7297}\x{7298}\x{7299}\x{729A}' . '\x{729B}\x{729C}\x{729D}\x{729E}\x{729F}\x{72A1}\x{72A2}\x{72A3}\x{72A4}' . '\x{72A5}\x{72A6}\x{72A7}\x{72A8}\x{72A9}\x{72AA}\x{72AC}\x{72AD}\x{72AE}' . '\x{72AF}\x{72B0}\x{72B1}\x{72B2}\x{72B3}\x{72B4}\x{72B5}\x{72B6}\x{72B7}' . '\x{72B8}\x{72B9}\x{72BA}\x{72BB}\x{72BC}\x{72BD}\x{72BF}\x{72C0}\x{72C1}' . '\x{72C2}\x{72C3}\x{72C4}\x{72C5}\x{72C6}\x{72C7}\x{72C8}\x{72C9}\x{72CA}' . '\x{72CB}\x{72CC}\x{72CD}\x{72CE}\x{72CF}\x{72D0}\x{72D1}\x{72D2}\x{72D3}' . '\x{72D4}\x{72D5}\x{72D6}\x{72D7}\x{72D8}\x{72D9}\x{72DA}\x{72DB}\x{72DC}' . '\x{72DD}\x{72DE}\x{72DF}\x{72E0}\x{72E1}\x{72E2}\x{72E3}\x{72E4}\x{72E5}' . '\x{72E6}\x{72E7}\x{72E8}\x{72E9}\x{72EA}\x{72EB}\x{72EC}\x{72ED}\x{72EE}' . '\x{72EF}\x{72F0}\x{72F1}\x{72F2}\x{72F3}\x{72F4}\x{72F5}\x{72F6}\x{72F7}' . '\x{72F8}\x{72F9}\x{72FA}\x{72FB}\x{72FC}\x{72FD}\x{72FE}\x{72FF}\x{7300}' . '\x{7301}\x{7303}\x{7304}\x{7305}\x{7306}\x{7307}\x{7308}\x{7309}\x{730A}' . '\x{730B}\x{730C}\x{730D}\x{730E}\x{730F}\x{7311}\x{7312}\x{7313}\x{7314}' . '\x{7315}\x{7316}\x{7317}\x{7318}\x{7319}\x{731A}\x{731B}\x{731C}\x{731D}' . '\x{731E}\x{7320}\x{7321}\x{7322}\x{7323}\x{7324}\x{7325}\x{7326}\x{7327}' . '\x{7329}\x{732A}\x{732B}\x{732C}\x{732D}\x{732E}\x{7330}\x{7331}\x{7332}' . '\x{7333}\x{7334}\x{7335}\x{7336}\x{7337}\x{7338}\x{7339}\x{733A}\x{733B}' . '\x{733C}\x{733D}\x{733E}\x{733F}\x{7340}\x{7341}\x{7342}\x{7343}\x{7344}' . '\x{7345}\x{7346}\x{7347}\x{7348}\x{7349}\x{734A}\x{734B}\x{734C}\x{734D}' . '\x{734E}\x{7350}\x{7351}\x{7352}\x{7354}\x{7355}\x{7356}\x{7357}\x{7358}' . '\x{7359}\x{735A}\x{735B}\x{735C}\x{735D}\x{735E}\x{735F}\x{7360}\x{7361}' . '\x{7362}\x{7364}\x{7365}\x{7366}\x{7367}\x{7368}\x{7369}\x{736A}\x{736B}' . '\x{736C}\x{736D}\x{736E}\x{736F}\x{7370}\x{7371}\x{7372}\x{7373}\x{7374}' . '\x{7375}\x{7376}\x{7377}\x{7378}\x{7379}\x{737A}\x{737B}\x{737C}\x{737D}' . '\x{737E}\x{737F}\x{7380}\x{7381}\x{7382}\x{7383}\x{7384}\x{7385}\x{7386}' . '\x{7387}\x{7388}\x{7389}\x{738A}\x{738B}\x{738C}\x{738D}\x{738E}\x{738F}' . '\x{7390}\x{7391}\x{7392}\x{7393}\x{7394}\x{7395}\x{7396}\x{7397}\x{7398}' . '\x{7399}\x{739A}\x{739B}\x{739D}\x{739E}\x{739F}\x{73A0}\x{73A1}\x{73A2}' . '\x{73A3}\x{73A4}\x{73A5}\x{73A6}\x{73A7}\x{73A8}\x{73A9}\x{73AA}\x{73AB}' . '\x{73AC}\x{73AD}\x{73AE}\x{73AF}\x{73B0}\x{73B1}\x{73B2}\x{73B3}\x{73B4}' . '\x{73B5}\x{73B6}\x{73B7}\x{73B8}\x{73B9}\x{73BA}\x{73BB}\x{73BC}\x{73BD}' . '\x{73BE}\x{73BF}\x{73C0}\x{73C2}\x{73C3}\x{73C4}\x{73C5}\x{73C6}\x{73C7}' . '\x{73C8}\x{73C9}\x{73CA}\x{73CB}\x{73CC}\x{73CD}\x{73CE}\x{73CF}\x{73D0}' . '\x{73D1}\x{73D2}\x{73D3}\x{73D4}\x{73D5}\x{73D6}\x{73D7}\x{73D8}\x{73D9}' . '\x{73DA}\x{73DB}\x{73DC}\x{73DD}\x{73DE}\x{73DF}\x{73E0}\x{73E2}\x{73E3}' . '\x{73E5}\x{73E6}\x{73E7}\x{73E8}\x{73E9}\x{73EA}\x{73EB}\x{73EC}\x{73ED}' . '\x{73EE}\x{73EF}\x{73F0}\x{73F1}\x{73F2}\x{73F4}\x{73F5}\x{73F6}\x{73F7}' . '\x{73F8}\x{73F9}\x{73FA}\x{73FC}\x{73FD}\x{73FE}\x{73FF}\x{7400}\x{7401}' . '\x{7402}\x{7403}\x{7404}\x{7405}\x{7406}\x{7407}\x{7408}\x{7409}\x{740A}' . '\x{740B}\x{740C}\x{740D}\x{740E}\x{740F}\x{7410}\x{7411}\x{7412}\x{7413}' . '\x{7414}\x{7415}\x{7416}\x{7417}\x{7419}\x{741A}\x{741B}\x{741C}\x{741D}' . '\x{741E}\x{741F}\x{7420}\x{7421}\x{7422}\x{7423}\x{7424}\x{7425}\x{7426}' . '\x{7427}\x{7428}\x{7429}\x{742A}\x{742B}\x{742C}\x{742D}\x{742E}\x{742F}' . '\x{7430}\x{7431}\x{7432}\x{7433}\x{7434}\x{7435}\x{7436}\x{7437}\x{7438}' . '\x{743A}\x{743B}\x{743C}\x{743D}\x{743F}\x{7440}\x{7441}\x{7442}\x{7443}' . '\x{7444}\x{7445}\x{7446}\x{7448}\x{744A}\x{744B}\x{744C}\x{744D}\x{744E}' . '\x{744F}\x{7450}\x{7451}\x{7452}\x{7453}\x{7454}\x{7455}\x{7456}\x{7457}' . '\x{7459}\x{745A}\x{745B}\x{745C}\x{745D}\x{745E}\x{745F}\x{7461}\x{7462}' . '\x{7463}\x{7464}\x{7465}\x{7466}\x{7467}\x{7468}\x{7469}\x{746A}\x{746B}' . '\x{746C}\x{746D}\x{746E}\x{746F}\x{7470}\x{7471}\x{7472}\x{7473}\x{7474}' . '\x{7475}\x{7476}\x{7477}\x{7478}\x{7479}\x{747A}\x{747C}\x{747D}\x{747E}' . '\x{747F}\x{7480}\x{7481}\x{7482}\x{7483}\x{7485}\x{7486}\x{7487}\x{7488}' . '\x{7489}\x{748A}\x{748B}\x{748C}\x{748D}\x{748E}\x{748F}\x{7490}\x{7491}' . '\x{7492}\x{7493}\x{7494}\x{7495}\x{7497}\x{7498}\x{7499}\x{749A}\x{749B}' . '\x{749C}\x{749E}\x{749F}\x{74A0}\x{74A1}\x{74A3}\x{74A4}\x{74A5}\x{74A6}' . '\x{74A7}\x{74A8}\x{74A9}\x{74AA}\x{74AB}\x{74AC}\x{74AD}\x{74AE}\x{74AF}' . '\x{74B0}\x{74B1}\x{74B2}\x{74B3}\x{74B4}\x{74B5}\x{74B6}\x{74B7}\x{74B8}' . '\x{74B9}\x{74BA}\x{74BB}\x{74BC}\x{74BD}\x{74BE}\x{74BF}\x{74C0}\x{74C1}' . '\x{74C2}\x{74C3}\x{74C4}\x{74C5}\x{74C6}\x{74CA}\x{74CB}\x{74CD}\x{74CE}' . '\x{74CF}\x{74D0}\x{74D1}\x{74D2}\x{74D3}\x{74D4}\x{74D5}\x{74D6}\x{74D7}' . '\x{74D8}\x{74D9}\x{74DA}\x{74DB}\x{74DC}\x{74DD}\x{74DE}\x{74DF}\x{74E0}' . '\x{74E1}\x{74E2}\x{74E3}\x{74E4}\x{74E5}\x{74E6}\x{74E7}\x{74E8}\x{74E9}' . '\x{74EA}\x{74EC}\x{74ED}\x{74EE}\x{74EF}\x{74F0}\x{74F1}\x{74F2}\x{74F3}' . '\x{74F4}\x{74F5}\x{74F6}\x{74F7}\x{74F8}\x{74F9}\x{74FA}\x{74FB}\x{74FC}' . '\x{74FD}\x{74FE}\x{74FF}\x{7500}\x{7501}\x{7502}\x{7503}\x{7504}\x{7505}' . '\x{7506}\x{7507}\x{7508}\x{7509}\x{750A}\x{750B}\x{750C}\x{750D}\x{750F}' . '\x{7510}\x{7511}\x{7512}\x{7513}\x{7514}\x{7515}\x{7516}\x{7517}\x{7518}' . '\x{7519}\x{751A}\x{751B}\x{751C}\x{751D}\x{751E}\x{751F}\x{7521}\x{7522}' . '\x{7523}\x{7524}\x{7525}\x{7526}\x{7527}\x{7528}\x{7529}\x{752A}\x{752B}' . '\x{752C}\x{752D}\x{752E}\x{752F}\x{7530}\x{7531}\x{7532}\x{7533}\x{7535}' . '\x{7536}\x{7537}\x{7538}\x{7539}\x{753A}\x{753B}\x{753C}\x{753D}\x{753E}' . '\x{753F}\x{7540}\x{7542}\x{7543}\x{7544}\x{7545}\x{7546}\x{7547}\x{7548}' . '\x{7549}\x{754B}\x{754C}\x{754D}\x{754E}\x{754F}\x{7550}\x{7551}\x{7553}' . '\x{7554}\x{7556}\x{7557}\x{7558}\x{7559}\x{755A}\x{755B}\x{755C}\x{755D}' . '\x{755F}\x{7560}\x{7562}\x{7563}\x{7564}\x{7565}\x{7566}\x{7567}\x{7568}' . '\x{7569}\x{756A}\x{756B}\x{756C}\x{756D}\x{756E}\x{756F}\x{7570}\x{7572}' . '\x{7574}\x{7575}\x{7576}\x{7577}\x{7578}\x{7579}\x{757C}\x{757D}\x{757E}' . '\x{757F}\x{7580}\x{7581}\x{7582}\x{7583}\x{7584}\x{7586}\x{7587}\x{7588}' . '\x{7589}\x{758A}\x{758B}\x{758C}\x{758D}\x{758F}\x{7590}\x{7591}\x{7592}' . '\x{7593}\x{7594}\x{7595}\x{7596}\x{7597}\x{7598}\x{7599}\x{759A}\x{759B}' . '\x{759C}\x{759D}\x{759E}\x{759F}\x{75A0}\x{75A1}\x{75A2}\x{75A3}\x{75A4}' . '\x{75A5}\x{75A6}\x{75A7}\x{75A8}\x{75AA}\x{75AB}\x{75AC}\x{75AD}\x{75AE}' . '\x{75AF}\x{75B0}\x{75B1}\x{75B2}\x{75B3}\x{75B4}\x{75B5}\x{75B6}\x{75B8}' . '\x{75B9}\x{75BA}\x{75BB}\x{75BC}\x{75BD}\x{75BE}\x{75BF}\x{75C0}\x{75C1}' . '\x{75C2}\x{75C3}\x{75C4}\x{75C5}\x{75C6}\x{75C7}\x{75C8}\x{75C9}\x{75CA}' . '\x{75CB}\x{75CC}\x{75CD}\x{75CE}\x{75CF}\x{75D0}\x{75D1}\x{75D2}\x{75D3}' . '\x{75D4}\x{75D5}\x{75D6}\x{75D7}\x{75D8}\x{75D9}\x{75DA}\x{75DB}\x{75DD}' . '\x{75DE}\x{75DF}\x{75E0}\x{75E1}\x{75E2}\x{75E3}\x{75E4}\x{75E5}\x{75E6}' . '\x{75E7}\x{75E8}\x{75EA}\x{75EB}\x{75EC}\x{75ED}\x{75EF}\x{75F0}\x{75F1}' . '\x{75F2}\x{75F3}\x{75F4}\x{75F5}\x{75F6}\x{75F7}\x{75F8}\x{75F9}\x{75FA}' . '\x{75FB}\x{75FC}\x{75FD}\x{75FE}\x{75FF}\x{7600}\x{7601}\x{7602}\x{7603}' . '\x{7604}\x{7605}\x{7606}\x{7607}\x{7608}\x{7609}\x{760A}\x{760B}\x{760C}' . '\x{760D}\x{760E}\x{760F}\x{7610}\x{7611}\x{7612}\x{7613}\x{7614}\x{7615}' . '\x{7616}\x{7617}\x{7618}\x{7619}\x{761A}\x{761B}\x{761C}\x{761D}\x{761E}' . '\x{761F}\x{7620}\x{7621}\x{7622}\x{7623}\x{7624}\x{7625}\x{7626}\x{7627}' . '\x{7628}\x{7629}\x{762A}\x{762B}\x{762D}\x{762E}\x{762F}\x{7630}\x{7631}' . '\x{7632}\x{7633}\x{7634}\x{7635}\x{7636}\x{7637}\x{7638}\x{7639}\x{763A}' . '\x{763B}\x{763C}\x{763D}\x{763E}\x{763F}\x{7640}\x{7641}\x{7642}\x{7643}' . '\x{7646}\x{7647}\x{7648}\x{7649}\x{764A}\x{764B}\x{764C}\x{764D}\x{764F}' . '\x{7650}\x{7652}\x{7653}\x{7654}\x{7656}\x{7657}\x{7658}\x{7659}\x{765A}' . '\x{765B}\x{765C}\x{765D}\x{765E}\x{765F}\x{7660}\x{7661}\x{7662}\x{7663}' . '\x{7664}\x{7665}\x{7666}\x{7667}\x{7668}\x{7669}\x{766A}\x{766B}\x{766C}' . '\x{766D}\x{766E}\x{766F}\x{7670}\x{7671}\x{7672}\x{7674}\x{7675}\x{7676}' . '\x{7677}\x{7678}\x{7679}\x{767B}\x{767C}\x{767D}\x{767E}\x{767F}\x{7680}' . '\x{7681}\x{7682}\x{7683}\x{7684}\x{7685}\x{7686}\x{7687}\x{7688}\x{7689}' . '\x{768A}\x{768B}\x{768C}\x{768E}\x{768F}\x{7690}\x{7691}\x{7692}\x{7693}' . '\x{7694}\x{7695}\x{7696}\x{7697}\x{7698}\x{7699}\x{769A}\x{769B}\x{769C}' . '\x{769D}\x{769E}\x{769F}\x{76A0}\x{76A3}\x{76A4}\x{76A6}\x{76A7}\x{76A9}' . '\x{76AA}\x{76AB}\x{76AC}\x{76AD}\x{76AE}\x{76AF}\x{76B0}\x{76B1}\x{76B2}' . '\x{76B4}\x{76B5}\x{76B7}\x{76B8}\x{76BA}\x{76BB}\x{76BC}\x{76BD}\x{76BE}' . '\x{76BF}\x{76C0}\x{76C2}\x{76C3}\x{76C4}\x{76C5}\x{76C6}\x{76C7}\x{76C8}' . '\x{76C9}\x{76CA}\x{76CD}\x{76CE}\x{76CF}\x{76D0}\x{76D1}\x{76D2}\x{76D3}' . '\x{76D4}\x{76D5}\x{76D6}\x{76D7}\x{76D8}\x{76DA}\x{76DB}\x{76DC}\x{76DD}' . '\x{76DE}\x{76DF}\x{76E0}\x{76E1}\x{76E2}\x{76E3}\x{76E4}\x{76E5}\x{76E6}' . '\x{76E7}\x{76E8}\x{76E9}\x{76EA}\x{76EC}\x{76ED}\x{76EE}\x{76EF}\x{76F0}' . '\x{76F1}\x{76F2}\x{76F3}\x{76F4}\x{76F5}\x{76F6}\x{76F7}\x{76F8}\x{76F9}' . '\x{76FA}\x{76FB}\x{76FC}\x{76FD}\x{76FE}\x{76FF}\x{7701}\x{7703}\x{7704}' . '\x{7705}\x{7706}\x{7707}\x{7708}\x{7709}\x{770A}\x{770B}\x{770C}\x{770D}' . '\x{770F}\x{7710}\x{7711}\x{7712}\x{7713}\x{7714}\x{7715}\x{7716}\x{7717}' . '\x{7718}\x{7719}\x{771A}\x{771B}\x{771C}\x{771D}\x{771E}\x{771F}\x{7720}' . '\x{7722}\x{7723}\x{7725}\x{7726}\x{7727}\x{7728}\x{7729}\x{772A}\x{772C}' . '\x{772D}\x{772E}\x{772F}\x{7730}\x{7731}\x{7732}\x{7733}\x{7734}\x{7735}' . '\x{7736}\x{7737}\x{7738}\x{7739}\x{773A}\x{773B}\x{773C}\x{773D}\x{773E}' . '\x{7740}\x{7741}\x{7743}\x{7744}\x{7745}\x{7746}\x{7747}\x{7748}\x{7749}' . '\x{774A}\x{774B}\x{774C}\x{774D}\x{774E}\x{774F}\x{7750}\x{7751}\x{7752}' . '\x{7753}\x{7754}\x{7755}\x{7756}\x{7757}\x{7758}\x{7759}\x{775A}\x{775B}' . '\x{775C}\x{775D}\x{775E}\x{775F}\x{7760}\x{7761}\x{7762}\x{7763}\x{7765}' . '\x{7766}\x{7767}\x{7768}\x{7769}\x{776A}\x{776B}\x{776C}\x{776D}\x{776E}' . '\x{776F}\x{7770}\x{7771}\x{7772}\x{7773}\x{7774}\x{7775}\x{7776}\x{7777}' . '\x{7778}\x{7779}\x{777A}\x{777B}\x{777C}\x{777D}\x{777E}\x{777F}\x{7780}' . '\x{7781}\x{7782}\x{7783}\x{7784}\x{7785}\x{7786}\x{7787}\x{7788}\x{7789}' . '\x{778A}\x{778B}\x{778C}\x{778D}\x{778E}\x{778F}\x{7790}\x{7791}\x{7792}' . '\x{7793}\x{7794}\x{7795}\x{7797}\x{7798}\x{7799}\x{779A}\x{779B}\x{779C}' . '\x{779D}\x{779E}\x{779F}\x{77A0}\x{77A1}\x{77A2}\x{77A3}\x{77A5}\x{77A6}' . '\x{77A7}\x{77A8}\x{77A9}\x{77AA}\x{77AB}\x{77AC}\x{77AD}\x{77AE}\x{77AF}' . '\x{77B0}\x{77B1}\x{77B2}\x{77B3}\x{77B4}\x{77B5}\x{77B6}\x{77B7}\x{77B8}' . '\x{77B9}\x{77BA}\x{77BB}\x{77BC}\x{77BD}\x{77BF}\x{77C0}\x{77C2}\x{77C3}' . '\x{77C4}\x{77C5}\x{77C6}\x{77C7}\x{77C8}\x{77C9}\x{77CA}\x{77CB}\x{77CC}' . '\x{77CD}\x{77CE}\x{77CF}\x{77D0}\x{77D1}\x{77D3}\x{77D4}\x{77D5}\x{77D6}' . '\x{77D7}\x{77D8}\x{77D9}\x{77DA}\x{77DB}\x{77DC}\x{77DE}\x{77DF}\x{77E0}' . '\x{77E1}\x{77E2}\x{77E3}\x{77E5}\x{77E7}\x{77E8}\x{77E9}\x{77EA}\x{77EB}' . '\x{77EC}\x{77ED}\x{77EE}\x{77EF}\x{77F0}\x{77F1}\x{77F2}\x{77F3}\x{77F6}' . '\x{77F7}\x{77F8}\x{77F9}\x{77FA}\x{77FB}\x{77FC}\x{77FD}\x{77FE}\x{77FF}' . '\x{7800}\x{7801}\x{7802}\x{7803}\x{7804}\x{7805}\x{7806}\x{7808}\x{7809}' . '\x{780A}\x{780B}\x{780C}\x{780D}\x{780E}\x{780F}\x{7810}\x{7811}\x{7812}' . '\x{7813}\x{7814}\x{7815}\x{7816}\x{7817}\x{7818}\x{7819}\x{781A}\x{781B}' . '\x{781C}\x{781D}\x{781E}\x{781F}\x{7820}\x{7821}\x{7822}\x{7823}\x{7825}' . '\x{7826}\x{7827}\x{7828}\x{7829}\x{782A}\x{782B}\x{782C}\x{782D}\x{782E}' . '\x{782F}\x{7830}\x{7831}\x{7832}\x{7833}\x{7834}\x{7835}\x{7837}\x{7838}' . '\x{7839}\x{783A}\x{783B}\x{783C}\x{783D}\x{783E}\x{7840}\x{7841}\x{7843}' . '\x{7844}\x{7845}\x{7847}\x{7848}\x{7849}\x{784A}\x{784C}\x{784D}\x{784E}' . '\x{7850}\x{7851}\x{7852}\x{7853}\x{7854}\x{7855}\x{7856}\x{7857}\x{7858}' . '\x{7859}\x{785A}\x{785B}\x{785C}\x{785D}\x{785E}\x{785F}\x{7860}\x{7861}' . '\x{7862}\x{7863}\x{7864}\x{7865}\x{7866}\x{7867}\x{7868}\x{7869}\x{786A}' . '\x{786B}\x{786C}\x{786D}\x{786E}\x{786F}\x{7870}\x{7871}\x{7872}\x{7873}' . '\x{7874}\x{7875}\x{7877}\x{7878}\x{7879}\x{787A}\x{787B}\x{787C}\x{787D}' . '\x{787E}\x{787F}\x{7880}\x{7881}\x{7882}\x{7883}\x{7884}\x{7885}\x{7886}' . '\x{7887}\x{7889}\x{788A}\x{788B}\x{788C}\x{788D}\x{788E}\x{788F}\x{7890}' . '\x{7891}\x{7892}\x{7893}\x{7894}\x{7895}\x{7896}\x{7897}\x{7898}\x{7899}' . '\x{789A}\x{789B}\x{789C}\x{789D}\x{789E}\x{789F}\x{78A0}\x{78A1}\x{78A2}' . '\x{78A3}\x{78A4}\x{78A5}\x{78A6}\x{78A7}\x{78A8}\x{78A9}\x{78AA}\x{78AB}' . '\x{78AC}\x{78AD}\x{78AE}\x{78AF}\x{78B0}\x{78B1}\x{78B2}\x{78B3}\x{78B4}' . '\x{78B5}\x{78B6}\x{78B7}\x{78B8}\x{78B9}\x{78BA}\x{78BB}\x{78BC}\x{78BD}' . '\x{78BE}\x{78BF}\x{78C0}\x{78C1}\x{78C3}\x{78C4}\x{78C5}\x{78C6}\x{78C8}' . '\x{78C9}\x{78CA}\x{78CB}\x{78CC}\x{78CD}\x{78CE}\x{78CF}\x{78D0}\x{78D1}' . '\x{78D3}\x{78D4}\x{78D5}\x{78D6}\x{78D7}\x{78D8}\x{78D9}\x{78DA}\x{78DB}' . '\x{78DC}\x{78DD}\x{78DE}\x{78DF}\x{78E0}\x{78E1}\x{78E2}\x{78E3}\x{78E4}' . '\x{78E5}\x{78E6}\x{78E7}\x{78E8}\x{78E9}\x{78EA}\x{78EB}\x{78EC}\x{78ED}' . '\x{78EE}\x{78EF}\x{78F1}\x{78F2}\x{78F3}\x{78F4}\x{78F5}\x{78F6}\x{78F7}' . '\x{78F9}\x{78FA}\x{78FB}\x{78FC}\x{78FD}\x{78FE}\x{78FF}\x{7901}\x{7902}' . '\x{7903}\x{7904}\x{7905}\x{7906}\x{7907}\x{7909}\x{790A}\x{790B}\x{790C}' . '\x{790E}\x{790F}\x{7910}\x{7911}\x{7912}\x{7913}\x{7914}\x{7916}\x{7917}' . '\x{7918}\x{7919}\x{791A}\x{791B}\x{791C}\x{791D}\x{791E}\x{7921}\x{7922}' . '\x{7923}\x{7924}\x{7925}\x{7926}\x{7927}\x{7928}\x{7929}\x{792A}\x{792B}' . '\x{792C}\x{792D}\x{792E}\x{792F}\x{7930}\x{7931}\x{7933}\x{7934}\x{7935}' . '\x{7937}\x{7938}\x{7939}\x{793A}\x{793B}\x{793C}\x{793D}\x{793E}\x{793F}' . '\x{7940}\x{7941}\x{7942}\x{7943}\x{7944}\x{7945}\x{7946}\x{7947}\x{7948}' . '\x{7949}\x{794A}\x{794B}\x{794C}\x{794D}\x{794E}\x{794F}\x{7950}\x{7951}' . '\x{7952}\x{7953}\x{7954}\x{7955}\x{7956}\x{7957}\x{7958}\x{795A}\x{795B}' . '\x{795C}\x{795D}\x{795E}\x{795F}\x{7960}\x{7961}\x{7962}\x{7963}\x{7964}' . '\x{7965}\x{7966}\x{7967}\x{7968}\x{7969}\x{796A}\x{796B}\x{796D}\x{796F}' . '\x{7970}\x{7971}\x{7972}\x{7973}\x{7974}\x{7977}\x{7978}\x{7979}\x{797A}' . '\x{797B}\x{797C}\x{797D}\x{797E}\x{797F}\x{7980}\x{7981}\x{7982}\x{7983}' . '\x{7984}\x{7985}\x{7988}\x{7989}\x{798A}\x{798B}\x{798C}\x{798D}\x{798E}' . '\x{798F}\x{7990}\x{7991}\x{7992}\x{7993}\x{7994}\x{7995}\x{7996}\x{7997}' . '\x{7998}\x{7999}\x{799A}\x{799B}\x{799C}\x{799F}\x{79A0}\x{79A1}\x{79A2}' . '\x{79A3}\x{79A4}\x{79A5}\x{79A6}\x{79A7}\x{79A8}\x{79AA}\x{79AB}\x{79AC}' . '\x{79AD}\x{79AE}\x{79AF}\x{79B0}\x{79B1}\x{79B2}\x{79B3}\x{79B4}\x{79B5}' . '\x{79B6}\x{79B7}\x{79B8}\x{79B9}\x{79BA}\x{79BB}\x{79BD}\x{79BE}\x{79BF}' . '\x{79C0}\x{79C1}\x{79C2}\x{79C3}\x{79C5}\x{79C6}\x{79C8}\x{79C9}\x{79CA}' . '\x{79CB}\x{79CD}\x{79CE}\x{79CF}\x{79D0}\x{79D1}\x{79D2}\x{79D3}\x{79D5}' . '\x{79D6}\x{79D8}\x{79D9}\x{79DA}\x{79DB}\x{79DC}\x{79DD}\x{79DE}\x{79DF}' . '\x{79E0}\x{79E1}\x{79E2}\x{79E3}\x{79E4}\x{79E5}\x{79E6}\x{79E7}\x{79E8}' . '\x{79E9}\x{79EA}\x{79EB}\x{79EC}\x{79ED}\x{79EE}\x{79EF}\x{79F0}\x{79F1}' . '\x{79F2}\x{79F3}\x{79F4}\x{79F5}\x{79F6}\x{79F7}\x{79F8}\x{79F9}\x{79FA}' . '\x{79FB}\x{79FC}\x{79FD}\x{79FE}\x{79FF}\x{7A00}\x{7A02}\x{7A03}\x{7A04}' . '\x{7A05}\x{7A06}\x{7A08}\x{7A0A}\x{7A0B}\x{7A0C}\x{7A0D}\x{7A0E}\x{7A0F}' . '\x{7A10}\x{7A11}\x{7A12}\x{7A13}\x{7A14}\x{7A15}\x{7A16}\x{7A17}\x{7A18}' . '\x{7A19}\x{7A1A}\x{7A1B}\x{7A1C}\x{7A1D}\x{7A1E}\x{7A1F}\x{7A20}\x{7A21}' . '\x{7A22}\x{7A23}\x{7A24}\x{7A25}\x{7A26}\x{7A27}\x{7A28}\x{7A29}\x{7A2A}' . '\x{7A2B}\x{7A2D}\x{7A2E}\x{7A2F}\x{7A30}\x{7A31}\x{7A32}\x{7A33}\x{7A34}' . '\x{7A35}\x{7A37}\x{7A39}\x{7A3B}\x{7A3C}\x{7A3D}\x{7A3E}\x{7A3F}\x{7A40}' . '\x{7A41}\x{7A42}\x{7A43}\x{7A44}\x{7A45}\x{7A46}\x{7A47}\x{7A48}\x{7A49}' . '\x{7A4A}\x{7A4B}\x{7A4C}\x{7A4D}\x{7A4E}\x{7A50}\x{7A51}\x{7A52}\x{7A53}' . '\x{7A54}\x{7A55}\x{7A56}\x{7A57}\x{7A58}\x{7A59}\x{7A5A}\x{7A5B}\x{7A5C}' . '\x{7A5D}\x{7A5E}\x{7A5F}\x{7A60}\x{7A61}\x{7A62}\x{7A65}\x{7A66}\x{7A67}' . '\x{7A68}\x{7A69}\x{7A6B}\x{7A6C}\x{7A6D}\x{7A6E}\x{7A70}\x{7A71}\x{7A72}' . '\x{7A73}\x{7A74}\x{7A75}\x{7A76}\x{7A77}\x{7A78}\x{7A79}\x{7A7A}\x{7A7B}' . '\x{7A7C}\x{7A7D}\x{7A7E}\x{7A7F}\x{7A80}\x{7A81}\x{7A83}\x{7A84}\x{7A85}' . '\x{7A86}\x{7A87}\x{7A88}\x{7A89}\x{7A8A}\x{7A8B}\x{7A8C}\x{7A8D}\x{7A8E}' . '\x{7A8F}\x{7A90}\x{7A91}\x{7A92}\x{7A93}\x{7A94}\x{7A95}\x{7A96}\x{7A97}' . '\x{7A98}\x{7A99}\x{7A9C}\x{7A9D}\x{7A9E}\x{7A9F}\x{7AA0}\x{7AA1}\x{7AA2}' . '\x{7AA3}\x{7AA4}\x{7AA5}\x{7AA6}\x{7AA7}\x{7AA8}\x{7AA9}\x{7AAA}\x{7AAB}' . '\x{7AAC}\x{7AAD}\x{7AAE}\x{7AAF}\x{7AB0}\x{7AB1}\x{7AB2}\x{7AB3}\x{7AB4}' . '\x{7AB5}\x{7AB6}\x{7AB7}\x{7AB8}\x{7ABA}\x{7ABE}\x{7ABF}\x{7AC0}\x{7AC1}' . '\x{7AC4}\x{7AC5}\x{7AC7}\x{7AC8}\x{7AC9}\x{7ACA}\x{7ACB}\x{7ACC}\x{7ACD}' . '\x{7ACE}\x{7ACF}\x{7AD0}\x{7AD1}\x{7AD2}\x{7AD3}\x{7AD4}\x{7AD5}\x{7AD6}' . '\x{7AD8}\x{7AD9}\x{7ADB}\x{7ADC}\x{7ADD}\x{7ADE}\x{7ADF}\x{7AE0}\x{7AE1}' . '\x{7AE2}\x{7AE3}\x{7AE4}\x{7AE5}\x{7AE6}\x{7AE7}\x{7AE8}\x{7AEA}\x{7AEB}' . '\x{7AEC}\x{7AED}\x{7AEE}\x{7AEF}\x{7AF0}\x{7AF1}\x{7AF2}\x{7AF3}\x{7AF4}' . '\x{7AF6}\x{7AF7}\x{7AF8}\x{7AF9}\x{7AFA}\x{7AFB}\x{7AFD}\x{7AFE}\x{7AFF}' . '\x{7B00}\x{7B01}\x{7B02}\x{7B03}\x{7B04}\x{7B05}\x{7B06}\x{7B08}\x{7B09}' . '\x{7B0A}\x{7B0B}\x{7B0C}\x{7B0D}\x{7B0E}\x{7B0F}\x{7B10}\x{7B11}\x{7B12}' . '\x{7B13}\x{7B14}\x{7B15}\x{7B16}\x{7B17}\x{7B18}\x{7B19}\x{7B1A}\x{7B1B}' . '\x{7B1C}\x{7B1D}\x{7B1E}\x{7B20}\x{7B21}\x{7B22}\x{7B23}\x{7B24}\x{7B25}' . '\x{7B26}\x{7B28}\x{7B2A}\x{7B2B}\x{7B2C}\x{7B2D}\x{7B2E}\x{7B2F}\x{7B30}' . '\x{7B31}\x{7B32}\x{7B33}\x{7B34}\x{7B35}\x{7B36}\x{7B37}\x{7B38}\x{7B39}' . '\x{7B3A}\x{7B3B}\x{7B3C}\x{7B3D}\x{7B3E}\x{7B3F}\x{7B40}\x{7B41}\x{7B43}' . '\x{7B44}\x{7B45}\x{7B46}\x{7B47}\x{7B48}\x{7B49}\x{7B4A}\x{7B4B}\x{7B4C}' . '\x{7B4D}\x{7B4E}\x{7B4F}\x{7B50}\x{7B51}\x{7B52}\x{7B54}\x{7B55}\x{7B56}' . '\x{7B57}\x{7B58}\x{7B59}\x{7B5A}\x{7B5B}\x{7B5C}\x{7B5D}\x{7B5E}\x{7B5F}' . '\x{7B60}\x{7B61}\x{7B62}\x{7B63}\x{7B64}\x{7B65}\x{7B66}\x{7B67}\x{7B68}' . '\x{7B69}\x{7B6A}\x{7B6B}\x{7B6C}\x{7B6D}\x{7B6E}\x{7B70}\x{7B71}\x{7B72}' . '\x{7B73}\x{7B74}\x{7B75}\x{7B76}\x{7B77}\x{7B78}\x{7B79}\x{7B7B}\x{7B7C}' . '\x{7B7D}\x{7B7E}\x{7B7F}\x{7B80}\x{7B81}\x{7B82}\x{7B83}\x{7B84}\x{7B85}' . '\x{7B87}\x{7B88}\x{7B89}\x{7B8A}\x{7B8B}\x{7B8C}\x{7B8D}\x{7B8E}\x{7B8F}' . '\x{7B90}\x{7B91}\x{7B93}\x{7B94}\x{7B95}\x{7B96}\x{7B97}\x{7B98}\x{7B99}' . '\x{7B9A}\x{7B9B}\x{7B9C}\x{7B9D}\x{7B9E}\x{7B9F}\x{7BA0}\x{7BA1}\x{7BA2}' . '\x{7BA4}\x{7BA6}\x{7BA7}\x{7BA8}\x{7BA9}\x{7BAA}\x{7BAB}\x{7BAC}\x{7BAD}' . '\x{7BAE}\x{7BAF}\x{7BB1}\x{7BB3}\x{7BB4}\x{7BB5}\x{7BB6}\x{7BB7}\x{7BB8}' . '\x{7BB9}\x{7BBA}\x{7BBB}\x{7BBC}\x{7BBD}\x{7BBE}\x{7BBF}\x{7BC0}\x{7BC1}' . '\x{7BC2}\x{7BC3}\x{7BC4}\x{7BC5}\x{7BC6}\x{7BC7}\x{7BC8}\x{7BC9}\x{7BCA}' . '\x{7BCB}\x{7BCC}\x{7BCD}\x{7BCE}\x{7BD0}\x{7BD1}\x{7BD2}\x{7BD3}\x{7BD4}' . '\x{7BD5}\x{7BD6}\x{7BD7}\x{7BD8}\x{7BD9}\x{7BDA}\x{7BDB}\x{7BDC}\x{7BDD}' . '\x{7BDE}\x{7BDF}\x{7BE0}\x{7BE1}\x{7BE2}\x{7BE3}\x{7BE4}\x{7BE5}\x{7BE6}' . '\x{7BE7}\x{7BE8}\x{7BE9}\x{7BEA}\x{7BEB}\x{7BEC}\x{7BED}\x{7BEE}\x{7BEF}' . '\x{7BF0}\x{7BF1}\x{7BF2}\x{7BF3}\x{7BF4}\x{7BF5}\x{7BF6}\x{7BF7}\x{7BF8}' . '\x{7BF9}\x{7BFB}\x{7BFC}\x{7BFD}\x{7BFE}\x{7BFF}\x{7C00}\x{7C01}\x{7C02}' . '\x{7C03}\x{7C04}\x{7C05}\x{7C06}\x{7C07}\x{7C08}\x{7C09}\x{7C0A}\x{7C0B}' . '\x{7C0C}\x{7C0D}\x{7C0E}\x{7C0F}\x{7C10}\x{7C11}\x{7C12}\x{7C13}\x{7C15}' . '\x{7C16}\x{7C17}\x{7C18}\x{7C19}\x{7C1A}\x{7C1C}\x{7C1D}\x{7C1E}\x{7C1F}' . '\x{7C20}\x{7C21}\x{7C22}\x{7C23}\x{7C24}\x{7C25}\x{7C26}\x{7C27}\x{7C28}' . '\x{7C29}\x{7C2A}\x{7C2B}\x{7C2C}\x{7C2D}\x{7C30}\x{7C31}\x{7C32}\x{7C33}' . '\x{7C34}\x{7C35}\x{7C36}\x{7C37}\x{7C38}\x{7C39}\x{7C3A}\x{7C3B}\x{7C3C}' . '\x{7C3D}\x{7C3E}\x{7C3F}\x{7C40}\x{7C41}\x{7C42}\x{7C43}\x{7C44}\x{7C45}' . '\x{7C46}\x{7C47}\x{7C48}\x{7C49}\x{7C4A}\x{7C4B}\x{7C4C}\x{7C4D}\x{7C4E}' . '\x{7C50}\x{7C51}\x{7C53}\x{7C54}\x{7C56}\x{7C57}\x{7C58}\x{7C59}\x{7C5A}' . '\x{7C5B}\x{7C5C}\x{7C5E}\x{7C5F}\x{7C60}\x{7C61}\x{7C62}\x{7C63}\x{7C64}' . '\x{7C65}\x{7C66}\x{7C67}\x{7C68}\x{7C69}\x{7C6A}\x{7C6B}\x{7C6C}\x{7C6D}' . '\x{7C6E}\x{7C6F}\x{7C70}\x{7C71}\x{7C72}\x{7C73}\x{7C74}\x{7C75}\x{7C77}' . '\x{7C78}\x{7C79}\x{7C7A}\x{7C7B}\x{7C7C}\x{7C7D}\x{7C7E}\x{7C7F}\x{7C80}' . '\x{7C81}\x{7C82}\x{7C84}\x{7C85}\x{7C86}\x{7C88}\x{7C89}\x{7C8A}\x{7C8B}' . '\x{7C8C}\x{7C8D}\x{7C8E}\x{7C8F}\x{7C90}\x{7C91}\x{7C92}\x{7C94}\x{7C95}' . '\x{7C96}\x{7C97}\x{7C98}\x{7C99}\x{7C9B}\x{7C9C}\x{7C9D}\x{7C9E}\x{7C9F}' . '\x{7CA0}\x{7CA1}\x{7CA2}\x{7CA3}\x{7CA4}\x{7CA5}\x{7CA6}\x{7CA7}\x{7CA8}' . '\x{7CA9}\x{7CAA}\x{7CAD}\x{7CAE}\x{7CAF}\x{7CB0}\x{7CB1}\x{7CB2}\x{7CB3}' . '\x{7CB4}\x{7CB5}\x{7CB6}\x{7CB7}\x{7CB8}\x{7CB9}\x{7CBA}\x{7CBB}\x{7CBC}' . '\x{7CBD}\x{7CBE}\x{7CBF}\x{7CC0}\x{7CC1}\x{7CC2}\x{7CC3}\x{7CC4}\x{7CC5}' . '\x{7CC6}\x{7CC7}\x{7CC8}\x{7CC9}\x{7CCA}\x{7CCB}\x{7CCC}\x{7CCD}\x{7CCE}' . '\x{7CCF}\x{7CD0}\x{7CD1}\x{7CD2}\x{7CD4}\x{7CD5}\x{7CD6}\x{7CD7}\x{7CD8}' . '\x{7CD9}\x{7CDC}\x{7CDD}\x{7CDE}\x{7CDF}\x{7CE0}\x{7CE2}\x{7CE4}\x{7CE7}' . '\x{7CE8}\x{7CE9}\x{7CEA}\x{7CEB}\x{7CEC}\x{7CED}\x{7CEE}\x{7CEF}\x{7CF0}' . '\x{7CF1}\x{7CF2}\x{7CF3}\x{7CF4}\x{7CF5}\x{7CF6}\x{7CF7}\x{7CF8}\x{7CF9}' . '\x{7CFA}\x{7CFB}\x{7CFD}\x{7CFE}\x{7D00}\x{7D01}\x{7D02}\x{7D03}\x{7D04}' . '\x{7D05}\x{7D06}\x{7D07}\x{7D08}\x{7D09}\x{7D0A}\x{7D0B}\x{7D0C}\x{7D0D}' . '\x{7D0E}\x{7D0F}\x{7D10}\x{7D11}\x{7D12}\x{7D13}\x{7D14}\x{7D15}\x{7D16}' . '\x{7D17}\x{7D18}\x{7D19}\x{7D1A}\x{7D1B}\x{7D1C}\x{7D1D}\x{7D1E}\x{7D1F}' . '\x{7D20}\x{7D21}\x{7D22}\x{7D24}\x{7D25}\x{7D26}\x{7D27}\x{7D28}\x{7D29}' . '\x{7D2B}\x{7D2C}\x{7D2E}\x{7D2F}\x{7D30}\x{7D31}\x{7D32}\x{7D33}\x{7D34}' . '\x{7D35}\x{7D36}\x{7D37}\x{7D38}\x{7D39}\x{7D3A}\x{7D3B}\x{7D3C}\x{7D3D}' . '\x{7D3E}\x{7D3F}\x{7D40}\x{7D41}\x{7D42}\x{7D43}\x{7D44}\x{7D45}\x{7D46}' . '\x{7D47}\x{7D49}\x{7D4A}\x{7D4B}\x{7D4C}\x{7D4E}\x{7D4F}\x{7D50}\x{7D51}' . '\x{7D52}\x{7D53}\x{7D54}\x{7D55}\x{7D56}\x{7D57}\x{7D58}\x{7D59}\x{7D5B}' . '\x{7D5C}\x{7D5D}\x{7D5E}\x{7D5F}\x{7D60}\x{7D61}\x{7D62}\x{7D63}\x{7D65}' . '\x{7D66}\x{7D67}\x{7D68}\x{7D69}\x{7D6A}\x{7D6B}\x{7D6C}\x{7D6D}\x{7D6E}' . '\x{7D6F}\x{7D70}\x{7D71}\x{7D72}\x{7D73}\x{7D74}\x{7D75}\x{7D76}\x{7D77}' . '\x{7D79}\x{7D7A}\x{7D7B}\x{7D7C}\x{7D7D}\x{7D7E}\x{7D7F}\x{7D80}\x{7D81}' . '\x{7D83}\x{7D84}\x{7D85}\x{7D86}\x{7D87}\x{7D88}\x{7D89}\x{7D8A}\x{7D8B}' . '\x{7D8C}\x{7D8D}\x{7D8E}\x{7D8F}\x{7D90}\x{7D91}\x{7D92}\x{7D93}\x{7D94}' . '\x{7D96}\x{7D97}\x{7D99}\x{7D9B}\x{7D9C}\x{7D9D}\x{7D9E}\x{7D9F}\x{7DA0}' . '\x{7DA1}\x{7DA2}\x{7DA3}\x{7DA5}\x{7DA6}\x{7DA7}\x{7DA9}\x{7DAA}\x{7DAB}' . '\x{7DAC}\x{7DAD}\x{7DAE}\x{7DAF}\x{7DB0}\x{7DB1}\x{7DB2}\x{7DB3}\x{7DB4}' . '\x{7DB5}\x{7DB6}\x{7DB7}\x{7DB8}\x{7DB9}\x{7DBA}\x{7DBB}\x{7DBC}\x{7DBD}' . '\x{7DBE}\x{7DBF}\x{7DC0}\x{7DC1}\x{7DC2}\x{7DC3}\x{7DC4}\x{7DC5}\x{7DC6}' . '\x{7DC7}\x{7DC8}\x{7DC9}\x{7DCA}\x{7DCB}\x{7DCC}\x{7DCE}\x{7DCF}\x{7DD0}' . '\x{7DD1}\x{7DD2}\x{7DD4}\x{7DD5}\x{7DD6}\x{7DD7}\x{7DD8}\x{7DD9}\x{7DDA}' . '\x{7DDB}\x{7DDD}\x{7DDE}\x{7DDF}\x{7DE0}\x{7DE1}\x{7DE2}\x{7DE3}\x{7DE6}' . '\x{7DE7}\x{7DE8}\x{7DE9}\x{7DEA}\x{7DEC}\x{7DED}\x{7DEE}\x{7DEF}\x{7DF0}' . '\x{7DF1}\x{7DF2}\x{7DF3}\x{7DF4}\x{7DF5}\x{7DF6}\x{7DF7}\x{7DF8}\x{7DF9}' . '\x{7DFA}\x{7DFB}\x{7DFC}\x{7E00}\x{7E01}\x{7E02}\x{7E03}\x{7E04}\x{7E05}' . '\x{7E06}\x{7E07}\x{7E08}\x{7E09}\x{7E0A}\x{7E0B}\x{7E0C}\x{7E0D}\x{7E0E}' . '\x{7E0F}\x{7E10}\x{7E11}\x{7E12}\x{7E13}\x{7E14}\x{7E15}\x{7E16}\x{7E17}' . '\x{7E19}\x{7E1A}\x{7E1B}\x{7E1C}\x{7E1D}\x{7E1E}\x{7E1F}\x{7E20}\x{7E21}' . '\x{7E22}\x{7E23}\x{7E24}\x{7E25}\x{7E26}\x{7E27}\x{7E28}\x{7E29}\x{7E2A}' . '\x{7E2B}\x{7E2C}\x{7E2D}\x{7E2E}\x{7E2F}\x{7E30}\x{7E31}\x{7E32}\x{7E33}' . '\x{7E34}\x{7E35}\x{7E36}\x{7E37}\x{7E38}\x{7E39}\x{7E3A}\x{7E3B}\x{7E3C}' . '\x{7E3D}\x{7E3E}\x{7E3F}\x{7E40}\x{7E41}\x{7E42}\x{7E43}\x{7E44}\x{7E45}' . '\x{7E46}\x{7E47}\x{7E48}\x{7E49}\x{7E4C}\x{7E4D}\x{7E4E}\x{7E4F}\x{7E50}' . '\x{7E51}\x{7E52}\x{7E53}\x{7E54}\x{7E55}\x{7E56}\x{7E57}\x{7E58}\x{7E59}' . '\x{7E5A}\x{7E5C}\x{7E5D}\x{7E5E}\x{7E5F}\x{7E60}\x{7E61}\x{7E62}\x{7E63}' . '\x{7E65}\x{7E66}\x{7E67}\x{7E68}\x{7E69}\x{7E6A}\x{7E6B}\x{7E6C}\x{7E6D}' . '\x{7E6E}\x{7E6F}\x{7E70}\x{7E71}\x{7E72}\x{7E73}\x{7E74}\x{7E75}\x{7E76}' . '\x{7E77}\x{7E78}\x{7E79}\x{7E7A}\x{7E7B}\x{7E7C}\x{7E7D}\x{7E7E}\x{7E7F}' . '\x{7E80}\x{7E81}\x{7E82}\x{7E83}\x{7E84}\x{7E85}\x{7E86}\x{7E87}\x{7E88}' . '\x{7E89}\x{7E8A}\x{7E8B}\x{7E8C}\x{7E8D}\x{7E8E}\x{7E8F}\x{7E90}\x{7E91}' . '\x{7E92}\x{7E93}\x{7E94}\x{7E95}\x{7E96}\x{7E97}\x{7E98}\x{7E99}\x{7E9A}' . '\x{7E9B}\x{7E9C}\x{7E9E}\x{7E9F}\x{7EA0}\x{7EA1}\x{7EA2}\x{7EA3}\x{7EA4}' . '\x{7EA5}\x{7EA6}\x{7EA7}\x{7EA8}\x{7EA9}\x{7EAA}\x{7EAB}\x{7EAC}\x{7EAD}' . '\x{7EAE}\x{7EAF}\x{7EB0}\x{7EB1}\x{7EB2}\x{7EB3}\x{7EB4}\x{7EB5}\x{7EB6}' . '\x{7EB7}\x{7EB8}\x{7EB9}\x{7EBA}\x{7EBB}\x{7EBC}\x{7EBD}\x{7EBE}\x{7EBF}' . '\x{7EC0}\x{7EC1}\x{7EC2}\x{7EC3}\x{7EC4}\x{7EC5}\x{7EC6}\x{7EC7}\x{7EC8}' . '\x{7EC9}\x{7ECA}\x{7ECB}\x{7ECC}\x{7ECD}\x{7ECE}\x{7ECF}\x{7ED0}\x{7ED1}' . '\x{7ED2}\x{7ED3}\x{7ED4}\x{7ED5}\x{7ED6}\x{7ED7}\x{7ED8}\x{7ED9}\x{7EDA}' . '\x{7EDB}\x{7EDC}\x{7EDD}\x{7EDE}\x{7EDF}\x{7EE0}\x{7EE1}\x{7EE2}\x{7EE3}' . '\x{7EE4}\x{7EE5}\x{7EE6}\x{7EE7}\x{7EE8}\x{7EE9}\x{7EEA}\x{7EEB}\x{7EEC}' . '\x{7EED}\x{7EEE}\x{7EEF}\x{7EF0}\x{7EF1}\x{7EF2}\x{7EF3}\x{7EF4}\x{7EF5}' . '\x{7EF6}\x{7EF7}\x{7EF8}\x{7EF9}\x{7EFA}\x{7EFB}\x{7EFC}\x{7EFD}\x{7EFE}' . '\x{7EFF}\x{7F00}\x{7F01}\x{7F02}\x{7F03}\x{7F04}\x{7F05}\x{7F06}\x{7F07}' . '\x{7F08}\x{7F09}\x{7F0A}\x{7F0B}\x{7F0C}\x{7F0D}\x{7F0E}\x{7F0F}\x{7F10}' . '\x{7F11}\x{7F12}\x{7F13}\x{7F14}\x{7F15}\x{7F16}\x{7F17}\x{7F18}\x{7F19}' . '\x{7F1A}\x{7F1B}\x{7F1C}\x{7F1D}\x{7F1E}\x{7F1F}\x{7F20}\x{7F21}\x{7F22}' . '\x{7F23}\x{7F24}\x{7F25}\x{7F26}\x{7F27}\x{7F28}\x{7F29}\x{7F2A}\x{7F2B}' . '\x{7F2C}\x{7F2D}\x{7F2E}\x{7F2F}\x{7F30}\x{7F31}\x{7F32}\x{7F33}\x{7F34}' . '\x{7F35}\x{7F36}\x{7F37}\x{7F38}\x{7F39}\x{7F3A}\x{7F3D}\x{7F3E}\x{7F3F}' . '\x{7F40}\x{7F42}\x{7F43}\x{7F44}\x{7F45}\x{7F47}\x{7F48}\x{7F49}\x{7F4A}' . '\x{7F4B}\x{7F4C}\x{7F4D}\x{7F4E}\x{7F4F}\x{7F50}\x{7F51}\x{7F52}\x{7F53}' . '\x{7F54}\x{7F55}\x{7F56}\x{7F57}\x{7F58}\x{7F5A}\x{7F5B}\x{7F5C}\x{7F5D}' . '\x{7F5E}\x{7F5F}\x{7F60}\x{7F61}\x{7F62}\x{7F63}\x{7F64}\x{7F65}\x{7F66}' . '\x{7F67}\x{7F68}\x{7F69}\x{7F6A}\x{7F6B}\x{7F6C}\x{7F6D}\x{7F6E}\x{7F6F}' . '\x{7F70}\x{7F71}\x{7F72}\x{7F73}\x{7F74}\x{7F75}\x{7F76}\x{7F77}\x{7F78}' . '\x{7F79}\x{7F7A}\x{7F7B}\x{7F7C}\x{7F7D}\x{7F7E}\x{7F7F}\x{7F80}\x{7F81}' . '\x{7F82}\x{7F83}\x{7F85}\x{7F86}\x{7F87}\x{7F88}\x{7F89}\x{7F8A}\x{7F8B}' . '\x{7F8C}\x{7F8D}\x{7F8E}\x{7F8F}\x{7F91}\x{7F92}\x{7F93}\x{7F94}\x{7F95}' . '\x{7F96}\x{7F98}\x{7F9A}\x{7F9B}\x{7F9C}\x{7F9D}\x{7F9E}\x{7F9F}\x{7FA0}' . '\x{7FA1}\x{7FA2}\x{7FA3}\x{7FA4}\x{7FA5}\x{7FA6}\x{7FA7}\x{7FA8}\x{7FA9}' . '\x{7FAA}\x{7FAB}\x{7FAC}\x{7FAD}\x{7FAE}\x{7FAF}\x{7FB0}\x{7FB1}\x{7FB2}' . '\x{7FB3}\x{7FB5}\x{7FB6}\x{7FB7}\x{7FB8}\x{7FB9}\x{7FBA}\x{7FBB}\x{7FBC}' . '\x{7FBD}\x{7FBE}\x{7FBF}\x{7FC0}\x{7FC1}\x{7FC2}\x{7FC3}\x{7FC4}\x{7FC5}' . '\x{7FC6}\x{7FC7}\x{7FC8}\x{7FC9}\x{7FCA}\x{7FCB}\x{7FCC}\x{7FCD}\x{7FCE}' . '\x{7FCF}\x{7FD0}\x{7FD1}\x{7FD2}\x{7FD3}\x{7FD4}\x{7FD5}\x{7FD7}\x{7FD8}' . '\x{7FD9}\x{7FDA}\x{7FDB}\x{7FDC}\x{7FDE}\x{7FDF}\x{7FE0}\x{7FE1}\x{7FE2}' . '\x{7FE3}\x{7FE5}\x{7FE6}\x{7FE7}\x{7FE8}\x{7FE9}\x{7FEA}\x{7FEB}\x{7FEC}' . '\x{7FED}\x{7FEE}\x{7FEF}\x{7FF0}\x{7FF1}\x{7FF2}\x{7FF3}\x{7FF4}\x{7FF5}' . '\x{7FF6}\x{7FF7}\x{7FF8}\x{7FF9}\x{7FFA}\x{7FFB}\x{7FFC}\x{7FFD}\x{7FFE}' . '\x{7FFF}\x{8000}\x{8001}\x{8002}\x{8003}\x{8004}\x{8005}\x{8006}\x{8007}' . '\x{8008}\x{8009}\x{800B}\x{800C}\x{800D}\x{800E}\x{800F}\x{8010}\x{8011}' . '\x{8012}\x{8013}\x{8014}\x{8015}\x{8016}\x{8017}\x{8018}\x{8019}\x{801A}' . '\x{801B}\x{801C}\x{801D}\x{801E}\x{801F}\x{8020}\x{8021}\x{8022}\x{8023}' . '\x{8024}\x{8025}\x{8026}\x{8027}\x{8028}\x{8029}\x{802A}\x{802B}\x{802C}' . '\x{802D}\x{802E}\x{8030}\x{8031}\x{8032}\x{8033}\x{8034}\x{8035}\x{8036}' . '\x{8037}\x{8038}\x{8039}\x{803A}\x{803B}\x{803D}\x{803E}\x{803F}\x{8041}' . '\x{8042}\x{8043}\x{8044}\x{8045}\x{8046}\x{8047}\x{8048}\x{8049}\x{804A}' . '\x{804B}\x{804C}\x{804D}\x{804E}\x{804F}\x{8050}\x{8051}\x{8052}\x{8053}' . '\x{8054}\x{8055}\x{8056}\x{8057}\x{8058}\x{8059}\x{805A}\x{805B}\x{805C}' . '\x{805D}\x{805E}\x{805F}\x{8060}\x{8061}\x{8062}\x{8063}\x{8064}\x{8065}' . '\x{8067}\x{8068}\x{8069}\x{806A}\x{806B}\x{806C}\x{806D}\x{806E}\x{806F}' . '\x{8070}\x{8071}\x{8072}\x{8073}\x{8074}\x{8075}\x{8076}\x{8077}\x{8078}' . '\x{8079}\x{807A}\x{807B}\x{807C}\x{807D}\x{807E}\x{807F}\x{8080}\x{8081}' . '\x{8082}\x{8083}\x{8084}\x{8085}\x{8086}\x{8087}\x{8089}\x{808A}\x{808B}' . '\x{808C}\x{808D}\x{808F}\x{8090}\x{8091}\x{8092}\x{8093}\x{8095}\x{8096}' . '\x{8097}\x{8098}\x{8099}\x{809A}\x{809B}\x{809C}\x{809D}\x{809E}\x{809F}' . '\x{80A0}\x{80A1}\x{80A2}\x{80A3}\x{80A4}\x{80A5}\x{80A9}\x{80AA}\x{80AB}' . '\x{80AD}\x{80AE}\x{80AF}\x{80B0}\x{80B1}\x{80B2}\x{80B4}\x{80B5}\x{80B6}' . '\x{80B7}\x{80B8}\x{80BA}\x{80BB}\x{80BC}\x{80BD}\x{80BE}\x{80BF}\x{80C0}' . '\x{80C1}\x{80C2}\x{80C3}\x{80C4}\x{80C5}\x{80C6}\x{80C7}\x{80C8}\x{80C9}' . '\x{80CA}\x{80CB}\x{80CC}\x{80CD}\x{80CE}\x{80CF}\x{80D0}\x{80D1}\x{80D2}' . '\x{80D3}\x{80D4}\x{80D5}\x{80D6}\x{80D7}\x{80D8}\x{80D9}\x{80DA}\x{80DB}' . '\x{80DC}\x{80DD}\x{80DE}\x{80E0}\x{80E1}\x{80E2}\x{80E3}\x{80E4}\x{80E5}' . '\x{80E6}\x{80E7}\x{80E8}\x{80E9}\x{80EA}\x{80EB}\x{80EC}\x{80ED}\x{80EE}' . '\x{80EF}\x{80F0}\x{80F1}\x{80F2}\x{80F3}\x{80F4}\x{80F5}\x{80F6}\x{80F7}' . '\x{80F8}\x{80F9}\x{80FA}\x{80FB}\x{80FC}\x{80FD}\x{80FE}\x{80FF}\x{8100}' . '\x{8101}\x{8102}\x{8105}\x{8106}\x{8107}\x{8108}\x{8109}\x{810A}\x{810B}' . '\x{810C}\x{810D}\x{810E}\x{810F}\x{8110}\x{8111}\x{8112}\x{8113}\x{8114}' . '\x{8115}\x{8116}\x{8118}\x{8119}\x{811A}\x{811B}\x{811C}\x{811D}\x{811E}' . '\x{811F}\x{8120}\x{8121}\x{8122}\x{8123}\x{8124}\x{8125}\x{8126}\x{8127}' . '\x{8128}\x{8129}\x{812A}\x{812B}\x{812C}\x{812D}\x{812E}\x{812F}\x{8130}' . '\x{8131}\x{8132}\x{8136}\x{8137}\x{8138}\x{8139}\x{813A}\x{813B}\x{813C}' . '\x{813D}\x{813E}\x{813F}\x{8140}\x{8141}\x{8142}\x{8143}\x{8144}\x{8145}' . '\x{8146}\x{8147}\x{8148}\x{8149}\x{814A}\x{814B}\x{814C}\x{814D}\x{814E}' . '\x{814F}\x{8150}\x{8151}\x{8152}\x{8153}\x{8154}\x{8155}\x{8156}\x{8157}' . '\x{8158}\x{8159}\x{815A}\x{815B}\x{815C}\x{815D}\x{815E}\x{8160}\x{8161}' . '\x{8162}\x{8163}\x{8164}\x{8165}\x{8166}\x{8167}\x{8168}\x{8169}\x{816A}' . '\x{816B}\x{816C}\x{816D}\x{816E}\x{816F}\x{8170}\x{8171}\x{8172}\x{8173}' . '\x{8174}\x{8175}\x{8176}\x{8177}\x{8178}\x{8179}\x{817A}\x{817B}\x{817C}' . '\x{817D}\x{817E}\x{817F}\x{8180}\x{8181}\x{8182}\x{8183}\x{8185}\x{8186}' . '\x{8187}\x{8188}\x{8189}\x{818A}\x{818B}\x{818C}\x{818D}\x{818E}\x{818F}' . '\x{8191}\x{8192}\x{8193}\x{8194}\x{8195}\x{8197}\x{8198}\x{8199}\x{819A}' . '\x{819B}\x{819C}\x{819D}\x{819E}\x{819F}\x{81A0}\x{81A1}\x{81A2}\x{81A3}' . '\x{81A4}\x{81A5}\x{81A6}\x{81A7}\x{81A8}\x{81A9}\x{81AA}\x{81AB}\x{81AC}' . '\x{81AD}\x{81AE}\x{81AF}\x{81B0}\x{81B1}\x{81B2}\x{81B3}\x{81B4}\x{81B5}' . '\x{81B6}\x{81B7}\x{81B8}\x{81B9}\x{81BA}\x{81BB}\x{81BC}\x{81BD}\x{81BE}' . '\x{81BF}\x{81C0}\x{81C1}\x{81C2}\x{81C3}\x{81C4}\x{81C5}\x{81C6}\x{81C7}' . '\x{81C8}\x{81C9}\x{81CA}\x{81CC}\x{81CD}\x{81CE}\x{81CF}\x{81D0}\x{81D1}' . '\x{81D2}\x{81D4}\x{81D5}\x{81D6}\x{81D7}\x{81D8}\x{81D9}\x{81DA}\x{81DB}' . '\x{81DC}\x{81DD}\x{81DE}\x{81DF}\x{81E0}\x{81E1}\x{81E2}\x{81E3}\x{81E5}' . '\x{81E6}\x{81E7}\x{81E8}\x{81E9}\x{81EA}\x{81EB}\x{81EC}\x{81ED}\x{81EE}' . '\x{81F1}\x{81F2}\x{81F3}\x{81F4}\x{81F5}\x{81F6}\x{81F7}\x{81F8}\x{81F9}' . '\x{81FA}\x{81FB}\x{81FC}\x{81FD}\x{81FE}\x{81FF}\x{8200}\x{8201}\x{8202}' . '\x{8203}\x{8204}\x{8205}\x{8206}\x{8207}\x{8208}\x{8209}\x{820A}\x{820B}' . '\x{820C}\x{820D}\x{820E}\x{820F}\x{8210}\x{8211}\x{8212}\x{8214}\x{8215}' . '\x{8216}\x{8218}\x{8219}\x{821A}\x{821B}\x{821C}\x{821D}\x{821E}\x{821F}' . '\x{8220}\x{8221}\x{8222}\x{8223}\x{8225}\x{8226}\x{8227}\x{8228}\x{8229}' . '\x{822A}\x{822B}\x{822C}\x{822D}\x{822F}\x{8230}\x{8231}\x{8232}\x{8233}' . '\x{8234}\x{8235}\x{8236}\x{8237}\x{8238}\x{8239}\x{823A}\x{823B}\x{823C}' . '\x{823D}\x{823E}\x{823F}\x{8240}\x{8242}\x{8243}\x{8244}\x{8245}\x{8246}' . '\x{8247}\x{8248}\x{8249}\x{824A}\x{824B}\x{824C}\x{824D}\x{824E}\x{824F}' . '\x{8250}\x{8251}\x{8252}\x{8253}\x{8254}\x{8255}\x{8256}\x{8257}\x{8258}' . '\x{8259}\x{825A}\x{825B}\x{825C}\x{825D}\x{825E}\x{825F}\x{8260}\x{8261}' . '\x{8263}\x{8264}\x{8266}\x{8267}\x{8268}\x{8269}\x{826A}\x{826B}\x{826C}' . '\x{826D}\x{826E}\x{826F}\x{8270}\x{8271}\x{8272}\x{8273}\x{8274}\x{8275}' . '\x{8276}\x{8277}\x{8278}\x{8279}\x{827A}\x{827B}\x{827C}\x{827D}\x{827E}' . '\x{827F}\x{8280}\x{8281}\x{8282}\x{8283}\x{8284}\x{8285}\x{8286}\x{8287}' . '\x{8288}\x{8289}\x{828A}\x{828B}\x{828D}\x{828E}\x{828F}\x{8290}\x{8291}' . '\x{8292}\x{8293}\x{8294}\x{8295}\x{8296}\x{8297}\x{8298}\x{8299}\x{829A}' . '\x{829B}\x{829C}\x{829D}\x{829E}\x{829F}\x{82A0}\x{82A1}\x{82A2}\x{82A3}' . '\x{82A4}\x{82A5}\x{82A6}\x{82A7}\x{82A8}\x{82A9}\x{82AA}\x{82AB}\x{82AC}' . '\x{82AD}\x{82AE}\x{82AF}\x{82B0}\x{82B1}\x{82B3}\x{82B4}\x{82B5}\x{82B6}' . '\x{82B7}\x{82B8}\x{82B9}\x{82BA}\x{82BB}\x{82BC}\x{82BD}\x{82BE}\x{82BF}' . '\x{82C0}\x{82C1}\x{82C2}\x{82C3}\x{82C4}\x{82C5}\x{82C6}\x{82C7}\x{82C8}' . '\x{82C9}\x{82CA}\x{82CB}\x{82CC}\x{82CD}\x{82CE}\x{82CF}\x{82D0}\x{82D1}' . '\x{82D2}\x{82D3}\x{82D4}\x{82D5}\x{82D6}\x{82D7}\x{82D8}\x{82D9}\x{82DA}' . '\x{82DB}\x{82DC}\x{82DD}\x{82DE}\x{82DF}\x{82E0}\x{82E1}\x{82E3}\x{82E4}' . '\x{82E5}\x{82E6}\x{82E7}\x{82E8}\x{82E9}\x{82EA}\x{82EB}\x{82EC}\x{82ED}' . '\x{82EE}\x{82EF}\x{82F0}\x{82F1}\x{82F2}\x{82F3}\x{82F4}\x{82F5}\x{82F6}' . '\x{82F7}\x{82F8}\x{82F9}\x{82FA}\x{82FB}\x{82FD}\x{82FE}\x{82FF}\x{8300}' . '\x{8301}\x{8302}\x{8303}\x{8304}\x{8305}\x{8306}\x{8307}\x{8308}\x{8309}' . '\x{830B}\x{830C}\x{830D}\x{830E}\x{830F}\x{8311}\x{8312}\x{8313}\x{8314}' . '\x{8315}\x{8316}\x{8317}\x{8318}\x{8319}\x{831A}\x{831B}\x{831C}\x{831D}' . '\x{831E}\x{831F}\x{8320}\x{8321}\x{8322}\x{8323}\x{8324}\x{8325}\x{8326}' . '\x{8327}\x{8328}\x{8329}\x{832A}\x{832B}\x{832C}\x{832D}\x{832E}\x{832F}' . '\x{8331}\x{8332}\x{8333}\x{8334}\x{8335}\x{8336}\x{8337}\x{8338}\x{8339}' . '\x{833A}\x{833B}\x{833C}\x{833D}\x{833E}\x{833F}\x{8340}\x{8341}\x{8342}' . '\x{8343}\x{8344}\x{8345}\x{8346}\x{8347}\x{8348}\x{8349}\x{834A}\x{834B}' . '\x{834C}\x{834D}\x{834E}\x{834F}\x{8350}\x{8351}\x{8352}\x{8353}\x{8354}' . '\x{8356}\x{8357}\x{8358}\x{8359}\x{835A}\x{835B}\x{835C}\x{835D}\x{835E}' . '\x{835F}\x{8360}\x{8361}\x{8362}\x{8363}\x{8364}\x{8365}\x{8366}\x{8367}' . '\x{8368}\x{8369}\x{836A}\x{836B}\x{836C}\x{836D}\x{836E}\x{836F}\x{8370}' . '\x{8371}\x{8372}\x{8373}\x{8374}\x{8375}\x{8376}\x{8377}\x{8378}\x{8379}' . '\x{837A}\x{837B}\x{837C}\x{837D}\x{837E}\x{837F}\x{8380}\x{8381}\x{8382}' . '\x{8383}\x{8384}\x{8385}\x{8386}\x{8387}\x{8388}\x{8389}\x{838A}\x{838B}' . '\x{838C}\x{838D}\x{838E}\x{838F}\x{8390}\x{8391}\x{8392}\x{8393}\x{8394}' . '\x{8395}\x{8396}\x{8397}\x{8398}\x{8399}\x{839A}\x{839B}\x{839C}\x{839D}' . '\x{839E}\x{83A0}\x{83A1}\x{83A2}\x{83A3}\x{83A4}\x{83A5}\x{83A6}\x{83A7}' . '\x{83A8}\x{83A9}\x{83AA}\x{83AB}\x{83AC}\x{83AD}\x{83AE}\x{83AF}\x{83B0}' . '\x{83B1}\x{83B2}\x{83B3}\x{83B4}\x{83B6}\x{83B7}\x{83B8}\x{83B9}\x{83BA}' . '\x{83BB}\x{83BC}\x{83BD}\x{83BF}\x{83C0}\x{83C1}\x{83C2}\x{83C3}\x{83C4}' . '\x{83C5}\x{83C6}\x{83C7}\x{83C8}\x{83C9}\x{83CA}\x{83CB}\x{83CC}\x{83CD}' . '\x{83CE}\x{83CF}\x{83D0}\x{83D1}\x{83D2}\x{83D3}\x{83D4}\x{83D5}\x{83D6}' . '\x{83D7}\x{83D8}\x{83D9}\x{83DA}\x{83DB}\x{83DC}\x{83DD}\x{83DE}\x{83DF}' . '\x{83E0}\x{83E1}\x{83E2}\x{83E3}\x{83E4}\x{83E5}\x{83E7}\x{83E8}\x{83E9}' . '\x{83EA}\x{83EB}\x{83EC}\x{83EE}\x{83EF}\x{83F0}\x{83F1}\x{83F2}\x{83F3}' . '\x{83F4}\x{83F5}\x{83F6}\x{83F7}\x{83F8}\x{83F9}\x{83FA}\x{83FB}\x{83FC}' . '\x{83FD}\x{83FE}\x{83FF}\x{8400}\x{8401}\x{8402}\x{8403}\x{8404}\x{8405}' . '\x{8406}\x{8407}\x{8408}\x{8409}\x{840A}\x{840B}\x{840C}\x{840D}\x{840E}' . '\x{840F}\x{8410}\x{8411}\x{8412}\x{8413}\x{8415}\x{8418}\x{8419}\x{841A}' . '\x{841B}\x{841C}\x{841D}\x{841E}\x{8421}\x{8422}\x{8423}\x{8424}\x{8425}' . '\x{8426}\x{8427}\x{8428}\x{8429}\x{842A}\x{842B}\x{842C}\x{842D}\x{842E}' . '\x{842F}\x{8430}\x{8431}\x{8432}\x{8433}\x{8434}\x{8435}\x{8436}\x{8437}' . '\x{8438}\x{8439}\x{843A}\x{843B}\x{843C}\x{843D}\x{843E}\x{843F}\x{8440}' . '\x{8441}\x{8442}\x{8443}\x{8444}\x{8445}\x{8446}\x{8447}\x{8448}\x{8449}' . '\x{844A}\x{844B}\x{844C}\x{844D}\x{844E}\x{844F}\x{8450}\x{8451}\x{8452}' . '\x{8453}\x{8454}\x{8455}\x{8456}\x{8457}\x{8459}\x{845A}\x{845B}\x{845C}' . '\x{845D}\x{845E}\x{845F}\x{8460}\x{8461}\x{8462}\x{8463}\x{8464}\x{8465}' . '\x{8466}\x{8467}\x{8468}\x{8469}\x{846A}\x{846B}\x{846C}\x{846D}\x{846E}' . '\x{846F}\x{8470}\x{8471}\x{8472}\x{8473}\x{8474}\x{8475}\x{8476}\x{8477}' . '\x{8478}\x{8479}\x{847A}\x{847B}\x{847C}\x{847D}\x{847E}\x{847F}\x{8480}' . '\x{8481}\x{8482}\x{8484}\x{8485}\x{8486}\x{8487}\x{8488}\x{8489}\x{848A}' . '\x{848B}\x{848C}\x{848D}\x{848E}\x{848F}\x{8490}\x{8491}\x{8492}\x{8493}' . '\x{8494}\x{8496}\x{8497}\x{8498}\x{8499}\x{849A}\x{849B}\x{849C}\x{849D}' . '\x{849E}\x{849F}\x{84A0}\x{84A1}\x{84A2}\x{84A3}\x{84A4}\x{84A5}\x{84A6}' . '\x{84A7}\x{84A8}\x{84A9}\x{84AA}\x{84AB}\x{84AC}\x{84AE}\x{84AF}\x{84B0}' . '\x{84B1}\x{84B2}\x{84B3}\x{84B4}\x{84B5}\x{84B6}\x{84B8}\x{84B9}\x{84BA}' . '\x{84BB}\x{84BC}\x{84BD}\x{84BE}\x{84BF}\x{84C0}\x{84C1}\x{84C2}\x{84C4}' . '\x{84C5}\x{84C6}\x{84C7}\x{84C8}\x{84C9}\x{84CA}\x{84CB}\x{84CC}\x{84CD}' . '\x{84CE}\x{84CF}\x{84D0}\x{84D1}\x{84D2}\x{84D3}\x{84D4}\x{84D5}\x{84D6}' . '\x{84D7}\x{84D8}\x{84D9}\x{84DB}\x{84DC}\x{84DD}\x{84DE}\x{84DF}\x{84E0}' . '\x{84E1}\x{84E2}\x{84E3}\x{84E4}\x{84E5}\x{84E6}\x{84E7}\x{84E8}\x{84E9}' . '\x{84EA}\x{84EB}\x{84EC}\x{84EE}\x{84EF}\x{84F0}\x{84F1}\x{84F2}\x{84F3}' . '\x{84F4}\x{84F5}\x{84F6}\x{84F7}\x{84F8}\x{84F9}\x{84FA}\x{84FB}\x{84FC}' . '\x{84FD}\x{84FE}\x{84FF}\x{8500}\x{8501}\x{8502}\x{8503}\x{8504}\x{8506}' . '\x{8507}\x{8508}\x{8509}\x{850A}\x{850B}\x{850C}\x{850D}\x{850E}\x{850F}' . '\x{8511}\x{8512}\x{8513}\x{8514}\x{8515}\x{8516}\x{8517}\x{8518}\x{8519}' . '\x{851A}\x{851B}\x{851C}\x{851D}\x{851E}\x{851F}\x{8520}\x{8521}\x{8522}' . '\x{8523}\x{8524}\x{8525}\x{8526}\x{8527}\x{8528}\x{8529}\x{852A}\x{852B}' . '\x{852C}\x{852D}\x{852E}\x{852F}\x{8530}\x{8531}\x{8534}\x{8535}\x{8536}' . '\x{8537}\x{8538}\x{8539}\x{853A}\x{853B}\x{853C}\x{853D}\x{853E}\x{853F}' . '\x{8540}\x{8541}\x{8542}\x{8543}\x{8544}\x{8545}\x{8546}\x{8547}\x{8548}' . '\x{8549}\x{854A}\x{854B}\x{854D}\x{854E}\x{854F}\x{8551}\x{8552}\x{8553}' . '\x{8554}\x{8555}\x{8556}\x{8557}\x{8558}\x{8559}\x{855A}\x{855B}\x{855C}' . '\x{855D}\x{855E}\x{855F}\x{8560}\x{8561}\x{8562}\x{8563}\x{8564}\x{8565}' . '\x{8566}\x{8567}\x{8568}\x{8569}\x{856A}\x{856B}\x{856C}\x{856D}\x{856E}' . '\x{856F}\x{8570}\x{8571}\x{8572}\x{8573}\x{8574}\x{8575}\x{8576}\x{8577}' . '\x{8578}\x{8579}\x{857A}\x{857B}\x{857C}\x{857D}\x{857E}\x{8580}\x{8581}' . '\x{8582}\x{8583}\x{8584}\x{8585}\x{8586}\x{8587}\x{8588}\x{8589}\x{858A}' . '\x{858B}\x{858C}\x{858D}\x{858E}\x{858F}\x{8590}\x{8591}\x{8592}\x{8594}' . '\x{8595}\x{8596}\x{8598}\x{8599}\x{859A}\x{859B}\x{859C}\x{859D}\x{859E}' . '\x{859F}\x{85A0}\x{85A1}\x{85A2}\x{85A3}\x{85A4}\x{85A5}\x{85A6}\x{85A7}' . '\x{85A8}\x{85A9}\x{85AA}\x{85AB}\x{85AC}\x{85AD}\x{85AE}\x{85AF}\x{85B0}' . '\x{85B1}\x{85B3}\x{85B4}\x{85B5}\x{85B6}\x{85B7}\x{85B8}\x{85B9}\x{85BA}' . '\x{85BC}\x{85BD}\x{85BE}\x{85BF}\x{85C0}\x{85C1}\x{85C2}\x{85C3}\x{85C4}' . '\x{85C5}\x{85C6}\x{85C7}\x{85C8}\x{85C9}\x{85CA}\x{85CB}\x{85CD}\x{85CE}' . '\x{85CF}\x{85D0}\x{85D1}\x{85D2}\x{85D3}\x{85D4}\x{85D5}\x{85D6}\x{85D7}' . '\x{85D8}\x{85D9}\x{85DA}\x{85DB}\x{85DC}\x{85DD}\x{85DE}\x{85DF}\x{85E0}' . '\x{85E1}\x{85E2}\x{85E3}\x{85E4}\x{85E5}\x{85E6}\x{85E7}\x{85E8}\x{85E9}' . '\x{85EA}\x{85EB}\x{85EC}\x{85ED}\x{85EF}\x{85F0}\x{85F1}\x{85F2}\x{85F4}' . '\x{85F5}\x{85F6}\x{85F7}\x{85F8}\x{85F9}\x{85FA}\x{85FB}\x{85FD}\x{85FE}' . '\x{85FF}\x{8600}\x{8601}\x{8602}\x{8604}\x{8605}\x{8606}\x{8607}\x{8608}' . '\x{8609}\x{860A}\x{860B}\x{860C}\x{860F}\x{8611}\x{8612}\x{8613}\x{8614}' . '\x{8616}\x{8617}\x{8618}\x{8619}\x{861A}\x{861B}\x{861C}\x{861E}\x{861F}' . '\x{8620}\x{8621}\x{8622}\x{8623}\x{8624}\x{8625}\x{8626}\x{8627}\x{8628}' . '\x{8629}\x{862A}\x{862B}\x{862C}\x{862D}\x{862E}\x{862F}\x{8630}\x{8631}' . '\x{8632}\x{8633}\x{8634}\x{8635}\x{8636}\x{8638}\x{8639}\x{863A}\x{863B}' . '\x{863C}\x{863D}\x{863E}\x{863F}\x{8640}\x{8641}\x{8642}\x{8643}\x{8644}' . '\x{8645}\x{8646}\x{8647}\x{8648}\x{8649}\x{864A}\x{864B}\x{864C}\x{864D}' . '\x{864E}\x{864F}\x{8650}\x{8651}\x{8652}\x{8653}\x{8654}\x{8655}\x{8656}' . '\x{8658}\x{8659}\x{865A}\x{865B}\x{865C}\x{865D}\x{865E}\x{865F}\x{8660}' . '\x{8661}\x{8662}\x{8663}\x{8664}\x{8665}\x{8666}\x{8667}\x{8668}\x{8669}' . '\x{866A}\x{866B}\x{866C}\x{866D}\x{866E}\x{866F}\x{8670}\x{8671}\x{8672}' . '\x{8673}\x{8674}\x{8676}\x{8677}\x{8678}\x{8679}\x{867A}\x{867B}\x{867C}' . '\x{867D}\x{867E}\x{867F}\x{8680}\x{8681}\x{8682}\x{8683}\x{8684}\x{8685}' . '\x{8686}\x{8687}\x{8688}\x{868A}\x{868B}\x{868C}\x{868D}\x{868E}\x{868F}' . '\x{8690}\x{8691}\x{8693}\x{8694}\x{8695}\x{8696}\x{8697}\x{8698}\x{8699}' . '\x{869A}\x{869B}\x{869C}\x{869D}\x{869E}\x{869F}\x{86A1}\x{86A2}\x{86A3}' . '\x{86A4}\x{86A5}\x{86A7}\x{86A8}\x{86A9}\x{86AA}\x{86AB}\x{86AC}\x{86AD}' . '\x{86AE}\x{86AF}\x{86B0}\x{86B1}\x{86B2}\x{86B3}\x{86B4}\x{86B5}\x{86B6}' . '\x{86B7}\x{86B8}\x{86B9}\x{86BA}\x{86BB}\x{86BC}\x{86BD}\x{86BE}\x{86BF}' . '\x{86C0}\x{86C1}\x{86C2}\x{86C3}\x{86C4}\x{86C5}\x{86C6}\x{86C7}\x{86C8}' . '\x{86C9}\x{86CA}\x{86CB}\x{86CC}\x{86CE}\x{86CF}\x{86D0}\x{86D1}\x{86D2}' . '\x{86D3}\x{86D4}\x{86D6}\x{86D7}\x{86D8}\x{86D9}\x{86DA}\x{86DB}\x{86DC}' . '\x{86DD}\x{86DE}\x{86DF}\x{86E1}\x{86E2}\x{86E3}\x{86E4}\x{86E5}\x{86E6}' . '\x{86E8}\x{86E9}\x{86EA}\x{86EB}\x{86EC}\x{86ED}\x{86EE}\x{86EF}\x{86F0}' . '\x{86F1}\x{86F2}\x{86F3}\x{86F4}\x{86F5}\x{86F6}\x{86F7}\x{86F8}\x{86F9}' . '\x{86FA}\x{86FB}\x{86FC}\x{86FE}\x{86FF}\x{8700}\x{8701}\x{8702}\x{8703}' . '\x{8704}\x{8705}\x{8706}\x{8707}\x{8708}\x{8709}\x{870A}\x{870B}\x{870C}' . '\x{870D}\x{870E}\x{870F}\x{8710}\x{8711}\x{8712}\x{8713}\x{8714}\x{8715}' . '\x{8716}\x{8717}\x{8718}\x{8719}\x{871A}\x{871B}\x{871C}\x{871E}\x{871F}' . '\x{8720}\x{8721}\x{8722}\x{8723}\x{8724}\x{8725}\x{8726}\x{8727}\x{8728}' . '\x{8729}\x{872A}\x{872B}\x{872C}\x{872D}\x{872E}\x{8730}\x{8731}\x{8732}' . '\x{8733}\x{8734}\x{8735}\x{8736}\x{8737}\x{8738}\x{8739}\x{873A}\x{873B}' . '\x{873C}\x{873E}\x{873F}\x{8740}\x{8741}\x{8742}\x{8743}\x{8744}\x{8746}' . '\x{8747}\x{8748}\x{8749}\x{874A}\x{874C}\x{874D}\x{874E}\x{874F}\x{8750}' . '\x{8751}\x{8752}\x{8753}\x{8754}\x{8755}\x{8756}\x{8757}\x{8758}\x{8759}' . '\x{875A}\x{875B}\x{875C}\x{875D}\x{875E}\x{875F}\x{8760}\x{8761}\x{8762}' . '\x{8763}\x{8764}\x{8765}\x{8766}\x{8767}\x{8768}\x{8769}\x{876A}\x{876B}' . '\x{876C}\x{876D}\x{876E}\x{876F}\x{8770}\x{8772}\x{8773}\x{8774}\x{8775}' . '\x{8776}\x{8777}\x{8778}\x{8779}\x{877A}\x{877B}\x{877C}\x{877D}\x{877E}' . '\x{8780}\x{8781}\x{8782}\x{8783}\x{8784}\x{8785}\x{8786}\x{8787}\x{8788}' . '\x{8789}\x{878A}\x{878B}\x{878C}\x{878D}\x{878F}\x{8790}\x{8791}\x{8792}' . '\x{8793}\x{8794}\x{8795}\x{8796}\x{8797}\x{8798}\x{879A}\x{879B}\x{879C}' . '\x{879D}\x{879E}\x{879F}\x{87A0}\x{87A1}\x{87A2}\x{87A3}\x{87A4}\x{87A5}' . '\x{87A6}\x{87A7}\x{87A8}\x{87A9}\x{87AA}\x{87AB}\x{87AC}\x{87AD}\x{87AE}' . '\x{87AF}\x{87B0}\x{87B1}\x{87B2}\x{87B3}\x{87B4}\x{87B5}\x{87B6}\x{87B7}' . '\x{87B8}\x{87B9}\x{87BA}\x{87BB}\x{87BC}\x{87BD}\x{87BE}\x{87BF}\x{87C0}' . '\x{87C1}\x{87C2}\x{87C3}\x{87C4}\x{87C5}\x{87C6}\x{87C7}\x{87C8}\x{87C9}' . '\x{87CA}\x{87CB}\x{87CC}\x{87CD}\x{87CE}\x{87CF}\x{87D0}\x{87D1}\x{87D2}' . '\x{87D3}\x{87D4}\x{87D5}\x{87D6}\x{87D7}\x{87D8}\x{87D9}\x{87DB}\x{87DC}' . '\x{87DD}\x{87DE}\x{87DF}\x{87E0}\x{87E1}\x{87E2}\x{87E3}\x{87E4}\x{87E5}' . '\x{87E6}\x{87E7}\x{87E8}\x{87E9}\x{87EA}\x{87EB}\x{87EC}\x{87ED}\x{87EE}' . '\x{87EF}\x{87F1}\x{87F2}\x{87F3}\x{87F4}\x{87F5}\x{87F6}\x{87F7}\x{87F8}' . '\x{87F9}\x{87FA}\x{87FB}\x{87FC}\x{87FD}\x{87FE}\x{87FF}\x{8800}\x{8801}' . '\x{8802}\x{8803}\x{8804}\x{8805}\x{8806}\x{8808}\x{8809}\x{880A}\x{880B}' . '\x{880C}\x{880D}\x{880E}\x{880F}\x{8810}\x{8811}\x{8813}\x{8814}\x{8815}' . '\x{8816}\x{8817}\x{8818}\x{8819}\x{881A}\x{881B}\x{881C}\x{881D}\x{881E}' . '\x{881F}\x{8820}\x{8821}\x{8822}\x{8823}\x{8824}\x{8825}\x{8826}\x{8827}' . '\x{8828}\x{8829}\x{882A}\x{882B}\x{882C}\x{882E}\x{882F}\x{8830}\x{8831}' . '\x{8832}\x{8833}\x{8834}\x{8835}\x{8836}\x{8837}\x{8838}\x{8839}\x{883B}' . '\x{883C}\x{883D}\x{883E}\x{883F}\x{8840}\x{8841}\x{8842}\x{8843}\x{8844}' . '\x{8845}\x{8846}\x{8848}\x{8849}\x{884A}\x{884B}\x{884C}\x{884D}\x{884E}' . '\x{884F}\x{8850}\x{8851}\x{8852}\x{8853}\x{8854}\x{8855}\x{8856}\x{8857}' . '\x{8859}\x{885A}\x{885B}\x{885D}\x{885E}\x{8860}\x{8861}\x{8862}\x{8863}' . '\x{8864}\x{8865}\x{8866}\x{8867}\x{8868}\x{8869}\x{886A}\x{886B}\x{886C}' . '\x{886D}\x{886E}\x{886F}\x{8870}\x{8871}\x{8872}\x{8873}\x{8874}\x{8875}' . '\x{8876}\x{8877}\x{8878}\x{8879}\x{887B}\x{887C}\x{887D}\x{887E}\x{887F}' . '\x{8880}\x{8881}\x{8882}\x{8883}\x{8884}\x{8885}\x{8886}\x{8887}\x{8888}' . '\x{8889}\x{888A}\x{888B}\x{888C}\x{888D}\x{888E}\x{888F}\x{8890}\x{8891}' . '\x{8892}\x{8893}\x{8894}\x{8895}\x{8896}\x{8897}\x{8898}\x{8899}\x{889A}' . '\x{889B}\x{889C}\x{889D}\x{889E}\x{889F}\x{88A0}\x{88A1}\x{88A2}\x{88A3}' . '\x{88A4}\x{88A5}\x{88A6}\x{88A7}\x{88A8}\x{88A9}\x{88AA}\x{88AB}\x{88AC}' . '\x{88AD}\x{88AE}\x{88AF}\x{88B0}\x{88B1}\x{88B2}\x{88B3}\x{88B4}\x{88B6}' . '\x{88B7}\x{88B8}\x{88B9}\x{88BA}\x{88BB}\x{88BC}\x{88BD}\x{88BE}\x{88BF}' . '\x{88C0}\x{88C1}\x{88C2}\x{88C3}\x{88C4}\x{88C5}\x{88C6}\x{88C7}\x{88C8}' . '\x{88C9}\x{88CA}\x{88CB}\x{88CC}\x{88CD}\x{88CE}\x{88CF}\x{88D0}\x{88D1}' . '\x{88D2}\x{88D3}\x{88D4}\x{88D5}\x{88D6}\x{88D7}\x{88D8}\x{88D9}\x{88DA}' . '\x{88DB}\x{88DC}\x{88DD}\x{88DE}\x{88DF}\x{88E0}\x{88E1}\x{88E2}\x{88E3}' . '\x{88E4}\x{88E5}\x{88E7}\x{88E8}\x{88EA}\x{88EB}\x{88EC}\x{88EE}\x{88EF}' . '\x{88F0}\x{88F1}\x{88F2}\x{88F3}\x{88F4}\x{88F5}\x{88F6}\x{88F7}\x{88F8}' . '\x{88F9}\x{88FA}\x{88FB}\x{88FC}\x{88FD}\x{88FE}\x{88FF}\x{8900}\x{8901}' . '\x{8902}\x{8904}\x{8905}\x{8906}\x{8907}\x{8908}\x{8909}\x{890A}\x{890B}' . '\x{890C}\x{890D}\x{890E}\x{8910}\x{8911}\x{8912}\x{8913}\x{8914}\x{8915}' . '\x{8916}\x{8917}\x{8918}\x{8919}\x{891A}\x{891B}\x{891C}\x{891D}\x{891E}' . '\x{891F}\x{8920}\x{8921}\x{8922}\x{8923}\x{8925}\x{8926}\x{8927}\x{8928}' . '\x{8929}\x{892A}\x{892B}\x{892C}\x{892D}\x{892E}\x{892F}\x{8930}\x{8931}' . '\x{8932}\x{8933}\x{8934}\x{8935}\x{8936}\x{8937}\x{8938}\x{8939}\x{893A}' . '\x{893B}\x{893C}\x{893D}\x{893E}\x{893F}\x{8940}\x{8941}\x{8942}\x{8943}' . '\x{8944}\x{8945}\x{8946}\x{8947}\x{8948}\x{8949}\x{894A}\x{894B}\x{894C}' . '\x{894E}\x{894F}\x{8950}\x{8951}\x{8952}\x{8953}\x{8954}\x{8955}\x{8956}' . '\x{8957}\x{8958}\x{8959}\x{895A}\x{895B}\x{895C}\x{895D}\x{895E}\x{895F}' . '\x{8960}\x{8961}\x{8962}\x{8963}\x{8964}\x{8966}\x{8967}\x{8968}\x{8969}' . '\x{896A}\x{896B}\x{896C}\x{896D}\x{896E}\x{896F}\x{8970}\x{8971}\x{8972}' . '\x{8973}\x{8974}\x{8976}\x{8977}\x{8978}\x{8979}\x{897A}\x{897B}\x{897C}' . '\x{897E}\x{897F}\x{8980}\x{8981}\x{8982}\x{8983}\x{8984}\x{8985}\x{8986}' . '\x{8987}\x{8988}\x{8989}\x{898A}\x{898B}\x{898C}\x{898E}\x{898F}\x{8991}' . '\x{8992}\x{8993}\x{8995}\x{8996}\x{8997}\x{8998}\x{899A}\x{899B}\x{899C}' . '\x{899D}\x{899E}\x{899F}\x{89A0}\x{89A1}\x{89A2}\x{89A3}\x{89A4}\x{89A5}' . '\x{89A6}\x{89A7}\x{89A8}\x{89AA}\x{89AB}\x{89AC}\x{89AD}\x{89AE}\x{89AF}' . '\x{89B1}\x{89B2}\x{89B3}\x{89B5}\x{89B6}\x{89B7}\x{89B8}\x{89B9}\x{89BA}' . '\x{89BD}\x{89BE}\x{89BF}\x{89C0}\x{89C1}\x{89C2}\x{89C3}\x{89C4}\x{89C5}' . '\x{89C6}\x{89C7}\x{89C8}\x{89C9}\x{89CA}\x{89CB}\x{89CC}\x{89CD}\x{89CE}' . '\x{89CF}\x{89D0}\x{89D1}\x{89D2}\x{89D3}\x{89D4}\x{89D5}\x{89D6}\x{89D7}' . '\x{89D8}\x{89D9}\x{89DA}\x{89DB}\x{89DC}\x{89DD}\x{89DE}\x{89DF}\x{89E0}' . '\x{89E1}\x{89E2}\x{89E3}\x{89E4}\x{89E5}\x{89E6}\x{89E7}\x{89E8}\x{89E9}' . '\x{89EA}\x{89EB}\x{89EC}\x{89ED}\x{89EF}\x{89F0}\x{89F1}\x{89F2}\x{89F3}' . '\x{89F4}\x{89F6}\x{89F7}\x{89F8}\x{89FA}\x{89FB}\x{89FC}\x{89FE}\x{89FF}' . '\x{8A00}\x{8A01}\x{8A02}\x{8A03}\x{8A04}\x{8A07}\x{8A08}\x{8A09}\x{8A0A}' . '\x{8A0B}\x{8A0C}\x{8A0D}\x{8A0E}\x{8A0F}\x{8A10}\x{8A11}\x{8A12}\x{8A13}' . '\x{8A15}\x{8A16}\x{8A17}\x{8A18}\x{8A1A}\x{8A1B}\x{8A1C}\x{8A1D}\x{8A1E}' . '\x{8A1F}\x{8A22}\x{8A23}\x{8A24}\x{8A25}\x{8A26}\x{8A27}\x{8A28}\x{8A29}' . '\x{8A2A}\x{8A2C}\x{8A2D}\x{8A2E}\x{8A2F}\x{8A30}\x{8A31}\x{8A32}\x{8A34}' . '\x{8A35}\x{8A36}\x{8A37}\x{8A38}\x{8A39}\x{8A3A}\x{8A3B}\x{8A3C}\x{8A3E}' . '\x{8A3F}\x{8A40}\x{8A41}\x{8A42}\x{8A43}\x{8A44}\x{8A45}\x{8A46}\x{8A47}' . '\x{8A48}\x{8A49}\x{8A4A}\x{8A4C}\x{8A4D}\x{8A4E}\x{8A4F}\x{8A50}\x{8A51}' . '\x{8A52}\x{8A53}\x{8A54}\x{8A55}\x{8A56}\x{8A57}\x{8A58}\x{8A59}\x{8A5A}' . '\x{8A5B}\x{8A5C}\x{8A5D}\x{8A5E}\x{8A5F}\x{8A60}\x{8A61}\x{8A62}\x{8A63}' . '\x{8A65}\x{8A66}\x{8A67}\x{8A68}\x{8A69}\x{8A6A}\x{8A6B}\x{8A6C}\x{8A6D}' . '\x{8A6E}\x{8A6F}\x{8A70}\x{8A71}\x{8A72}\x{8A73}\x{8A74}\x{8A75}\x{8A76}' . '\x{8A77}\x{8A79}\x{8A7A}\x{8A7B}\x{8A7C}\x{8A7E}\x{8A7F}\x{8A80}\x{8A81}' . '\x{8A82}\x{8A83}\x{8A84}\x{8A85}\x{8A86}\x{8A87}\x{8A89}\x{8A8A}\x{8A8B}' . '\x{8A8C}\x{8A8D}\x{8A8E}\x{8A8F}\x{8A90}\x{8A91}\x{8A92}\x{8A93}\x{8A94}' . '\x{8A95}\x{8A96}\x{8A97}\x{8A98}\x{8A99}\x{8A9A}\x{8A9B}\x{8A9C}\x{8A9D}' . '\x{8A9E}\x{8AA0}\x{8AA1}\x{8AA2}\x{8AA3}\x{8AA4}\x{8AA5}\x{8AA6}\x{8AA7}' . '\x{8AA8}\x{8AA9}\x{8AAA}\x{8AAB}\x{8AAC}\x{8AAE}\x{8AB0}\x{8AB1}\x{8AB2}' . '\x{8AB3}\x{8AB4}\x{8AB5}\x{8AB6}\x{8AB8}\x{8AB9}\x{8ABA}\x{8ABB}\x{8ABC}' . '\x{8ABD}\x{8ABE}\x{8ABF}\x{8AC0}\x{8AC1}\x{8AC2}\x{8AC3}\x{8AC4}\x{8AC5}' . '\x{8AC6}\x{8AC7}\x{8AC8}\x{8AC9}\x{8ACA}\x{8ACB}\x{8ACC}\x{8ACD}\x{8ACE}' . '\x{8ACF}\x{8AD1}\x{8AD2}\x{8AD3}\x{8AD4}\x{8AD5}\x{8AD6}\x{8AD7}\x{8AD8}' . '\x{8AD9}\x{8ADA}\x{8ADB}\x{8ADC}\x{8ADD}\x{8ADE}\x{8ADF}\x{8AE0}\x{8AE1}' . '\x{8AE2}\x{8AE3}\x{8AE4}\x{8AE5}\x{8AE6}\x{8AE7}\x{8AE8}\x{8AE9}\x{8AEA}' . '\x{8AEB}\x{8AED}\x{8AEE}\x{8AEF}\x{8AF0}\x{8AF1}\x{8AF2}\x{8AF3}\x{8AF4}' . '\x{8AF5}\x{8AF6}\x{8AF7}\x{8AF8}\x{8AF9}\x{8AFA}\x{8AFB}\x{8AFC}\x{8AFD}' . '\x{8AFE}\x{8AFF}\x{8B00}\x{8B01}\x{8B02}\x{8B03}\x{8B04}\x{8B05}\x{8B06}' . '\x{8B07}\x{8B08}\x{8B09}\x{8B0A}\x{8B0B}\x{8B0D}\x{8B0E}\x{8B0F}\x{8B10}' . '\x{8B11}\x{8B12}\x{8B13}\x{8B14}\x{8B15}\x{8B16}\x{8B17}\x{8B18}\x{8B19}' . '\x{8B1A}\x{8B1B}\x{8B1C}\x{8B1D}\x{8B1E}\x{8B1F}\x{8B20}\x{8B21}\x{8B22}' . '\x{8B23}\x{8B24}\x{8B25}\x{8B26}\x{8B27}\x{8B28}\x{8B2A}\x{8B2B}\x{8B2C}' . '\x{8B2D}\x{8B2E}\x{8B2F}\x{8B30}\x{8B31}\x{8B33}\x{8B34}\x{8B35}\x{8B36}' . '\x{8B37}\x{8B39}\x{8B3A}\x{8B3B}\x{8B3C}\x{8B3D}\x{8B3E}\x{8B40}\x{8B41}' . '\x{8B42}\x{8B43}\x{8B44}\x{8B45}\x{8B46}\x{8B47}\x{8B48}\x{8B49}\x{8B4A}' . '\x{8B4B}\x{8B4C}\x{8B4D}\x{8B4E}\x{8B4F}\x{8B50}\x{8B51}\x{8B52}\x{8B53}' . '\x{8B54}\x{8B55}\x{8B56}\x{8B57}\x{8B58}\x{8B59}\x{8B5A}\x{8B5B}\x{8B5C}' . '\x{8B5D}\x{8B5E}\x{8B5F}\x{8B60}\x{8B63}\x{8B64}\x{8B65}\x{8B66}\x{8B67}' . '\x{8B68}\x{8B6A}\x{8B6B}\x{8B6C}\x{8B6D}\x{8B6E}\x{8B6F}\x{8B70}\x{8B71}' . '\x{8B73}\x{8B74}\x{8B76}\x{8B77}\x{8B78}\x{8B79}\x{8B7A}\x{8B7B}\x{8B7D}' . '\x{8B7E}\x{8B7F}\x{8B80}\x{8B82}\x{8B83}\x{8B84}\x{8B85}\x{8B86}\x{8B88}' . '\x{8B89}\x{8B8A}\x{8B8B}\x{8B8C}\x{8B8E}\x{8B90}\x{8B91}\x{8B92}\x{8B93}' . '\x{8B94}\x{8B95}\x{8B96}\x{8B97}\x{8B98}\x{8B99}\x{8B9A}\x{8B9C}\x{8B9D}' . '\x{8B9E}\x{8B9F}\x{8BA0}\x{8BA1}\x{8BA2}\x{8BA3}\x{8BA4}\x{8BA5}\x{8BA6}' . '\x{8BA7}\x{8BA8}\x{8BA9}\x{8BAA}\x{8BAB}\x{8BAC}\x{8BAD}\x{8BAE}\x{8BAF}' . '\x{8BB0}\x{8BB1}\x{8BB2}\x{8BB3}\x{8BB4}\x{8BB5}\x{8BB6}\x{8BB7}\x{8BB8}' . '\x{8BB9}\x{8BBA}\x{8BBB}\x{8BBC}\x{8BBD}\x{8BBE}\x{8BBF}\x{8BC0}\x{8BC1}' . '\x{8BC2}\x{8BC3}\x{8BC4}\x{8BC5}\x{8BC6}\x{8BC7}\x{8BC8}\x{8BC9}\x{8BCA}' . '\x{8BCB}\x{8BCC}\x{8BCD}\x{8BCE}\x{8BCF}\x{8BD0}\x{8BD1}\x{8BD2}\x{8BD3}' . '\x{8BD4}\x{8BD5}\x{8BD6}\x{8BD7}\x{8BD8}\x{8BD9}\x{8BDA}\x{8BDB}\x{8BDC}' . '\x{8BDD}\x{8BDE}\x{8BDF}\x{8BE0}\x{8BE1}\x{8BE2}\x{8BE3}\x{8BE4}\x{8BE5}' . '\x{8BE6}\x{8BE7}\x{8BE8}\x{8BE9}\x{8BEA}\x{8BEB}\x{8BEC}\x{8BED}\x{8BEE}' . '\x{8BEF}\x{8BF0}\x{8BF1}\x{8BF2}\x{8BF3}\x{8BF4}\x{8BF5}\x{8BF6}\x{8BF7}' . '\x{8BF8}\x{8BF9}\x{8BFA}\x{8BFB}\x{8BFC}\x{8BFD}\x{8BFE}\x{8BFF}\x{8C00}' . '\x{8C01}\x{8C02}\x{8C03}\x{8C04}\x{8C05}\x{8C06}\x{8C07}\x{8C08}\x{8C09}' . '\x{8C0A}\x{8C0B}\x{8C0C}\x{8C0D}\x{8C0E}\x{8C0F}\x{8C10}\x{8C11}\x{8C12}' . '\x{8C13}\x{8C14}\x{8C15}\x{8C16}\x{8C17}\x{8C18}\x{8C19}\x{8C1A}\x{8C1B}' . '\x{8C1C}\x{8C1D}\x{8C1E}\x{8C1F}\x{8C20}\x{8C21}\x{8C22}\x{8C23}\x{8C24}' . '\x{8C25}\x{8C26}\x{8C27}\x{8C28}\x{8C29}\x{8C2A}\x{8C2B}\x{8C2C}\x{8C2D}' . '\x{8C2E}\x{8C2F}\x{8C30}\x{8C31}\x{8C32}\x{8C33}\x{8C34}\x{8C35}\x{8C36}' . '\x{8C37}\x{8C39}\x{8C3A}\x{8C3B}\x{8C3C}\x{8C3D}\x{8C3E}\x{8C3F}\x{8C41}' . '\x{8C42}\x{8C43}\x{8C45}\x{8C46}\x{8C47}\x{8C48}\x{8C49}\x{8C4A}\x{8C4B}' . '\x{8C4C}\x{8C4D}\x{8C4E}\x{8C4F}\x{8C50}\x{8C54}\x{8C55}\x{8C56}\x{8C57}' . '\x{8C59}\x{8C5A}\x{8C5B}\x{8C5C}\x{8C5D}\x{8C5E}\x{8C5F}\x{8C60}\x{8C61}' . '\x{8C62}\x{8C63}\x{8C64}\x{8C65}\x{8C66}\x{8C67}\x{8C68}\x{8C69}\x{8C6A}' . '\x{8C6B}\x{8C6C}\x{8C6D}\x{8C6E}\x{8C6F}\x{8C70}\x{8C71}\x{8C72}\x{8C73}' . '\x{8C75}\x{8C76}\x{8C77}\x{8C78}\x{8C79}\x{8C7A}\x{8C7B}\x{8C7D}\x{8C7E}' . '\x{8C80}\x{8C81}\x{8C82}\x{8C84}\x{8C85}\x{8C86}\x{8C88}\x{8C89}\x{8C8A}' . '\x{8C8C}\x{8C8D}\x{8C8F}\x{8C90}\x{8C91}\x{8C92}\x{8C93}\x{8C94}\x{8C95}' . '\x{8C96}\x{8C97}\x{8C98}\x{8C99}\x{8C9A}\x{8C9C}\x{8C9D}\x{8C9E}\x{8C9F}' . '\x{8CA0}\x{8CA1}\x{8CA2}\x{8CA3}\x{8CA4}\x{8CA5}\x{8CA7}\x{8CA8}\x{8CA9}' . '\x{8CAA}\x{8CAB}\x{8CAC}\x{8CAD}\x{8CAE}\x{8CAF}\x{8CB0}\x{8CB1}\x{8CB2}' . '\x{8CB3}\x{8CB4}\x{8CB5}\x{8CB6}\x{8CB7}\x{8CB8}\x{8CB9}\x{8CBA}\x{8CBB}' . '\x{8CBC}\x{8CBD}\x{8CBE}\x{8CBF}\x{8CC0}\x{8CC1}\x{8CC2}\x{8CC3}\x{8CC4}' . '\x{8CC5}\x{8CC6}\x{8CC7}\x{8CC8}\x{8CC9}\x{8CCA}\x{8CCC}\x{8CCE}\x{8CCF}' . '\x{8CD0}\x{8CD1}\x{8CD2}\x{8CD3}\x{8CD4}\x{8CD5}\x{8CD7}\x{8CD9}\x{8CDA}' . '\x{8CDB}\x{8CDC}\x{8CDD}\x{8CDE}\x{8CDF}\x{8CE0}\x{8CE1}\x{8CE2}\x{8CE3}' . '\x{8CE4}\x{8CE5}\x{8CE6}\x{8CE7}\x{8CE8}\x{8CEA}\x{8CEB}\x{8CEC}\x{8CED}' . '\x{8CEE}\x{8CEF}\x{8CF0}\x{8CF1}\x{8CF2}\x{8CF3}\x{8CF4}\x{8CF5}\x{8CF6}' . '\x{8CF8}\x{8CF9}\x{8CFA}\x{8CFB}\x{8CFC}\x{8CFD}\x{8CFE}\x{8CFF}\x{8D00}' . '\x{8D02}\x{8D03}\x{8D04}\x{8D05}\x{8D06}\x{8D07}\x{8D08}\x{8D09}\x{8D0A}' . '\x{8D0B}\x{8D0C}\x{8D0D}\x{8D0E}\x{8D0F}\x{8D10}\x{8D13}\x{8D14}\x{8D15}' . '\x{8D16}\x{8D17}\x{8D18}\x{8D19}\x{8D1A}\x{8D1B}\x{8D1C}\x{8D1D}\x{8D1E}' . '\x{8D1F}\x{8D20}\x{8D21}\x{8D22}\x{8D23}\x{8D24}\x{8D25}\x{8D26}\x{8D27}' . '\x{8D28}\x{8D29}\x{8D2A}\x{8D2B}\x{8D2C}\x{8D2D}\x{8D2E}\x{8D2F}\x{8D30}' . '\x{8D31}\x{8D32}\x{8D33}\x{8D34}\x{8D35}\x{8D36}\x{8D37}\x{8D38}\x{8D39}' . '\x{8D3A}\x{8D3B}\x{8D3C}\x{8D3D}\x{8D3E}\x{8D3F}\x{8D40}\x{8D41}\x{8D42}' . '\x{8D43}\x{8D44}\x{8D45}\x{8D46}\x{8D47}\x{8D48}\x{8D49}\x{8D4A}\x{8D4B}' . '\x{8D4C}\x{8D4D}\x{8D4E}\x{8D4F}\x{8D50}\x{8D51}\x{8D52}\x{8D53}\x{8D54}' . '\x{8D55}\x{8D56}\x{8D57}\x{8D58}\x{8D59}\x{8D5A}\x{8D5B}\x{8D5C}\x{8D5D}' . '\x{8D5E}\x{8D5F}\x{8D60}\x{8D61}\x{8D62}\x{8D63}\x{8D64}\x{8D65}\x{8D66}' . '\x{8D67}\x{8D68}\x{8D69}\x{8D6A}\x{8D6B}\x{8D6C}\x{8D6D}\x{8D6E}\x{8D6F}' . '\x{8D70}\x{8D71}\x{8D72}\x{8D73}\x{8D74}\x{8D75}\x{8D76}\x{8D77}\x{8D78}' . '\x{8D79}\x{8D7A}\x{8D7B}\x{8D7D}\x{8D7E}\x{8D7F}\x{8D80}\x{8D81}\x{8D82}' . '\x{8D83}\x{8D84}\x{8D85}\x{8D86}\x{8D87}\x{8D88}\x{8D89}\x{8D8A}\x{8D8B}' . '\x{8D8C}\x{8D8D}\x{8D8E}\x{8D8F}\x{8D90}\x{8D91}\x{8D92}\x{8D93}\x{8D94}' . '\x{8D95}\x{8D96}\x{8D97}\x{8D98}\x{8D99}\x{8D9A}\x{8D9B}\x{8D9C}\x{8D9D}' . '\x{8D9E}\x{8D9F}\x{8DA0}\x{8DA1}\x{8DA2}\x{8DA3}\x{8DA4}\x{8DA5}\x{8DA7}' . '\x{8DA8}\x{8DA9}\x{8DAA}\x{8DAB}\x{8DAC}\x{8DAD}\x{8DAE}\x{8DAF}\x{8DB0}' . '\x{8DB1}\x{8DB2}\x{8DB3}\x{8DB4}\x{8DB5}\x{8DB6}\x{8DB7}\x{8DB8}\x{8DB9}' . '\x{8DBA}\x{8DBB}\x{8DBC}\x{8DBD}\x{8DBE}\x{8DBF}\x{8DC1}\x{8DC2}\x{8DC3}' . '\x{8DC4}\x{8DC5}\x{8DC6}\x{8DC7}\x{8DC8}\x{8DC9}\x{8DCA}\x{8DCB}\x{8DCC}' . '\x{8DCD}\x{8DCE}\x{8DCF}\x{8DD0}\x{8DD1}\x{8DD2}\x{8DD3}\x{8DD4}\x{8DD5}' . '\x{8DD6}\x{8DD7}\x{8DD8}\x{8DD9}\x{8DDA}\x{8DDB}\x{8DDC}\x{8DDD}\x{8DDE}' . '\x{8DDF}\x{8DE0}\x{8DE1}\x{8DE2}\x{8DE3}\x{8DE4}\x{8DE6}\x{8DE7}\x{8DE8}' . '\x{8DE9}\x{8DEA}\x{8DEB}\x{8DEC}\x{8DED}\x{8DEE}\x{8DEF}\x{8DF0}\x{8DF1}' . '\x{8DF2}\x{8DF3}\x{8DF4}\x{8DF5}\x{8DF6}\x{8DF7}\x{8DF8}\x{8DF9}\x{8DFA}' . '\x{8DFB}\x{8DFC}\x{8DFD}\x{8DFE}\x{8DFF}\x{8E00}\x{8E02}\x{8E03}\x{8E04}' . '\x{8E05}\x{8E06}\x{8E07}\x{8E08}\x{8E09}\x{8E0A}\x{8E0C}\x{8E0D}\x{8E0E}' . '\x{8E0F}\x{8E10}\x{8E11}\x{8E12}\x{8E13}\x{8E14}\x{8E15}\x{8E16}\x{8E17}' . '\x{8E18}\x{8E19}\x{8E1A}\x{8E1B}\x{8E1C}\x{8E1D}\x{8E1E}\x{8E1F}\x{8E20}' . '\x{8E21}\x{8E22}\x{8E23}\x{8E24}\x{8E25}\x{8E26}\x{8E27}\x{8E28}\x{8E29}' . '\x{8E2A}\x{8E2B}\x{8E2C}\x{8E2D}\x{8E2E}\x{8E2F}\x{8E30}\x{8E31}\x{8E33}' . '\x{8E34}\x{8E35}\x{8E36}\x{8E37}\x{8E38}\x{8E39}\x{8E3A}\x{8E3B}\x{8E3C}' . '\x{8E3D}\x{8E3E}\x{8E3F}\x{8E40}\x{8E41}\x{8E42}\x{8E43}\x{8E44}\x{8E45}' . '\x{8E47}\x{8E48}\x{8E49}\x{8E4A}\x{8E4B}\x{8E4C}\x{8E4D}\x{8E4E}\x{8E50}' . '\x{8E51}\x{8E52}\x{8E53}\x{8E54}\x{8E55}\x{8E56}\x{8E57}\x{8E58}\x{8E59}' . '\x{8E5A}\x{8E5B}\x{8E5C}\x{8E5D}\x{8E5E}\x{8E5F}\x{8E60}\x{8E61}\x{8E62}' . '\x{8E63}\x{8E64}\x{8E65}\x{8E66}\x{8E67}\x{8E68}\x{8E69}\x{8E6A}\x{8E6B}' . '\x{8E6C}\x{8E6D}\x{8E6F}\x{8E70}\x{8E71}\x{8E72}\x{8E73}\x{8E74}\x{8E76}' . '\x{8E78}\x{8E7A}\x{8E7B}\x{8E7C}\x{8E7D}\x{8E7E}\x{8E7F}\x{8E80}\x{8E81}' . '\x{8E82}\x{8E83}\x{8E84}\x{8E85}\x{8E86}\x{8E87}\x{8E88}\x{8E89}\x{8E8A}' . '\x{8E8B}\x{8E8C}\x{8E8D}\x{8E8E}\x{8E8F}\x{8E90}\x{8E91}\x{8E92}\x{8E93}' . '\x{8E94}\x{8E95}\x{8E96}\x{8E97}\x{8E98}\x{8E9A}\x{8E9C}\x{8E9D}\x{8E9E}' . '\x{8E9F}\x{8EA0}\x{8EA1}\x{8EA3}\x{8EA4}\x{8EA5}\x{8EA6}\x{8EA7}\x{8EA8}' . '\x{8EA9}\x{8EAA}\x{8EAB}\x{8EAC}\x{8EAD}\x{8EAE}\x{8EAF}\x{8EB0}\x{8EB1}' . '\x{8EB2}\x{8EB4}\x{8EB5}\x{8EB8}\x{8EB9}\x{8EBA}\x{8EBB}\x{8EBC}\x{8EBD}' . '\x{8EBE}\x{8EBF}\x{8EC0}\x{8EC2}\x{8EC3}\x{8EC5}\x{8EC6}\x{8EC7}\x{8EC8}' . '\x{8EC9}\x{8ECA}\x{8ECB}\x{8ECC}\x{8ECD}\x{8ECE}\x{8ECF}\x{8ED0}\x{8ED1}' . '\x{8ED2}\x{8ED3}\x{8ED4}\x{8ED5}\x{8ED6}\x{8ED7}\x{8ED8}\x{8EDA}\x{8EDB}' . '\x{8EDC}\x{8EDD}\x{8EDE}\x{8EDF}\x{8EE0}\x{8EE1}\x{8EE4}\x{8EE5}\x{8EE6}' . '\x{8EE7}\x{8EE8}\x{8EE9}\x{8EEA}\x{8EEB}\x{8EEC}\x{8EED}\x{8EEE}\x{8EEF}' . '\x{8EF1}\x{8EF2}\x{8EF3}\x{8EF4}\x{8EF5}\x{8EF6}\x{8EF7}\x{8EF8}\x{8EF9}' . '\x{8EFA}\x{8EFB}\x{8EFC}\x{8EFD}\x{8EFE}\x{8EFF}\x{8F00}\x{8F01}\x{8F02}' . '\x{8F03}\x{8F04}\x{8F05}\x{8F06}\x{8F07}\x{8F08}\x{8F09}\x{8F0A}\x{8F0B}' . '\x{8F0D}\x{8F0E}\x{8F10}\x{8F11}\x{8F12}\x{8F13}\x{8F14}\x{8F15}\x{8F16}' . '\x{8F17}\x{8F18}\x{8F1A}\x{8F1B}\x{8F1C}\x{8F1D}\x{8F1E}\x{8F1F}\x{8F20}' . '\x{8F21}\x{8F22}\x{8F23}\x{8F24}\x{8F25}\x{8F26}\x{8F27}\x{8F28}\x{8F29}' . '\x{8F2A}\x{8F2B}\x{8F2C}\x{8F2E}\x{8F2F}\x{8F30}\x{8F31}\x{8F32}\x{8F33}' . '\x{8F34}\x{8F35}\x{8F36}\x{8F37}\x{8F38}\x{8F39}\x{8F3B}\x{8F3C}\x{8F3D}' . '\x{8F3E}\x{8F3F}\x{8F40}\x{8F42}\x{8F43}\x{8F44}\x{8F45}\x{8F46}\x{8F47}' . '\x{8F48}\x{8F49}\x{8F4A}\x{8F4B}\x{8F4C}\x{8F4D}\x{8F4E}\x{8F4F}\x{8F50}' . '\x{8F51}\x{8F52}\x{8F53}\x{8F54}\x{8F55}\x{8F56}\x{8F57}\x{8F58}\x{8F59}' . '\x{8F5A}\x{8F5B}\x{8F5D}\x{8F5E}\x{8F5F}\x{8F60}\x{8F61}\x{8F62}\x{8F63}' . '\x{8F64}\x{8F65}\x{8F66}\x{8F67}\x{8F68}\x{8F69}\x{8F6A}\x{8F6B}\x{8F6C}' . '\x{8F6D}\x{8F6E}\x{8F6F}\x{8F70}\x{8F71}\x{8F72}\x{8F73}\x{8F74}\x{8F75}' . '\x{8F76}\x{8F77}\x{8F78}\x{8F79}\x{8F7A}\x{8F7B}\x{8F7C}\x{8F7D}\x{8F7E}' . '\x{8F7F}\x{8F80}\x{8F81}\x{8F82}\x{8F83}\x{8F84}\x{8F85}\x{8F86}\x{8F87}' . '\x{8F88}\x{8F89}\x{8F8A}\x{8F8B}\x{8F8C}\x{8F8D}\x{8F8E}\x{8F8F}\x{8F90}' . '\x{8F91}\x{8F92}\x{8F93}\x{8F94}\x{8F95}\x{8F96}\x{8F97}\x{8F98}\x{8F99}' . '\x{8F9A}\x{8F9B}\x{8F9C}\x{8F9E}\x{8F9F}\x{8FA0}\x{8FA1}\x{8FA2}\x{8FA3}' . '\x{8FA5}\x{8FA6}\x{8FA7}\x{8FA8}\x{8FA9}\x{8FAA}\x{8FAB}\x{8FAC}\x{8FAD}' . '\x{8FAE}\x{8FAF}\x{8FB0}\x{8FB1}\x{8FB2}\x{8FB4}\x{8FB5}\x{8FB6}\x{8FB7}' . '\x{8FB8}\x{8FB9}\x{8FBB}\x{8FBC}\x{8FBD}\x{8FBE}\x{8FBF}\x{8FC0}\x{8FC1}' . '\x{8FC2}\x{8FC4}\x{8FC5}\x{8FC6}\x{8FC7}\x{8FC8}\x{8FC9}\x{8FCB}\x{8FCC}' . '\x{8FCD}\x{8FCE}\x{8FCF}\x{8FD0}\x{8FD1}\x{8FD2}\x{8FD3}\x{8FD4}\x{8FD5}' . '\x{8FD6}\x{8FD7}\x{8FD8}\x{8FD9}\x{8FDA}\x{8FDB}\x{8FDC}\x{8FDD}\x{8FDE}' . '\x{8FDF}\x{8FE0}\x{8FE1}\x{8FE2}\x{8FE3}\x{8FE4}\x{8FE5}\x{8FE6}\x{8FE8}' . '\x{8FE9}\x{8FEA}\x{8FEB}\x{8FEC}\x{8FED}\x{8FEE}\x{8FEF}\x{8FF0}\x{8FF1}' . '\x{8FF2}\x{8FF3}\x{8FF4}\x{8FF5}\x{8FF6}\x{8FF7}\x{8FF8}\x{8FF9}\x{8FFA}' . '\x{8FFB}\x{8FFC}\x{8FFD}\x{8FFE}\x{8FFF}\x{9000}\x{9001}\x{9002}\x{9003}' . '\x{9004}\x{9005}\x{9006}\x{9007}\x{9008}\x{9009}\x{900A}\x{900B}\x{900C}' . '\x{900D}\x{900F}\x{9010}\x{9011}\x{9012}\x{9013}\x{9014}\x{9015}\x{9016}' . '\x{9017}\x{9018}\x{9019}\x{901A}\x{901B}\x{901C}\x{901D}\x{901E}\x{901F}' . '\x{9020}\x{9021}\x{9022}\x{9023}\x{9024}\x{9025}\x{9026}\x{9027}\x{9028}' . '\x{9029}\x{902B}\x{902D}\x{902E}\x{902F}\x{9030}\x{9031}\x{9032}\x{9033}' . '\x{9034}\x{9035}\x{9036}\x{9038}\x{903A}\x{903B}\x{903C}\x{903D}\x{903E}' . '\x{903F}\x{9041}\x{9042}\x{9043}\x{9044}\x{9045}\x{9047}\x{9048}\x{9049}' . '\x{904A}\x{904B}\x{904C}\x{904D}\x{904E}\x{904F}\x{9050}\x{9051}\x{9052}' . '\x{9053}\x{9054}\x{9055}\x{9056}\x{9057}\x{9058}\x{9059}\x{905A}\x{905B}' . '\x{905C}\x{905D}\x{905E}\x{905F}\x{9060}\x{9061}\x{9062}\x{9063}\x{9064}' . '\x{9065}\x{9066}\x{9067}\x{9068}\x{9069}\x{906A}\x{906B}\x{906C}\x{906D}' . '\x{906E}\x{906F}\x{9070}\x{9071}\x{9072}\x{9073}\x{9074}\x{9075}\x{9076}' . '\x{9077}\x{9078}\x{9079}\x{907A}\x{907B}\x{907C}\x{907D}\x{907E}\x{907F}' . '\x{9080}\x{9081}\x{9082}\x{9083}\x{9084}\x{9085}\x{9086}\x{9087}\x{9088}' . '\x{9089}\x{908A}\x{908B}\x{908C}\x{908D}\x{908E}\x{908F}\x{9090}\x{9091}' . '\x{9092}\x{9093}\x{9094}\x{9095}\x{9096}\x{9097}\x{9098}\x{9099}\x{909A}' . '\x{909B}\x{909C}\x{909D}\x{909E}\x{909F}\x{90A0}\x{90A1}\x{90A2}\x{90A3}' . '\x{90A4}\x{90A5}\x{90A6}\x{90A7}\x{90A8}\x{90A9}\x{90AA}\x{90AC}\x{90AD}' . '\x{90AE}\x{90AF}\x{90B0}\x{90B1}\x{90B2}\x{90B3}\x{90B4}\x{90B5}\x{90B6}' . '\x{90B7}\x{90B8}\x{90B9}\x{90BA}\x{90BB}\x{90BC}\x{90BD}\x{90BE}\x{90BF}' . '\x{90C0}\x{90C1}\x{90C2}\x{90C3}\x{90C4}\x{90C5}\x{90C6}\x{90C7}\x{90C8}' . '\x{90C9}\x{90CA}\x{90CB}\x{90CE}\x{90CF}\x{90D0}\x{90D1}\x{90D3}\x{90D4}' . '\x{90D5}\x{90D6}\x{90D7}\x{90D8}\x{90D9}\x{90DA}\x{90DB}\x{90DC}\x{90DD}' . '\x{90DE}\x{90DF}\x{90E0}\x{90E1}\x{90E2}\x{90E3}\x{90E4}\x{90E5}\x{90E6}' . '\x{90E7}\x{90E8}\x{90E9}\x{90EA}\x{90EB}\x{90EC}\x{90ED}\x{90EE}\x{90EF}' . '\x{90F0}\x{90F1}\x{90F2}\x{90F3}\x{90F4}\x{90F5}\x{90F7}\x{90F8}\x{90F9}' . '\x{90FA}\x{90FB}\x{90FC}\x{90FD}\x{90FE}\x{90FF}\x{9100}\x{9101}\x{9102}' . '\x{9103}\x{9104}\x{9105}\x{9106}\x{9107}\x{9108}\x{9109}\x{910B}\x{910C}' . '\x{910D}\x{910E}\x{910F}\x{9110}\x{9111}\x{9112}\x{9113}\x{9114}\x{9115}' . '\x{9116}\x{9117}\x{9118}\x{9119}\x{911A}\x{911B}\x{911C}\x{911D}\x{911E}' . '\x{911F}\x{9120}\x{9121}\x{9122}\x{9123}\x{9124}\x{9125}\x{9126}\x{9127}' . '\x{9128}\x{9129}\x{912A}\x{912B}\x{912C}\x{912D}\x{912E}\x{912F}\x{9130}' . '\x{9131}\x{9132}\x{9133}\x{9134}\x{9135}\x{9136}\x{9137}\x{9138}\x{9139}' . '\x{913A}\x{913B}\x{913E}\x{913F}\x{9140}\x{9141}\x{9142}\x{9143}\x{9144}' . '\x{9145}\x{9146}\x{9147}\x{9148}\x{9149}\x{914A}\x{914B}\x{914C}\x{914D}' . '\x{914E}\x{914F}\x{9150}\x{9151}\x{9152}\x{9153}\x{9154}\x{9155}\x{9156}' . '\x{9157}\x{9158}\x{915A}\x{915B}\x{915C}\x{915D}\x{915E}\x{915F}\x{9160}' . '\x{9161}\x{9162}\x{9163}\x{9164}\x{9165}\x{9166}\x{9167}\x{9168}\x{9169}' . '\x{916A}\x{916B}\x{916C}\x{916D}\x{916E}\x{916F}\x{9170}\x{9171}\x{9172}' . '\x{9173}\x{9174}\x{9175}\x{9176}\x{9177}\x{9178}\x{9179}\x{917A}\x{917C}' . '\x{917D}\x{917E}\x{917F}\x{9180}\x{9181}\x{9182}\x{9183}\x{9184}\x{9185}' . '\x{9186}\x{9187}\x{9188}\x{9189}\x{918A}\x{918B}\x{918C}\x{918D}\x{918E}' . '\x{918F}\x{9190}\x{9191}\x{9192}\x{9193}\x{9194}\x{9196}\x{9199}\x{919A}' . '\x{919B}\x{919C}\x{919D}\x{919E}\x{919F}\x{91A0}\x{91A1}\x{91A2}\x{91A3}' . '\x{91A5}\x{91A6}\x{91A7}\x{91A8}\x{91AA}\x{91AB}\x{91AC}\x{91AD}\x{91AE}' . '\x{91AF}\x{91B0}\x{91B1}\x{91B2}\x{91B3}\x{91B4}\x{91B5}\x{91B6}\x{91B7}' . '\x{91B9}\x{91BA}\x{91BB}\x{91BC}\x{91BD}\x{91BE}\x{91C0}\x{91C1}\x{91C2}' . '\x{91C3}\x{91C5}\x{91C6}\x{91C7}\x{91C9}\x{91CA}\x{91CB}\x{91CC}\x{91CD}' . '\x{91CE}\x{91CF}\x{91D0}\x{91D1}\x{91D2}\x{91D3}\x{91D4}\x{91D5}\x{91D7}' . '\x{91D8}\x{91D9}\x{91DA}\x{91DB}\x{91DC}\x{91DD}\x{91DE}\x{91DF}\x{91E2}' . '\x{91E3}\x{91E4}\x{91E5}\x{91E6}\x{91E7}\x{91E8}\x{91E9}\x{91EA}\x{91EB}' . '\x{91EC}\x{91ED}\x{91EE}\x{91F0}\x{91F1}\x{91F2}\x{91F3}\x{91F4}\x{91F5}' . '\x{91F7}\x{91F8}\x{91F9}\x{91FA}\x{91FB}\x{91FD}\x{91FE}\x{91FF}\x{9200}' . '\x{9201}\x{9202}\x{9203}\x{9204}\x{9205}\x{9206}\x{9207}\x{9208}\x{9209}' . '\x{920A}\x{920B}\x{920C}\x{920D}\x{920E}\x{920F}\x{9210}\x{9211}\x{9212}' . '\x{9214}\x{9215}\x{9216}\x{9217}\x{9218}\x{9219}\x{921A}\x{921B}\x{921C}' . '\x{921D}\x{921E}\x{9220}\x{9221}\x{9223}\x{9224}\x{9225}\x{9226}\x{9227}' . '\x{9228}\x{9229}\x{922A}\x{922B}\x{922D}\x{922E}\x{922F}\x{9230}\x{9231}' . '\x{9232}\x{9233}\x{9234}\x{9235}\x{9236}\x{9237}\x{9238}\x{9239}\x{923A}' . '\x{923B}\x{923C}\x{923D}\x{923E}\x{923F}\x{9240}\x{9241}\x{9242}\x{9245}' . '\x{9246}\x{9247}\x{9248}\x{9249}\x{924A}\x{924B}\x{924C}\x{924D}\x{924E}' . '\x{924F}\x{9250}\x{9251}\x{9252}\x{9253}\x{9254}\x{9255}\x{9256}\x{9257}' . '\x{9258}\x{9259}\x{925A}\x{925B}\x{925C}\x{925D}\x{925E}\x{925F}\x{9260}' . '\x{9261}\x{9262}\x{9263}\x{9264}\x{9265}\x{9266}\x{9267}\x{9268}\x{926B}' . '\x{926C}\x{926D}\x{926E}\x{926F}\x{9270}\x{9272}\x{9273}\x{9274}\x{9275}' . '\x{9276}\x{9277}\x{9278}\x{9279}\x{927A}\x{927B}\x{927C}\x{927D}\x{927E}' . '\x{927F}\x{9280}\x{9282}\x{9283}\x{9285}\x{9286}\x{9287}\x{9288}\x{9289}' . '\x{928A}\x{928B}\x{928C}\x{928D}\x{928E}\x{928F}\x{9290}\x{9291}\x{9292}' . '\x{9293}\x{9294}\x{9295}\x{9296}\x{9297}\x{9298}\x{9299}\x{929A}\x{929B}' . '\x{929C}\x{929D}\x{929F}\x{92A0}\x{92A1}\x{92A2}\x{92A3}\x{92A4}\x{92A5}' . '\x{92A6}\x{92A7}\x{92A8}\x{92A9}\x{92AA}\x{92AB}\x{92AC}\x{92AD}\x{92AE}' . '\x{92AF}\x{92B0}\x{92B1}\x{92B2}\x{92B3}\x{92B4}\x{92B5}\x{92B6}\x{92B7}' . '\x{92B8}\x{92B9}\x{92BA}\x{92BB}\x{92BC}\x{92BE}\x{92BF}\x{92C0}\x{92C1}' . '\x{92C2}\x{92C3}\x{92C4}\x{92C5}\x{92C6}\x{92C7}\x{92C8}\x{92C9}\x{92CA}' . '\x{92CB}\x{92CC}\x{92CD}\x{92CE}\x{92CF}\x{92D0}\x{92D1}\x{92D2}\x{92D3}' . '\x{92D5}\x{92D6}\x{92D7}\x{92D8}\x{92D9}\x{92DA}\x{92DC}\x{92DD}\x{92DE}' . '\x{92DF}\x{92E0}\x{92E1}\x{92E3}\x{92E4}\x{92E5}\x{92E6}\x{92E7}\x{92E8}' . '\x{92E9}\x{92EA}\x{92EB}\x{92EC}\x{92ED}\x{92EE}\x{92EF}\x{92F0}\x{92F1}' . '\x{92F2}\x{92F3}\x{92F4}\x{92F5}\x{92F6}\x{92F7}\x{92F8}\x{92F9}\x{92FA}' . '\x{92FB}\x{92FC}\x{92FD}\x{92FE}\x{92FF}\x{9300}\x{9301}\x{9302}\x{9303}' . '\x{9304}\x{9305}\x{9306}\x{9307}\x{9308}\x{9309}\x{930A}\x{930B}\x{930C}' . '\x{930D}\x{930E}\x{930F}\x{9310}\x{9311}\x{9312}\x{9313}\x{9314}\x{9315}' . '\x{9316}\x{9317}\x{9318}\x{9319}\x{931A}\x{931B}\x{931D}\x{931E}\x{931F}' . '\x{9320}\x{9321}\x{9322}\x{9323}\x{9324}\x{9325}\x{9326}\x{9327}\x{9328}' . '\x{9329}\x{932A}\x{932B}\x{932D}\x{932E}\x{932F}\x{9332}\x{9333}\x{9334}' . '\x{9335}\x{9336}\x{9337}\x{9338}\x{9339}\x{933A}\x{933B}\x{933C}\x{933D}' . '\x{933E}\x{933F}\x{9340}\x{9341}\x{9342}\x{9343}\x{9344}\x{9345}\x{9346}' . '\x{9347}\x{9348}\x{9349}\x{934A}\x{934B}\x{934C}\x{934D}\x{934E}\x{934F}' . '\x{9350}\x{9351}\x{9352}\x{9353}\x{9354}\x{9355}\x{9356}\x{9357}\x{9358}' . '\x{9359}\x{935A}\x{935B}\x{935C}\x{935D}\x{935E}\x{935F}\x{9360}\x{9361}' . '\x{9363}\x{9364}\x{9365}\x{9366}\x{9367}\x{9369}\x{936A}\x{936C}\x{936D}' . '\x{936E}\x{9370}\x{9371}\x{9372}\x{9374}\x{9375}\x{9376}\x{9377}\x{9379}' . '\x{937A}\x{937B}\x{937C}\x{937D}\x{937E}\x{9380}\x{9382}\x{9383}\x{9384}' . '\x{9385}\x{9386}\x{9387}\x{9388}\x{9389}\x{938A}\x{938C}\x{938D}\x{938E}' . '\x{938F}\x{9390}\x{9391}\x{9392}\x{9393}\x{9394}\x{9395}\x{9396}\x{9397}' . '\x{9398}\x{9399}\x{939A}\x{939B}\x{939D}\x{939E}\x{939F}\x{93A1}\x{93A2}' . '\x{93A3}\x{93A4}\x{93A5}\x{93A6}\x{93A7}\x{93A8}\x{93A9}\x{93AA}\x{93AC}' . '\x{93AD}\x{93AE}\x{93AF}\x{93B0}\x{93B1}\x{93B2}\x{93B3}\x{93B4}\x{93B5}' . '\x{93B6}\x{93B7}\x{93B8}\x{93B9}\x{93BA}\x{93BC}\x{93BD}\x{93BE}\x{93BF}' . '\x{93C0}\x{93C1}\x{93C2}\x{93C3}\x{93C4}\x{93C5}\x{93C6}\x{93C7}\x{93C8}' . '\x{93C9}\x{93CA}\x{93CB}\x{93CC}\x{93CD}\x{93CE}\x{93CF}\x{93D0}\x{93D1}' . '\x{93D2}\x{93D3}\x{93D4}\x{93D5}\x{93D6}\x{93D7}\x{93D8}\x{93D9}\x{93DA}' . '\x{93DB}\x{93DC}\x{93DD}\x{93DE}\x{93DF}\x{93E1}\x{93E2}\x{93E3}\x{93E4}' . '\x{93E6}\x{93E7}\x{93E8}\x{93E9}\x{93EA}\x{93EB}\x{93EC}\x{93ED}\x{93EE}' . '\x{93EF}\x{93F0}\x{93F1}\x{93F2}\x{93F4}\x{93F5}\x{93F6}\x{93F7}\x{93F8}' . '\x{93F9}\x{93FA}\x{93FB}\x{93FC}\x{93FD}\x{93FE}\x{93FF}\x{9400}\x{9401}' . '\x{9403}\x{9404}\x{9405}\x{9406}\x{9407}\x{9408}\x{9409}\x{940A}\x{940B}' . '\x{940C}\x{940D}\x{940E}\x{940F}\x{9410}\x{9411}\x{9412}\x{9413}\x{9414}' . '\x{9415}\x{9416}\x{9418}\x{9419}\x{941B}\x{941D}\x{9420}\x{9422}\x{9423}' . '\x{9425}\x{9426}\x{9427}\x{9428}\x{9429}\x{942A}\x{942B}\x{942C}\x{942D}' . '\x{942E}\x{942F}\x{9430}\x{9431}\x{9432}\x{9433}\x{9434}\x{9435}\x{9436}' . '\x{9437}\x{9438}\x{9439}\x{943A}\x{943B}\x{943C}\x{943D}\x{943E}\x{943F}' . '\x{9440}\x{9441}\x{9442}\x{9444}\x{9445}\x{9446}\x{9447}\x{9448}\x{9449}' . '\x{944A}\x{944B}\x{944C}\x{944D}\x{944F}\x{9450}\x{9451}\x{9452}\x{9453}' . '\x{9454}\x{9455}\x{9456}\x{9457}\x{9458}\x{9459}\x{945B}\x{945C}\x{945D}' . '\x{945E}\x{945F}\x{9460}\x{9461}\x{9462}\x{9463}\x{9464}\x{9465}\x{9466}' . '\x{9467}\x{9468}\x{9469}\x{946A}\x{946B}\x{946D}\x{946E}\x{946F}\x{9470}' . '\x{9471}\x{9472}\x{9473}\x{9474}\x{9475}\x{9476}\x{9477}\x{9478}\x{9479}' . '\x{947A}\x{947C}\x{947D}\x{947E}\x{947F}\x{9480}\x{9481}\x{9482}\x{9483}' . '\x{9484}\x{9485}\x{9486}\x{9487}\x{9488}\x{9489}\x{948A}\x{948B}\x{948C}' . '\x{948D}\x{948E}\x{948F}\x{9490}\x{9491}\x{9492}\x{9493}\x{9494}\x{9495}' . '\x{9496}\x{9497}\x{9498}\x{9499}\x{949A}\x{949B}\x{949C}\x{949D}\x{949E}' . '\x{949F}\x{94A0}\x{94A1}\x{94A2}\x{94A3}\x{94A4}\x{94A5}\x{94A6}\x{94A7}' . '\x{94A8}\x{94A9}\x{94AA}\x{94AB}\x{94AC}\x{94AD}\x{94AE}\x{94AF}\x{94B0}' . '\x{94B1}\x{94B2}\x{94B3}\x{94B4}\x{94B5}\x{94B6}\x{94B7}\x{94B8}\x{94B9}' . '\x{94BA}\x{94BB}\x{94BC}\x{94BD}\x{94BE}\x{94BF}\x{94C0}\x{94C1}\x{94C2}' . '\x{94C3}\x{94C4}\x{94C5}\x{94C6}\x{94C7}\x{94C8}\x{94C9}\x{94CA}\x{94CB}' . '\x{94CC}\x{94CD}\x{94CE}\x{94CF}\x{94D0}\x{94D1}\x{94D2}\x{94D3}\x{94D4}' . '\x{94D5}\x{94D6}\x{94D7}\x{94D8}\x{94D9}\x{94DA}\x{94DB}\x{94DC}\x{94DD}' . '\x{94DE}\x{94DF}\x{94E0}\x{94E1}\x{94E2}\x{94E3}\x{94E4}\x{94E5}\x{94E6}' . '\x{94E7}\x{94E8}\x{94E9}\x{94EA}\x{94EB}\x{94EC}\x{94ED}\x{94EE}\x{94EF}' . '\x{94F0}\x{94F1}\x{94F2}\x{94F3}\x{94F4}\x{94F5}\x{94F6}\x{94F7}\x{94F8}' . '\x{94F9}\x{94FA}\x{94FB}\x{94FC}\x{94FD}\x{94FE}\x{94FF}\x{9500}\x{9501}' . '\x{9502}\x{9503}\x{9504}\x{9505}\x{9506}\x{9507}\x{9508}\x{9509}\x{950A}' . '\x{950B}\x{950C}\x{950D}\x{950E}\x{950F}\x{9510}\x{9511}\x{9512}\x{9513}' . '\x{9514}\x{9515}\x{9516}\x{9517}\x{9518}\x{9519}\x{951A}\x{951B}\x{951C}' . '\x{951D}\x{951E}\x{951F}\x{9520}\x{9521}\x{9522}\x{9523}\x{9524}\x{9525}' . '\x{9526}\x{9527}\x{9528}\x{9529}\x{952A}\x{952B}\x{952C}\x{952D}\x{952E}' . '\x{952F}\x{9530}\x{9531}\x{9532}\x{9533}\x{9534}\x{9535}\x{9536}\x{9537}' . '\x{9538}\x{9539}\x{953A}\x{953B}\x{953C}\x{953D}\x{953E}\x{953F}\x{9540}' . '\x{9541}\x{9542}\x{9543}\x{9544}\x{9545}\x{9546}\x{9547}\x{9548}\x{9549}' . '\x{954A}\x{954B}\x{954C}\x{954D}\x{954E}\x{954F}\x{9550}\x{9551}\x{9552}' . '\x{9553}\x{9554}\x{9555}\x{9556}\x{9557}\x{9558}\x{9559}\x{955A}\x{955B}' . '\x{955C}\x{955D}\x{955E}\x{955F}\x{9560}\x{9561}\x{9562}\x{9563}\x{9564}' . '\x{9565}\x{9566}\x{9567}\x{9568}\x{9569}\x{956A}\x{956B}\x{956C}\x{956D}' . '\x{956E}\x{956F}\x{9570}\x{9571}\x{9572}\x{9573}\x{9574}\x{9575}\x{9576}' . '\x{9577}\x{957A}\x{957B}\x{957C}\x{957D}\x{957F}\x{9580}\x{9581}\x{9582}' . '\x{9583}\x{9584}\x{9586}\x{9587}\x{9588}\x{9589}\x{958A}\x{958B}\x{958C}' . '\x{958D}\x{958E}\x{958F}\x{9590}\x{9591}\x{9592}\x{9593}\x{9594}\x{9595}' . '\x{9596}\x{9598}\x{9599}\x{959A}\x{959B}\x{959C}\x{959D}\x{959E}\x{959F}' . '\x{95A1}\x{95A2}\x{95A3}\x{95A4}\x{95A5}\x{95A6}\x{95A7}\x{95A8}\x{95A9}' . '\x{95AA}\x{95AB}\x{95AC}\x{95AD}\x{95AE}\x{95AF}\x{95B0}\x{95B1}\x{95B2}' . '\x{95B5}\x{95B6}\x{95B7}\x{95B9}\x{95BA}\x{95BB}\x{95BC}\x{95BD}\x{95BE}' . '\x{95BF}\x{95C0}\x{95C2}\x{95C3}\x{95C4}\x{95C5}\x{95C6}\x{95C7}\x{95C8}' . '\x{95C9}\x{95CA}\x{95CB}\x{95CC}\x{95CD}\x{95CE}\x{95CF}\x{95D0}\x{95D1}' . '\x{95D2}\x{95D3}\x{95D4}\x{95D5}\x{95D6}\x{95D7}\x{95D8}\x{95DA}\x{95DB}' . '\x{95DC}\x{95DE}\x{95DF}\x{95E0}\x{95E1}\x{95E2}\x{95E3}\x{95E4}\x{95E5}' . '\x{95E6}\x{95E7}\x{95E8}\x{95E9}\x{95EA}\x{95EB}\x{95EC}\x{95ED}\x{95EE}' . '\x{95EF}\x{95F0}\x{95F1}\x{95F2}\x{95F3}\x{95F4}\x{95F5}\x{95F6}\x{95F7}' . '\x{95F8}\x{95F9}\x{95FA}\x{95FB}\x{95FC}\x{95FD}\x{95FE}\x{95FF}\x{9600}' . '\x{9601}\x{9602}\x{9603}\x{9604}\x{9605}\x{9606}\x{9607}\x{9608}\x{9609}' . '\x{960A}\x{960B}\x{960C}\x{960D}\x{960E}\x{960F}\x{9610}\x{9611}\x{9612}' . '\x{9613}\x{9614}\x{9615}\x{9616}\x{9617}\x{9618}\x{9619}\x{961A}\x{961B}' . '\x{961C}\x{961D}\x{961E}\x{961F}\x{9620}\x{9621}\x{9622}\x{9623}\x{9624}' . '\x{9627}\x{9628}\x{962A}\x{962B}\x{962C}\x{962D}\x{962E}\x{962F}\x{9630}' . '\x{9631}\x{9632}\x{9633}\x{9634}\x{9635}\x{9636}\x{9637}\x{9638}\x{9639}' . '\x{963A}\x{963B}\x{963C}\x{963D}\x{963F}\x{9640}\x{9641}\x{9642}\x{9643}' . '\x{9644}\x{9645}\x{9646}\x{9647}\x{9648}\x{9649}\x{964A}\x{964B}\x{964C}' . '\x{964D}\x{964E}\x{964F}\x{9650}\x{9651}\x{9652}\x{9653}\x{9654}\x{9655}' . '\x{9658}\x{9659}\x{965A}\x{965B}\x{965C}\x{965D}\x{965E}\x{965F}\x{9660}' . '\x{9661}\x{9662}\x{9663}\x{9664}\x{9666}\x{9667}\x{9668}\x{9669}\x{966A}' . '\x{966B}\x{966C}\x{966D}\x{966E}\x{966F}\x{9670}\x{9671}\x{9672}\x{9673}' . '\x{9674}\x{9675}\x{9676}\x{9677}\x{9678}\x{967C}\x{967D}\x{967E}\x{9680}' . '\x{9683}\x{9684}\x{9685}\x{9686}\x{9687}\x{9688}\x{9689}\x{968A}\x{968B}' . '\x{968D}\x{968E}\x{968F}\x{9690}\x{9691}\x{9692}\x{9693}\x{9694}\x{9695}' . '\x{9697}\x{9698}\x{9699}\x{969B}\x{969C}\x{969E}\x{96A0}\x{96A1}\x{96A2}' . '\x{96A3}\x{96A4}\x{96A5}\x{96A6}\x{96A7}\x{96A8}\x{96A9}\x{96AA}\x{96AC}' . '\x{96AD}\x{96AE}\x{96B0}\x{96B1}\x{96B3}\x{96B4}\x{96B6}\x{96B7}\x{96B8}' . '\x{96B9}\x{96BA}\x{96BB}\x{96BC}\x{96BD}\x{96BE}\x{96BF}\x{96C0}\x{96C1}' . '\x{96C2}\x{96C3}\x{96C4}\x{96C5}\x{96C6}\x{96C7}\x{96C8}\x{96C9}\x{96CA}' . '\x{96CB}\x{96CC}\x{96CD}\x{96CE}\x{96CF}\x{96D0}\x{96D1}\x{96D2}\x{96D3}' . '\x{96D4}\x{96D5}\x{96D6}\x{96D7}\x{96D8}\x{96D9}\x{96DA}\x{96DB}\x{96DC}' . '\x{96DD}\x{96DE}\x{96DF}\x{96E0}\x{96E1}\x{96E2}\x{96E3}\x{96E5}\x{96E8}' . '\x{96E9}\x{96EA}\x{96EB}\x{96EC}\x{96ED}\x{96EE}\x{96EF}\x{96F0}\x{96F1}' . '\x{96F2}\x{96F3}\x{96F4}\x{96F5}\x{96F6}\x{96F7}\x{96F8}\x{96F9}\x{96FA}' . '\x{96FB}\x{96FD}\x{96FE}\x{96FF}\x{9700}\x{9701}\x{9702}\x{9703}\x{9704}' . '\x{9705}\x{9706}\x{9707}\x{9708}\x{9709}\x{970A}\x{970B}\x{970C}\x{970D}' . '\x{970E}\x{970F}\x{9710}\x{9711}\x{9712}\x{9713}\x{9715}\x{9716}\x{9718}' . '\x{9719}\x{971C}\x{971D}\x{971E}\x{971F}\x{9720}\x{9721}\x{9722}\x{9723}' . '\x{9724}\x{9725}\x{9726}\x{9727}\x{9728}\x{9729}\x{972A}\x{972B}\x{972C}' . '\x{972D}\x{972E}\x{972F}\x{9730}\x{9731}\x{9732}\x{9735}\x{9736}\x{9738}' . '\x{9739}\x{973A}\x{973B}\x{973C}\x{973D}\x{973E}\x{973F}\x{9742}\x{9743}' . '\x{9744}\x{9745}\x{9746}\x{9747}\x{9748}\x{9749}\x{974A}\x{974B}\x{974C}' . '\x{974E}\x{974F}\x{9750}\x{9751}\x{9752}\x{9753}\x{9754}\x{9755}\x{9756}' . '\x{9758}\x{9759}\x{975A}\x{975B}\x{975C}\x{975D}\x{975E}\x{975F}\x{9760}' . '\x{9761}\x{9762}\x{9765}\x{9766}\x{9767}\x{9768}\x{9769}\x{976A}\x{976B}' . '\x{976C}\x{976D}\x{976E}\x{976F}\x{9770}\x{9772}\x{9773}\x{9774}\x{9776}' . '\x{9777}\x{9778}\x{9779}\x{977A}\x{977B}\x{977C}\x{977D}\x{977E}\x{977F}' . '\x{9780}\x{9781}\x{9782}\x{9783}\x{9784}\x{9785}\x{9786}\x{9788}\x{978A}' . '\x{978B}\x{978C}\x{978D}\x{978E}\x{978F}\x{9790}\x{9791}\x{9792}\x{9793}' . '\x{9794}\x{9795}\x{9796}\x{9797}\x{9798}\x{9799}\x{979A}\x{979C}\x{979D}' . '\x{979E}\x{979F}\x{97A0}\x{97A1}\x{97A2}\x{97A3}\x{97A4}\x{97A5}\x{97A6}' . '\x{97A7}\x{97A8}\x{97AA}\x{97AB}\x{97AC}\x{97AD}\x{97AE}\x{97AF}\x{97B2}' . '\x{97B3}\x{97B4}\x{97B6}\x{97B7}\x{97B8}\x{97B9}\x{97BA}\x{97BB}\x{97BC}' . '\x{97BD}\x{97BF}\x{97C1}\x{97C2}\x{97C3}\x{97C4}\x{97C5}\x{97C6}\x{97C7}' . '\x{97C8}\x{97C9}\x{97CA}\x{97CB}\x{97CC}\x{97CD}\x{97CE}\x{97CF}\x{97D0}' . '\x{97D1}\x{97D3}\x{97D4}\x{97D5}\x{97D6}\x{97D7}\x{97D8}\x{97D9}\x{97DA}' . '\x{97DB}\x{97DC}\x{97DD}\x{97DE}\x{97DF}\x{97E0}\x{97E1}\x{97E2}\x{97E3}' . '\x{97E4}\x{97E5}\x{97E6}\x{97E7}\x{97E8}\x{97E9}\x{97EA}\x{97EB}\x{97EC}' . '\x{97ED}\x{97EE}\x{97EF}\x{97F0}\x{97F1}\x{97F2}\x{97F3}\x{97F4}\x{97F5}' . '\x{97F6}\x{97F7}\x{97F8}\x{97F9}\x{97FA}\x{97FB}\x{97FD}\x{97FE}\x{97FF}' . '\x{9800}\x{9801}\x{9802}\x{9803}\x{9804}\x{9805}\x{9806}\x{9807}\x{9808}' . '\x{9809}\x{980A}\x{980B}\x{980C}\x{980D}\x{980E}\x{980F}\x{9810}\x{9811}' . '\x{9812}\x{9813}\x{9814}\x{9815}\x{9816}\x{9817}\x{9818}\x{9819}\x{981A}' . '\x{981B}\x{981C}\x{981D}\x{981E}\x{9820}\x{9821}\x{9822}\x{9823}\x{9824}' . '\x{9826}\x{9827}\x{9828}\x{9829}\x{982B}\x{982D}\x{982E}\x{982F}\x{9830}' . '\x{9831}\x{9832}\x{9834}\x{9835}\x{9836}\x{9837}\x{9838}\x{9839}\x{983B}' . '\x{983C}\x{983D}\x{983F}\x{9840}\x{9841}\x{9843}\x{9844}\x{9845}\x{9846}' . '\x{9848}\x{9849}\x{984A}\x{984C}\x{984D}\x{984E}\x{984F}\x{9850}\x{9851}' . '\x{9852}\x{9853}\x{9854}\x{9855}\x{9857}\x{9858}\x{9859}\x{985A}\x{985B}' . '\x{985C}\x{985D}\x{985E}\x{985F}\x{9860}\x{9861}\x{9862}\x{9863}\x{9864}' . '\x{9865}\x{9867}\x{9869}\x{986A}\x{986B}\x{986C}\x{986D}\x{986E}\x{986F}' . '\x{9870}\x{9871}\x{9872}\x{9873}\x{9874}\x{9875}\x{9876}\x{9877}\x{9878}' . '\x{9879}\x{987A}\x{987B}\x{987C}\x{987D}\x{987E}\x{987F}\x{9880}\x{9881}' . '\x{9882}\x{9883}\x{9884}\x{9885}\x{9886}\x{9887}\x{9888}\x{9889}\x{988A}' . '\x{988B}\x{988C}\x{988D}\x{988E}\x{988F}\x{9890}\x{9891}\x{9892}\x{9893}' . '\x{9894}\x{9895}\x{9896}\x{9897}\x{9898}\x{9899}\x{989A}\x{989B}\x{989C}' . '\x{989D}\x{989E}\x{989F}\x{98A0}\x{98A1}\x{98A2}\x{98A3}\x{98A4}\x{98A5}' . '\x{98A6}\x{98A7}\x{98A8}\x{98A9}\x{98AA}\x{98AB}\x{98AC}\x{98AD}\x{98AE}' . '\x{98AF}\x{98B0}\x{98B1}\x{98B2}\x{98B3}\x{98B4}\x{98B5}\x{98B6}\x{98B8}' . '\x{98B9}\x{98BA}\x{98BB}\x{98BC}\x{98BD}\x{98BE}\x{98BF}\x{98C0}\x{98C1}' . '\x{98C2}\x{98C3}\x{98C4}\x{98C5}\x{98C6}\x{98C8}\x{98C9}\x{98CB}\x{98CC}' . '\x{98CD}\x{98CE}\x{98CF}\x{98D0}\x{98D1}\x{98D2}\x{98D3}\x{98D4}\x{98D5}' . '\x{98D6}\x{98D7}\x{98D8}\x{98D9}\x{98DA}\x{98DB}\x{98DC}\x{98DD}\x{98DE}' . '\x{98DF}\x{98E0}\x{98E2}\x{98E3}\x{98E5}\x{98E6}\x{98E7}\x{98E8}\x{98E9}' . '\x{98EA}\x{98EB}\x{98ED}\x{98EF}\x{98F0}\x{98F2}\x{98F3}\x{98F4}\x{98F5}' . '\x{98F6}\x{98F7}\x{98F9}\x{98FA}\x{98FC}\x{98FD}\x{98FE}\x{98FF}\x{9900}' . '\x{9901}\x{9902}\x{9903}\x{9904}\x{9905}\x{9906}\x{9907}\x{9908}\x{9909}' . '\x{990A}\x{990B}\x{990C}\x{990D}\x{990E}\x{990F}\x{9910}\x{9911}\x{9912}' . '\x{9913}\x{9914}\x{9915}\x{9916}\x{9917}\x{9918}\x{991A}\x{991B}\x{991C}' . '\x{991D}\x{991E}\x{991F}\x{9920}\x{9921}\x{9922}\x{9923}\x{9924}\x{9925}' . '\x{9926}\x{9927}\x{9928}\x{9929}\x{992A}\x{992B}\x{992C}\x{992D}\x{992E}' . '\x{992F}\x{9930}\x{9931}\x{9932}\x{9933}\x{9934}\x{9935}\x{9936}\x{9937}' . '\x{9938}\x{9939}\x{993A}\x{993C}\x{993D}\x{993E}\x{993F}\x{9940}\x{9941}' . '\x{9942}\x{9943}\x{9945}\x{9946}\x{9947}\x{9948}\x{9949}\x{994A}\x{994B}' . '\x{994C}\x{994E}\x{994F}\x{9950}\x{9951}\x{9952}\x{9953}\x{9954}\x{9955}' . '\x{9956}\x{9957}\x{9958}\x{9959}\x{995B}\x{995C}\x{995E}\x{995F}\x{9960}' . '\x{9961}\x{9962}\x{9963}\x{9964}\x{9965}\x{9966}\x{9967}\x{9968}\x{9969}' . '\x{996A}\x{996B}\x{996C}\x{996D}\x{996E}\x{996F}\x{9970}\x{9971}\x{9972}' . '\x{9973}\x{9974}\x{9975}\x{9976}\x{9977}\x{9978}\x{9979}\x{997A}\x{997B}' . '\x{997C}\x{997D}\x{997E}\x{997F}\x{9980}\x{9981}\x{9982}\x{9983}\x{9984}' . '\x{9985}\x{9986}\x{9987}\x{9988}\x{9989}\x{998A}\x{998B}\x{998C}\x{998D}' . '\x{998E}\x{998F}\x{9990}\x{9991}\x{9992}\x{9993}\x{9994}\x{9995}\x{9996}' . '\x{9997}\x{9998}\x{9999}\x{999A}\x{999B}\x{999C}\x{999D}\x{999E}\x{999F}' . '\x{99A0}\x{99A1}\x{99A2}\x{99A3}\x{99A4}\x{99A5}\x{99A6}\x{99A7}\x{99A8}' . '\x{99A9}\x{99AA}\x{99AB}\x{99AC}\x{99AD}\x{99AE}\x{99AF}\x{99B0}\x{99B1}' . '\x{99B2}\x{99B3}\x{99B4}\x{99B5}\x{99B6}\x{99B7}\x{99B8}\x{99B9}\x{99BA}' . '\x{99BB}\x{99BC}\x{99BD}\x{99BE}\x{99C0}\x{99C1}\x{99C2}\x{99C3}\x{99C4}' . '\x{99C6}\x{99C7}\x{99C8}\x{99C9}\x{99CA}\x{99CB}\x{99CC}\x{99CD}\x{99CE}' . '\x{99CF}\x{99D0}\x{99D1}\x{99D2}\x{99D3}\x{99D4}\x{99D5}\x{99D6}\x{99D7}' . '\x{99D8}\x{99D9}\x{99DA}\x{99DB}\x{99DC}\x{99DD}\x{99DE}\x{99DF}\x{99E1}' . '\x{99E2}\x{99E3}\x{99E4}\x{99E5}\x{99E7}\x{99E8}\x{99E9}\x{99EA}\x{99EC}' . '\x{99ED}\x{99EE}\x{99EF}\x{99F0}\x{99F1}\x{99F2}\x{99F3}\x{99F4}\x{99F6}' . '\x{99F7}\x{99F8}\x{99F9}\x{99FA}\x{99FB}\x{99FC}\x{99FD}\x{99FE}\x{99FF}' . '\x{9A00}\x{9A01}\x{9A02}\x{9A03}\x{9A04}\x{9A05}\x{9A06}\x{9A07}\x{9A08}' . '\x{9A09}\x{9A0A}\x{9A0B}\x{9A0C}\x{9A0D}\x{9A0E}\x{9A0F}\x{9A11}\x{9A14}' . '\x{9A15}\x{9A16}\x{9A19}\x{9A1A}\x{9A1B}\x{9A1C}\x{9A1D}\x{9A1E}\x{9A1F}' . '\x{9A20}\x{9A21}\x{9A22}\x{9A23}\x{9A24}\x{9A25}\x{9A26}\x{9A27}\x{9A29}' . '\x{9A2A}\x{9A2B}\x{9A2C}\x{9A2D}\x{9A2E}\x{9A2F}\x{9A30}\x{9A31}\x{9A32}' . '\x{9A33}\x{9A34}\x{9A35}\x{9A36}\x{9A37}\x{9A38}\x{9A39}\x{9A3A}\x{9A3C}' . '\x{9A3D}\x{9A3E}\x{9A3F}\x{9A40}\x{9A41}\x{9A42}\x{9A43}\x{9A44}\x{9A45}' . '\x{9A46}\x{9A47}\x{9A48}\x{9A49}\x{9A4A}\x{9A4B}\x{9A4C}\x{9A4D}\x{9A4E}' . '\x{9A4F}\x{9A50}\x{9A52}\x{9A53}\x{9A54}\x{9A55}\x{9A56}\x{9A57}\x{9A59}' . '\x{9A5A}\x{9A5B}\x{9A5C}\x{9A5E}\x{9A5F}\x{9A60}\x{9A61}\x{9A62}\x{9A64}' . '\x{9A65}\x{9A66}\x{9A67}\x{9A68}\x{9A69}\x{9A6A}\x{9A6B}\x{9A6C}\x{9A6D}' . '\x{9A6E}\x{9A6F}\x{9A70}\x{9A71}\x{9A72}\x{9A73}\x{9A74}\x{9A75}\x{9A76}' . '\x{9A77}\x{9A78}\x{9A79}\x{9A7A}\x{9A7B}\x{9A7C}\x{9A7D}\x{9A7E}\x{9A7F}' . '\x{9A80}\x{9A81}\x{9A82}\x{9A83}\x{9A84}\x{9A85}\x{9A86}\x{9A87}\x{9A88}' . '\x{9A89}\x{9A8A}\x{9A8B}\x{9A8C}\x{9A8D}\x{9A8E}\x{9A8F}\x{9A90}\x{9A91}' . '\x{9A92}\x{9A93}\x{9A94}\x{9A95}\x{9A96}\x{9A97}\x{9A98}\x{9A99}\x{9A9A}' . '\x{9A9B}\x{9A9C}\x{9A9D}\x{9A9E}\x{9A9F}\x{9AA0}\x{9AA1}\x{9AA2}\x{9AA3}' . '\x{9AA4}\x{9AA5}\x{9AA6}\x{9AA7}\x{9AA8}\x{9AAA}\x{9AAB}\x{9AAC}\x{9AAD}' . '\x{9AAE}\x{9AAF}\x{9AB0}\x{9AB1}\x{9AB2}\x{9AB3}\x{9AB4}\x{9AB5}\x{9AB6}' . '\x{9AB7}\x{9AB8}\x{9AB9}\x{9ABA}\x{9ABB}\x{9ABC}\x{9ABE}\x{9ABF}\x{9AC0}' . '\x{9AC1}\x{9AC2}\x{9AC3}\x{9AC4}\x{9AC5}\x{9AC6}\x{9AC7}\x{9AC9}\x{9ACA}' . '\x{9ACB}\x{9ACC}\x{9ACD}\x{9ACE}\x{9ACF}\x{9AD0}\x{9AD1}\x{9AD2}\x{9AD3}' . '\x{9AD4}\x{9AD5}\x{9AD6}\x{9AD8}\x{9AD9}\x{9ADA}\x{9ADB}\x{9ADC}\x{9ADD}' . '\x{9ADE}\x{9ADF}\x{9AE1}\x{9AE2}\x{9AE3}\x{9AE5}\x{9AE6}\x{9AE7}\x{9AEA}' . '\x{9AEB}\x{9AEC}\x{9AED}\x{9AEE}\x{9AEF}\x{9AF1}\x{9AF2}\x{9AF3}\x{9AF4}' . '\x{9AF5}\x{9AF6}\x{9AF7}\x{9AF8}\x{9AF9}\x{9AFA}\x{9AFB}\x{9AFC}\x{9AFD}' . '\x{9AFE}\x{9AFF}\x{9B01}\x{9B03}\x{9B04}\x{9B05}\x{9B06}\x{9B07}\x{9B08}' . '\x{9B0A}\x{9B0B}\x{9B0C}\x{9B0D}\x{9B0E}\x{9B0F}\x{9B10}\x{9B11}\x{9B12}' . '\x{9B13}\x{9B15}\x{9B16}\x{9B17}\x{9B18}\x{9B19}\x{9B1A}\x{9B1C}\x{9B1D}' . '\x{9B1E}\x{9B1F}\x{9B20}\x{9B21}\x{9B22}\x{9B23}\x{9B24}\x{9B25}\x{9B26}' . '\x{9B27}\x{9B28}\x{9B29}\x{9B2A}\x{9B2B}\x{9B2C}\x{9B2D}\x{9B2E}\x{9B2F}' . '\x{9B30}\x{9B31}\x{9B32}\x{9B33}\x{9B35}\x{9B36}\x{9B37}\x{9B38}\x{9B39}' . '\x{9B3A}\x{9B3B}\x{9B3C}\x{9B3E}\x{9B3F}\x{9B41}\x{9B42}\x{9B43}\x{9B44}' . '\x{9B45}\x{9B46}\x{9B47}\x{9B48}\x{9B49}\x{9B4A}\x{9B4B}\x{9B4C}\x{9B4D}' . '\x{9B4E}\x{9B4F}\x{9B51}\x{9B52}\x{9B53}\x{9B54}\x{9B55}\x{9B56}\x{9B58}' . '\x{9B59}\x{9B5A}\x{9B5B}\x{9B5C}\x{9B5D}\x{9B5E}\x{9B5F}\x{9B60}\x{9B61}' . '\x{9B63}\x{9B64}\x{9B65}\x{9B66}\x{9B67}\x{9B68}\x{9B69}\x{9B6A}\x{9B6B}' . '\x{9B6C}\x{9B6D}\x{9B6E}\x{9B6F}\x{9B70}\x{9B71}\x{9B73}\x{9B74}\x{9B75}' . '\x{9B76}\x{9B77}\x{9B78}\x{9B79}\x{9B7A}\x{9B7B}\x{9B7C}\x{9B7D}\x{9B7E}' . '\x{9B7F}\x{9B80}\x{9B81}\x{9B82}\x{9B83}\x{9B84}\x{9B85}\x{9B86}\x{9B87}' . '\x{9B88}\x{9B8A}\x{9B8B}\x{9B8D}\x{9B8E}\x{9B8F}\x{9B90}\x{9B91}\x{9B92}' . '\x{9B93}\x{9B94}\x{9B95}\x{9B96}\x{9B97}\x{9B98}\x{9B9A}\x{9B9B}\x{9B9C}' . '\x{9B9D}\x{9B9E}\x{9B9F}\x{9BA0}\x{9BA1}\x{9BA2}\x{9BA3}\x{9BA4}\x{9BA5}' . '\x{9BA6}\x{9BA7}\x{9BA8}\x{9BA9}\x{9BAA}\x{9BAB}\x{9BAC}\x{9BAD}\x{9BAE}' . '\x{9BAF}\x{9BB0}\x{9BB1}\x{9BB2}\x{9BB3}\x{9BB4}\x{9BB5}\x{9BB6}\x{9BB7}' . '\x{9BB8}\x{9BB9}\x{9BBA}\x{9BBB}\x{9BBC}\x{9BBD}\x{9BBE}\x{9BBF}\x{9BC0}' . '\x{9BC1}\x{9BC3}\x{9BC4}\x{9BC5}\x{9BC6}\x{9BC7}\x{9BC8}\x{9BC9}\x{9BCA}' . '\x{9BCB}\x{9BCC}\x{9BCD}\x{9BCE}\x{9BCF}\x{9BD0}\x{9BD1}\x{9BD2}\x{9BD3}' . '\x{9BD4}\x{9BD5}\x{9BD6}\x{9BD7}\x{9BD8}\x{9BD9}\x{9BDA}\x{9BDB}\x{9BDC}' . '\x{9BDD}\x{9BDE}\x{9BDF}\x{9BE0}\x{9BE1}\x{9BE2}\x{9BE3}\x{9BE4}\x{9BE5}' . '\x{9BE6}\x{9BE7}\x{9BE8}\x{9BE9}\x{9BEA}\x{9BEB}\x{9BEC}\x{9BED}\x{9BEE}' . '\x{9BEF}\x{9BF0}\x{9BF1}\x{9BF2}\x{9BF3}\x{9BF4}\x{9BF5}\x{9BF7}\x{9BF8}' . '\x{9BF9}\x{9BFA}\x{9BFB}\x{9BFC}\x{9BFD}\x{9BFE}\x{9BFF}\x{9C02}\x{9C05}' . '\x{9C06}\x{9C07}\x{9C08}\x{9C09}\x{9C0A}\x{9C0B}\x{9C0C}\x{9C0D}\x{9C0E}' . '\x{9C0F}\x{9C10}\x{9C11}\x{9C12}\x{9C13}\x{9C14}\x{9C15}\x{9C16}\x{9C17}' . '\x{9C18}\x{9C19}\x{9C1A}\x{9C1B}\x{9C1C}\x{9C1D}\x{9C1E}\x{9C1F}\x{9C20}' . '\x{9C21}\x{9C22}\x{9C23}\x{9C24}\x{9C25}\x{9C26}\x{9C27}\x{9C28}\x{9C29}' . '\x{9C2A}\x{9C2B}\x{9C2C}\x{9C2D}\x{9C2F}\x{9C30}\x{9C31}\x{9C32}\x{9C33}' . '\x{9C34}\x{9C35}\x{9C36}\x{9C37}\x{9C38}\x{9C39}\x{9C3A}\x{9C3B}\x{9C3C}' . '\x{9C3D}\x{9C3E}\x{9C3F}\x{9C40}\x{9C41}\x{9C43}\x{9C44}\x{9C45}\x{9C46}' . '\x{9C47}\x{9C48}\x{9C49}\x{9C4A}\x{9C4B}\x{9C4C}\x{9C4D}\x{9C4E}\x{9C50}' . '\x{9C52}\x{9C53}\x{9C54}\x{9C55}\x{9C56}\x{9C57}\x{9C58}\x{9C59}\x{9C5A}' . '\x{9C5B}\x{9C5C}\x{9C5D}\x{9C5E}\x{9C5F}\x{9C60}\x{9C62}\x{9C63}\x{9C65}' . '\x{9C66}\x{9C67}\x{9C68}\x{9C69}\x{9C6A}\x{9C6B}\x{9C6C}\x{9C6D}\x{9C6E}' . '\x{9C6F}\x{9C70}\x{9C71}\x{9C72}\x{9C73}\x{9C74}\x{9C75}\x{9C77}\x{9C78}' . '\x{9C79}\x{9C7A}\x{9C7C}\x{9C7D}\x{9C7E}\x{9C7F}\x{9C80}\x{9C81}\x{9C82}' . '\x{9C83}\x{9C84}\x{9C85}\x{9C86}\x{9C87}\x{9C88}\x{9C89}\x{9C8A}\x{9C8B}' . '\x{9C8C}\x{9C8D}\x{9C8E}\x{9C8F}\x{9C90}\x{9C91}\x{9C92}\x{9C93}\x{9C94}' . '\x{9C95}\x{9C96}\x{9C97}\x{9C98}\x{9C99}\x{9C9A}\x{9C9B}\x{9C9C}\x{9C9D}' . '\x{9C9E}\x{9C9F}\x{9CA0}\x{9CA1}\x{9CA2}\x{9CA3}\x{9CA4}\x{9CA5}\x{9CA6}' . '\x{9CA7}\x{9CA8}\x{9CA9}\x{9CAA}\x{9CAB}\x{9CAC}\x{9CAD}\x{9CAE}\x{9CAF}' . '\x{9CB0}\x{9CB1}\x{9CB2}\x{9CB3}\x{9CB4}\x{9CB5}\x{9CB6}\x{9CB7}\x{9CB8}' . '\x{9CB9}\x{9CBA}\x{9CBB}\x{9CBC}\x{9CBD}\x{9CBE}\x{9CBF}\x{9CC0}\x{9CC1}' . '\x{9CC2}\x{9CC3}\x{9CC4}\x{9CC5}\x{9CC6}\x{9CC7}\x{9CC8}\x{9CC9}\x{9CCA}' . '\x{9CCB}\x{9CCC}\x{9CCD}\x{9CCE}\x{9CCF}\x{9CD0}\x{9CD1}\x{9CD2}\x{9CD3}' . '\x{9CD4}\x{9CD5}\x{9CD6}\x{9CD7}\x{9CD8}\x{9CD9}\x{9CDA}\x{9CDB}\x{9CDC}' . '\x{9CDD}\x{9CDE}\x{9CDF}\x{9CE0}\x{9CE1}\x{9CE2}\x{9CE3}\x{9CE4}\x{9CE5}' . '\x{9CE6}\x{9CE7}\x{9CE8}\x{9CE9}\x{9CEA}\x{9CEB}\x{9CEC}\x{9CED}\x{9CEE}' . '\x{9CEF}\x{9CF0}\x{9CF1}\x{9CF2}\x{9CF3}\x{9CF4}\x{9CF5}\x{9CF6}\x{9CF7}' . '\x{9CF8}\x{9CF9}\x{9CFA}\x{9CFB}\x{9CFC}\x{9CFD}\x{9CFE}\x{9CFF}\x{9D00}' . '\x{9D01}\x{9D02}\x{9D03}\x{9D04}\x{9D05}\x{9D06}\x{9D07}\x{9D08}\x{9D09}' . '\x{9D0A}\x{9D0B}\x{9D0F}\x{9D10}\x{9D12}\x{9D13}\x{9D14}\x{9D15}\x{9D16}' . '\x{9D17}\x{9D18}\x{9D19}\x{9D1A}\x{9D1B}\x{9D1C}\x{9D1D}\x{9D1E}\x{9D1F}' . '\x{9D20}\x{9D21}\x{9D22}\x{9D23}\x{9D24}\x{9D25}\x{9D26}\x{9D28}\x{9D29}' . '\x{9D2B}\x{9D2D}\x{9D2E}\x{9D2F}\x{9D30}\x{9D31}\x{9D32}\x{9D33}\x{9D34}' . '\x{9D36}\x{9D37}\x{9D38}\x{9D39}\x{9D3A}\x{9D3B}\x{9D3D}\x{9D3E}\x{9D3F}' . '\x{9D40}\x{9D41}\x{9D42}\x{9D43}\x{9D45}\x{9D46}\x{9D47}\x{9D48}\x{9D49}' . '\x{9D4A}\x{9D4B}\x{9D4C}\x{9D4D}\x{9D4E}\x{9D4F}\x{9D50}\x{9D51}\x{9D52}' . '\x{9D53}\x{9D54}\x{9D55}\x{9D56}\x{9D57}\x{9D58}\x{9D59}\x{9D5A}\x{9D5B}' . '\x{9D5C}\x{9D5D}\x{9D5E}\x{9D5F}\x{9D60}\x{9D61}\x{9D62}\x{9D63}\x{9D64}' . '\x{9D65}\x{9D66}\x{9D67}\x{9D68}\x{9D69}\x{9D6A}\x{9D6B}\x{9D6C}\x{9D6E}' . '\x{9D6F}\x{9D70}\x{9D71}\x{9D72}\x{9D73}\x{9D74}\x{9D75}\x{9D76}\x{9D77}' . '\x{9D78}\x{9D79}\x{9D7A}\x{9D7B}\x{9D7C}\x{9D7D}\x{9D7E}\x{9D7F}\x{9D80}' . '\x{9D81}\x{9D82}\x{9D83}\x{9D84}\x{9D85}\x{9D86}\x{9D87}\x{9D88}\x{9D89}' . '\x{9D8A}\x{9D8B}\x{9D8C}\x{9D8D}\x{9D8E}\x{9D90}\x{9D91}\x{9D92}\x{9D93}' . '\x{9D94}\x{9D96}\x{9D97}\x{9D98}\x{9D99}\x{9D9A}\x{9D9B}\x{9D9C}\x{9D9D}' . '\x{9D9E}\x{9D9F}\x{9DA0}\x{9DA1}\x{9DA2}\x{9DA3}\x{9DA4}\x{9DA5}\x{9DA6}' . '\x{9DA7}\x{9DA8}\x{9DA9}\x{9DAA}\x{9DAB}\x{9DAC}\x{9DAD}\x{9DAF}\x{9DB0}' . '\x{9DB1}\x{9DB2}\x{9DB3}\x{9DB4}\x{9DB5}\x{9DB6}\x{9DB7}\x{9DB8}\x{9DB9}' . '\x{9DBA}\x{9DBB}\x{9DBC}\x{9DBE}\x{9DBF}\x{9DC1}\x{9DC2}\x{9DC3}\x{9DC4}' . '\x{9DC5}\x{9DC7}\x{9DC8}\x{9DC9}\x{9DCA}\x{9DCB}\x{9DCC}\x{9DCD}\x{9DCE}' . '\x{9DCF}\x{9DD0}\x{9DD1}\x{9DD2}\x{9DD3}\x{9DD4}\x{9DD5}\x{9DD6}\x{9DD7}' . '\x{9DD8}\x{9DD9}\x{9DDA}\x{9DDB}\x{9DDC}\x{9DDD}\x{9DDE}\x{9DDF}\x{9DE0}' . '\x{9DE1}\x{9DE2}\x{9DE3}\x{9DE4}\x{9DE5}\x{9DE6}\x{9DE7}\x{9DE8}\x{9DE9}' . '\x{9DEB}\x{9DEC}\x{9DED}\x{9DEE}\x{9DEF}\x{9DF0}\x{9DF1}\x{9DF2}\x{9DF3}' . '\x{9DF4}\x{9DF5}\x{9DF6}\x{9DF7}\x{9DF8}\x{9DF9}\x{9DFA}\x{9DFB}\x{9DFD}' . '\x{9DFE}\x{9DFF}\x{9E00}\x{9E01}\x{9E02}\x{9E03}\x{9E04}\x{9E05}\x{9E06}' . '\x{9E07}\x{9E08}\x{9E09}\x{9E0A}\x{9E0B}\x{9E0C}\x{9E0D}\x{9E0F}\x{9E10}' . '\x{9E11}\x{9E12}\x{9E13}\x{9E14}\x{9E15}\x{9E17}\x{9E18}\x{9E19}\x{9E1A}' . '\x{9E1B}\x{9E1D}\x{9E1E}\x{9E1F}\x{9E20}\x{9E21}\x{9E22}\x{9E23}\x{9E24}' . '\x{9E25}\x{9E26}\x{9E27}\x{9E28}\x{9E29}\x{9E2A}\x{9E2B}\x{9E2C}\x{9E2D}' . '\x{9E2E}\x{9E2F}\x{9E30}\x{9E31}\x{9E32}\x{9E33}\x{9E34}\x{9E35}\x{9E36}' . '\x{9E37}\x{9E38}\x{9E39}\x{9E3A}\x{9E3B}\x{9E3C}\x{9E3D}\x{9E3E}\x{9E3F}' . '\x{9E40}\x{9E41}\x{9E42}\x{9E43}\x{9E44}\x{9E45}\x{9E46}\x{9E47}\x{9E48}' . '\x{9E49}\x{9E4A}\x{9E4B}\x{9E4C}\x{9E4D}\x{9E4E}\x{9E4F}\x{9E50}\x{9E51}' . '\x{9E52}\x{9E53}\x{9E54}\x{9E55}\x{9E56}\x{9E57}\x{9E58}\x{9E59}\x{9E5A}' . '\x{9E5B}\x{9E5C}\x{9E5D}\x{9E5E}\x{9E5F}\x{9E60}\x{9E61}\x{9E62}\x{9E63}' . '\x{9E64}\x{9E65}\x{9E66}\x{9E67}\x{9E68}\x{9E69}\x{9E6A}\x{9E6B}\x{9E6C}' . '\x{9E6D}\x{9E6E}\x{9E6F}\x{9E70}\x{9E71}\x{9E72}\x{9E73}\x{9E74}\x{9E75}' . '\x{9E76}\x{9E77}\x{9E79}\x{9E7A}\x{9E7C}\x{9E7D}\x{9E7E}\x{9E7F}\x{9E80}' . '\x{9E81}\x{9E82}\x{9E83}\x{9E84}\x{9E85}\x{9E86}\x{9E87}\x{9E88}\x{9E89}' . '\x{9E8A}\x{9E8B}\x{9E8C}\x{9E8D}\x{9E8E}\x{9E91}\x{9E92}\x{9E93}\x{9E94}' . '\x{9E96}\x{9E97}\x{9E99}\x{9E9A}\x{9E9B}\x{9E9C}\x{9E9D}\x{9E9F}\x{9EA0}' . '\x{9EA1}\x{9EA3}\x{9EA4}\x{9EA5}\x{9EA6}\x{9EA7}\x{9EA8}\x{9EA9}\x{9EAA}' . '\x{9EAD}\x{9EAE}\x{9EAF}\x{9EB0}\x{9EB2}\x{9EB3}\x{9EB4}\x{9EB5}\x{9EB6}' . '\x{9EB7}\x{9EB8}\x{9EBB}\x{9EBC}\x{9EBD}\x{9EBE}\x{9EBF}\x{9EC0}\x{9EC1}' . '\x{9EC2}\x{9EC3}\x{9EC4}\x{9EC5}\x{9EC6}\x{9EC7}\x{9EC8}\x{9EC9}\x{9ECA}' . '\x{9ECB}\x{9ECC}\x{9ECD}\x{9ECE}\x{9ECF}\x{9ED0}\x{9ED1}\x{9ED2}\x{9ED3}' . '\x{9ED4}\x{9ED5}\x{9ED6}\x{9ED7}\x{9ED8}\x{9ED9}\x{9EDA}\x{9EDB}\x{9EDC}' . '\x{9EDD}\x{9EDE}\x{9EDF}\x{9EE0}\x{9EE1}\x{9EE2}\x{9EE3}\x{9EE4}\x{9EE5}' . '\x{9EE6}\x{9EE7}\x{9EE8}\x{9EE9}\x{9EEA}\x{9EEB}\x{9EED}\x{9EEE}\x{9EEF}' . '\x{9EF0}\x{9EF2}\x{9EF3}\x{9EF4}\x{9EF5}\x{9EF6}\x{9EF7}\x{9EF8}\x{9EF9}' . '\x{9EFA}\x{9EFB}\x{9EFC}\x{9EFD}\x{9EFE}\x{9EFF}\x{9F00}\x{9F01}\x{9F02}' . '\x{9F04}\x{9F05}\x{9F06}\x{9F07}\x{9F08}\x{9F09}\x{9F0A}\x{9F0B}\x{9F0C}' . '\x{9F0D}\x{9F0E}\x{9F0F}\x{9F10}\x{9F12}\x{9F13}\x{9F15}\x{9F16}\x{9F17}' . '\x{9F18}\x{9F19}\x{9F1A}\x{9F1B}\x{9F1C}\x{9F1D}\x{9F1E}\x{9F1F}\x{9F20}' . '\x{9F22}\x{9F23}\x{9F24}\x{9F25}\x{9F27}\x{9F28}\x{9F29}\x{9F2A}\x{9F2B}' . '\x{9F2C}\x{9F2D}\x{9F2E}\x{9F2F}\x{9F30}\x{9F31}\x{9F32}\x{9F33}\x{9F34}' . '\x{9F35}\x{9F36}\x{9F37}\x{9F38}\x{9F39}\x{9F3A}\x{9F3B}\x{9F3C}\x{9F3D}' . '\x{9F3E}\x{9F3F}\x{9F40}\x{9F41}\x{9F42}\x{9F43}\x{9F44}\x{9F46}\x{9F47}' . '\x{9F48}\x{9F49}\x{9F4A}\x{9F4B}\x{9F4C}\x{9F4D}\x{9F4E}\x{9F4F}\x{9F50}' . '\x{9F51}\x{9F52}\x{9F54}\x{9F55}\x{9F56}\x{9F57}\x{9F58}\x{9F59}\x{9F5A}' . '\x{9F5B}\x{9F5C}\x{9F5D}\x{9F5E}\x{9F5F}\x{9F60}\x{9F61}\x{9F63}\x{9F64}' . '\x{9F65}\x{9F66}\x{9F67}\x{9F68}\x{9F69}\x{9F6A}\x{9F6B}\x{9F6C}\x{9F6E}' . '\x{9F6F}\x{9F70}\x{9F71}\x{9F72}\x{9F73}\x{9F74}\x{9F75}\x{9F76}\x{9F77}' . '\x{9F78}\x{9F79}\x{9F7A}\x{9F7B}\x{9F7C}\x{9F7D}\x{9F7E}\x{9F7F}\x{9F80}' . '\x{9F81}\x{9F82}\x{9F83}\x{9F84}\x{9F85}\x{9F86}\x{9F87}\x{9F88}\x{9F89}' . '\x{9F8A}\x{9F8B}\x{9F8C}\x{9F8D}\x{9F8E}\x{9F8F}\x{9F90}\x{9F91}\x{9F92}' . '\x{9F93}\x{9F94}\x{9F95}\x{9F96}\x{9F97}\x{9F98}\x{9F99}\x{9F9A}\x{9F9B}' . '\x{9F9C}\x{9F9D}\x{9F9E}\x{9F9F}\x{9FA0}\x{9FA2}\x{9FA4}\x{9FA5}]{1,20}$/iu', ); &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; class CreditCard extends AbstractValidator { const ALL = 'All'; const AMERICAN_EXPRESS = 'American_Express'; const UNIONPAY = 'Unionpay'; const DINERS_CLUB = 'Diners_Club'; const DINERS_CLUB_US = 'Diners_Club_US'; const DISCOVER = 'Discover'; const JCB = 'JCB'; const LASER = 'Laser'; const MAESTRO = 'Maestro'; const MASTERCARD = 'Mastercard'; const SOLO = 'Solo'; const VISA = 'Visa'; const CHECKSUM = 'creditcardChecksum'; const CONTENT = 'creditcardContent'; const INVALID = 'creditcardInvalid'; const LENGTH = 'creditcardLength'; const PREFIX = 'creditcardPrefix'; const SERVICE = 'creditcardService'; const SERVICEFAILURE = 'creditcardServiceFailure'; protected $messageTemplates = array( self::CHECKSUM =&gt; "The input seems to contain an invalid checksum", self::CONTENT =&gt; "The input must contain only digits", self::INVALID =&gt; "Invalid type given. String expected", self::LENGTH =&gt; "The input contains an invalid amount of digits", self::PREFIX =&gt; "The input is not from an allowed institute", self::SERVICE =&gt; "The input seems to be an invalid credit card number.", self::SERVICEFAILURE =&gt; "An exception has been raised while validating the input", ); protected $cardName = array( 0 =&gt; self::AMERICAN_EXPRESS, 1 =&gt; self::DINERS_CLUB, 2 =&gt; self::DINERS_CLUB_US, 3 =&gt; self::DISCOVER, 4 =&gt; self::JCB, 5 =&gt; self::LASER, 6 =&gt; self::MAESTRO, 7 =&gt; self::MASTERCARD, 8 =&gt; self::SOLO, 9 =&gt; self::UNIONPAY, 10 =&gt; self::VISA, ); protected $cardLength = array( self::AMERICAN_EXPRESS =&gt; array(15), self::DINERS_CLUB =&gt; array(14), self::DINERS_CLUB_US =&gt; array(16), self::DISCOVER =&gt; array(16), self::JCB =&gt; array(16), self::LASER =&gt; array(16, 17, 18, 19), self::MAESTRO =&gt; array(12, 13, 14, 15, 16, 17, 18, 19), self::MASTERCARD =&gt; array(16), self::SOLO =&gt; array(16, 18, 19), self::UNIONPAY =&gt; array(16, 17, 18, 19), self::VISA =&gt; array(16), ); protected $cardType = array( self::AMERICAN_EXPRESS =&gt; array('34', '37'), self::DINERS_CLUB =&gt; array('300', '301', '302', '303', '304', '305', '36'), self::DINERS_CLUB_US =&gt; array('54', '55'), self::DISCOVER =&gt; array('6011', '622126', '622127', '622128', '622129', '62213', '62214', '62215', '62216', '62217', '62218', '62219', '6222', '6223', '6224', '6225', '6226', '6227', '6228', '62290', '62291', '622920', '622921', '622922', '622923', '622924', '622925', '644', '645', '646', '647', '648', '649', '65'), self::JCB =&gt; array('3528', '3529', '353', '354', '355', '356', '357', '358'), self::LASER =&gt; array('6304', '6706', '6771', '6709'), self::MAESTRO =&gt; array('5018', '5020', '5038', '6304', '6759', '6761', '6763'), self::MASTERCARD =&gt; array('51', '52', '53', '54', '55'), self::SOLO =&gt; array('6334', '6767'), self::UNIONPAY =&gt; array('622126', '622127', '622128', '622129', '62213', '62214', '62215', '62216', '62217', '62218', '62219', '6222', '6223', '6224', '6225', '6226', '6227', '6228', '62290', '62291', '622920', '622921', '622922', '622923', '622924', '622925'), self::VISA =&gt; array('4'), ); protected $options = array( 'service' =&gt; null, 'type' =&gt; array(), ); public function __construct($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { $options = func_get_args(); $temp['type'] = array_shift($options); if (!empty($options)) { $temp['service'] = array_shift($options); } $options = $temp; } if (!array_key_exists('type', $options)) { $options['type'] = self::ALL; } $this-&gt;setType($options['type']); unset($options['type']); if (array_key_exists('service', $options)) { $this-&gt;setService($options['service']); unset($options['service']); } parent::__construct($options); } public function getType() { return $this-&gt;options['type']; } public function setType($type) { $this-&gt;options['type'] = array(); return $this-&gt;addType($type); } public function addType($type) { if (is_string($type)) { $type = array($type); } foreach ($type as $typ) { if (defined('self::' . strtoupper($typ)) &amp;&amp; !in_array($typ, $this-&gt;options['type'])) { $this-&gt;options['type'][] = $typ; } if (($typ == self::ALL)) { $this-&gt;options['type'] = array_keys($this-&gt;cardLength); } } return $this; } public function getService() { return $this-&gt;options['service']; } public function setService($service) { if (!is_callable($service)) { throw new Exception\InvalidArgumentException('Invalid callback given'); } $this-&gt;options['service'] = $service; return $this; } public function isValid($value) { $this-&gt;setValue($value); if (!is_string($value)) { $this-&gt;error(self::INVALID, $value); return false; } if (!ctype_digit($value)) { $this-&gt;error(self::CONTENT, $value); return false; } $length = strlen($value); $types = $this-&gt;getType(); $foundp = false; $foundl = false; foreach ($types as $type) { foreach ($this-&gt;cardType[$type] as $prefix) { if (substr($value, 0, strlen($prefix)) == $prefix) { $foundp = true; if (in_array($length, $this-&gt;cardLength[$type])) { $foundl = true; break 2; } } } } if ($foundp == false) { $this-&gt;error(self::PREFIX, $value); return false; } if ($foundl == false) { $this-&gt;error(self::LENGTH, $value); return false; } $sum = 0; $weight = 2; for ($i = $length - 2; $i &gt;= 0; $i--) { $digit = $weight * $value[$i]; $sum += floor($digit / 10) + $digit % 10; $weight = $weight % 2 + 1; } if ((10 - $sum % 10) % 10 != $value[$length - 1]) { $this-&gt;error(self::CHECKSUM, $value); return false; } $service = $this-&gt;getService(); if (!empty($service)) { try { $callback = new Callback($service); $callback-&gt;setOptions($this-&gt;getType()); if (!$callback-&gt;isValid($value)) { $this-&gt;error(self::SERVICE, $value); return false; } } catch (\Exception $e) { $this-&gt;error(self::SERVICEFAILURE, $value); return false; } } return true; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\Stdlib\ArrayUtils; class GreaterThan extends AbstractValidator { const NOT_GREATER = 'notGreaterThan'; const NOT_GREATER_INCLUSIVE = 'notGreaterThanInclusive'; protected $messageTemplates = array( self::NOT_GREATER =&gt; "The input is not greater than '%min%'", self::NOT_GREATER_INCLUSIVE =&gt; "The input is not greater or equal than '%min%'" ); protected $messageVariables = array( 'min' =&gt; 'min' ); protected $min; protected $inclusive; public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { $options = func_get_args(); $temp['min'] = array_shift($options); if (!empty($options)) { $temp['inclusive'] = array_shift($options); } $options = $temp; } if (!array_key_exists('min', $options)) { throw new Exception\InvalidArgumentException("Missing option 'min'"); } if (!array_key_exists('inclusive', $options)) { $options['inclusive'] = false; } $this-&gt;setMin($options['min']) -&gt;setInclusive($options['inclusive']); parent::__construct($options); } public function getMin() { return $this-&gt;min; } public function setMin($min) { $this-&gt;min = $min; return $this; } public function getInclusive() { return $this-&gt;inclusive; } public function setInclusive($inclusive) { $this-&gt;inclusive = $inclusive; return $this; } public function isValid($value) { $this-&gt;setValue($value); if ($this-&gt;inclusive) { if ($this-&gt;min &gt; $value) { $this-&gt;error(self::NOT_GREATER_INCLUSIVE); return false; } } else { if ($this-&gt;min &gt;= $value) { $this-&gt;error(self::NOT_GREATER); return false; } } return true; } } &lt;?php
 namespace Zend\Validator\Db; use Traversable; use Zend\Db\Adapter\Adapter as DbAdapter; use Zend\Db\Adapter\Driver\DriverInterface as DbDriverInterface; use Zend\Db\Sql\Sql; use Zend\Db\Sql\Select; use Zend\Db\Sql\TableIdentifier; use Zend\Stdlib\ArrayUtils; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; abstract class AbstractDb extends AbstractValidator { const ERROR_NO_RECORD_FOUND = 'noRecordFound'; const ERROR_RECORD_FOUND = 'recordFound'; protected $messageTemplates = array( self::ERROR_NO_RECORD_FOUND =&gt; "No record matching the input was found", self::ERROR_RECORD_FOUND =&gt; "A record matching the input was found", ); protected $select; protected $schema = null; protected $table = ''; protected $field = ''; protected $exclude = null; protected $adapter = null; public function __construct($options = null) { parent::__construct($options); if ($options instanceof Select) { $this-&gt;setSelect($options); return; } if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (func_num_args() &gt; 1) { $options = func_get_args(); $firstArgument = array_shift($options); if (is_array($firstArgument)) { $temp = ArrayUtils::iteratorToArray($firstArgument); } else { $temp['table'] = $firstArgument; } $temp['field'] = array_shift($options); if (!empty($options)) { $temp['exclude'] = array_shift($options); } if (!empty($options)) { $temp['adapter'] = array_shift($options); } $options = $temp; } if (!array_key_exists('table', $options) &amp;&amp; !array_key_exists('schema', $options)) { throw new Exception\InvalidArgumentException('Table or Schema option missing!'); } if (!array_key_exists('field', $options)) { throw new Exception\InvalidArgumentException('Field option missing!'); } if (array_key_exists('adapter', $options)) { $this-&gt;setAdapter($options['adapter']); } if (array_key_exists('exclude', $options)) { $this-&gt;setExclude($options['exclude']); } $this-&gt;setField($options['field']); if (array_key_exists('table', $options)) { $this-&gt;setTable($options['table']); } if (array_key_exists('schema', $options)) { $this-&gt;setSchema($options['schema']); } } public function getAdapter() { return $this-&gt;adapter; } public function setAdapter(DbAdapter $adapter) { $this-&gt;adapter = $adapter; return $this; } public function getExclude() { return $this-&gt;exclude; } public function setExclude($exclude) { $this-&gt;exclude = $exclude; return $this; } public function getField() { return $this-&gt;field; } public function setField($field) { $this-&gt;field = (string) $field; return $this; } public function getTable() { return $this-&gt;table; } public function setTable($table) { $this-&gt;table = (string) $table; return $this; } public function getSchema() { return $this-&gt;schema; } public function setSchema($schema) { $this-&gt;schema = $schema; return $this; } public function setSelect(Select $select) { $this-&gt;select = $select; return $this; } public function getSelect() { if ($this-&gt;select instanceof Select) { return $this-&gt;select; } $select = new Select(); $tableIdentifier = new TableIdentifier($this-&gt;table, $this-&gt;schema); $select-&gt;from($tableIdentifier)-&gt;columns(array($this-&gt;field)); $select-&gt;where-&gt;equalTo($this-&gt;field, null); if ($this-&gt;exclude !== null) { if (is_array($this-&gt;exclude)) { $select-&gt;where-&gt;notEqualTo( $this-&gt;exclude['field'], $this-&gt;exclude['value'] ); } else { $select-&gt;where($this-&gt;exclude); } } $this-&gt;select = $select; return $this-&gt;select; } protected function query($value) { $sql = new Sql($this-&gt;getAdapter()); $select = $this-&gt;getSelect(); $statement = $sql-&gt;prepareStatementForSqlObject($select); $parameters = $statement-&gt;getParameterContainer(); $parameters['where1'] = $value; $result = $statement-&gt;execute(); return $result-&gt;current(); } } &lt;?php
 namespace Zend\Validator\Db; use Zend\Validator\Exception; class NoRecordExists extends AbstractDb { public function isValid($value) { if (null === $this-&gt;adapter) { throw new Exception\RuntimeException('No database adapter present'); } $valid = true; $this-&gt;setValue($value); $result = $this-&gt;query($value); if ($result) { $valid = false; $this-&gt;error(self::ERROR_RECORD_FOUND); } return $valid; } } &lt;?php
 namespace Zend\Validator\Db; use Zend\Validator\Exception; class RecordExists extends AbstractDb { public function isValid($value) { if (null === $this-&gt;adapter) { throw new Exception\RuntimeException('No database adapter present'); } $valid = true; $this-&gt;setValue($value); $result = $this-&gt;query($value); if (!$result) { $valid = false; $this-&gt;error(self::ERROR_NO_RECORD_FOUND); } return $valid; } } &lt;?php
 namespace Zend\Validator; use Traversable; class IsInstanceOf extends AbstractValidator { const NOT_INSTANCE_OF = 'notInstanceOf'; protected $messageTemplates = array( self::NOT_INSTANCE_OF =&gt; "The input is not an instance of '%className%'", ); protected $messageVariables = array( 'className' =&gt; 'className' ); protected $className; public function __construct($options = null) { if ($options instanceof Traversable) { $options = iterator_to_array($options); } if (!is_array($options)) { $options = func_get_args(); $tmpOptions = array(); $tmpOptions['className'] = array_shift($options); $options = $tmpOptions; } if (!array_key_exists('className', $options)) { throw new Exception\InvalidArgumentException('Missing option "className"'); } parent::__construct($options); } public function getClassName() { return $this-&gt;className; } public function setClassName($className) { $this-&gt;className = $className; return $this; } public function isValid($value) { if ($value instanceof $this-&gt;className) { return true; } $this-&gt;error(self::NOT_INSTANCE_OF); return false; } } &lt;?php
 namespace Zend\Validator; class EmailAddress extends AbstractValidator { const INVALID = 'emailAddressInvalid'; const INVALID_FORMAT = 'emailAddressInvalidFormat'; const INVALID_HOSTNAME = 'emailAddressInvalidHostname'; const INVALID_MX_RECORD = 'emailAddressInvalidMxRecord'; const INVALID_SEGMENT = 'emailAddressInvalidSegment'; const DOT_ATOM = 'emailAddressDotAtom'; const QUOTED_STRING = 'emailAddressQuotedString'; const INVALID_LOCAL_PART = 'emailAddressInvalidLocalPart'; const LENGTH_EXCEEDED = 'emailAddressLengthExceeded'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String expected", self::INVALID_FORMAT =&gt; "The input is not a valid email address. Use the basic format local-part@hostname", self::INVALID_HOSTNAME =&gt; "'%hostname%' is not a valid hostname for the email address", self::INVALID_MX_RECORD =&gt; "'%hostname%' does not appear to have any valid MX or A records for the email address", self::INVALID_SEGMENT =&gt; "'%hostname%' is not in a routable network segment. The email address should not be resolved from public network", self::DOT_ATOM =&gt; "'%localPart%' can not be matched against dot-atom format", self::QUOTED_STRING =&gt; "'%localPart%' can not be matched against quoted-string format", self::INVALID_LOCAL_PART =&gt; "'%localPart%' is not a valid local part for the email address", self::LENGTH_EXCEEDED =&gt; "The input exceeds the allowed length", ); protected $messageVariables = array( 'hostname' =&gt; 'hostname', 'localPart' =&gt; 'localPart' ); protected $hostname; protected $localPart; protected $mxRecord; protected $options = array( 'useMxCheck' =&gt; false, 'useDeepMxCheck' =&gt; false, 'useDomainCheck' =&gt; true, 'allow' =&gt; Hostname::ALLOW_DNS, 'hostnameValidator' =&gt; null, ); public function __construct($options = array()) { if (!is_array($options)) { $options = func_get_args(); $temp['allow'] = array_shift($options); if (!empty($options)) { $temp['useMxCheck'] = array_shift($options); } if (!empty($options)) { $temp['hostnameValidator'] = array_shift($options); } $options = $temp; } parent::__construct($options); } public function setMessage($messageString, $messageKey = null) { if ($messageKey === null) { $this-&gt;getHostnameValidator()-&gt;setMessage($messageString); parent::setMessage($messageString); return $this; } if (!isset($this-&gt;messageTemplates[$messageKey])) { $this-&gt;getHostnameValidator()-&gt;setMessage($messageString, $messageKey); } else { parent::setMessage($messageString, $messageKey); } return $this; } public function getHostnameValidator() { if (!isset($this-&gt;options['hostnameValidator'])) { $this-&gt;options['hostnameValidator'] = new Hostname($this-&gt;getAllow()); } return $this-&gt;options['hostnameValidator']; } public function setHostnameValidator(Hostname $hostnameValidator = null) { $this-&gt;options['hostnameValidator'] = $hostnameValidator; return $this; } public function getAllow() { return $this-&gt;options['allow']; } public function setAllow($allow) { $this-&gt;options['allow'] = $allow; if (isset($this-&gt;options['hostnameValidator'])) { $this-&gt;options['hostnameValidator']-&gt;setAllow($allow); } return $this; } public function isMxSupported() { return function_exists('getmxrr'); } public function getMxCheck() { return $this-&gt;options['useMxCheck']; } public function useMxCheck($mx) { $this-&gt;options['useMxCheck'] = (bool) $mx; return $this; } public function getDeepMxCheck() { return $this-&gt;options['useDeepMxCheck']; } public function useDeepMxCheck($deep) { $this-&gt;options['useDeepMxCheck'] = (bool) $deep; return $this; } public function getDomainCheck() { return $this-&gt;options['useDomainCheck']; } public function useDomainCheck($domain = true) { $this-&gt;options['useDomainCheck'] = (bool) $domain; return $this; } protected function isReserved($host) { if (!preg_match('/^([0-9]{1,3}\.){3}[0-9]{1,3}$/', $host)) { $host = gethostbynamel($host); } else { $host = array($host); } if (empty($host)) { return false; } foreach ($host as $server) { if (!preg_match('/^(0|10|127)(\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))){3}$/', $server) &amp;&amp; !preg_match('/^100\.(6[0-4]|[7-9][0-9]|1[0-1][0-9]|12[0-7])(\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))){2}$/', $server) &amp;&amp; !preg_match('/^172\.(1[6-9]|2[0-9]|3[0-1])(\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))){2}$/', $server) &amp;&amp; !preg_match('/^198\.(1[8-9])(\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))){2}$/', $server) &amp;&amp; !preg_match('/^(169\.254|192\.168)(\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))){2}$/', $server) &amp;&amp; !preg_match('/^(192\.0\.2|192\.88\.99|198\.51\.100|203\.0\.113)\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))$/', $server) &amp;&amp; !preg_match('/^(2(2[4-9]|[3-4][0-9]|5[0-5]))(\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))){3}$/', $server) ) { return false; } } return true; } protected function validateLocalPart() { $result = false; $atext = 'a-zA-Z0-9\x21\x23\x24\x25\x26\x27\x2a\x2b\x2d\x2f\x3d\x3f\x5e\x5f\x60\x7b\x7c\x7d\x7e'; if (preg_match('/^[' . $atext . ']+(\x2e+[' . $atext . ']+)*$/', $this-&gt;localPart)) { $result = true; } else { $noWsCtl = '\x01-\x08\x0b\x0c\x0e-\x1f\x7f'; $qtext = $noWsCtl . '\x21\x23-\x5b\x5d-\x7e'; $ws = '\x20\x09'; if (preg_match('/^\x22([' . $ws . $qtext . '])*[$ws]?\x22$/', $this-&gt;localPart)) { $result = true; } else { $this-&gt;error(self::DOT_ATOM); $this-&gt;error(self::QUOTED_STRING); $this-&gt;error(self::INVALID_LOCAL_PART); } } return $result; } public function getMXRecord() { return $this-&gt;mxRecord; } protected function validateMXRecords() { $mxHosts = array(); $weight = array(); $result = getmxrr($this-&gt;hostname, $mxHosts, $weight); if (!empty($mxHosts) &amp;&amp; !empty($weight)) { $this-&gt;mxRecord = array_combine($mxHosts, $weight); } else { $this-&gt;mxRecord = $mxHosts; } arsort($this-&gt;mxRecord); if (!$result) { $result = gethostbynamel($this-&gt;hostname); if (is_array($result)) { $this-&gt;mxRecord = array_flip($result); } } if (!$result) { $this-&gt;error(self::INVALID_MX_RECORD); return $result; } if (!$this-&gt;options['useDeepMxCheck']) { return $result; } $validAddress = false; $reserved = true; foreach ($this-&gt;mxRecord as $hostname =&gt; $weight) { $res = $this-&gt;isReserved($hostname); if (!$res) { $reserved = false; } if (!$res &amp;&amp; (checkdnsrr($hostname, "A") || checkdnsrr($hostname, "AAAA") || checkdnsrr($hostname, "A6")) ) { $validAddress = true; break; } } if (!$validAddress) { $result = false; $error = ($reserved) ? self::INVALID_SEGMENT : self::INVALID_MX_RECORD; $this-&gt;error($error); } return $result; } protected function validateHostnamePart() { $hostname = $this-&gt;getHostnameValidator()-&gt;setTranslator($this-&gt;getTranslator()) -&gt;isValid($this-&gt;hostname); if (!$hostname) { $this-&gt;error(self::INVALID_HOSTNAME); foreach ($this-&gt;getHostnameValidator()-&gt;getMessages() as $code =&gt; $message) { $this-&gt;abstractOptions['messages'][$code] = $message; } } elseif ($this-&gt;options['useMxCheck']) { $hostname = $this-&gt;validateMXRecords(); } return $hostname; } protected function splitEmailParts($value) { if ((strpos($value, '..') !== false) or (!preg_match('/^(.+)@([^@]+)$/', $value, $matches))) { return false; } $this-&gt;localPart = $matches[1]; $this-&gt;hostname = $matches[2]; return true; } public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $length = true; $this-&gt;setValue($value); if (!$this-&gt;splitEmailParts($value)) { $this-&gt;error(self::INVALID_FORMAT); return false; } if ((strlen($this-&gt;localPart) &gt; 64) || (strlen($this-&gt;hostname) &gt; 255)) { $length = false; $this-&gt;error(self::LENGTH_EXCEEDED); } if ($this-&gt;options['useDomainCheck']) { $hostname = $this-&gt;validateHostnamePart(); } $local = $this-&gt;validateLocalPart(); if ($local &amp;&amp; $length) { if (($this-&gt;options['useDomainCheck'] &amp;&amp; $hostname) || !$this-&gt;options['useDomainCheck']) { return true; } } return false; } } &lt;?php
 namespace Zend\Validator; use Zend\Filter\Digits as DigitsFilter; class Digits extends AbstractValidator { const NOT_DIGITS = 'notDigits'; const STRING_EMPTY = 'digitsStringEmpty'; const INVALID = 'digitsInvalid'; protected static $filter = null; protected $messageTemplates = array( self::NOT_DIGITS =&gt; "The input must contain only digits", self::STRING_EMPTY =&gt; "The input is an empty string", self::INVALID =&gt; "Invalid type given. String, integer or float expected", ); public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value) &amp;&amp; !is_float($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue((string) $value); if ('' === $this-&gt;getValue()) { $this-&gt;error(self::STRING_EMPTY); return false; } if (null === static::$filter) { static::$filter = new DigitsFilter(); } if ($this-&gt;getValue() !== static::$filter-&gt;filter($this-&gt;getValue())) { $this-&gt;error(self::NOT_DIGITS); return false; } return true; } } &lt;?php
 namespace Zend\Validator; use Zend\I18n\Translator\TranslatorAwareInterface; use Zend\ServiceManager\AbstractPluginManager; use Zend\ServiceManager\ConfigInterface; class ValidatorPluginManager extends AbstractPluginManager { protected $invokableClasses = array( 'alnum' =&gt; 'Zend\I18n\Validator\Alnum', 'alpha' =&gt; 'Zend\I18n\Validator\Alpha', 'barcodecode25interleaved' =&gt; 'Zend\Validator\Barcode\Code25interleaved', 'barcodecode25' =&gt; 'Zend\Validator\Barcode\Code25', 'barcodecode39ext' =&gt; 'Zend\Validator\Barcode\Code39ext', 'barcodecode39' =&gt; 'Zend\Validator\Barcode\Code39', 'barcodecode93ext' =&gt; 'Zend\Validator\Barcode\Code93ext', 'barcodecode93' =&gt; 'Zend\Validator\Barcode\Code93', 'barcodeean12' =&gt; 'Zend\Validator\Barcode\Ean12', 'barcodeean13' =&gt; 'Zend\Validator\Barcode\Ean13', 'barcodeean14' =&gt; 'Zend\Validator\Barcode\Ean14', 'barcodeean18' =&gt; 'Zend\Validator\Barcode\Ean18', 'barcodeean2' =&gt; 'Zend\Validator\Barcode\Ean2', 'barcodeean5' =&gt; 'Zend\Validator\Barcode\Ean5', 'barcodeean8' =&gt; 'Zend\Validator\Barcode\Ean8', 'barcodegtin12' =&gt; 'Zend\Validator\Barcode\Gtin12', 'barcodegtin13' =&gt; 'Zend\Validator\Barcode\Gtin13', 'barcodegtin14' =&gt; 'Zend\Validator\Barcode\Gtin14', 'barcodeidentcode' =&gt; 'Zend\Validator\Barcode\Identcode', 'barcodeintelligentmail' =&gt; 'Zend\Validator\Barcode\Intelligentmail', 'barcodeissn' =&gt; 'Zend\Validator\Barcode\Issn', 'barcodeitf14' =&gt; 'Zend\Validator\Barcode\Itf14', 'barcodeleitcode' =&gt; 'Zend\Validator\Barcode\Leitcode', 'barcodeplanet' =&gt; 'Zend\Validator\Barcode\Planet', 'barcodepostnet' =&gt; 'Zend\Validator\Barcode\Postnet', 'barcoderoyalmail' =&gt; 'Zend\Validator\Barcode\Royalmail', 'barcodesscc' =&gt; 'Zend\Validator\Barcode\Sscc', 'barcodeupca' =&gt; 'Zend\Validator\Barcode\Upca', 'barcodeupce' =&gt; 'Zend\Validator\Barcode\Upce', 'barcode' =&gt; 'Zend\Validator\Barcode', 'between' =&gt; 'Zend\Validator\Between', 'callback' =&gt; 'Zend\Validator\Callback', 'creditcard' =&gt; 'Zend\Validator\CreditCard', 'csrf' =&gt; 'Zend\Validator\Csrf', 'date' =&gt; 'Zend\Validator\Date', 'datestep' =&gt; 'Zend\Validator\DateStep', 'dbnorecordexists' =&gt; 'Zend\Validator\Db\NoRecordExists', 'dbrecordexists' =&gt; 'Zend\Validator\Db\RecordExists', 'digits' =&gt; 'Zend\Validator\Digits', 'emailaddress' =&gt; 'Zend\Validator\EmailAddress', 'explode' =&gt; 'Zend\Validator\Explode', 'filecount' =&gt; 'Zend\Validator\File\Count', 'filecrc32' =&gt; 'Zend\Validator\File\Crc32', 'fileexcludeextension' =&gt; 'Zend\Validator\File\ExcludeExtension', 'fileexcludemimetype' =&gt; 'Zend\Validator\File\ExcludeMimeType', 'fileexists' =&gt; 'Zend\Validator\File\Exists', 'fileextension' =&gt; 'Zend\Validator\File\Extension', 'filefilessize' =&gt; 'Zend\Validator\File\FilesSize', 'filehash' =&gt; 'Zend\Validator\File\Hash', 'fileimagesize' =&gt; 'Zend\Validator\File\ImageSize', 'fileiscompressed' =&gt; 'Zend\Validator\File\IsCompressed', 'fileisimage' =&gt; 'Zend\Validator\File\IsImage', 'filemd5' =&gt; 'Zend\Validator\File\Md5', 'filemimetype' =&gt; 'Zend\Validator\File\MimeType', 'filenotexists' =&gt; 'Zend\Validator\File\NotExists', 'filesha1' =&gt; 'Zend\Validator\File\Sha1', 'filesize' =&gt; 'Zend\Validator\File\Size', 'fileupload' =&gt; 'Zend\Validator\File\Upload', 'fileuploadfile' =&gt; 'Zend\Validator\File\UploadFile', 'filewordcount' =&gt; 'Zend\Validator\File\WordCount', 'float' =&gt; 'Zend\I18n\Validator\Float', 'greaterthan' =&gt; 'Zend\Validator\GreaterThan', 'hex' =&gt; 'Zend\Validator\Hex', 'hostname' =&gt; 'Zend\Validator\Hostname', 'iban' =&gt; 'Zend\Validator\Iban', 'identical' =&gt; 'Zend\Validator\Identical', 'inarray' =&gt; 'Zend\Validator\InArray', 'int' =&gt; 'Zend\I18n\Validator\Int', 'ip' =&gt; 'Zend\Validator\Ip', 'isbn' =&gt; 'Zend\Validator\Isbn', 'isinstanceof' =&gt; 'Zend\Validator\IsInstanceOf', 'lessthan' =&gt; 'Zend\Validator\LessThan', 'notempty' =&gt; 'Zend\Validator\NotEmpty', 'postcode' =&gt; 'Zend\I18n\Validator\PostCode', 'regex' =&gt; 'Zend\Validator\Regex', 'sitemapchangefreq' =&gt; 'Zend\Validator\Sitemap\Changefreq', 'sitemaplastmod' =&gt; 'Zend\Validator\Sitemap\Lastmod', 'sitemaploc' =&gt; 'Zend\Validator\Sitemap\Loc', 'sitemappriority' =&gt; 'Zend\Validator\Sitemap\Priority', 'stringlength' =&gt; 'Zend\Validator\StringLength', 'step' =&gt; 'Zend\Validator\Step', 'uri' =&gt; 'Zend\Validator\Uri', ); protected $shareByDefault = false; public function __construct(ConfigInterface $configuration = null) { parent::__construct($configuration); $this-&gt;addInitializer(array($this, 'injectTranslator')); } public function injectTranslator($validator) { if ($validator instanceof TranslatorAwareInterface) { $locator = $this-&gt;getServiceLocator(); if ($locator &amp;&amp; $locator-&gt;has('translator')) { $validator-&gt;setTranslator($locator-&gt;get('translator')); } } } public function validatePlugin($plugin) { if ($plugin instanceof ValidatorInterface) { return; } throw new Exception\RuntimeException(sprintf( 'Plugin of type %s is invalid; must implement %s\ValidatorInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\Validator\Barcode; class Gtin14 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(14); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Upce extends AbstractAdapter { public function __construct() { $this-&gt;setLength(array(6, 7, 8)); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } public function hasValidLength($value) { if (strlen($value) != 8) { $this-&gt;useChecksum(false); } else { $this-&gt;useChecksum(true); } return parent::hasValidLength($value); } } &lt;?php
 namespace Zend\Validator\Barcode; class Code25 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('code25'); $this-&gt;useChecksum(false); } } &lt;?php
 namespace Zend\Validator\Barcode; class Code39ext extends AbstractAdapter { public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters(128); $this-&gt;useChecksum(false); } } &lt;?php
 namespace Zend\Validator\Barcode; class Code39 extends AbstractAdapter { protected $check = array( '0' =&gt; 0, '1' =&gt; 1, '2' =&gt; 2, '3' =&gt; 3, '4' =&gt; 4, '5' =&gt; 5, '6' =&gt; 6, '7' =&gt; 7, '8' =&gt; 8, '9' =&gt; 9, 'A' =&gt; 10, 'B' =&gt; 11, 'C' =&gt; 12, 'D' =&gt; 13, 'E' =&gt; 14, 'F' =&gt; 15, 'G' =&gt; 16, 'H' =&gt; 17, 'I' =&gt; 18, 'J' =&gt; 19, 'K' =&gt; 20, 'L' =&gt; 21, 'M' =&gt; 22, 'N' =&gt; 23, 'O' =&gt; 24, 'P' =&gt; 25, 'Q' =&gt; 26, 'R' =&gt; 27, 'S' =&gt; 28, 'T' =&gt; 29, 'U' =&gt; 30, 'V' =&gt; 31, 'W' =&gt; 32, 'X' =&gt; 33, 'Y' =&gt; 34, 'Z' =&gt; 35, '-' =&gt; 36, '.' =&gt; 37, ' ' =&gt; 38, '$' =&gt; 39, '/' =&gt; 40, '+' =&gt; 41, '%' =&gt; 42, ); public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ -.$/+%'); $this-&gt;setChecksum('code39'); $this-&gt;useChecksum(false); } protected function code39($value) { $checksum = substr($value, -1, 1); $value = str_split(substr($value, 0, -1)); $count = 0; foreach ($value as $char) { $count += $this-&gt;check[$char]; } $mod = $count % 43; if ($mod == $this-&gt;check[$checksum]) { return true; } return false; } } &lt;?php
 namespace Zend\Validator\Barcode; class Planet extends AbstractAdapter { public function __construct() { $this-&gt;setLength(array(12, 14)); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('postnet'); } } &lt;?php
 namespace Zend\Validator\Barcode; interface AdapterInterface { public function hasValidLength($value); public function hasValidCharacters($value); public function hasValidChecksum($value); public function getLength(); public function getCharacters(); public function getChecksum(); public function useChecksum($check = null); } &lt;?php
 namespace Zend\Validator\Barcode; class Ean2 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(2); $this-&gt;setCharacters('0123456789'); $this-&gt;useChecksum(false); } } &lt;?php
 namespace Zend\Validator\Barcode; class Postnet extends AbstractAdapter { public function __construct() { $this-&gt;setLength(array(6, 7, 10, 12)); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('postnet'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Issn extends AbstractAdapter { public function __construct() { $this-&gt;setLength(array(8, 13)); $this-&gt;setCharacters('0123456789X'); $this-&gt;setChecksum('gtin'); } public function hasValidCharacters($value) { if (strlen($value) != 8) { if (strpos($value, 'X') !== false) { return false; } } return parent::hasValidCharacters($value); } public function hasValidChecksum($value) { if (strlen($value) == 8) { $this-&gt;setChecksum('issn'); } else { $this-&gt;setChecksum('gtin'); } return parent::hasValidChecksum($value); } protected function issn($value) { $checksum = substr($value, -1, 1); $values = str_split(substr($value, 0, -1)); $check = 0; $multi = 8; foreach ($values as $token) { if ($token == 'X') { $token = 10; } $check += ($token * $multi); --$multi; } $check %= 11; $check = ($check === 0 ? 0 : (11 - $check)); if ($check == $checksum) { return true; } elseif (($check == 10) &amp;&amp; ($checksum == 'X')) { return true; } return false; } } &lt;?php
 namespace Zend\Validator\Barcode; class Itf14 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(14); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Upca extends AbstractAdapter { public function __construct() { $this-&gt;setLength(12); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; use Zend\Validator\Exception; use Zend\Stdlib\StringUtils; use Zend\Stdlib\StringWrapper\StringWrapperInterface; class Code128 extends AbstractAdapter { protected $utf8StringWrapper; public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters(array( 'A' =&gt; array( 0 =&gt; ' ', 1 =&gt; '!', 2 =&gt; '"', 3 =&gt; '#', 4 =&gt; '$', 5 =&gt; '%', 6 =&gt; '&amp;', 7 =&gt; "'", 8 =&gt; '(', 9 =&gt; ')', 10 =&gt; '*', 11 =&gt; '+', 12 =&gt; ',', 13 =&gt; '-', 14 =&gt; '.', 15 =&gt; '/', 16 =&gt; '0', 17 =&gt; '1', 18 =&gt; '2', 19 =&gt; '3', 20 =&gt; '4', 21 =&gt; '5', 22 =&gt; '6', 23 =&gt; '7', 24 =&gt; '8', 25 =&gt; '9', 26 =&gt; ':', 27 =&gt; ';', 28 =&gt; '&lt;', 29 =&gt; '=', 30 =&gt; '&gt;', 31 =&gt; '?', 32 =&gt; '@', 33 =&gt; 'A', 34 =&gt; 'B', 35 =&gt; 'C', 36 =&gt; 'D', 37 =&gt; 'E', 38 =&gt; 'F', 39 =&gt; 'G', 40 =&gt; 'H', 41 =&gt; 'I', 42 =&gt; 'J', 43 =&gt; 'K', 44 =&gt; 'L', 45 =&gt; 'M', 46 =&gt; 'N', 47 =&gt; 'O', 48 =&gt; 'P', 49 =&gt; 'Q', 50 =&gt; 'R', 51 =&gt; 'S', 52 =&gt; 'T', 53 =&gt; 'U', 54 =&gt; 'V', 55 =&gt; 'W', 56 =&gt; 'X', 57 =&gt; 'Y', 58 =&gt; 'Z', 59 =&gt; '[', 60 =&gt; '\\',61 =&gt; ']', 62 =&gt; '^', 63 =&gt; '_', 64 =&gt;0x00, 65 =&gt;0x01, 66 =&gt;0x02, 67 =&gt;0x03, 68 =&gt;0x04, 69 =&gt;0x05, 70 =&gt;0x06, 71 =&gt;0x07, 72 =&gt;0x08, 73 =&gt;0x09, 74 =&gt;0x0A, 75 =&gt;0x0B, 76 =&gt;0x0C, 77 =&gt;0x0D, 78 =&gt;0x0E, 79 =&gt;0x0F, 80 =&gt;0x10, 81 =&gt;0x11, 82 =&gt;0x12, 83 =&gt;0x13, 84 =&gt;0x14, 85 =&gt;0x15, 86 =&gt;0x16, 87 =&gt;0x17, 88 =&gt;0x18, 89 =&gt;0x19, 90 =&gt;0x1A, 91 =&gt;0x1B, 92 =&gt;0x1C, 93 =&gt;0x1D, 94 =&gt;0x1E, 95 =&gt;0x1F, 96 =&gt; 'Ç', 97 =&gt; 'ü', 98 =&gt; 'é', 99 =&gt; 'â',100 =&gt; 'ä',101 =&gt; 'à',102 =&gt; 'å',103 =&gt; '‡', 104 =&gt; 'ˆ',105 =&gt; '‰',106 =&gt; 'Š'), 'B' =&gt; array( 0 =&gt; ' ', 1 =&gt; '!', 2 =&gt; '"', 3 =&gt; '#', 4 =&gt; '$', 5 =&gt; '%', 6 =&gt; '&amp;', 7 =&gt; "'", 8 =&gt; '(', 9 =&gt; ')', 10 =&gt; '*', 11 =&gt; '+', 12 =&gt; ',', 13 =&gt; '-', 14 =&gt; '.', 15 =&gt; '/', 16 =&gt; '0', 17 =&gt; '1', 18 =&gt; '2', 19 =&gt; '3', 20 =&gt; '4', 21 =&gt; '5', 22 =&gt; '6', 23 =&gt; '7', 24 =&gt; '8', 25 =&gt; '9', 26 =&gt; ':', 27 =&gt; ';', 28 =&gt; '&lt;', 29 =&gt; '=', 30 =&gt; '&gt;', 31 =&gt; '?', 32 =&gt; '@', 33 =&gt; 'A', 34 =&gt; 'B', 35 =&gt; 'C', 36 =&gt; 'D', 37 =&gt; 'E', 38 =&gt; 'F', 39 =&gt; 'G', 40 =&gt; 'H', 41 =&gt; 'I', 42 =&gt; 'J', 43 =&gt; 'K', 44 =&gt; 'L', 45 =&gt; 'M', 46 =&gt; 'N', 47 =&gt; 'O', 48 =&gt; 'P', 49 =&gt; 'Q', 50 =&gt; 'R', 51 =&gt; 'S', 52 =&gt; 'T', 53 =&gt; 'U', 54 =&gt; 'V', 55 =&gt; 'W', 56 =&gt; 'X', 57 =&gt; 'Y', 58 =&gt; 'Z', 59 =&gt; '[', 60 =&gt; '\\',61 =&gt; ']', 62 =&gt; '^', 63 =&gt; '_', 64 =&gt; '`', 65 =&gt; 'a', 66 =&gt; 'b', 67 =&gt; 'c', 68 =&gt; 'd', 69 =&gt; 'e', 70 =&gt; 'f', 71 =&gt; 'g', 72 =&gt; 'h', 73 =&gt; 'i', 74 =&gt; 'j', 75 =&gt; 'k', 76 =&gt; 'l', 77 =&gt; 'm', 78 =&gt; 'n', 79 =&gt; 'o', 80 =&gt; 'p', 81 =&gt; 'q', 82 =&gt; 'r', 83 =&gt; 's', 84 =&gt; 't', 85 =&gt; 'u', 86 =&gt; 'v', 87 =&gt; 'w', 88 =&gt; 'x', 89 =&gt; 'y', 90 =&gt; 'z', 91 =&gt; '{', 92 =&gt; '|', 93 =&gt; '}', 94 =&gt; '~', 95 =&gt;0x7F, 96 =&gt; 'Ç', 97 =&gt; 'ü', 98 =&gt; 'é', 99 =&gt; 'â',100 =&gt; 'ä',101 =&gt; 'à',102 =&gt; 'å',103 =&gt; '‡', 104 =&gt; 'ˆ',105 =&gt; '‰',106 =&gt; 'Š'), 'C' =&gt; array( 0 =&gt; '00', 1 =&gt; '01', 2 =&gt; '02', 3 =&gt; '03', 4 =&gt; '04', 5 =&gt; '05', 6 =&gt; '06', 7 =&gt; '07', 8 =&gt; '08', 9 =&gt; '09', 10 =&gt; '10', 11 =&gt; '11', 12 =&gt; '12', 13 =&gt; '13', 14 =&gt; '14', 15 =&gt; '15', 16 =&gt; '16', 17 =&gt; '17', 18 =&gt; '18', 19 =&gt; '19', 20 =&gt; '20', 21 =&gt; '21', 22 =&gt; '22', 23 =&gt; '23', 24 =&gt; '24', 25 =&gt; '25', 26 =&gt; '26', 27 =&gt; '27', 28 =&gt; '28', 29 =&gt; '29', 30 =&gt; '30', 31 =&gt; '31', 32 =&gt; '32', 33 =&gt; '33', 34 =&gt; '34', 35 =&gt; '35', 36 =&gt; '36', 37 =&gt; '37', 38 =&gt; '38', 39 =&gt; '39', 40 =&gt; '40', 41 =&gt; '41', 42 =&gt; '42', 43 =&gt; '43', 44 =&gt; '44', 45 =&gt; '45', 46 =&gt; '46', 47 =&gt; '47', 48 =&gt; '48', 49 =&gt; '49', 50 =&gt; '50', 51 =&gt; '51', 52 =&gt; '52', 53 =&gt; '53', 54 =&gt; '54', 55 =&gt; '55', 56 =&gt; '56', 57 =&gt; '57', 58 =&gt; '58', 59 =&gt; '59', 60 =&gt; '60', 61 =&gt; '61', 62 =&gt; '62', 63 =&gt; '63', 64 =&gt; '64', 65 =&gt; '65', 66 =&gt; '66', 67 =&gt; '67', 68 =&gt; '68', 69 =&gt; '69', 70 =&gt; '70', 71 =&gt; '71', 72 =&gt; '72', 73 =&gt; '73', 74 =&gt; '74', 75 =&gt; '75', 76 =&gt; '76', 77 =&gt; '77', 78 =&gt; '78', 79 =&gt; '79', 80 =&gt; '80', 81 =&gt; '81', 82 =&gt; '82', 83 =&gt; '83', 84 =&gt; '84', 85 =&gt; '85', 86 =&gt; '86', 87 =&gt; '87', 88 =&gt; '88', 89 =&gt; '89', 90 =&gt; '90', 91 =&gt; '91', 92 =&gt; '92', 93 =&gt; '93', 94 =&gt; '94', 95 =&gt; '95', 96 =&gt; '96', 97 =&gt; '97', 98 =&gt; '98', 99 =&gt; '99',100 =&gt; 'ä', 101 =&gt; 'à', 102 =&gt; 'å', 103 =&gt; '‡', 104 =&gt; 'ˆ', 105 =&gt; '‰', 106 =&gt; 'Š'))); $this-&gt;setChecksum('code128'); } public function setUtf8StringWrapper(StringWrapperInterface $utf8StringWrapper) { if (!$utf8StringWrapper-&gt;isSupported('UTF-8')) { throw new Exception\InvalidArgumentException( "The string wrapper needs to support UTF-8 character encoding" ); } $this-&gt;utf8StringWrapper = $utf8StringWrapper; } public function getUtf8StringWrapper() { if (!$this-&gt;utf8StringWrapper) { $this-&gt;utf8StringWrapper = StringUtils::getWrapper('UTF-8'); } return $this-&gt;utf8StringWrapper; } public function hasValidCharacters($value) { if (!is_string($value)) { return false; } $strWrapper = $this-&gt;getUtf8StringWrapper(); $set = $this-&gt;getCodingSet($value); $read = $set; if ($set != '') { $value = $strWrapper-&gt;substr($value, 1, null); } while ($value != '') { $char = $strWrapper-&gt;substr($value, 0, 1); switch ($char) { case 'Ç' : case 'ü' : case 'å' : break; case 'é' : if ($set == 'A') { $read = 'B'; } elseif ($set == 'B') { $read = 'A'; } break; case 'â' : $set = 'C'; $read = 'C'; break; case 'ä' : $set = 'B'; $read = 'B'; break; case 'à' : $set = 'A'; $read = 'A'; break; case '‡' : case 'ˆ' : case '‰' : return false; break; case 'Š' : break 2; default: if ($this-&gt;ord128($char, $read) == -1) { return false; } break; } $value = $strWrapper-&gt;substr($value, 1, null); $read = $set; } if (($value != '') &amp;&amp; ($strWrapper-&gt;strlen($value) != 1)) { return false; } return true; } protected function code128($value) { $sum = 0; $pos = 1; $set = $this-&gt;getCodingSet($value); $read = $set; $usecheck = $this-&gt;useChecksum(null); $strWrapper = $this-&gt;getUtf8StringWrapper(); $char = $strWrapper-&gt;substr($value, 0, 1); if ($char == '‡') { $sum = 103; } elseif ($char == 'ˆ') { $sum = 104; } elseif ($char == '‰') { $sum = 105; } elseif ($usecheck == true) { return false; } $value = $strWrapper-&gt;substr($value, 1, null); while ($strWrapper-&gt;strpos($value, 'Š') || ($value != '')) { $char = $strWrapper-&gt;substr($value, 0, 1); if ($read == 'C') { $char = $strWrapper-&gt;substr($value, 0, 2); } switch ($char) { case 'Ç' : case 'ü' : case 'å' : $sum += ($pos * $this-&gt;ord128($char, $set)); break; case 'é' : $sum += ($pos * $this-&gt;ord128($char, $set)); if ($set == 'A') { $read = 'B'; } elseif ($set == 'B') { $read = 'A'; } break; case 'â' : $sum += ($pos * $this-&gt;ord128($char, $set)); $set = 'C'; $read = 'C'; break; case 'ä' : $sum += ($pos * $this-&gt;ord128($char, $set)); $set = 'B'; $read = 'B'; break; case 'à' : $sum += ($pos * $this-&gt;ord128($char, $set)); $set = 'A'; $read = 'A'; break; case '‡' : case 'ˆ' : case '‰' : return false; break; default: if ($this-&gt;ord128($char, $read) == -1) { return false; } $sum += ($pos * $this-&gt;ord128($char, $set)); break; } $value = $strWrapper-&gt;substr($value, 1); ++$pos; if (($strWrapper-&gt;strpos($value, 'Š') == 1) &amp;&amp; ($strWrapper-&gt;strlen($value) == 2)) { break; } $read = $set; } if (($strWrapper-&gt;strpos($value, 'Š') != 1) || ($strWrapper-&gt;strlen($value) != 2)) { return (!$usecheck); } $mod = $sum % 103; if ($strWrapper-&gt;substr($value, 0, 1) == $this-&gt;chr128($mod, $set)) { return true; } return false; } protected function getCodingSet($value) { $value = $this-&gt;getUtf8StringWrapper()-&gt;substr($value, 0, 1); switch ($value) { case '‡' : return 'A'; break; case 'ˆ' : return 'B'; break; case '‰' : return 'C'; break; } return ''; } protected function ord128($value, $set) { $ord = ord($value); if ($set == 'A') { if ($ord &lt; 32) { return ($ord + 64); } elseif ($ord &lt; 96) { return ($ord - 32); } elseif ($ord &gt; 138) { return -1; } else { return ($ord - 32); } } elseif ($set == 'B') { if ($ord &lt; 32) { return -1; } elseif ($ord &lt;= 138) { return ($ord - 32); } else { return -1; } } elseif ($set == 'C') { $val = (int) $value; if (($val &gt;= 0) &amp;&amp; ($val &lt;= 99)) { return $val; } elseif (($ord &gt;= 132) &amp;&amp; ($ord &lt;= 138)) { return ($ord - 32); } else { return -1; } } else { if ($ord &lt; 32) { return ($ord +64); } elseif ($ord &lt;= 138) { return ($ord - 32); } else { return -1; } } } protected function chr128($value, $set) { if ($set == 'A') { if ($value &lt; 64) { return chr($value + 32); } elseif ($value &lt; 96) { return chr($value - 64); } elseif ($value &gt; 106) { return -1; } else { return chr($value + 32); } } elseif ($set == 'B') { if ($value &gt; 106) { return -1; } else { return chr($value + 32); } } elseif ($set == 'C') { if (($value &gt;= 0) &amp;&amp; ($value &lt;= 9)) { return "0" . (string) $value; } elseif ($value &lt;= 99) { return (string) $value; } elseif ($value &lt;= 106) { return chr($value + 32); } else { return -1; } } else { if ($value &lt;= 106) { return ($value + 32); } else { return -1; } } } } &lt;?php
 namespace Zend\Validator\Barcode; class Sscc extends AbstractAdapter { public function __construct() { $this-&gt;setLength(18); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Royalmail extends AbstractAdapter { protected $rows = array( '0' =&gt; 1, '1' =&gt; 1, '2' =&gt; 1, '3' =&gt; 1, '4' =&gt; 1, '5' =&gt; 1, '6' =&gt; 2, '7' =&gt; 2, '8' =&gt; 2, '9' =&gt; 2, 'A' =&gt; 2, 'B' =&gt; 2, 'C' =&gt; 3, 'D' =&gt; 3, 'E' =&gt; 3, 'F' =&gt; 3, 'G' =&gt; 3, 'H' =&gt; 3, 'I' =&gt; 4, 'J' =&gt; 4, 'K' =&gt; 4, 'L' =&gt; 4, 'M' =&gt; 4, 'N' =&gt; 4, 'O' =&gt; 5, 'P' =&gt; 5, 'Q' =&gt; 5, 'R' =&gt; 5, 'S' =&gt; 5, 'T' =&gt; 5, 'U' =&gt; 0, 'V' =&gt; 0, 'W' =&gt; 0, 'X' =&gt; 0, 'Y' =&gt; 0, 'Z' =&gt; 0, ); protected $columns = array( '0' =&gt; 1, '1' =&gt; 2, '2' =&gt; 3, '3' =&gt; 4, '4' =&gt; 5, '5' =&gt; 0, '6' =&gt; 1, '7' =&gt; 2, '8' =&gt; 3, '9' =&gt; 4, 'A' =&gt; 5, 'B' =&gt; 0, 'C' =&gt; 1, 'D' =&gt; 2, 'E' =&gt; 3, 'F' =&gt; 4, 'G' =&gt; 5, 'H' =&gt; 0, 'I' =&gt; 1, 'J' =&gt; 2, 'K' =&gt; 3, 'L' =&gt; 4, 'M' =&gt; 5, 'N' =&gt; 0, 'O' =&gt; 1, 'P' =&gt; 2, 'Q' =&gt; 3, 'R' =&gt; 4, 'S' =&gt; 5, 'T' =&gt; 0, 'U' =&gt; 1, 'V' =&gt; 2, 'W' =&gt; 3, 'X' =&gt; 4, 'Y' =&gt; 5, 'Z' =&gt; 0, ); public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'); $this-&gt;setChecksum('royalmail'); } protected function royalmail($value) { $checksum = substr($value, -1, 1); $values = str_split(substr($value, 0, -1)); $rowvalue = 0; $colvalue = 0; foreach ($values as $row) { $rowvalue += $this-&gt;rows[$row]; $colvalue += $this-&gt;columns[$row]; } $rowvalue %= 6; $colvalue %= 6; $rowchkvalue = array_keys($this-&gt;rows, $rowvalue); $colchkvalue = array_keys($this-&gt;columns, $colvalue); $intersect = array_intersect($rowchkvalue, $colchkvalue); $chkvalue = current($intersect); if ($chkvalue == $checksum) { return true; } return false; } public function hasValidCharacters($value) { if ($value[0] == '(') { $value = substr($value, 1); if ($value[strlen($value) - 1] == ')') { $value = substr($value, 0, -1); } else { return false; } } return parent::hasValidCharacters($value); } } &lt;?php
 namespace Zend\Validator\Barcode; class Code25interleaved extends AbstractAdapter { public function __construct() { $this-&gt;setLength('even'); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('code25'); $this-&gt;useChecksum(false); } } &lt;?php
 namespace Zend\Validator\Barcode; class Ean5 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(5); $this-&gt;setCharacters('0123456789'); $this-&gt;useChecksum(false); } } &lt;?php
 namespace Zend\Validator\Barcode; class Ean13 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(13); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Ean18 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(18); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Intelligentmail extends AbstractAdapter { public function __construct() { $this-&gt;setLength(array(20, 25, 29, 31)); $this-&gt;setCharacters('0123456789'); $this-&gt;useChecksum(false); } } &lt;?php
 namespace Zend\Validator\Barcode; class Ean14 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(14); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Gtin13 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(13); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Identcode extends AbstractAdapter { protected $length = 12; protected $characters = '0123456789'; protected $checksum = 'identcode'; public function __construct() { $this-&gt;setLength(12); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('identcode'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Gtin12 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(12); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Code93 extends AbstractAdapter { protected $check = array( '0' =&gt; 0, '1' =&gt; 1, '2' =&gt; 2, '3' =&gt; 3, '4' =&gt; 4, '5' =&gt; 5, '6' =&gt; 6, '7' =&gt; 7, '8' =&gt; 8, '9' =&gt; 9, 'A' =&gt; 10, 'B' =&gt; 11, 'C' =&gt; 12, 'D' =&gt; 13, 'E' =&gt; 14, 'F' =&gt; 15, 'G' =&gt; 16, 'H' =&gt; 17, 'I' =&gt; 18, 'J' =&gt; 19, 'K' =&gt; 20, 'L' =&gt; 21, 'M' =&gt; 22, 'N' =&gt; 23, 'O' =&gt; 24, 'P' =&gt; 25, 'Q' =&gt; 26, 'R' =&gt; 27, 'S' =&gt; 28, 'T' =&gt; 29, 'U' =&gt; 30, 'V' =&gt; 31, 'W' =&gt; 32, 'X' =&gt; 33, 'Y' =&gt; 34, 'Z' =&gt; 35, '-' =&gt; 36, '.' =&gt; 37, ' ' =&gt; 38, '$' =&gt; 39, '/' =&gt; 40, '+' =&gt; 41, '%' =&gt; 42, '!' =&gt; 43, '"' =&gt; 44, '§' =&gt; 45, '&amp;' =&gt; 46, ); public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ -.$/+%'); $this-&gt;setChecksum('code93'); $this-&gt;useChecksum(false); } protected function code93($value) { $checksum = substr($value, -2, 2); $value = str_split(substr($value, 0, -2)); $count = 0; $length = count($value) % 20; foreach ($value as $char) { if ($length == 0) { $length = 20; } $count += $this-&gt;check[$char] * $length; --$length; } $check = array_search(($count % 47), $this-&gt;check); $value[] = $check; $count = 0; $length = count($value) % 15; foreach ($value as $char) { if ($length == 0) { $length = 15; } $count += $this-&gt;check[$char] * $length; --$length; } $check .= array_search(($count % 47), $this-&gt;check); if ($check == $checksum) { return true; } return false; } } &lt;?php
 namespace Zend\Validator\Barcode; class Ean12 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(12); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } } &lt;?php
 namespace Zend\Validator\Barcode; abstract class AbstractAdapter implements AdapterInterface { protected $options = array( 'length' =&gt; null, 'characters' =&gt; null, 'checksum' =&gt; null, 'useChecksum' =&gt; true, ); public function hasValidLength($value) { if (!is_string($value)) { return false; } $fixum = strlen($value); $found = false; $length = $this-&gt;getLength(); if (is_array($length)) { foreach ($length as $value) { if ($fixum == $value) { $found = true; } if ($value == -1) { $found = true; } } } elseif ($fixum == $length) { $found = true; } elseif ($length == -1) { $found = true; } elseif ($length == 'even') { $count = $fixum % 2; $found = ($count == 0) ? true : false; } elseif ($length == 'odd') { $count = $fixum % 2; $found = ($count == 1) ? true : false; } return $found; } public function hasValidCharacters($value) { if (!is_string($value)) { return false; } $characters = $this-&gt;getCharacters(); if ($characters == 128) { for ($x = 0; $x &lt; 128; ++$x) { $value = str_replace(chr($x), '', $value); } } else { $chars = str_split($characters); foreach ($chars as $char) { $value = str_replace($char, '', $value); } } if (strlen($value) &gt; 0) { return false; } return true; } public function hasValidChecksum($value) { $checksum = $this-&gt;getChecksum(); if (!empty($checksum)) { if (method_exists($this, $checksum)) { return $this-&gt;$checksum($value); } } return false; } public function getLength() { return $this-&gt;options['length']; } public function getCharacters() { return $this-&gt;options['characters']; } public function getChecksum() { return $this-&gt;options['checksum']; } protected function setChecksum($checksum) { $this-&gt;options['checksum'] = $checksum; return $this; } public function useChecksum($check = null) { if ($check === null) { return $this-&gt;options['useChecksum']; } $this-&gt;options['useChecksum'] = (bool) $check; return $this; } protected function setLength($length) { $this-&gt;options['length'] = $length; return $this; } protected function setCharacters($characters) { $this-&gt;options['characters'] = $characters; return $this; } protected function gtin($value) { $barcode = substr($value, 0, -1); $sum = 0; $length = strlen($barcode) - 1; for ($i = 0; $i &lt;= $length; $i++) { if (($i % 2) === 0) { $sum += $barcode[$length - $i] * 3; } else { $sum += $barcode[$length - $i]; } } $calc = $sum % 10; $checksum = ($calc === 0) ? 0 : (10 - $calc); if ($value[$length + 1] != $checksum) { return false; } return true; } protected function identcode($value) { $barcode = substr($value, 0, -1); $sum = 0; $length = strlen($value) - 2; for ($i = 0; $i &lt;= $length; $i++) { if (($i % 2) === 0) { $sum += $barcode[$length - $i] * 4; } else { $sum += $barcode[$length - $i] * 9; } } $calc = $sum % 10; $checksum = ($calc === 0) ? 0 : (10 - $calc); if ($value[$length + 1] != $checksum) { return false; } return true; } protected function code25($value) { $barcode = substr($value, 0, -1); $sum = 0; $length = strlen($barcode) - 1; for ($i = 0; $i &lt;= $length; $i++) { if (($i % 2) === 0) { $sum += $barcode[$i] * 3; } else { $sum += $barcode[$i]; } } $calc = $sum % 10; $checksum = ($calc === 0) ? 0 : (10 - $calc); if ($value[$length + 1] != $checksum) { return false; } return true; } protected function postnet($value) { $checksum = substr($value, -1, 1); $values = str_split(substr($value, 0, -1)); $check = 0; foreach ($values as $row) { $check += $row; } $check %= 10; $check = 10 - $check; if ($check == $checksum) { return true; } return false; } } &lt;?php
 namespace Zend\Validator\Barcode; class Leitcode extends AbstractAdapter { public function __construct() { $this-&gt;setLength(14); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('identcode'); } } &lt;?php
 namespace Zend\Validator\Barcode; class Code93ext extends AbstractAdapter { public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters(128); $this-&gt;useChecksum(false); } } &lt;?php
 namespace Zend\Validator\Barcode; class Ean8 extends AbstractAdapter { public function __construct() { $this-&gt;setLength(array(7, 8)); $this-&gt;setCharacters('0123456789'); $this-&gt;setChecksum('gtin'); } public function hasValidLength($value) { if (strlen($value) == 7) { $this-&gt;useChecksum(false); } else { $this-&gt;useChecksum(true); } return parent::hasValidLength($value); } } &lt;?php
 namespace Zend\Validator\Barcode; class Codabar extends AbstractAdapter { public function __construct() { $this-&gt;setLength(-1); $this-&gt;setCharacters('0123456789-$:/.+ABCDTN*E'); $this-&gt;useChecksum(false); } public function hasValidCharacters($value) { if (strpbrk($value, 'ABCD')) { $first = $value[0]; if (!strpbrk($first, 'ABCD')) { return false; } $last = substr($value, -1, 1); if (!strpbrk($last, 'ABCD')) { return false; } $value = substr($value, 1, -1); } elseif (strpbrk($value, 'TN*E')) { $first = $value[0]; if (!strpbrk($first, 'TN*E')) { return false; } $last = substr($value, -1, 1); if (!strpbrk($last, 'TN*E')) { return false; } $value = substr($value, 1, -1); } $chars = $this-&gt;getCharacters(); $this-&gt;setCharacters('0123456789-$:/.+'); $result = parent::hasValidCharacters($value); $this-&gt;setCharacters($chars); return $result; } } &lt;?php
 namespace Zend\Validator; use Traversable; use Zend\I18n\Translator\Translator; use Zend\I18n\Translator\TranslatorAwareInterface; use Zend\Stdlib\ArrayUtils; use Zend\Validator\Exception\InvalidArgumentException; abstract class AbstractValidator implements TranslatorAwareInterface, ValidatorInterface { protected $value; protected static $defaultTranslator; protected static $defaultTranslatorTextDomain = 'default'; protected static $messageLength = -1; protected $abstractOptions = array( 'messages' =&gt; array(), 'messageTemplates' =&gt; array(), 'messageVariables' =&gt; array(), 'translator' =&gt; null, 'translatorTextDomain' =&gt; null, 'translatorEnabled' =&gt; true, 'valueObscured' =&gt; false, ); public function __construct($options = null) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (isset($this-&gt;messageTemplates)) { $this-&gt;abstractOptions['messageTemplates'] = $this-&gt;messageTemplates; } if (isset($this-&gt;messageVariables)) { $this-&gt;abstractOptions['messageVariables'] = $this-&gt;messageVariables; } if (is_array($options)) { $this-&gt;setOptions($options); } } public function getOption($option) { if (array_key_exists($option, $this-&gt;abstractOptions)) { return $this-&gt;abstractOptions[$option]; } if (isset($this-&gt;options) &amp;&amp; array_key_exists($option, $this-&gt;options)) { return $this-&gt;options[$option]; } throw new InvalidArgumentException("Invalid option '$option'"); } public function getOptions() { $result = $this-&gt;abstractOptions; if (isset($this-&gt;options)) { $result += $this-&gt;options; } return $result; } public function setOptions($options = array()) { if (!is_array($options) &amp;&amp; !$options instanceof Traversable) { throw new Exception\InvalidArgumentException(__METHOD__ . ' expects an array or Traversable'); } foreach ($options as $name =&gt; $option) { $fname = 'set' . ucfirst($name); $fname2 = 'is' . ucfirst($name); if (($name != 'setOptions') &amp;&amp; method_exists($this, $name)) { $this-&gt;{$name}($option); } elseif (($fname != 'setOptions') &amp;&amp; method_exists($this, $fname)) { $this-&gt;{$fname}($option); } elseif (method_exists($this, $fname2)) { $this-&gt;{$fname2}($option); } elseif (isset($this-&gt;options)) { $this-&gt;options[$name] = $option; } else { $this-&gt;abstractOptions[$name] = $options; } } return $this; } public function getMessages() { return $this-&gt;abstractOptions['messages']; } public function __invoke($value) { return $this-&gt;isValid($value); } public function getMessageVariables() { return array_keys($this-&gt;abstractOptions['messageVariables']); } public function getMessageTemplates() { return $this-&gt;abstractOptions['messageTemplates']; } public function setMessage($messageString, $messageKey = null) { if ($messageKey === null) { $keys = array_keys($this-&gt;abstractOptions['messageTemplates']); foreach ($keys as $key) { $this-&gt;setMessage($messageString, $key); } return $this; } if (!isset($this-&gt;abstractOptions['messageTemplates'][$messageKey])) { throw new InvalidArgumentException("No message template exists for key '$messageKey'"); } $this-&gt;abstractOptions['messageTemplates'][$messageKey] = $messageString; return $this; } public function setMessages(array $messages) { foreach ($messages as $key =&gt; $message) { $this-&gt;setMessage($message, $key); } return $this; } public function __get($property) { if ($property == 'value') { return $this-&gt;value; } if (array_key_exists($property, $this-&gt;abstractOptions['messageVariables'])) { $result = $this-&gt;abstractOptions['messageVariables'][$property]; if (is_array($result)) { $result = $this-&gt;{key($result)}[current($result)]; } else { $result = $this-&gt;{$result}; } return $result; } if (isset($this-&gt;messageVariables) &amp;&amp; array_key_exists($property, $this-&gt;messageVariables)) { $result = $this-&gt;{$this-&gt;messageVariables[$property]}; if (is_array($result)) { $result = $this-&gt;{key($result)}[current($result)]; } else { $result = $this-&gt;{$result}; } return $result; } throw new InvalidArgumentException("No property exists by the name '$property'"); } protected function createMessage($messageKey, $value) { if (!isset($this-&gt;abstractOptions['messageTemplates'][$messageKey])) { return null; } $message = $this-&gt;abstractOptions['messageTemplates'][$messageKey]; $message = $this-&gt;translateMessage($messageKey, $message); if (is_object($value) &amp;&amp; !in_array('__toString', get_class_methods($value)) ) { $value = get_class($value) . ' object'; } elseif (is_array($value)) { $value = var_export($value, 1); } else { $value = (string) $value; } if ($this-&gt;isValueObscured()) { $value = str_repeat('*', strlen($value)); } $message = str_replace('%value%', (string) $value, $message); foreach ($this-&gt;abstractOptions['messageVariables'] as $ident =&gt; $property) { if (is_array($property)) { $value = $this-&gt;{key($property)}[current($property)]; if (is_array($value)) { $value = '[' . implode(', ', $value) . ']'; } } else { $value = $this-&gt;$property; } $message = str_replace("%$ident%", (string) $value, $message); } $length = self::getMessageLength(); if (($length &gt; -1) &amp;&amp; (strlen($message) &gt; $length)) { $message = substr($message, 0, ($length - 3)) . '...'; } return $message; } protected function error($messageKey, $value = null) { if ($messageKey === null) { $keys = array_keys($this-&gt;abstractOptions['messageTemplates']); $messageKey = current($keys); } if ($value === null) { $value = $this-&gt;value; } $this-&gt;abstractOptions['messages'][$messageKey] = $this-&gt;createMessage($messageKey, $value); } protected function getValue() { return $this-&gt;value; } protected function setValue($value) { $this-&gt;value = $value; $this-&gt;abstractOptions['messages'] = array(); } public function setValueObscured($flag) { $this-&gt;abstractOptions['valueObscured'] = (bool) $flag; return $this; } public function isValueObscured() { return $this-&gt;abstractOptions['valueObscured']; } public function setTranslator(Translator $translator = null, $textDomain = null) { $this-&gt;abstractOptions['translator'] = $translator; if (null !== $textDomain) { $this-&gt;setTranslatorTextDomain($textDomain); } return $this; } public function getTranslator() { if (! $this-&gt;isTranslatorEnabled()) { return null; } if (null === $this-&gt;abstractOptions['translator']) { $this-&gt;abstractOptions['translator'] = self::getDefaultTranslator(); } return $this-&gt;abstractOptions['translator']; } public function hasTranslator() { return (bool) $this-&gt;abstractOptions['translator']; } public function setTranslatorTextDomain($textDomain = 'default') { $this-&gt;abstractOptions['translatorTextDomain'] = $textDomain; return $this; } public function getTranslatorTextDomain() { if (null === $this-&gt;abstractOptions['translatorTextDomain']) { $this-&gt;abstractOptions['translatorTextDomain'] = self::getDefaultTranslatorTextDomain(); } return $this-&gt;abstractOptions['translatorTextDomain']; } public static function setDefaultTranslator( Translator $translator = null, $textDomain = null ) { static::$defaultTranslator = $translator; if (null !== $textDomain) { self::setDefaultTranslatorTextDomain($textDomain); } } public static function getDefaultTranslator() { return static::$defaultTranslator; } public static function hasDefaultTranslator() { return (bool) static::$defaultTranslator; } public static function setDefaultTranslatorTextDomain($textDomain = 'default') { static::$defaultTranslatorTextDomain = $textDomain; } public static function getDefaultTranslatorTextDomain() { return static::$defaultTranslatorTextDomain; } public function setTranslatorEnabled($flag = true) { $this-&gt;abstractOptions['translatorEnabled'] = (bool) $flag; return $this; } public function isTranslatorEnabled() { return $this-&gt;abstractOptions['translatorEnabled']; } public static function getMessageLength() { return static::$messageLength; } public static function setMessageLength($length = -1) { static::$messageLength = $length; } protected function translateMessage($messageKey, $message) { $translator = $this-&gt;getTranslator(); if (!$translator) { return $message; } $translated = $translator-&gt;translate( $messageKey, $this-&gt;getTranslatorTextDomain() ); if ($translated !== $messageKey) { return $translated; } return $translator-&gt;translate( $message, $this-&gt;getTranslatorTextDomain() ); } } &lt;?php
 namespace Zend\Http; use ArrayIterator; use Countable; use Iterator; use Traversable; use Zend\Http\HeaderLoader; use Zend\Loader\PluginClassLocator; class Headers implements Countable, Iterator { protected $pluginClassLoader = null; protected $headersKeys = array(); protected $headers = array(); public static function fromString($string) { $headers = new static(); $current = array(); foreach (explode("\r\n", $string) as $line) { if (preg_match('/^(?P&lt;name&gt;[^()&gt;&lt;@,;:\"\\/\[\]?=}{ \t]+):.*$/', $line, $matches)) { if ($current) { $headers-&gt;headersKeys[] = static::createKey($current['name']); $headers-&gt;headers[] = $current; } $current = array( 'name' =&gt; $matches['name'], 'line' =&gt; trim($line) ); } elseif (preg_match('/^\s+.*$/', $line, $matches)) { $current['line'] .= trim($line); } elseif (preg_match('/^\s*$/', $line)) { break; } else { throw new Exception\RuntimeException(sprintf( 'Line "%s"does not match header format!', $line )); } } if ($current) { $headers-&gt;headersKeys[] = static::createKey($current['name']); $headers-&gt;headers[] = $current; } return $headers; } public function setPluginClassLoader(PluginClassLocator $pluginClassLoader) { $this-&gt;pluginClassLoader = $pluginClassLoader; return $this; } public function getPluginClassLoader() { if ($this-&gt;pluginClassLoader === null) { $this-&gt;pluginClassLoader = new HeaderLoader(); } return $this-&gt;pluginClassLoader; } public function addHeaders($headers) { if (!is_array($headers) &amp;&amp; !$headers instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( 'Expected array or Traversable; received "%s"', (is_object($headers) ? get_class($headers) : gettype($headers)) )); } foreach ($headers as $name =&gt; $value) { if (is_int($name)) { if (is_string($value)) { $this-&gt;addHeaderLine($value); } elseif (is_array($value) &amp;&amp; count($value) == 1) { $this-&gt;addHeaderLine(key($value), current($value)); } elseif (is_array($value) &amp;&amp; count($value) == 2) { $this-&gt;addHeaderLine($value[0], $value[1]); } elseif ($value instanceof Header\HeaderInterface) { $this-&gt;addHeader($value); } } elseif (is_string($name)) { $this-&gt;addHeaderLine($name, $value); } } return $this; } public function addHeaderLine($headerFieldNameOrLine, $fieldValue = null) { $matches = null; if (preg_match('/^(?P&lt;name&gt;[^()&gt;&lt;@,;:\"\\/\[\]?=}{ \t]+):.*$/', $headerFieldNameOrLine, $matches) &amp;&amp; $fieldValue === null) { $headerName = $matches['name']; $headerKey = static::createKey($matches['name']); $line = $headerFieldNameOrLine; } elseif ($fieldValue === null) { throw new Exception\InvalidArgumentException('A field name was provided without a field value'); } else { $headerName = $headerFieldNameOrLine; $headerKey = static::createKey($headerFieldNameOrLine); if (is_array($fieldValue)) { $fieldValue = implode(', ', $fieldValue); } $line = $headerFieldNameOrLine . ': ' . $fieldValue; } $this-&gt;headersKeys[] = $headerKey; $this-&gt;headers[] = array('name' =&gt; $headerName, 'line' =&gt; $line); return $this; } public function addHeader(Header\HeaderInterface $header) { $this-&gt;headersKeys[] = static::createKey($header-&gt;getFieldName()); $this-&gt;headers[] = $header; return $this; } public function removeHeader(Header\HeaderInterface $header) { $index = array_search($header, $this-&gt;headers, true); if ($index !== false) { unset($this-&gt;headersKeys[$index]); unset($this-&gt;headers[$index]); return true; } return false; } public function clearHeaders() { $this-&gt;headers = $this-&gt;headersKeys = array(); return $this; } public function get($name) { $key = static::createKey($name); if (!in_array($key, $this-&gt;headersKeys)) { return false; } $class = ($this-&gt;getPluginClassLoader()-&gt;load($key)) ?: 'Zend\Http\Header\GenericHeader'; if (in_array('Zend\Http\Header\MultipleHeaderInterface', class_implements($class, true))) { $headers = array(); foreach (array_keys($this-&gt;headersKeys, $key) as $index) { if (is_array($this-&gt;headers[$index])) { $this-&gt;lazyLoadHeader($index); } } foreach (array_keys($this-&gt;headersKeys, $key) as $index) { $headers[] = $this-&gt;headers[$index]; } return new ArrayIterator($headers); } $index = array_search($key, $this-&gt;headersKeys); if ($index === false) { return false; } if (is_array($this-&gt;headers[$index])) { return $this-&gt;lazyLoadHeader($index); } return $this-&gt;headers[$index]; } public function has($name) { return (in_array(static::createKey($name), $this-&gt;headersKeys)); } public function next() { next($this-&gt;headers); } public function key() { return (key($this-&gt;headers)); } public function valid() { return (current($this-&gt;headers) !== false); } public function rewind() { reset($this-&gt;headers); } public function current() { $current = current($this-&gt;headers); if (is_array($current)) { $current = $this-&gt;lazyLoadHeader(key($this-&gt;headers)); } return $current; } public function count() { return count($this-&gt;headers); } public function toString() { $headers = ''; foreach ($this-&gt;toArray() as $fieldName =&gt; $fieldValue) { if (is_array($fieldValue)) { foreach ($fieldValue as $value) { $headers .= $fieldName . ': ' . $value . "\r\n"; } continue; } $headers .= $fieldName . ': ' . $fieldValue . "\r\n"; } return $headers; } public function toArray() { $headers = array(); foreach ($this-&gt;headers as $header) { if ($header instanceof Header\MultipleHeaderInterface) { $name = $header-&gt;getFieldName(); if (!isset($headers[$name])) { $headers[$name] = array(); } $headers[$name][] = $header-&gt;getFieldValue(); } elseif ($header instanceof Header\HeaderInterface) { $headers[$header-&gt;getFieldName()] = $header-&gt;getFieldValue(); } else { $matches = null; preg_match('/^(?P&lt;name&gt;[^()&gt;&lt;@,;:\"\\/\[\]?=}{ \t]+):\s*(?P&lt;value&gt;.*)$/', $header['line'], $matches); if ($matches) { $headers[$matches['name']] = $matches['value']; } } } return $headers; } public function forceLoading() { foreach ($this as $item) { } return true; } protected function lazyLoadHeader($index) { $current = $this-&gt;headers[$index]; $key = $this-&gt;headersKeys[$index]; $class = ($this-&gt;getPluginClassLoader()-&gt;load($key)) ?: 'Zend\Http\Header\GenericHeader'; $headers = $class::fromString($current['line']); if (is_array($headers)) { $this-&gt;headers[$index] = $current = array_shift($headers); foreach ($headers as $header) { $this-&gt;headersKeys[] = $key; $this-&gt;headers[] = $header; } return $current; } $this-&gt;headers[$index] = $current = $headers; return $current; } protected static function createKey($name) { return str_replace(array('-', '_', ' ', '.'), '', strtolower($name)); } } &lt;?php
 namespace Zend\Http\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Http\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\Http\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\Http\Exception; class OutOfRangeException extends \OutOfRangeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Http; use Zend\Stdlib\Message; abstract class AbstractMessage extends Message { const VERSION_10 = '1.0'; const VERSION_11 = '1.1'; protected $version = self::VERSION_11; protected $headers = null; public function setVersion($version) { if ($version != self::VERSION_10 &amp;&amp; $version != self::VERSION_11) { throw new Exception\InvalidArgumentException( 'Not valid or not supported HTTP version: ' . $version ); } $this-&gt;version = $version; return $this; } public function getVersion() { return $this-&gt;version; } public function setHeaders(Headers $headers) { $this-&gt;headers = $headers; return $this; } public function getHeaders() { if ($this-&gt;headers === null || is_string($this-&gt;headers)) { $this-&gt;headers = (is_string($this-&gt;headers)) ? Headers::fromString($this-&gt;headers) : new Headers(); } return $this-&gt;headers; } public function __toString() { return $this-&gt;toString(); } } &lt;?php
 namespace Zend\Http; use ArrayIterator; use Traversable; use Zend\Stdlib; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\ErrorHandler; use Zend\Uri\Http; class Client implements Stdlib\DispatchableInterface { const AUTH_BASIC = 'basic'; const AUTH_DIGEST = 'digest'; const ENC_URLENCODED = 'application/x-www-form-urlencoded'; const ENC_FORMDATA = 'multipart/form-data'; const DIGEST_REALM = 'realm'; const DIGEST_QOP = 'qop'; const DIGEST_NONCE = 'nonce'; const DIGEST_OPAQUE = 'opaque'; const DIGEST_NC = 'nc'; const DIGEST_CNONCE = 'cnonce'; protected $response; protected $request; protected $adapter; protected $auth = array(); protected $streamName = null; protected $cookies = array(); protected $encType = ''; protected $lastRawRequest = null; protected $lastRawResponse = null; protected $redirectCounter = 0; protected $config = array( 'maxredirects' =&gt; 5, 'strictredirects' =&gt; false, 'useragent' =&gt; 'Zend\Http\Client', 'timeout' =&gt; 10, 'adapter' =&gt; 'Zend\Http\Client\Adapter\Socket', 'httpversion' =&gt; Request::VERSION_11, 'storeresponse' =&gt; true, 'keepalive' =&gt; false, 'outputstream' =&gt; false, 'encodecookies' =&gt; true, 'argseparator' =&gt; null, 'rfc3986strict' =&gt; false ); protected static $fileInfoDb = null; public function __construct($uri = null, $options = null) { if ($uri !== null) { $this-&gt;setUri($uri); } if ($options !== null) { $this-&gt;setOptions($options); } } public function setOptions($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { throw new Client\Exception\InvalidArgumentException('Config parameter is not valid'); } foreach ($options as $k =&gt; $v) { $this-&gt;config[str_replace(array('-', '_', ' ', '.'), '', strtolower($k))] = $v; } if ($this-&gt;adapter instanceof Client\Adapter\AdapterInterface) { $this-&gt;adapter-&gt;setOptions($options); } return $this; } public function setAdapter($adapter) { if (is_string($adapter)) { if (!class_exists($adapter)) { throw new Client\Exception\InvalidArgumentException('Unable to locate adapter class "' . $adapter . '"'); } $adapter = new $adapter; } if (! $adapter instanceof Client\Adapter\AdapterInterface) { throw new Client\Exception\InvalidArgumentException('Passed adapter is not a HTTP connection adapter'); } $this-&gt;adapter = $adapter; $config = $this-&gt;config; unset($config['adapter']); $this-&gt;adapter-&gt;setOptions($config); return $this; } public function getAdapter() { return $this-&gt;adapter; } public function setRequest(Request $request) { $this-&gt;request = $request; return $this; } public function getRequest() { if (empty($this-&gt;request)) { $this-&gt;request = new Request(); } return $this-&gt;request; } public function setResponse(Response $response) { $this-&gt;response = $response; return $this; } public function getResponse() { if (empty($this-&gt;response)) { $this-&gt;response = new Response(); } return $this-&gt;response; } public function getLastRawRequest() { return $this-&gt;lastRawRequest; } public function getLastRawResponse() { return $this-&gt;lastRawResponse; } public function getRedirectionsCount() { return $this-&gt;redirectCounter; } public function setUri($uri) { if (!empty($uri)) { $this-&gt;getRequest()-&gt;setUri($uri); if ($this-&gt;getUri()-&gt;getUser() &amp;&amp; $this-&gt;getUri()-&gt;getPassword()) { $this-&gt;setAuth($this-&gt;getUri()-&gt;getUser(), $this-&gt;getUri()-&gt;getPassword()); } if (! $this-&gt;getUri()-&gt;getPort()) { $this-&gt;getUri()-&gt;setPort(($this-&gt;getUri()-&gt;getScheme() == 'https' ? 443 : 80)); } } return $this; } public function getUri() { return $this-&gt;getRequest()-&gt;getUri(); } public function setMethod($method) { $method = $this-&gt;getRequest()-&gt;setMethod($method)-&gt;getMethod(); if (($method == Request::METHOD_POST || $method == Request::METHOD_PUT || $method == Request::METHOD_DELETE || $method == Request::METHOD_PATCH) &amp;&amp; empty($this-&gt;encType)) { $this-&gt;setEncType(self::ENC_URLENCODED); } return $this; } public function getMethod() { return $this-&gt;getRequest()-&gt;getMethod(); } public function setArgSeparator($argSeparator) { $this-&gt;setOptions(array("argseparator" =&gt; $argSeparator)); return $this; } public function getArgSeparator() { $argSeparator = $this-&gt;config['argseparator']; if (empty($argSeparator)) { $argSeparator = ini_get('arg_separator.output'); $this-&gt;setArgSeparator($argSeparator); } return $argSeparator; } public function setEncType($encType, $boundary = null) { if (!empty($encType)) { if (!empty($boundary)) { $this-&gt;encType = $encType . "; boundary={$boundary}"; } else { $this-&gt;encType = $encType; } } return $this; } public function getEncType() { return $this-&gt;encType; } public function setRawBody($body) { $this-&gt;getRequest()-&gt;setContent($body); return $this; } public function setParameterPost(array $post) { $this-&gt;getRequest()-&gt;getPost()-&gt;fromArray($post); return $this; } public function setParameterGet(array $query) { $this-&gt;getRequest()-&gt;getQuery()-&gt;fromArray($query); return $this; } public function getCookies() { return $this-&gt;cookies; } protected function getCookieId($cookie) { if (($cookie instanceof Header\SetCookie) || ($cookie instanceof Header\Cookie)) { return $cookie-&gt;getName() . $cookie-&gt;getDomain() . $cookie-&gt;getPath(); } return false; } public function addCookie($cookie, $value = null, $expire = null, $path = null, $domain = null, $secure = false, $httponly = true, $maxAge = null, $version = null) { if (is_array($cookie) || $cookie instanceof ArrayIterator) { foreach ($cookie as $setCookie) { if ($setCookie instanceof Header\SetCookie) { $this-&gt;cookies[$this-&gt;getCookieId($setCookie)] = $setCookie; } else { throw new Exception\InvalidArgumentException('The cookie parameter is not a valid Set-Cookie type'); } } } elseif (is_string($cookie) &amp;&amp; $value !== null) { $setCookie = new Header\SetCookie($cookie, $value, $expire, $path, $domain, $secure, $httponly, $maxAge, $version); $this-&gt;cookies[$this-&gt;getCookieId($setCookie)] = $setCookie; } elseif ($cookie instanceof Header\SetCookie) { $this-&gt;cookies[$this-&gt;getCookieId($cookie)] = $cookie; } else { throw new Exception\InvalidArgumentException('Invalid parameter type passed as Cookie'); } return $this; } public function setCookies($cookies) { if (is_array($cookies)) { $this-&gt;clearCookies(); foreach ($cookies as $name =&gt; $value) { $this-&gt;addCookie($name, $value); } } else { throw new Exception\InvalidArgumentException('Invalid cookies passed as parameter, it must be an array'); } return $this; } public function clearCookies() { $this-&gt;cookies = array(); } public function setHeaders($headers) { if (is_array($headers)) { $newHeaders = new Headers(); $newHeaders-&gt;addHeaders($headers); $this-&gt;getRequest()-&gt;setHeaders($newHeaders); } elseif ($headers instanceof Headers) { $this-&gt;getRequest()-&gt;setHeaders($headers); } else { throw new Exception\InvalidArgumentException('Invalid parameter headers passed'); } return $this; } public function hasHeader($name) { $headers = $this-&gt;getRequest()-&gt;getHeaders(); if ($headers instanceof Headers) { return $headers-&gt;has($name); } return false; } public function getHeader($name) { $headers = $this-&gt;getRequest()-&gt;getHeaders(); if ($headers instanceof Headers) { if ($headers-&gt;get($name)) { return $headers-&gt;get($name)-&gt;getFieldValue(); } } return false; } public function setStream($streamfile = true) { $this-&gt;setOptions(array("outputstream" =&gt; $streamfile)); return $this; } public function getStream() { if (null !== $this-&gt;streamName) { return $this-&gt;streamName; } return $this-&gt;config['outputstream']; } protected function openTempStream() { $this-&gt;streamName = $this-&gt;config['outputstream']; if (!is_string($this-&gt;streamName)) { $this-&gt;streamName = tempnam( isset($this-&gt;config['streamtmpdir']) ? $this-&gt;config['streamtmpdir'] : sys_get_temp_dir(), 'Zend\Http\Client' ); } ErrorHandler::start(); $fp = fopen($this-&gt;streamName, "w+b"); $error = ErrorHandler::stop(); if (false === $fp) { if ($this-&gt;adapter instanceof Client\Adapter\AdapterInterface) { $this-&gt;adapter-&gt;close(); } throw new Exception\RuntimeException("Could not open temp file {$this-&gt;streamName}", 0, $error); } return $fp; } public function setAuth($user, $password, $type = self::AUTH_BASIC) { if (!defined('self::AUTH_' . strtoupper($type))) { throw new Exception\InvalidArgumentException("Invalid or not supported authentication type: '$type'"); } if (empty($user)) { throw new Exception\InvalidArgumentException("The username cannot be empty"); } $this-&gt;auth = array ( 'user' =&gt; $user, 'password' =&gt; $password, 'type' =&gt; $type ); return $this; } protected function calcAuthDigest($user, $password, $type = self::AUTH_BASIC, $digest = array(), $entityBody = null) { if (!defined('self::AUTH_' . strtoupper($type))) { throw new Exception\InvalidArgumentException("Invalid or not supported authentication type: '$type'"); } $response = false; switch (strtolower($type)) { case self::AUTH_BASIC : if (strpos($user, ':') !== false) { throw new Exception\InvalidArgumentException("The user name cannot contain ':' in Basic HTTP authentication"); } $response = base64_encode($user . ':' . $password); break; case self::AUTH_DIGEST : if (empty($digest)) { throw new Exception\InvalidArgumentException("The digest cannot be empty"); } foreach ($digest as $key =&gt; $value) { if (!defined('self::DIGEST_' . strtoupper($key))) { throw new Exception\InvalidArgumentException("Invalid or not supported digest authentication parameter: '$key'"); } } $ha1 = md5($user . ':' . $digest['realm'] . ':' . $password); if (empty($digest['qop']) || strtolower($digest['qop']) == 'auth') { $ha2 = md5($this-&gt;getMethod() . ':' . $this-&gt;getUri()-&gt;getPath()); } elseif (strtolower($digest['qop']) == 'auth-int') { if (empty($entityBody)) { throw new Exception\InvalidArgumentException("I cannot use the auth-int digest authentication without the entity body"); } $ha2 = md5($this-&gt;getMethod() . ':' . $this-&gt;getUri()-&gt;getPath() . ':' . md5($entityBody)); } if (empty($digest['qop'])) { $response = md5($ha1 . ':' . $digest['nonce'] . ':' . $ha2); } else { $response = md5($ha1 . ':' . $digest['nonce'] . ':' . $digest['nc'] . ':' . $digest['cnonce'] . ':' . $digest['qoc'] . ':' . $ha2); } break; } return $response; } public function resetParameters($clearCookies = false) { $uri = $this-&gt;getUri(); $this-&gt;auth = null; $this-&gt;streamName = null; $this-&gt;encType = null; $this-&gt;request = null; $this-&gt;response = null; $this-&gt;setUri($uri); if ($clearCookies) { $this-&gt;clearCookies(); } return $this; } public function dispatch(Stdlib\RequestInterface $request, Stdlib\ResponseInterface $response = null) { $response = $this-&gt;send($request); return $response; } public function send(Request $request = null) { if ($request !== null) { $this-&gt;setRequest($request); } $this-&gt;redirectCounter = 0; $response = null; if ($this-&gt;adapter == null) { $this-&gt;setAdapter($this-&gt;config['adapter']); } do { $uri = $this-&gt;getUri(); $query = $this-&gt;getRequest()-&gt;getQuery(); if (!empty($query)) { $queryArray = $query-&gt;toArray(); if (!empty($queryArray)) { $newUri = $uri-&gt;toString(); $queryString = http_build_query($query, null, $this-&gt;getArgSeparator()); if ($this-&gt;config['rfc3986strict']) { $queryString = str_replace('+', '%20', $queryString); } if (strpos($newUri, '?') !== false) { $newUri .= $this-&gt;getArgSeparator() . $queryString; } else { $newUri .= '?' . $queryString; } $uri = new Http($newUri); } } if (!$uri-&gt;getPort()) { $uri-&gt;setPort($uri-&gt;getScheme() == 'https' ? 443 : 80); } $method = $this-&gt;getRequest()-&gt;getMethod(); $body = $this-&gt;prepareBody(); $headers = $this-&gt;prepareHeaders($body, $uri); $secure = $uri-&gt;getScheme() == 'https'; $cookie = $this-&gt;prepareCookies($uri-&gt;getHost(), $uri-&gt;getPath(), $secure); if ($cookie-&gt;getFieldValue()) { $headers['Cookie'] = $cookie-&gt;getFieldValue(); } if (is_resource($body) &amp;&amp; !($this-&gt;adapter instanceof Client\Adapter\StreamInterface)) { throw new Client\Exception\RuntimeException('Adapter does not support streaming'); } $response = $this-&gt;doRequest($uri, $method, $secure, $headers, $body); if (! $response) { throw new Exception\RuntimeException('Unable to read response, or response is empty'); } if ($this-&gt;config['storeresponse']) { $this-&gt;lastRawResponse = $response; } else { $this-&gt;lastRawResponse = null; } if ($this-&gt;config['outputstream']) { $stream = $this-&gt;getStream(); if (!is_resource($stream) &amp;&amp; is_string($stream)) { $stream = fopen($stream, 'r'); } $streamMetaData = stream_get_meta_data($stream); if ($streamMetaData['seekable']) { rewind($stream); } $this-&gt;adapter-&gt;setOutputStream(null); $response = Response\Stream::fromStream($response, $stream); $response-&gt;setStreamName($this-&gt;streamName); if (!is_string($this-&gt;config['outputstream'])) { $response-&gt;setCleanup(true); } } else { $response = Response::fromString($response); } $setCookies = $response-&gt;getCookie(); if (!empty($setCookies)) { $this-&gt;addCookie($setCookies); } if ($response-&gt;isRedirect() &amp;&amp; ($response-&gt;getHeaders()-&gt;has('Location'))) { $location = trim($response-&gt;getHeaders()-&gt;get('Location')-&gt;getFieldValue()); if ($response-&gt;getStatusCode() == 303 || ((! $this-&gt;config['strictredirects']) &amp;&amp; ($response-&gt;getStatusCode() == 302 || $response-&gt;getStatusCode() == 301))) { $this-&gt;resetParameters(); $this-&gt;setMethod(Request::METHOD_GET); } if (($scheme = substr($location, 0, 6)) &amp;&amp; ($scheme == 'http:/' || $scheme == 'https:')) { $this-&gt;setUri($location); } else { if (strpos($location, '?') !== false) { list($location, $query) = explode('?', $location, 2); } else { $query = ''; } $this-&gt;getUri()-&gt;setQuery($query); if (strpos($location, '/') === 0) { $this-&gt;getUri()-&gt;setPath($location); } else { $path = $this-&gt;getUri()-&gt;getPath(); $path = rtrim(substr($path, 0, strrpos($path, '/')), "/"); $this-&gt;getUri()-&gt;setPath($path . '/' . $location); } } ++$this-&gt;redirectCounter; } else { break; } } while ($this-&gt;redirectCounter &lt; $this-&gt;config['maxredirects']); $this-&gt;response = $response; return $response; } public function setFileUpload($filename, $formname, $data = null, $ctype = null) { if ($data === null) { ErrorHandler::start(); $data = file_get_contents($filename); $error = ErrorHandler::stop(); if ($data === false) { throw new Exception\RuntimeException("Unable to read file '{$filename}' for upload", 0, $error); } if (!$ctype) { $ctype = $this-&gt;detectFileMimeType($filename); } } $this-&gt;getRequest()-&gt;getFiles()-&gt;set($filename, array( 'formname' =&gt; $formname, 'filename' =&gt; basename($filename), 'ctype' =&gt; $ctype, 'data' =&gt; $data )); return $this; } public function removeFileUpload($filename) { $file = $this-&gt;getRequest()-&gt;getFiles()-&gt;get($filename); if (!empty($file)) { $this-&gt;getRequest()-&gt;getFiles()-&gt;set($filename, null); return true; } return false; } protected function prepareCookies($domain, $path, $secure) { $validCookies = array(); if (!empty($this-&gt;cookies)) { foreach ($this-&gt;cookies as $id =&gt; $cookie) { if ($cookie-&gt;isExpired()) { unset($this-&gt;cookies[$id]); continue; } if ($cookie-&gt;isValidForRequest($domain, $path, $secure)) { $validCookies[$cookie-&gt;getName()] = $cookie; } } } $cookies = Header\Cookie::fromSetCookieArray($validCookies); $cookies-&gt;setEncodeValue($this-&gt;config['encodecookies']); return $cookies; } protected function prepareHeaders($body, $uri) { $headers = array(); if ($this-&gt;config['httpversion'] == Request::VERSION_11) { $host = $uri-&gt;getHost(); if (!(($uri-&gt;getScheme() == 'http' &amp;&amp; $uri-&gt;getPort() == 80) || ($uri-&gt;getScheme() == 'https' &amp;&amp; $uri-&gt;getPort() == 443))) { $host .= ':' . $uri-&gt;getPort(); } $headers['Host'] = $host; } if (!$this-&gt;getRequest()-&gt;getHeaders()-&gt;has('Connection')) { if (!$this-&gt;config['keepalive']) { $headers['Connection'] = 'close'; } } if (!$this-&gt;getRequest()-&gt;getHeaders()-&gt;has('Accept-Encoding')) { if (function_exists('gzinflate')) { $headers['Accept-Encoding'] = 'gzip, deflate'; } else { $headers['Accept-Encoding'] = 'identity'; } } if (!$this-&gt;getRequest()-&gt;getHeaders()-&gt;has('User-Agent') &amp;&amp; isset($this-&gt;config['useragent'])) { $headers['User-Agent'] = $this-&gt;config['useragent']; } if (!empty($this-&gt;auth)) { switch ($this-&gt;auth['type']) { case self::AUTH_BASIC : $auth = $this-&gt;calcAuthDigest($this-&gt;auth['user'], $this-&gt;auth['password'], $this-&gt;auth['type']); if ($auth !== false) { $headers['Authorization'] = 'Basic ' . $auth; } break; case self::AUTH_DIGEST : throw new Exception\RuntimeException("The digest authentication is not implemented yet"); } } $encType = $this-&gt;getEncType(); if (!empty($encType)) { $headers['Content-Type'] = $encType; } if (!empty($body)) { if (is_resource($body)) { $fstat = fstat($body); $headers['Content-Length'] = $fstat['size']; } else { $headers['Content-Length'] = strlen($body); } } $requestHeaders = $this-&gt;getRequest()-&gt;getHeaders()-&gt;toArray(); foreach ($requestHeaders as $key =&gt; $value) { $headers[$key] = $value; } return $headers; } protected function prepareBody() { if ($this-&gt;getRequest()-&gt;isTrace()) { return ''; } $rawBody = $this-&gt;getRequest()-&gt;getContent(); if (!empty($rawBody)) { return $rawBody; } $body = ''; $totalFiles = 0; if (!$this-&gt;getRequest()-&gt;getHeaders()-&gt;has('Content-Type')) { $totalFiles = count($this-&gt;getRequest()-&gt;getFiles()-&gt;toArray()); if ($totalFiles &gt; 0) { $this-&gt;setEncType(self::ENC_FORMDATA); } } else { $this-&gt;setEncType($this-&gt;getHeader('Content-Type')); } if (count($this-&gt;getRequest()-&gt;getPost()-&gt;toArray()) &gt; 0 || $totalFiles &gt; 0) { if (stripos($this-&gt;getEncType(), self::ENC_FORMDATA) === 0) { $boundary = '---ZENDHTTPCLIENT-' . md5(microtime()); $this-&gt;setEncType(self::ENC_FORMDATA, $boundary); $params = self::flattenParametersArray($this-&gt;getRequest()-&gt;getPost()-&gt;toArray()); foreach ($params as $pp) { $body .= $this-&gt;encodeFormData($boundary, $pp[0], $pp[1]); } foreach ($this-&gt;getRequest()-&gt;getFiles()-&gt;toArray() as $file) { $fhead = array('Content-Type' =&gt; $file['ctype']); $body .= $this-&gt;encodeFormData($boundary, $file['formname'], $file['data'], $file['filename'], $fhead); } $body .= "--{$boundary}--\r\n"; } elseif (stripos($this-&gt;getEncType(), self::ENC_URLENCODED) === 0) { $body = http_build_query($this-&gt;getRequest()-&gt;getPost()-&gt;toArray()); } else { throw new Client\Exception\RuntimeException("Cannot handle content type '{$this-&gt;encType}' automatically"); } } return $body; } protected function detectFileMimeType($file) { $type = null; if (function_exists('finfo_open')) { if (static::$fileInfoDb === null) { ErrorHandler::start(); static::$fileInfoDb = finfo_open(FILEINFO_MIME); ErrorHandler::stop(); } if (static::$fileInfoDb) { $type = finfo_file(static::$fileInfoDb, $file); } } elseif (function_exists('mime_content_type')) { $type = mime_content_type($file); } if (! $type) { $type = 'application/octet-stream'; } return $type; } public function encodeFormData($boundary, $name, $value, $filename = null, $headers = array()) { $ret = "--{$boundary}\r\n" . 'Content-Disposition: form-data; name="' . $name . '"'; if ($filename) { $ret .= '; filename="' . $filename . '"'; } $ret .= "\r\n"; foreach ($headers as $hname =&gt; $hvalue) { $ret .= "{$hname}: {$hvalue}\r\n"; } $ret .= "\r\n"; $ret .= "{$value}\r\n"; return $ret; } protected function flattenParametersArray($parray, $prefix = null) { if (!is_array($parray)) { return $parray; } $parameters = array(); foreach ($parray as $name =&gt; $value) { if ($prefix) { if (is_int($name)) { $key = $prefix . '[]'; } else { $key = $prefix . "[$name]"; } } else { $key = $name; } if (is_array($value)) { $parameters = array_merge($parameters, $this-&gt;flattenParametersArray($value, $key)); } else { $parameters[] = array($key, $value); } } return $parameters; } protected function doRequest(Http $uri, $method, $secure = false, $headers = array(), $body = '') { $this-&gt;adapter-&gt;connect($uri-&gt;getHost(), $uri-&gt;getPort(), $secure); if ($this-&gt;config['outputstream']) { if ($this-&gt;adapter instanceof Client\Adapter\StreamInterface) { $stream = $this-&gt;openTempStream(); $this-&gt;adapter-&gt;setOutputStream($stream); } else { throw new Exception\RuntimeException('Adapter does not support streaming'); } } $this-&gt;lastRawRequest = $this-&gt;adapter-&gt;write($method, $uri, $this-&gt;config['httpversion'], $headers, $body); return $this-&gt;adapter-&gt;read(); } public static function encodeAuthHeader($user, $password, $type = self::AUTH_BASIC) { $authHeader = null; switch ($type) { case self::AUTH_BASIC: if (strpos($user, ':') !== false) { throw new Client\Exception\InvalidArgumentException("The user name cannot contain ':' in 'Basic' HTTP authentication"); } $authHeader = 'Basic ' . base64_encode($user . ':' . $password); break; default: throw new Client\Exception\InvalidArgumentException("Not a supported HTTP authentication type: '$type'"); } return $authHeader; } } &lt;?php
 namespace Zend\Http; use Zend\Http\Client; class ClientStatic { protected static $client; protected static function getStaticClient() { if (!isset(static::$client)) { static::$client = new Client(); } return static::$client; } public static function get($url, $query = array(), $headers = array(), $body = null) { if (empty($url)) { return false; } $request= new Request(); $request-&gt;setUri($url); $request-&gt;setMethod(Request::METHOD_GET); if (!empty($query) &amp;&amp; is_array($query)) { $request-&gt;getQuery()-&gt;fromArray($query); } if (!empty($headers) &amp;&amp; is_array($headers)) { $request-&gt;getHeaders()-&gt;addHeaders($headers); } if (!empty($body)) { $request-&gt;setBody($body); } return static::getStaticClient()-&gt;send($request); } public static function post($url, $params, $headers = array(), $body = null) { if (empty($url)) { return false; } $request= new Request(); $request-&gt;setUri($url); $request-&gt;setMethod(Request::METHOD_POST); if (!empty($params) &amp;&amp; is_array($params)) { $request-&gt;getPost()-&gt;fromArray($params); } else { throw new Exception\InvalidArgumentException('The array of post parameters is empty'); } if (!isset($headers['Content-Type'])) { $headers['Content-Type']= Client::ENC_URLENCODED; } if (!empty($headers) &amp;&amp; is_array($headers)) { $request-&gt;getHeaders()-&gt;addHeaders($headers); } if (!empty($body)) { $request-&gt;setContent($body); } return static::getStaticClient()-&gt;send($request); } } &lt;?php
 namespace Zend\Http; use Zend\Stdlib\ErrorHandler; use Zend\Stdlib\ResponseInterface; class Response extends AbstractMessage implements ResponseInterface { const STATUS_CODE_CUSTOM = 0; const STATUS_CODE_100 = 100; const STATUS_CODE_101 = 101; const STATUS_CODE_102 = 102; const STATUS_CODE_200 = 200; const STATUS_CODE_201 = 201; const STATUS_CODE_202 = 202; const STATUS_CODE_203 = 203; const STATUS_CODE_204 = 204; const STATUS_CODE_205 = 205; const STATUS_CODE_206 = 206; const STATUS_CODE_207 = 207; const STATUS_CODE_208 = 208; const STATUS_CODE_300 = 300; const STATUS_CODE_301 = 301; const STATUS_CODE_302 = 302; const STATUS_CODE_303 = 303; const STATUS_CODE_304 = 304; const STATUS_CODE_305 = 305; const STATUS_CODE_306 = 306; const STATUS_CODE_307 = 307; const STATUS_CODE_400 = 400; const STATUS_CODE_401 = 401; const STATUS_CODE_402 = 402; const STATUS_CODE_403 = 403; const STATUS_CODE_404 = 404; const STATUS_CODE_405 = 405; const STATUS_CODE_406 = 406; const STATUS_CODE_407 = 407; const STATUS_CODE_408 = 408; const STATUS_CODE_409 = 409; const STATUS_CODE_410 = 410; const STATUS_CODE_411 = 411; const STATUS_CODE_412 = 412; const STATUS_CODE_413 = 413; const STATUS_CODE_414 = 414; const STATUS_CODE_415 = 415; const STATUS_CODE_416 = 416; const STATUS_CODE_417 = 417; const STATUS_CODE_418 = 418; const STATUS_CODE_422 = 422; const STATUS_CODE_423 = 423; const STATUS_CODE_424 = 424; const STATUS_CODE_425 = 425; const STATUS_CODE_426 = 426; const STATUS_CODE_428 = 428; const STATUS_CODE_429 = 429; const STATUS_CODE_431 = 431; const STATUS_CODE_500 = 500; const STATUS_CODE_501 = 501; const STATUS_CODE_502 = 502; const STATUS_CODE_503 = 503; const STATUS_CODE_504 = 504; const STATUS_CODE_505 = 505; const STATUS_CODE_506 = 506; const STATUS_CODE_507 = 507; const STATUS_CODE_508 = 508; const STATUS_CODE_511 = 511; protected $recommendedReasonPhrases = array( 100 =&gt; 'Continue', 101 =&gt; 'Switching Protocols', 102 =&gt; 'Processing', 200 =&gt; 'OK', 201 =&gt; 'Created', 202 =&gt; 'Accepted', 203 =&gt; 'Non-Authoritative Information', 204 =&gt; 'No Content', 205 =&gt; 'Reset Content', 206 =&gt; 'Partial Content', 207 =&gt; 'Multi-status', 208 =&gt; 'Already Reported', 300 =&gt; 'Multiple Choices', 301 =&gt; 'Moved Permanently', 302 =&gt; 'Found', 303 =&gt; 'See Other', 304 =&gt; 'Not Modified', 305 =&gt; 'Use Proxy', 306 =&gt; 'Switch Proxy', 307 =&gt; 'Temporary Redirect', 400 =&gt; 'Bad Request', 401 =&gt; 'Unauthorized', 402 =&gt; 'Payment Required', 403 =&gt; 'Forbidden', 404 =&gt; 'Not Found', 405 =&gt; 'Method Not Allowed', 406 =&gt; 'Not Acceptable', 407 =&gt; 'Proxy Authentication Required', 408 =&gt; 'Request Time-out', 409 =&gt; 'Conflict', 410 =&gt; 'Gone', 411 =&gt; 'Length Required', 412 =&gt; 'Precondition Failed', 413 =&gt; 'Request Entity Too Large', 414 =&gt; 'Request-URI Too Large', 415 =&gt; 'Unsupported Media Type', 416 =&gt; 'Requested range not satisfiable', 417 =&gt; 'Expectation Failed', 418 =&gt; 'I\'m a teapot', 422 =&gt; 'Unprocessable Entity', 423 =&gt; 'Locked', 424 =&gt; 'Failed Dependency', 425 =&gt; 'Unordered Collection', 426 =&gt; 'Upgrade Required', 428 =&gt; 'Precondition Required', 429 =&gt; 'Too Many Requests', 431 =&gt; 'Request Header Fields Too Large', 500 =&gt; 'Internal Server Error', 501 =&gt; 'Not Implemented', 502 =&gt; 'Bad Gateway', 503 =&gt; 'Service Unavailable', 504 =&gt; 'Gateway Time-out', 505 =&gt; 'HTTP Version not supported', 506 =&gt; 'Variant Also Negotiates', 507 =&gt; 'Insufficient Storage', 508 =&gt; 'Loop Detected', 511 =&gt; 'Network Authentication Required', ); protected $statusCode = 200; protected $reasonPhrase = null; public static function fromString($string) { $lines = explode("\r\n", $string); if (!is_array($lines) || count($lines) == 1) { $lines = explode("\n", $string); } $firstLine = array_shift($lines); $response = new static(); $regex = '/^HTTP\/(?P&lt;version&gt;1\.[01]) (?P&lt;status&gt;\d{3})(?:[ ]+(?P&lt;reason&gt;.*))?$/'; $matches = array(); if (!preg_match($regex, $firstLine, $matches)) { throw new Exception\InvalidArgumentException( 'A valid response status line was not found in the provided string' ); } $response-&gt;version = $matches['version']; $response-&gt;setStatusCode($matches['status']); $response-&gt;setReasonPhrase((isset($matches['reason']) ? $matches['reason'] : '')); if (count($lines) == 0) { return $response; } $isHeader = true; $headers = $content = array(); while ($lines) { $nextLine = array_shift($lines); if ($isHeader &amp;&amp; $nextLine == '') { $isHeader = false; continue; } if ($isHeader) { $headers[] = $nextLine; } else { $content[] = $nextLine; } } if ($headers) { $response-&gt;headers = implode("\r\n", $headers); } if ($content) { $response-&gt;setContent(implode("\r\n", $content)); } return $response; } public function getCookie() { return $this-&gt;getHeaders()-&gt;get('Set-Cookie'); } public function setStatusCode($code) { $const = get_called_class() . '::STATUS_CODE_' . $code; if (!is_numeric($code) || !defined($const)) { $code = is_scalar($code) ? $code : gettype($code); throw new Exception\InvalidArgumentException(sprintf( 'Invalid status code provided: "%s"', $code )); } $this-&gt;statusCode = (int) $code; return $this; } public function getStatusCode() { return $this-&gt;statusCode; } public function setReasonPhrase($reasonPhrase) { $this-&gt;reasonPhrase = trim($reasonPhrase); return $this; } public function getReasonPhrase() { if ($this-&gt;reasonPhrase == null) { return $this-&gt;recommendedReasonPhrases[$this-&gt;statusCode]; } return $this-&gt;reasonPhrase; } public function getBody() { $body = (string) $this-&gt;getContent(); $transferEncoding = $this-&gt;getHeaders()-&gt;get('Transfer-Encoding'); if (!empty($transferEncoding)) { if (strtolower($transferEncoding-&gt;getFieldValue()) == 'chunked') { $body = $this-&gt;decodeChunkedBody($body); } } $contentEncoding = $this-&gt;getHeaders()-&gt;get('Content-Encoding'); if (!empty($contentEncoding)) { $contentEncoding = $contentEncoding-&gt;getFieldValue(); if ($contentEncoding =='gzip') { $body = $this-&gt;decodeGzip($body); } elseif ($contentEncoding == 'deflate') { $body = $this-&gt;decodeDeflate($body); } } return $body; } public function isClientError() { $code = $this-&gt;getStatusCode(); return ($code &lt; 500 &amp;&amp; $code &gt;= 400); } public function isForbidden() { return (403 == $this-&gt;getStatusCode()); } public function isInformational() { $code = $this-&gt;getStatusCode(); return ($code &gt;= 100 &amp;&amp; $code &lt; 200); } public function isNotFound() { return (404 === $this-&gt;getStatusCode()); } public function isOk() { return (200 === $this-&gt;getStatusCode()); } public function isServerError() { $code = $this-&gt;getStatusCode(); return (500 &lt;= $code &amp;&amp; 600 &gt; $code); } public function isRedirect() { $code = $this-&gt;getStatusCode(); return (300 &lt;= $code &amp;&amp; 400 &gt; $code); } public function isSuccess() { $code = $this-&gt;getStatusCode(); return (200 &lt;= $code &amp;&amp; 300 &gt; $code); } public function renderStatusLine() { $status = sprintf( 'HTTP/%s %d %s', $this-&gt;getVersion(), $this-&gt;getStatusCode(), $this-&gt;getReasonPhrase() ); return trim($status); } public function toString() { $str = $this-&gt;renderStatusLine() . "\r\n"; $str .= $this-&gt;getHeaders()-&gt;toString(); $str .= "\r\n"; $str .= $this-&gt;getContent(); return $str; } protected function decodeChunkedBody($body) { $decBody = ''; while (trim($body)) { if (! preg_match("/^([\da-fA-F]+)[^\r\n]*\r\n/sm", $body, $m)) { throw new Exception\RuntimeException( "Error parsing body - doesn't seem to be a chunked message" ); } $length = hexdec(trim($m[1])); $cut = strlen($m[0]); $decBody .= substr($body, $cut, $length); $body = substr($body, $cut + $length + 2); } return $decBody; } protected function decodeGzip($body) { if (!function_exists('gzinflate')) { throw new Exception\RuntimeException( 'zlib extension is required in order to decode "gzip" encoding' ); } ErrorHandler::start(); $return = gzinflate(substr($body, 10)); $test = ErrorHandler::stop(); if ($test) { throw new Exception\RuntimeException( 'Error occurred during gzip inflation', 0, $test ); } return $return; } protected function decodeDeflate($body) { if (!function_exists('gzuncompress')) { throw new Exception\RuntimeException( 'zlib extension is required in order to decode "deflate" encoding' ); } $zlibHeader = unpack('n', substr($body, 0, 2)); if ($zlibHeader[1] % 31 == 0) { return gzuncompress($body); } return gzinflate($body); } } &lt;?php
 namespace Zend\Http; use Zend\Loader\PluginClassLoader; class HeaderLoader extends PluginClassLoader { protected $plugins = array( 'accept' =&gt; 'Zend\Http\Header\Accept', 'acceptcharset' =&gt; 'Zend\Http\Header\AcceptCharset', 'acceptencoding' =&gt; 'Zend\Http\Header\AcceptEncoding', 'acceptlanguage' =&gt; 'Zend\Http\Header\AcceptLanguage', 'acceptranges' =&gt; 'Zend\Http\Header\AcceptRanges', 'age' =&gt; 'Zend\Http\Header\Age', 'allow' =&gt; 'Zend\Http\Header\Allow', 'authenticationinfo' =&gt; 'Zend\Http\Header\AuthenticationInfo', 'authorization' =&gt; 'Zend\Http\Header\Authorization', 'cachecontrol' =&gt; 'Zend\Http\Header\CacheControl', 'connection' =&gt; 'Zend\Http\Header\Connection', 'contentdisposition' =&gt; 'Zend\Http\Header\ContentDisposition', 'contentencoding' =&gt; 'Zend\Http\Header\ContentEncoding', 'contentlanguage' =&gt; 'Zend\Http\Header\ContentLanguage', 'contentlength' =&gt; 'Zend\Http\Header\ContentLength', 'contentlocation' =&gt; 'Zend\Http\Header\ContentLocation', 'contentmd5' =&gt; 'Zend\Http\Header\ContentMD5', 'contentrange' =&gt; 'Zend\Http\Header\ContentRange', 'contenttransferencoding' =&gt; 'Zend\Http\Header\ContentTransferEncoding', 'contenttype' =&gt; 'Zend\Http\Header\ContentType', 'cookie' =&gt; 'Zend\Http\Header\Cookie', 'date' =&gt; 'Zend\Http\Header\Date', 'etag' =&gt; 'Zend\Http\Header\Etag', 'expect' =&gt; 'Zend\Http\Header\Expect', 'expires' =&gt; 'Zend\Http\Header\Expires', 'from' =&gt; 'Zend\Http\Header\From', 'host' =&gt; 'Zend\Http\Header\Host', 'ifmatch' =&gt; 'Zend\Http\Header\IfMatch', 'ifmodifiedsince' =&gt; 'Zend\Http\Header\IfModifiedSince', 'ifnonematch' =&gt; 'Zend\Http\Header\IfNoneMatch', 'ifrange' =&gt; 'Zend\Http\Header\IfRange', 'ifunmodifiedsince' =&gt; 'Zend\Http\Header\IfUnmodifiedSince', 'keepalive' =&gt; 'Zend\Http\Header\KeepAlive', 'lastmodified' =&gt; 'Zend\Http\Header\LastModified', 'location' =&gt; 'Zend\Http\Header\Location', 'maxforwards' =&gt; 'Zend\Http\Header\MaxForwards', 'pragma' =&gt; 'Zend\Http\Header\Pragma', 'proxyauthenticate' =&gt; 'Zend\Http\Header\ProxyAuthenticate', 'proxyauthorization' =&gt; 'Zend\Http\Header\ProxyAuthorization', 'range' =&gt; 'Zend\Http\Header\Range', 'referer' =&gt; 'Zend\Http\Header\Referer', 'refresh' =&gt; 'Zend\Http\Header\Refresh', 'retryafter' =&gt; 'Zend\Http\Header\RetryAfter', 'server' =&gt; 'Zend\Http\Header\Server', 'setcookie' =&gt; 'Zend\Http\Header\SetCookie', 'te' =&gt; 'Zend\Http\Header\TE', 'trailer' =&gt; 'Zend\Http\Header\Trailer', 'transferencoding' =&gt; 'Zend\Http\Header\TransferEncoding', 'upgrade' =&gt; 'Zend\Http\Header\Upgrade', 'useragent' =&gt; 'Zend\Http\Header\UserAgent', 'vary' =&gt; 'Zend\Http\Header\Vary', 'via' =&gt; 'Zend\Http\Header\Via', 'warning' =&gt; 'Zend\Http\Header\Warning', 'wwwauthenticate' =&gt; 'Zend\Http\Header\WWWAuthenticate' ); } &lt;?php
 namespace Zend\Http; use ArrayIterator; use Zend\Http\Header\SetCookie; use Zend\Http\Response; use Zend\Uri; class Cookies extends Headers { const COOKIE_OBJECT = 0; const COOKIE_STRING_ARRAY = 1; const COOKIE_STRING_CONCAT = 2; const COOKIE_STRING_CONCAT_STRICT = 3; protected $cookies = array(); protected $headers = null; protected $rawCookies; public static function fromString($string) { throw new Exception\RuntimeException( __CLASS__ . '::' . __FUNCTION__ . ' should not be used as a factory, use ' . __NAMESPACE__ . '\Headers::fromtString() instead.' ); } public function addCookie($cookie, $refUri = null) { if (is_string($cookie)) { $cookie = SetCookie::fromString($cookie, $refUri); } if ($cookie instanceof SetCookie) { $domain = $cookie-&gt;getDomain(); $path = $cookie-&gt;getPath(); if (!isset($this-&gt;cookies[$domain])) { $this-&gt;cookies[$domain] = array(); } if (!isset($this-&gt;cookies[$domain][$path])) { $this-&gt;cookies[$domain][$path] = array(); } $this-&gt;cookies[$domain][$path][$cookie-&gt;getName()] = $cookie; $this-&gt;rawCookies[] = $cookie; } else { throw new Exception\InvalidArgumentException('Supplient argument is not a valid cookie string or object'); } } public function addCookiesFromResponse(Response $response, $refUri) { $cookieHdrs = $response-&gt;getHeaders()-&gt;get('Set-Cookie'); if (is_array($cookieHdrs) || $cookieHdrs instanceof ArrayIterator) { foreach ($cookieHdrs as $cookie) { $this-&gt;addCookie($cookie, $refUri); } } elseif (is_string($cookieHdrs)) { $this-&gt;addCookie($cookieHdrs, $refUri); } } public function getAllCookies($retAs = self::COOKIE_OBJECT) { $cookies = $this-&gt;_flattenCookiesArray($this-&gt;cookies, $retAs); return $cookies; } public function getMatchingCookies($uri, $matchSessionCookies = true, $retAs = self::COOKIE_OBJECT, $now = null) { if (is_string($uri)) { $uri = Uri\UriFactory::factory($uri, 'http'); } elseif (!$uri instanceof Uri\Uri) { throw new Exception\InvalidArgumentException("Invalid URI string or object passed"); } $host = $uri-&gt;getHost(); if (empty($host)) { throw new Exception\InvalidArgumentException('Invalid URI specified; does not contain a host'); } $cookies = $this-&gt;_matchDomain($host); $cookies = $this-&gt;_matchPath($cookies, $uri-&gt;getPath()); $cookies = $this-&gt;_flattenCookiesArray($cookies, self::COOKIE_OBJECT); $ret = array(); foreach ($cookies as $cookie) if ($cookie-&gt;match($uri, $matchSessionCookies, $now)) $ret[] = $cookie; $ret = $this-&gt;_flattenCookiesArray($ret, $retAs); return $ret; } public function getCookie($uri, $cookieName, $retAs = self::COOKIE_OBJECT) { if (is_string($uri)) { $uri = Uri\UriFactory::factory($uri, 'http'); } elseif (!$uri instanceof Uri\Uri) { throw new Exception\InvalidArgumentException('Invalid URI specified'); } $host = $uri-&gt;getHost(); if (empty($host)) { throw new Exception\InvalidArgumentException('Invalid URI specified; host missing'); } $path = $uri-&gt;getPath(); $path = substr($path, 0, strrpos($path, '/')); if (! $path) $path = '/'; if (isset($this-&gt;cookies[$uri-&gt;getHost()][$path][$cookieName])) { $cookie = $this-&gt;cookies[$uri-&gt;getHost()][$path][$cookieName]; switch ($retAs) { case self::COOKIE_OBJECT: return $cookie; break; case self::COOKIE_STRING_ARRAY: case self::COOKIE_STRING_CONCAT: return $cookie-&gt;__toString(); break; default: throw new Exception\InvalidArgumentException("Invalid value passed for \$retAs: {$retAs}"); break; } } return false; } protected function _flattenCookiesArray($ptr, $retAs = self::COOKIE_OBJECT) { if (is_array($ptr)) { $ret = ($retAs == self::COOKIE_STRING_CONCAT ? '' : array()); foreach ($ptr as $item) { if ($retAs == self::COOKIE_STRING_CONCAT) { $ret .= $this-&gt;_flattenCookiesArray($item, $retAs); } else { $ret = array_merge($ret, $this-&gt;_flattenCookiesArray($item, $retAs)); } } return $ret; } elseif ($ptr instanceof SetCookie) { switch ($retAs) { case self::COOKIE_STRING_ARRAY: return array($ptr-&gt;__toString()); break; case self::COOKIE_STRING_CONCAT: return $ptr-&gt;__toString(); break; case self::COOKIE_OBJECT: default: return array($ptr); break; } } return null; } protected function _matchDomain($domain) { $ret = array(); foreach (array_keys($this-&gt;cookies) as $cdom) { if (SetCookie::matchCookieDomain($cdom, $domain)) { $ret[$cdom] = $this-&gt;cookies[$cdom]; } } return $ret; } protected function _matchPath($domains, $path) { $ret = array(); foreach ($domains as $dom =&gt; $pathsArray) { foreach (array_keys($pathsArray) as $cpath) { if (SetCookie::matchCookiePath($cpath, $path)) { if (! isset($ret[$dom])) { $ret[$dom] = array(); } $ret[$dom][$cpath] = $pathsArray[$cpath]; } } } return $ret; } public static function fromResponse(Response $response, $refUri) { $jar = new static(); $jar-&gt;addCookiesFromResponse($response, $refUri); return $jar; } public function isEmpty() { return count($this) == 0; } public function reset() { $this-&gt;cookies = $this-&gt;rawCookies = array(); return $this; } } &lt;?php
 namespace Zend\Http\Response; use Zend\Http\Exception; use Zend\Http\Response; use Zend\Stdlib\ErrorHandler; class Stream extends Response { protected $contentLength = null; protected $contentStreamed = 0; protected $stream; protected $streamName; protected $cleanup; public function setContentLength($contentLength = null) { $this-&gt;contentLength = $contentLength; } public function getContentLength() { return $this-&gt;contentLength; } public function getStream() { return $this-&gt;stream; } public function setStream($stream) { $this-&gt;stream = $stream; return $this; } public function getCleanup() { return $this-&gt;cleanup; } public function setCleanup($cleanup = true) { $this-&gt;cleanup = $cleanup; } public function getStreamName() { return $this-&gt;streamName; } public function setStreamName($streamName) { $this-&gt;streamName = $streamName; return $this; } public static function fromStream($responseString, $stream) { if (!is_resource($stream) || get_resource_type($stream) !== 'stream') { throw new Exception\InvalidArgumentException('A valid stream is required'); } $headerComplete = false; $headersString = ''; $responseArray = explode("\n", $responseString); while (count($responseArray)) { $nextLine = array_shift($responseArray); $headersString .= $nextLine."\n"; $nextLineTrimmed = trim($nextLine); if ($nextLineTrimmed == '') { $headerComplete = true; break; } } if (!$headerComplete) { while (false !== ($nextLine = fgets($stream))) { $headersString .= trim($nextLine)."\r\n"; if ($nextLine == "\r\n" || $nextLine == "\n") { $headerComplete = true; break; } } } if (!$headerComplete) { throw new Exception\OutOfRangeException('End of header not found'); } $response = static::fromString($headersString); if (is_resource($stream)) { $response-&gt;setStream($stream); } if (count($responseArray)) { $response-&gt;content = implode("\n", $responseArray); } $headers = $response-&gt;getHeaders(); foreach ($headers as $header) { if ($header instanceof \Zend\Http\Header\ContentLength) { $response-&gt;setContentLength((int) $header-&gt;getFieldValue()); $contentLength = $response-&gt;getContentLength(); if (strlen($response-&gt;content) &gt; $contentLength) { throw new Exception\OutOfRangeException(sprintf( 'Too much content was extracted from the stream (%d instead of %d bytes)', strlen($response-&gt;content), $contentLength )); } break; } } return $response; } public function getBody() { if ($this-&gt;stream != null) { $this-&gt;readStream(); } return parent::getBody(); } public function getRawBody() { if ($this-&gt;stream) { $this-&gt;readStream(); } return $this-&gt;content; } protected function readStream() { $contentLength = $this-&gt;getContentLength(); if (null !== $contentLength) { $bytes = $contentLength - $this-&gt;contentStreamed; } else { $bytes = -1; } if (!is_resource($this-&gt;stream) || $bytes == 0) { return ''; } $this-&gt;content .= stream_get_contents($this-&gt;stream, $bytes); $this-&gt;contentStreamed += strlen($this-&gt;content); if ($this-&gt;getContentLength() == $this-&gt;contentStreamed) { $this-&gt;stream = null; } } public function __destruct() { if (is_resource($this-&gt;stream)) { $this-&gt;stream = null; } if ($this-&gt;cleanup) { ErrorHandler::start(E_WARNING); unlink($this-&gt;streamName); ErrorHandler::stop(); } } } &lt;?php
 namespace Zend\Http\Client\Exception; use Zend\Http\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Http\Client\Exception; use Zend\Http\Exception\ExceptionInterface as HttpException; interface ExceptionInterface extends HttpException {} &lt;?php
 namespace Zend\Http\Client\Exception; use Zend\Http\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Http\Client\Exception; use Zend\Http\Exception; class OutOfRangeException extends Exception\OutOfRangeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Http\Client\Adapter\Exception; class InitializationException extends RuntimeException {} &lt;?php
 namespace Zend\Http\Client\Adapter\Exception; class TimeoutException extends RuntimeException implements ExceptionInterface { const READ_TIMEOUT = 1000; } &lt;?php
 namespace Zend\Http\Client\Adapter\Exception; use Zend\Http\Client\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Http\Client\Adapter\Exception; use Zend\Http\Client\Exception\ExceptionInterface as HttpClientException; interface ExceptionInterface extends HttpClientException {} &lt;?php
 namespace Zend\Http\Client\Adapter\Exception; use Zend\Http\Client\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Http\Client\Adapter\Exception; use Zend\Http\Client\Exception; class OutOfRangeException extends Exception\OutOfRangeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Http\Client\Adapter; use Traversable; use Zend\Http\Client\Adapter\AdapterInterface as HttpAdapter; use Zend\Http\Client\Adapter\Exception as AdapterException; use Zend\Http\Response; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\ErrorHandler; class Socket implements HttpAdapter, StreamInterface { protected static $sslCryptoTypes = array( 'ssl' =&gt; STREAM_CRYPTO_METHOD_SSLv23_CLIENT, 'sslv2' =&gt; STREAM_CRYPTO_METHOD_SSLv2_CLIENT, 'sslv3' =&gt; STREAM_CRYPTO_METHOD_SSLv3_CLIENT, 'tls' =&gt; STREAM_CRYPTO_METHOD_TLS_CLIENT ); protected $socket = null; protected $connectedTo = array(null, null); protected $outStream = null; protected $config = array( 'persistent' =&gt; false, 'ssltransport' =&gt; 'ssl', 'sslcert' =&gt; null, 'sslpassphrase' =&gt; null, 'sslverifypeer' =&gt; true, 'sslcapath' =&gt; null, 'sslallowselfsigned' =&gt; false, 'sslusecontext' =&gt; false ); protected $method = null; protected $context = null; public function __construct() { } public function setOptions($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { throw new AdapterException\InvalidArgumentException( 'Array or Zend_Config object expected, got ' . gettype($options) ); } foreach ($options as $k =&gt; $v) { $this-&gt;config[strtolower($k)] = $v; } } public function getConfig() { return $this-&gt;config; } public function setStreamContext($context) { if (is_resource($context) &amp;&amp; get_resource_type($context) == 'stream-context') { $this-&gt;context = $context; } elseif (is_array($context)) { $this-&gt;context = stream_context_create($context); } else { throw new AdapterException\InvalidArgumentException( "Expecting either a stream context resource or array, got " . gettype($context) ); } return $this; } public function getStreamContext() { if (! $this-&gt;context) { $this-&gt;context = stream_context_create(); } return $this-&gt;context; } public function connect($host, $port = 80, $secure = false) { $connectedHost = (strpos($this-&gt;connectedTo[0], '://')) ? substr($this-&gt;connectedTo[0], (strpos($this-&gt;connectedTo[0], '://') + 3), strlen($this-&gt;connectedTo[0])) : $this-&gt;connectedTo[0]; if ($connectedHost != $host || $this-&gt;connectedTo[1] != $port) { if (is_resource($this-&gt;socket)) { $this-&gt;close(); } } if (!is_resource($this-&gt;socket) || ! $this-&gt;config['keepalive']) { $context = $this-&gt;getStreamContext(); if ($secure || $this-&gt;config['sslusecontext']) { if ($this-&gt;config['sslverifypeer'] !== null) { if (!stream_context_set_option($context, 'ssl', 'verify_peer', $this-&gt;config['sslverifypeer'])) { throw new AdapterException\RuntimeException('Unable to set sslverifypeer option'); } } if ($this-&gt;config['sslcapath']) { if (!stream_context_set_option($context, 'ssl', 'capath', $this-&gt;config['sslcapath'])) { throw new AdapterException\RuntimeException('Unable to set sslcapath option'); } } if ($this-&gt;config['sslallowselfsigned'] !== null) { if (!stream_context_set_option($context, 'ssl', 'allow_self_signed', $this-&gt;config['sslallowselfsigned'])) { throw new AdapterException\RuntimeException('Unable to set sslallowselfsigned option'); } } if ($this-&gt;config['sslcert'] !== null) { if (!stream_context_set_option($context, 'ssl', 'local_cert', $this-&gt;config['sslcert'])) { throw new AdapterException\RuntimeException('Unable to set sslcert option'); } } if ($this-&gt;config['sslpassphrase'] !== null) { if (!stream_context_set_option($context, 'ssl', 'passphrase', $this-&gt;config['sslpassphrase'])) { throw new AdapterException\RuntimeException('Unable to set sslpassphrase option'); } } } $flags = STREAM_CLIENT_CONNECT; if ($this-&gt;config['persistent']) { $flags |= STREAM_CLIENT_PERSISTENT; } ErrorHandler::start(); $this-&gt;socket = stream_socket_client( $host . ':' . $port, $errno, $errstr, (int) $this-&gt;config['timeout'], $flags, $context ); $error = ErrorHandler::stop(); if (!$this-&gt;socket) { $this-&gt;close(); throw new AdapterException\RuntimeException( sprintf( 'Unable to connect to %s:%d%s', $host, $port, ($error ? ' . Error #' . $error-&gt;getCode() . ': ' . $error-&gt;getMessage() : '') ), 0, $error ); } if (!stream_set_timeout($this-&gt;socket, (int) $this-&gt;config['timeout'])) { throw new AdapterException\RuntimeException('Unable to set the connection timeout'); } if ($secure || $this-&gt;config['sslusecontext']) { if ($this-&gt;config['ssltransport'] &amp;&amp; isset(static::$sslCryptoTypes[$this-&gt;config['ssltransport']])) { $sslCryptoMethod = static::$sslCryptoTypes[$this-&gt;config['ssltransport']]; } else { $sslCryptoMethod = STREAM_CRYPTO_METHOD_SSLv3_CLIENT; } ErrorHandler::start(); $test = stream_socket_enable_crypto($this-&gt;socket, true, $sslCryptoMethod); $error = ErrorHandler::stop(); if (!$test || $error) { $errorString = ''; if (extension_loaded('openssl')) { while (($sslError = openssl_error_string()) != false) { $errorString .= "; SSL error: $sslError"; } } $this-&gt;close(); if ((! $errorString) &amp;&amp; $this-&gt;config['sslverifypeer']) { if (! ($this-&gt;config['sslcapath'] &amp;&amp; is_dir($this-&gt;config['sslcapath']))) { $errorString = 'make sure the "sslcapath" option points to a valid SSL certificate directory'; } } if ($errorString) { $errorString = ": $errorString"; } throw new AdapterException\RuntimeException(sprintf( 'Unable to enable crypto on TCP connection %s%s', $host, $errorString ), 0, $error); } $host = $this-&gt;config['ssltransport'] . "://" . $host; } else { $host = 'tcp://' . $host; } $this-&gt;connectedTo = array($host, $port); } } public function write($method, $uri, $httpVer = '1.1', $headers = array(), $body = '') { if (! $this-&gt;socket) { throw new AdapterException\RuntimeException('Trying to write but we are not connected'); } $host = $uri-&gt;getHost(); $host = (strtolower($uri-&gt;getScheme()) == 'https' ? $this-&gt;config['ssltransport'] : 'tcp') . '://' . $host; if ($this-&gt;connectedTo[0] != $host || $this-&gt;connectedTo[1] != $uri-&gt;getPort()) { throw new AdapterException\RuntimeException('Trying to write but we are connected to the wrong host'); } $this-&gt;method = $method; $path = $uri-&gt;getPath(); if ($uri-&gt;getQuery()) $path .= '?' . $uri-&gt;getQuery(); $request = "{$method} {$path} HTTP/{$httpVer}\r\n"; foreach ($headers as $k =&gt; $v) { if (is_string($k)) $v = ucfirst($k) . ": $v"; $request .= "$v\r\n"; } if (is_resource($body)) { $request .= "\r\n"; } else { $request .= "\r\n" . $body; } ErrorHandler::start(); $test = fwrite($this-&gt;socket, $request); $error = ErrorHandler::stop(); if (false === $test) { throw new AdapterException\RuntimeException('Error writing request to server', 0, $error); } if (is_resource($body)) { if (stream_copy_to_stream($body, $this-&gt;socket) == 0) { throw new AdapterException\RuntimeException('Error writing request to server'); } } return $request; } public function read() { $response = ''; $gotStatus = false; while (($line = fgets($this-&gt;socket)) !== false) { $gotStatus = $gotStatus || (strpos($line, 'HTTP') !== false); if ($gotStatus) { $response .= $line; if (rtrim($line) === '') break; } } $this-&gt;_checkSocketReadTimeout(); $responseObj= Response::fromString($response); $statusCode = $responseObj-&gt;getStatusCode(); if ($statusCode == 100 || $statusCode == 101) return $this-&gt;read(); $headers = $responseObj-&gt;getHeaders(); if ($statusCode == 304 || $statusCode == 204 || $this-&gt;method == \Zend\Http\Request::METHOD_HEAD) { $connection = $headers-&gt;get('connection'); if ($connection &amp;&amp; $connection-&gt;getFieldValue() == 'close') { $this-&gt;close(); } return $response; } $transferEncoding = $headers-&gt;get('transfer-encoding'); $contentLength = $headers-&gt;get('content-length'); if ($transferEncoding !== false) { if (strtolower($transferEncoding-&gt;getFieldValue()) == 'chunked') { do { $line = fgets($this-&gt;socket); $this-&gt;_checkSocketReadTimeout(); $chunk = $line; $chunksize = trim($line); if (! ctype_xdigit($chunksize)) { $this-&gt;close(); throw new AdapterException\RuntimeException('Invalid chunk size "' . $chunksize . '" unable to read chunked body'); } $chunksize = hexdec($chunksize); $readTo = ftell($this-&gt;socket) + $chunksize; do { $currentPos = ftell($this-&gt;socket); if ($currentPos &gt;= $readTo) break; if ($this-&gt;outStream) { if (stream_copy_to_stream($this-&gt;socket, $this-&gt;outStream, $readTo - $currentPos) == 0) { $this-&gt;_checkSocketReadTimeout(); break; } } else { $line = fread($this-&gt;socket, $readTo - $currentPos); if ($line === false || strlen($line) === 0) { $this-&gt;_checkSocketReadTimeout(); break; } $chunk .= $line; } } while (! feof($this-&gt;socket)); ErrorHandler::start(); $chunk .= fgets($this-&gt;socket); ErrorHandler::stop(); $this-&gt;_checkSocketReadTimeout(); if (!$this-&gt;outStream) { $response .= $chunk; } } while ($chunksize &gt; 0); } else { $this-&gt;close(); throw new AdapterException\RuntimeException('Cannot handle "' . $transferEncoding-&gt;getFieldValue() . '" transfer encoding'); } if ($this-&gt;outStream) { $response = str_ireplace("Transfer-Encoding: chunked\r\n", '', $response); } } elseif ($contentLength !== false) { if (is_array($contentLength)) { $contentLength = $contentLength[count($contentLength) - 1]; } $contentLength = $contentLength-&gt;getFieldValue(); $currentPos = ftell($this-&gt;socket); $chunk = ''; for ($readTo = $currentPos + $contentLength; $readTo &gt; $currentPos; $currentPos = ftell($this-&gt;socket)) { if ($this-&gt;outStream) { if (stream_copy_to_stream($this-&gt;socket, $this-&gt;outStream, $readTo - $currentPos) == 0) { $this-&gt;_checkSocketReadTimeout(); break; } } else { $chunk = fread($this-&gt;socket, $readTo - $currentPos); if ($chunk === false || strlen($chunk) === 0) { $this-&gt;_checkSocketReadTimeout(); break; } $response .= $chunk; } if (feof($this-&gt;socket)) break; } } else { do { if ($this-&gt;outStream) { if (stream_copy_to_stream($this-&gt;socket, $this-&gt;outStream) == 0) { $this-&gt;_checkSocketReadTimeout(); break; } } else { $buff = fread($this-&gt;socket, 8192); if ($buff === false || strlen($buff) === 0) { $this-&gt;_checkSocketReadTimeout(); break; } else { $response .= $buff; } } } while (feof($this-&gt;socket) === false); $this-&gt;close(); } $connection = $headers-&gt;get('connection'); if ($connection &amp;&amp; $connection-&gt;getFieldValue() == 'close') { $this-&gt;close(); } return $response; } public function close() { if (is_resource($this-&gt;socket)) { ErrorHandler::start(); fclose($this-&gt;socket); ErrorHandler::stop(); } $this-&gt;socket = null; $this-&gt;connectedTo = array(null, null); } protected function _checkSocketReadTimeout() { if ($this-&gt;socket) { $info = stream_get_meta_data($this-&gt;socket); $timedout = $info['timed_out']; if ($timedout) { $this-&gt;close(); throw new AdapterException\TimeoutException( "Read timed out after {$this-&gt;config['timeout']} seconds", AdapterException\TimeoutException::READ_TIMEOUT ); } } } public function setOutputStream($stream) { $this-&gt;outStream = $stream; return $this; } public function __destruct() { if (! $this-&gt;config['persistent']) { if ($this-&gt;socket) $this-&gt;close(); } } } &lt;?php
 namespace Zend\Http\Client\Adapter; use Zend\Http\Client; use Zend\Http\Client\Adapter\Exception as AdapterException; use Zend\Http\Response; use Zend\Stdlib\ErrorHandler; class Proxy extends Socket { protected $config = array( 'ssltransport' =&gt; 'ssl', 'sslcert' =&gt; null, 'sslpassphrase' =&gt; null, 'sslverifypeer' =&gt; true, 'sslcapath' =&gt; null, 'sslallowselfsigned' =&gt; false, 'sslusecontext' =&gt; false, 'proxy_host' =&gt; '', 'proxy_port' =&gt; 8080, 'proxy_user' =&gt; '', 'proxy_pass' =&gt; '', 'proxy_auth' =&gt; Client::AUTH_BASIC, 'persistent' =&gt; false ); protected $negotiated = false; public function setOptions($options = array()) { foreach ($options as $k =&gt; $v) { if (preg_match("/^proxy[a-z]+/", $k)) { $options['proxy_' . substr($k, 5, strlen($k))] = $v; unset($options[$k]); } } parent::setOptions($options); } public function connect($host, $port = 80, $secure = false) { if (! $this-&gt;config['proxy_host']) { parent::connect($host, $port, $secure); return; } if ($secure) { $this-&gt;config['sslusecontext'] = true; } parent::connect( $this-&gt;config['proxy_host'], $this-&gt;config['proxy_port'], false ); } public function write($method, $uri, $httpVer = '1.1', $headers = array(), $body = '') { if (! $this-&gt;config['proxy_host']) return parent::write($method, $uri, $httpVer, $headers, $body); if (! $this-&gt;socket) { throw new AdapterException\RuntimeException("Trying to write but we are not connected"); } $host = $this-&gt;config['proxy_host']; $port = $this-&gt;config['proxy_port']; if ($this-&gt;connectedTo[0] != "tcp://$host" || $this-&gt;connectedTo[1] != $port) { throw new AdapterException\RuntimeException("Trying to write but we are connected to the wrong proxy server"); } if ($this-&gt;config['proxy_user'] &amp;&amp; ! isset($headers['proxy-authorization'])) { $headers['proxy-authorization'] = Client::encodeAuthHeader( $this-&gt;config['proxy_user'], $this-&gt;config['proxy_pass'], $this-&gt;config['proxy_auth'] ); } if ($uri-&gt;getScheme() == 'https' &amp;&amp; (! $this-&gt;negotiated)) { $this-&gt;connectHandshake($uri-&gt;getHost(), $uri-&gt;getPort(), $httpVer, $headers); $this-&gt;negotiated = true; } $this-&gt;method = $method; if ($this-&gt;negotiated) { $path = $uri-&gt;getPath(); if ($uri-&gt;getQuery()) { $path .= '?' . $uri-&gt;getQuery(); } $request = "$method $path HTTP/$httpVer\r\n"; } else { $request = "$method $uri HTTP/$httpVer\r\n"; } foreach ($headers as $k =&gt; $v) { if (is_string($k)) $v = "$k: $v"; $request .= "$v\r\n"; } if (is_resource($body)) { $request .= "\r\n"; } else { $request .= "\r\n" . $body; } ErrorHandler::start(); $test = fwrite($this-&gt;socket, $request); $error = ErrorHandler::stop(); if (!$test) { throw new AdapterException\RuntimeException("Error writing request to proxy server", 0, $error); } if (is_resource($body)) { if (stream_copy_to_stream($body, $this-&gt;socket) == 0) { throw new AdapterException\RuntimeException('Error writing request to server'); } } return $request; } protected function connectHandshake($host, $port = 443, $httpVer = '1.1', array &amp;$headers = array()) { $request = "CONNECT $host:$port HTTP/$httpVer\r\n" . "Host: " . $this-&gt;config['proxy_host'] . "\r\n"; if (isset($this-&gt;config['useragent'])) { $request .= "User-agent: " . $this-&gt;config['useragent'] . "\r\n"; } if (isset($headers['proxy-authorization'])) { $request .= "Proxy-authorization: " . $headers['proxy-authorization'] . "\r\n"; unset($headers['proxy-authorization']); } $request .= "\r\n"; ErrorHandler::start(); $test = fwrite($this-&gt;socket, $request); $error = ErrorHandler::stop(); if (!$test) { throw new AdapterException\RuntimeException("Error writing request to proxy server", 0, $error); } $response = ''; $gotStatus = false; ErrorHandler::start(); while ($line = fgets($this-&gt;socket)) { $gotStatus = $gotStatus || (strpos($line, 'HTTP') !== false); if ($gotStatus) { $response .= $line; if (!rtrim($line)) break; } } ErrorHandler::stop(); if (Response::extractCode($response) != 200) { throw new AdapterException\RuntimeException("Unable to connect to HTTPS proxy. Server response: " . $response); } $modes = array( STREAM_CRYPTO_METHOD_TLS_CLIENT, STREAM_CRYPTO_METHOD_SSLv3_CLIENT, STREAM_CRYPTO_METHOD_SSLv23_CLIENT, STREAM_CRYPTO_METHOD_SSLv2_CLIENT ); $success = false; foreach ($modes as $mode) { $success = stream_socket_enable_crypto($this-&gt;socket, true, $mode); if ($success) break; } if (! $success) { throw new AdapterException\RuntimeException("Unable to connect to" . " HTTPS server through proxy: could not negotiate secure connection."); } } public function close() { parent::close(); $this-&gt;negotiated = false; } public function __destruct() { if ($this-&gt;socket) $this-&gt;close(); } } &lt;?php
 namespace Zend\Http\Client\Adapter; interface AdapterInterface { public function setOptions($options = array()); public function connect($host, $port = 80, $secure = false); public function write($method, $url, $httpVer = '1.1', $headers = array(), $body = ''); public function read(); public function close(); } &lt;?php
 namespace Zend\Http\Client\Adapter; use Traversable; use Zend\Http\Client; use Zend\Http\Client\Adapter\AdapterInterface as HttpAdapter; use Zend\Http\Client\Adapter\Exception as AdapterException; use Zend\Http\Request; use Zend\Stdlib\ArrayUtils; class Curl implements HttpAdapter, StreamInterface { protected $config = array(); protected $connectedTo = array(null, null); protected $curl = null; protected $invalidOverwritableCurlOptions; protected $response = null; protected $outputStream; public function __construct() { if (!extension_loaded('curl')) { throw new AdapterException\InitializationException('cURL extension has to be loaded to use this Zend\Http\Client adapter'); } $this-&gt;invalidOverwritableCurlOptions = array( CURLOPT_HTTPGET, CURLOPT_POST, CURLOPT_UPLOAD, CURLOPT_CUSTOMREQUEST, CURLOPT_HEADER, CURLOPT_RETURNTRANSFER, CURLOPT_HTTPHEADER, CURLOPT_POSTFIELDS, CURLOPT_INFILE, CURLOPT_INFILESIZE, CURLOPT_PORT, CURLOPT_MAXREDIRS, CURLOPT_CONNECTTIMEOUT, CURL_HTTP_VERSION_1_1, CURL_HTTP_VERSION_1_0, ); } public function setOptions($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (!is_array($options)) { throw new AdapterException\InvalidArgumentException( 'Array or Traversable object expected, got ' . gettype($options) ); } foreach ($options as $k =&gt; $v) { unset($options[$k]); $options[str_replace(array('-', '_', ' ', '.'), '', strtolower($k))] = $v; } if (isset($options['proxyuser']) &amp;&amp; isset($options['proxypass'])) { $this-&gt;setCurlOption(CURLOPT_PROXYUSERPWD, $options['proxyuser'] . ":" . $options['proxypass']); unset($options['proxyuser'], $options['proxypass']); } foreach ($options as $k =&gt; $v) { $option = strtolower($k); switch ($option) { case 'proxyhost': $this-&gt;setCurlOption(CURLOPT_PROXY, $v); break; case 'proxyport': $this-&gt;setCurlOption(CURLOPT_PROXYPORT, $v); break; default: $this-&gt;config[$option] = $v; break; } } return $this; } public function getConfig() { return $this-&gt;config; } public function setCurlOption($option, $value) { if (!isset($this-&gt;config['curloptions'])) { $this-&gt;config['curloptions'] = array(); } $this-&gt;config['curloptions'][$option] = $value; return $this; } public function connect($host, $port = 80, $secure = false) { if ($this-&gt;curl) { $this-&gt;close(); } if ($this-&gt;curl &amp;&amp; is_array($this-&gt;connectedTo) &amp;&amp; ($this-&gt;connectedTo[0] != $host || $this-&gt;connectedTo[1] != $port) ) { $this-&gt;close(); } $this-&gt;curl = curl_init(); if ($port != 80) { curl_setopt($this-&gt;curl, CURLOPT_PORT, intval($port)); } if (isset($this-&gt;config['timeout'])) { curl_setopt($this-&gt;curl, CURLOPT_CONNECTTIMEOUT, $this-&gt;config['timeout']); } if (isset($this-&gt;config['maxredirects'])) { curl_setopt($this-&gt;curl, CURLOPT_MAXREDIRS, $this-&gt;config['maxredirects']); } if (!$this-&gt;curl) { $this-&gt;close(); throw new AdapterException\RuntimeException('Unable to Connect to ' . $host . ':' . $port); } if ($secure !== false) { if (isset($this-&gt;config['sslcert'])) { curl_setopt($this-&gt;curl, CURLOPT_SSLCERT, $this-&gt;config['sslcert']); } if (isset($this-&gt;config['sslpassphrase'])) { curl_setopt($this-&gt;curl, CURLOPT_SSLCERTPASSWD, $this-&gt;config['sslpassphrase']); } } $this-&gt;connectedTo = array($host, $port); } public function write($method, $uri, $httpVersion = 1.1, $headers = array(), $body = '') { if (!$this-&gt;curl) { throw new AdapterException\RuntimeException("Trying to write but we are not connected"); } if ($this-&gt;connectedTo[0] != $uri-&gt;getHost() || $this-&gt;connectedTo[1] != $uri-&gt;getPort()) { throw new AdapterException\RuntimeException("Trying to write but we are connected to the wrong host"); } curl_setopt($this-&gt;curl, CURLOPT_URL, $uri-&gt;__toString()); $curlValue = true; switch ($method) { case 'GET' : $curlMethod = CURLOPT_HTTPGET; break; case 'POST' : $curlMethod = CURLOPT_POST; break; case 'PUT' : if (is_resource($body)) { $this-&gt;config['curloptions'][CURLOPT_INFILE] = $body; } if (isset($this-&gt;config['curloptions'][CURLOPT_INFILE])) { foreach ($headers AS $k =&gt; $header) { if (preg_match('/Content-Length:\s*(\d+)/i', $header, $m)) { if (is_resource($body)) { $this-&gt;config['curloptions'][CURLOPT_INFILESIZE] = (int) $m[1]; } unset($headers[$k]); } } if (!isset($this-&gt;config['curloptions'][CURLOPT_INFILESIZE])) { throw new AdapterException\RuntimeException("Cannot set a file-handle for cURL option CURLOPT_INFILE without also setting its size in CURLOPT_INFILESIZE."); } if (is_resource($body)) { $body = ''; } $curlMethod = CURLOPT_UPLOAD; } else { $curlMethod = CURLOPT_CUSTOMREQUEST; $curlValue = "PUT"; } break; case 'PATCH' : $curlMethod = CURLOPT_CUSTOMREQUEST; $curlValue = "PATCH"; break; case 'DELETE' : $curlMethod = CURLOPT_CUSTOMREQUEST; $curlValue = "DELETE"; break; case 'OPTIONS' : $curlMethod = CURLOPT_CUSTOMREQUEST; $curlValue = "OPTIONS"; break; case 'TRACE' : $curlMethod = CURLOPT_CUSTOMREQUEST; $curlValue = "TRACE"; break; case 'HEAD' : $curlMethod = CURLOPT_CUSTOMREQUEST; $curlValue = "HEAD"; break; default: throw new AdapterException\InvalidArgumentException("Method '$method' currently not supported"); } if (is_resource($body) &amp;&amp; $curlMethod != CURLOPT_UPLOAD) { throw new AdapterException\RuntimeException("Streaming requests are allowed only with PUT"); } $curlHttp = ($httpVersion == 1.1) ? CURL_HTTP_VERSION_1_1 : CURL_HTTP_VERSION_1_0; curl_setopt($this-&gt;curl, $curlHttp, true); curl_setopt($this-&gt;curl, $curlMethod, $curlValue); if ($this-&gt;outputStream) { curl_setopt($this-&gt;curl, CURLOPT_HEADER, false); curl_setopt($this-&gt;curl, CURLOPT_HEADERFUNCTION, array($this, "readHeader")); curl_setopt($this-&gt;curl, CURLOPT_FILE, $this-&gt;outputStream); } else { curl_setopt($this-&gt;curl, CURLOPT_HEADER, true); curl_setopt($this-&gt;curl, CURLOPT_RETURNTRANSFER, true); } if (array_key_exists('Authorization', $headers) &amp;&amp; 'Basic' == substr($headers['Authorization'], 0, 5)) { curl_setopt($this-&gt;curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC); curl_setopt($this-&gt;curl, CURLOPT_USERPWD, base64_decode(substr($headers['Authorization'], 6))); unset($headers['Authorization']); } if (!isset($headers['Accept'])) { $headers['Accept'] = ''; } $curlHeaders = array(); foreach ($headers as $key =&gt; $value) { $curlHeaders[] = $key . ': ' . $value; } curl_setopt($this-&gt;curl, CURLOPT_HTTPHEADER, $curlHeaders); if ($method == 'POST') { curl_setopt($this-&gt;curl, CURLOPT_POSTFIELDS, $body); } elseif ($curlMethod == CURLOPT_UPLOAD) { curl_setopt($this-&gt;curl, CURLOPT_INFILE, $this-&gt;config['curloptions'][CURLOPT_INFILE]); curl_setopt($this-&gt;curl, CURLOPT_INFILESIZE, $this-&gt;config['curloptions'][CURLOPT_INFILESIZE]); unset($this-&gt;config['curloptions'][CURLOPT_INFILE]); unset($this-&gt;config['curloptions'][CURLOPT_INFILESIZE]); } elseif ($method == 'PUT') { curl_setopt($this-&gt;curl, CURLOPT_POSTFIELDS, $body); } elseif ($method == 'PATCH') { curl_setopt($this-&gt;curl, CURLOPT_POSTFIELDS, $body); } if (isset($this-&gt;config['curloptions'])) { foreach ((array) $this-&gt;config['curloptions'] as $k =&gt; $v) { if (!in_array($k, $this-&gt;invalidOverwritableCurlOptions)) { if (curl_setopt($this-&gt;curl, $k, $v) == false) { throw new AdapterException\RuntimeException(sprintf("Unknown or erroreous cURL option '%s' set", $k)); } } } } $response = curl_exec($this-&gt;curl); if (!is_resource($this-&gt;outputStream)) { $this-&gt;response = $response; } $request = curl_getinfo($this-&gt;curl, CURLINFO_HEADER_OUT); $request .= $body; if (empty($this-&gt;response)) { throw new AdapterException\RuntimeException("Error in cURL request: " . curl_error($this-&gt;curl)); } if (stripos($this-&gt;response, "Transfer-Encoding: chunked\r\n")) { $this-&gt;response = str_ireplace("Transfer-Encoding: chunked\r\n", '', $this-&gt;response); } do { $parts = preg_split('|(?:\r?\n){2}|m', $this-&gt;response, 2); $again = false; if (isset($parts[1]) &amp;&amp; preg_match("|^HTTP/1\.[01](.*?)\r\n|mi", $parts[1])) { $this-&gt;response = $parts[1]; $again = true; } } while ($again); if (stripos($this-&gt;response, "HTTP/1.0 200 Connection established\r\n\r\n") !== false) { $this-&gt;response = str_ireplace("HTTP/1.0 200 Connection established\r\n\r\n", '', $this-&gt;response); } return $request; } public function read() { return $this-&gt;response; } public function close() { if (is_resource($this-&gt;curl)) { curl_close($this-&gt;curl); } $this-&gt;curl = null; $this-&gt;connectedTo = array(null, null); } public function getHandle() { return $this-&gt;curl; } public function setOutputStream($stream) { $this-&gt;outputStream = $stream; return $this; } public function readHeader($curl, $header) { $this-&gt;response .= $header; return strlen($header); } } &lt;?php
 namespace Zend\Http\Client\Adapter; use Traversable; use Zend\Http\Response; use Zend\Stdlib\ArrayUtils; class Test implements AdapterInterface { protected $config = array(); protected $responses = array("HTTP/1.1 400 Bad Request\r\n\r\n"); protected $responseIndex = 0; protected $nextRequestWillFail = false; public function __construct() { } public function setNextRequestWillFail($flag) { $this-&gt;nextRequestWillFail = (bool) $flag; return $this; } public function setOptions($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (! is_array($options)) { throw new Exception\InvalidArgumentException( 'Array or Traversable object expected, got ' . gettype($options) ); } foreach ($options as $k =&gt; $v) { $this-&gt;config[strtolower($k)] = $v; } } public function connect($host, $port = 80, $secure = false) { if ($this-&gt;nextRequestWillFail) { $this-&gt;nextRequestWillFail = false; throw new Exception\RuntimeException('Request failed'); } } public function write($method, $uri, $httpVer = '1.1', $headers = array(), $body = '') { $host = $uri-&gt;getHost(); $host = (strtolower($uri-&gt;getScheme()) == 'https' ? 'sslv2://' . $host : $host); $path = $uri-&gt;getPath(); if (empty($path)) { $path = '/'; } if ($uri-&gt;getQuery()) $path .= '?' . $uri-&gt;getQuery(); $request = "{$method} {$path} HTTP/{$httpVer}\r\n"; foreach ($headers as $k =&gt; $v) { if (is_string($k)) $v = ucfirst($k) . ": $v"; $request .= "$v\r\n"; } $request .= "\r\n" . $body; return $request; } public function read() { if ($this-&gt;responseIndex &gt;= count($this-&gt;responses)) { $this-&gt;responseIndex = 0; } return $this-&gt;responses[$this-&gt;responseIndex++]; } public function close() { } public function setResponse($response) { if ($response instanceof Response) { $response = $response-&gt;toString(); } $this-&gt;responses = (array) $response; $this-&gt;responseIndex = 0; } public function addResponse($response) { if ($response instanceof Response) { $response = $response-&gt;toString(); } $this-&gt;responses[] = $response; } public function setResponseIndex($index) { if ($index &lt; 0 || $index &gt;= count($this-&gt;responses)) { throw new Exception\OutOfRangeException( 'Index out of range of response buffer size'); } $this-&gt;responseIndex = $index; } } &lt;?php
 namespace Zend\Http\Client\Adapter; interface StreamInterface { public function setOutputStream($stream); } &lt;?php
 namespace Zend\Http\Client; use ArrayIterator; use Traversable; use Zend\Http\Header\SetCookie; use Zend\Http\Response; use Zend\Stdlib\ArrayUtils; use Zend\Uri; class Cookies { const COOKIE_OBJECT = 0; const COOKIE_STRING_ARRAY = 1; const COOKIE_STRING_CONCAT = 2; protected $cookies = array(); protected $rawCookies = array(); public function addCookie($cookie, $refUri = null) { if (is_string($cookie)) { $cookie = SetCookie::fromString($cookie, $refUri); } if ($cookie instanceof SetCookie) { $domain = $cookie-&gt;getDomain(); $path = $cookie-&gt;getPath(); if (!isset($this-&gt;cookies[$domain])) { $this-&gt;cookies[$domain] = array(); } if (!isset($this-&gt;cookies[$domain][$path])) { $this-&gt;cookies[$domain][$path] = array(); } $this-&gt;cookies[$domain][$path][$cookie-&gt;getName()] = $cookie; $this-&gt;rawCookies[] = $cookie; } else { throw new Exception\InvalidArgumentException('Supplient argument is not a valid cookie string or object'); } } public function addCookiesFromResponse(Response $response, $refUri) { $cookieHdrs = $response-&gt;getHeaders()-&gt;get('Set-Cookie'); if ($cookieHdrs instanceof Traversable) { $cookieHdrs = ArrayUtils::iteratorToArray($cookieHdrs); } if (is_array($cookieHdrs)) { foreach ($cookieHdrs as $cookie) { $this-&gt;addCookie($cookie, $refUri); } } elseif (is_string($cookieHdrs)) { $this-&gt;addCookie($cookieHdrs, $refUri); } } public function getAllCookies($retAs = self::COOKIE_OBJECT) { $cookies = $this-&gt;_flattenCookiesArray($this-&gt;cookies, $retAs); return $cookies; } public function getMatchingCookies($uri, $matchSessionCookies = true, $retAs = self::COOKIE_OBJECT, $now = null) { if (is_string($uri)) { $uri = Uri\UriFactory::factory($uri, 'http'); } elseif (!$uri instanceof Uri\Uri) { throw new Exception\InvalidArgumentException("Invalid URI string or object passed"); } $host = $uri-&gt;getHost(); if (empty($host)) { throw new Exception\InvalidArgumentException('Invalid URI specified; does not contain a host'); } $cookies = $this-&gt;_matchDomain($host); $cookies = $this-&gt;_matchPath($cookies, $uri-&gt;getPath()); $cookies = $this-&gt;_flattenCookiesArray($cookies, self::COOKIE_OBJECT); $ret = array(); foreach ($cookies as $cookie) if ($cookie-&gt;match($uri, $matchSessionCookies, $now)) $ret[] = $cookie; $ret = $this-&gt;_flattenCookiesArray($ret, $retAs); return $ret; } public function getCookie($uri, $cookieName, $retAs = self::COOKIE_OBJECT) { if (is_string($uri)) { $uri = Uri\UriFactory::factory($uri, 'http'); } elseif (!$uri instanceof Uri\Uri) { throw new Exception\InvalidArgumentException('Invalid URI specified'); } $host = $uri-&gt;getHost(); if (empty($host)) { throw new Exception\InvalidArgumentException('Invalid URI specified; host missing'); } $path = $uri-&gt;getPath(); $path = substr($path, 0, strrpos($path, '/')); if (! $path) $path = '/'; if (isset($this-&gt;cookies[$uri-&gt;getHost()][$path][$cookieName])) { $cookie = $this-&gt;cookies[$uri-&gt;getHost()][$path][$cookieName]; switch ($retAs) { case self::COOKIE_OBJECT: return $cookie; break; case self::COOKIE_STRING_ARRAY: case self::COOKIE_STRING_CONCAT: return $cookie-&gt;__toString(); break; default: throw new Exception\InvalidArgumentException("Invalid value passed for \$retAs: {$retAs}"); break; } } return false; } protected function _flattenCookiesArray($ptr, $retAs = self::COOKIE_OBJECT) { if (is_array($ptr)) { $ret = ($retAs == self::COOKIE_STRING_CONCAT ? '' : array()); foreach ($ptr as $item) { if ($retAs == self::COOKIE_STRING_CONCAT) { $ret .= $this-&gt;_flattenCookiesArray($item, $retAs); } else { $ret = array_merge($ret, $this-&gt;_flattenCookiesArray($item, $retAs)); } } return $ret; } elseif ($ptr instanceof SetCookie) { switch ($retAs) { case self::COOKIE_STRING_ARRAY: return array($ptr-&gt;__toString()); break; case self::COOKIE_STRING_CONCAT: return $ptr-&gt;__toString(); break; case self::COOKIE_OBJECT: default: return array($ptr); break; } } return null; } protected function _matchDomain($domain) { $ret = array(); foreach (array_keys($this-&gt;cookies) as $cdom) { if (SetCookie::matchCookieDomain($cdom, $domain)) { $ret[$cdom] = $this-&gt;cookies[$cdom]; } } return $ret; } protected function _matchPath($domains, $path) { $ret = array(); foreach ($domains as $dom =&gt; $pathsArray) { foreach (array_keys($pathsArray) as $cpath) { if (SetCookie::matchCookiePath($cpath, $path)) { if (! isset($ret[$dom])) { $ret[$dom] = array(); } $ret[$dom][$cpath] = $pathsArray[$cpath]; } } } return $ret; } public static function fromResponse(Response $response, $refUri) { $jar = new static(); $jar-&gt;addCookiesFromResponse($response, $refUri); return $jar; } public function count() { return count($this-&gt;rawCookies); } public function getIterator() { return new ArrayIterator($this-&gt;rawCookies); } public function isEmpty() { return count($this) == 0; } public function reset() { $this-&gt;cookies = $this-&gt;rawCookies = array(); return $this; } public function offsetExists($offset) { } public function offsetGet($offset) { } public function offsetSet($offset, $value) { } public function offsetUnset($offset) { } public function serialize() { } public function unserialize($serialized) { } public function fromArray(array $values) { } public function fromString($string) { } public function toArray() { } public function toString() { } public function get($name, $default = null) { } public function set($name, $value) { } } &lt;?php
 namespace Zend\Http\PhpEnvironment; class RemoteAddress { protected $useProxy = false; protected $trustedProxies = array(); protected $proxyHeader = 'HTTP_X_FORWARDED_FOR'; public function setUseProxy($useProxy = true) { $this-&gt;useProxy = $useProxy; return $this; } public function getUseProxy() { return $this-&gt;useProxy; } public function setTrustedProxies(array $trustedProxies) { $this-&gt;trustedProxies = $trustedProxies; return $this; } public function setProxyHeader($header = 'X-Forwarded-For') { $this-&gt;proxyHeader = $this-&gt;normalizeProxyHeader($header); return $this; } public function getIpAddress() { $ip = $this-&gt;getIpAddressFromProxy(); if ($ip) { return $ip; } if (isset($_SERVER['REMOTE_ADDR'])) { return $_SERVER['REMOTE_ADDR']; } return ''; } protected function getIpAddressFromProxy() { if (!$this-&gt;useProxy) { return false; } $header = $this-&gt;proxyHeader; if (!isset($_SERVER[$header]) || empty($_SERVER[$header])) { return false; } $ips = explode(',', $_SERVER[$header]); $ips = array_map('trim', $ips); $ips = array_diff($ips, $this-&gt;trustedProxies); if (empty($ips)) { return false; } $ip = array_pop($ips); return $ip; } protected function normalizeProxyHeader($header) { $header = strtoupper($header); $header = str_replace('-', '_', $header); if (0 !== strpos($header, 'HTTP_')) { $header = 'HTTP_' . $header; } return $header; } } &lt;?php
 namespace Zend\Http\PhpEnvironment; use Zend\Http\Header\MultipleHeaderInterface; use Zend\Http\Response as HttpResponse; class Response extends HttpResponse { protected $version; protected $contentSent = false; public function getVersion() { if (!$this-&gt;version) { $this-&gt;version = $this-&gt;detectVersion(); } return $this-&gt;version; } protected function detectVersion() { if (isset($_SERVER['SERVER_PROTOCOL']) &amp;&amp; $_SERVER['SERVER_PROTOCOL'] == 'HTTP/1.1') { return self::VERSION_11; } return self::VERSION_10; } public function headersSent() { return headers_sent(); } public function contentSent() { return $this-&gt;contentSent; } public function sendHeaders() { if ($this-&gt;headersSent()) { return $this; } $status = $this-&gt;renderStatusLine(); header($status); foreach ($this-&gt;getHeaders() as $header) { if ($header instanceof MultipleHeaderInterface) { header($header-&gt;toString(), false); continue; } header($header-&gt;toString()); } $this-&gt;headersSent = true; return $this; } public function sendContent() { if ($this-&gt;contentSent()) { return $this; } echo $this-&gt;getContent(); $this-&gt;contentSent = true; return $this; } public function send() { $this-&gt;sendHeaders() -&gt;sendContent(); return $this; } } &lt;?php
 namespace Zend\Http\PhpEnvironment; use Zend\Http\Header\Cookie; use Zend\Http\Request as HttpRequest; use Zend\Stdlib\Parameters; use Zend\Stdlib\ParametersInterface; use Zend\Uri\Http as HttpUri; class Request extends HttpRequest { protected $baseUrl; protected $basePath; protected $requestUri; protected $serverParams = null; protected $envParams = null; public function __construct() { $this-&gt;setEnv(new Parameters($_ENV)); if ($_GET) { $this-&gt;setQuery(new Parameters($_GET)); } if ($_POST) { $this-&gt;setPost(new Parameters($_POST)); } if ($_COOKIE) { $this-&gt;setCookies(new Parameters($_COOKIE)); } if ($_FILES) { $files = $this-&gt;mapPhpFiles(); $this-&gt;setFiles(new Parameters($files)); } $this-&gt;setServer(new Parameters($_SERVER)); } public function getContent() { if (empty($this-&gt;content)) { $requestBody = file_get_contents('php://input'); if (strlen($requestBody) &gt; 0) { $this-&gt;content = $requestBody; } } return $this-&gt;content; } public function setCookies($cookie) { $this-&gt;getHeaders()-&gt;addHeader(new Cookie((array) $cookie)); return $this; } public function setRequestUri($requestUri) { $this-&gt;requestUri = $requestUri; return $this; } public function getRequestUri() { if ($this-&gt;requestUri === null) { $this-&gt;requestUri = $this-&gt;detectRequestUri(); } return $this-&gt;requestUri; } public function setBaseUrl($baseUrl) { $this-&gt;baseUrl = rtrim($baseUrl, '/'); return $this; } public function getBaseUrl() { if ($this-&gt;baseUrl === null) { $this-&gt;setBaseUrl($this-&gt;detectBaseUrl()); } return $this-&gt;baseUrl; } public function setBasePath($basePath) { $this-&gt;basePath = rtrim($basePath, '/'); return $this; } public function getBasePath() { if ($this-&gt;basePath === null) { $this-&gt;setBasePath($this-&gt;detectBasePath()); } return $this-&gt;basePath; } public function setServer(ParametersInterface $server) { $this-&gt;serverParams = $server; if (function_exists('apache_request_headers')) { $apacheRequestHeaders = apache_request_headers(); if (!isset($this-&gt;serverParams['HTTP_AUTHORIZATION'])) { if (isset($apacheRequestHeaders['Authorization'])) { $this-&gt;serverParams-&gt;set('HTTP_AUTHORIZATION', $apacheRequestHeaders['Authorization']); } elseif (isset($apacheRequestHeaders['authorization'])) { $this-&gt;serverParams-&gt;set('HTTP_AUTHORIZATION', $apacheRequestHeaders['authorization']); } } } $headers = array(); foreach ($server as $key =&gt; $value) { if ($value &amp;&amp; strpos($key, 'HTTP_') === 0) { if (strpos($key, 'HTTP_COOKIE') === 0) { continue; } $name = strtr(substr($key, 5), '_', ' '); $name = strtr(ucwords(strtolower($name)), ' ', '-'); } elseif ($value &amp;&amp; strpos($key, 'CONTENT_') === 0) { $name = substr($key, 8); $name = 'Content-' . (($name == 'MD5') ? $name : ucfirst(strtolower($name))); } else { continue; } $headers[$name] = $value; } $this-&gt;getHeaders()-&gt;addHeaders($headers); if (isset($this-&gt;serverParams['REQUEST_METHOD'])) { $this-&gt;setMethod($this-&gt;serverParams['REQUEST_METHOD']); } if (isset($this-&gt;serverParams['SERVER_PROTOCOL']) &amp;&amp; strpos($this-&gt;serverParams['SERVER_PROTOCOL'], self::VERSION_10) !== false ) { $this-&gt;setVersion(self::VERSION_10); } $uri = new HttpUri(); $scheme = (!empty($this-&gt;serverParams['HTTPS']) &amp;&amp; $this-&gt;serverParams['HTTPS'] !== 'off') ? 'https' : 'http'; $uri-&gt;setScheme($scheme); $host = null; $port = null; if (isset($this-&gt;serverParams['SERVER_NAME'])) { $host = $this-&gt;serverParams['SERVER_NAME']; if (isset($this-&gt;serverParams['SERVER_PORT'])) { $port = (int) $this-&gt;serverParams['SERVER_PORT']; } if (isset($this-&gt;serverParams['SERVER_ADDR']) &amp;&amp; preg_match('/^\[[0-9a-fA-F\:]+\]$/', $host)) { $host = '[' . $this-&gt;serverParams['SERVER_ADDR'] . ']'; if ($port . ']' == substr($host, strrpos($host, ':')+1)) { $port = null; } } } elseif ($this-&gt;getHeaders()-&gt;get('host')) { $host = $this-&gt;getHeaders()-&gt;get('host')-&gt;getFieldValue(); if (preg_match('|\:(\d+)$|', $host, $matches)) { $host = substr($host, 0, -1 * (strlen($matches[1]) + 1)); $port = (int) $matches[1]; } } $uri-&gt;setHost($host); $uri-&gt;setPort($port); $requestUri = $this-&gt;getRequestUri(); if (($qpos = strpos($requestUri, '?')) !== false) { $requestUri = substr($requestUri, 0, $qpos); } $uri-&gt;setPath($requestUri); if (isset($this-&gt;serverParams['QUERY_STRING'])) { $uri-&gt;setQuery($this-&gt;serverParams['QUERY_STRING']); } $this-&gt;setUri($uri); return $this; } public function getServer($name = null, $default = null) { if ($this-&gt;serverParams === null) { $this-&gt;serverParams = new Parameters(); } if ($name === null) { return $this-&gt;serverParams; } return $this-&gt;serverParams-&gt;get($name, $default); } public function setEnv(ParametersInterface $env) { $this-&gt;envParams = $env; return $this; } public function getEnv($name = null, $default = null) { if ($this-&gt;envParams === null) { $this-&gt;envParams = new Parameters(); } if ($name === null) { return $this-&gt;envParams; } return $this-&gt;envParams-&gt;get($name, $default); } protected function mapPhpFiles() { $files = array(); foreach ($_FILES as $fileName =&gt; $fileParams) { $files[$fileName] = array(); foreach ($fileParams as $param =&gt; $data) { if (!is_array($data)) { $files[$fileName][$param] = $data; } else { foreach ($data as $i =&gt; $v) { $this-&gt;mapPhpFileParam($files[$fileName], $param, $i, $v); } } } } return $files; } protected function mapPhpFileParam(&amp;$array, $paramName, $index, $value) { if (!is_array($value)) { $array[$index][$paramName] = $value; } else { foreach ($value as $i =&gt; $v) { $this-&gt;mapPhpFileParam($array[$index], $paramName, $i, $v); } } } protected function detectRequestUri() { $requestUri = null; $server = $this-&gt;getServer(); $httpXRewriteUrl = $server-&gt;get('HTTP_X_REWRITE_URL'); if ($httpXRewriteUrl !== null) { $requestUri = $httpXRewriteUrl; } $httpXOriginalUrl = $server-&gt;get('HTTP_X_ORIGINAL_URL'); if ($httpXOriginalUrl !== null) { $requestUri = $httpXOriginalUrl; } $iisUrlRewritten = $server-&gt;get('IIS_WasUrlRewritten'); $unencodedUrl = $server-&gt;get('UNENCODED_URL', ''); if ('1' == $iisUrlRewritten &amp;&amp; '' !== $unencodedUrl) { return $unencodedUrl; } if (!$httpXRewriteUrl) { $requestUri = $server-&gt;get('REQUEST_URI'); } if ($requestUri !== null) { return preg_replace('#^[^/:]+://[^/]+#', '', $requestUri); } $origPathInfo = $server-&gt;get('ORIG_PATH_INFO'); if ($origPathInfo !== null) { $queryString = $server-&gt;get('QUERY_STRING', ''); if ($queryString !== '') { $origPathInfo .= '?' . $queryString; } return $origPathInfo; } return '/'; } protected function detectBaseUrl() { $baseUrl = ''; $filename = $this-&gt;getServer()-&gt;get('SCRIPT_FILENAME', ''); $scriptName = $this-&gt;getServer()-&gt;get('SCRIPT_NAME'); $phpSelf = $this-&gt;getServer()-&gt;get('PHP_SELF'); $origScriptName = $this-&gt;getServer()-&gt;get('ORIG_SCRIPT_NAME'); if ($scriptName !== null &amp;&amp; basename($scriptName) === $filename) { $baseUrl = $scriptName; } elseif ($phpSelf !== null &amp;&amp; basename($phpSelf) === $filename) { $baseUrl = $phpSelf; } elseif ($origScriptName !== null &amp;&amp; basename($origScriptName) === $filename) { $baseUrl = $origScriptName; } else { $baseUrl = '/'; $basename = basename($filename); if ($basename) { $path = ($phpSelf ? trim($phpSelf, '/') : ''); $baseUrl .= substr($path, 0, strpos($path, $basename)) . $basename; } } $requestUri = $this-&gt;getRequestUri(); if (0 === strpos($requestUri, $baseUrl)) { return $baseUrl; } $baseDir = str_replace('\\', '/', dirname($baseUrl)); if (0 === strpos($requestUri, $baseDir)) { return $baseDir; } $truncatedRequestUri = $requestUri; if (false !== ($pos = strpos($requestUri, '?'))) { $truncatedRequestUri = substr($requestUri, 0, $pos); } $basename = basename($baseUrl); if (empty($basename) || false === strpos($truncatedRequestUri, $basename)) { return ''; } if (strlen($requestUri) &gt;= strlen($baseUrl) &amp;&amp; (false !== ($pos = strpos($requestUri, $baseUrl)) &amp;&amp; $pos !== 0) ) { $baseUrl = substr($requestUri, 0, $pos + strlen($baseUrl)); } return $baseUrl; } protected function detectBasePath() { $filename = basename($this-&gt;getServer()-&gt;get('SCRIPT_FILENAME', '')); $baseUrl = $this-&gt;getBaseUrl(); if ($baseUrl === '') { return ''; } if (basename($baseUrl) === $filename) { return str_replace('\\', '/', dirname($baseUrl)); } return $baseUrl; } } &lt;?php
 namespace Zend\Http; use Zend\Stdlib\Parameters; use Zend\Stdlib\ParametersInterface; use Zend\Stdlib\RequestInterface; use Zend\Uri\Exception as UriException; use Zend\Uri\Http as HttpUri; class Request extends AbstractMessage implements RequestInterface { const METHOD_OPTIONS = 'OPTIONS'; const METHOD_GET = 'GET'; const METHOD_HEAD = 'HEAD'; const METHOD_POST = 'POST'; const METHOD_PUT = 'PUT'; const METHOD_DELETE = 'DELETE'; const METHOD_TRACE = 'TRACE'; const METHOD_CONNECT = 'CONNECT'; const METHOD_PATCH = 'PATCH'; const METHOD_PROPFIND= 'PROPFIND'; protected $method = self::METHOD_GET; protected $uri = null; protected $queryParams = null; protected $postParams = null; protected $fileParams = null; public static function fromString($string) { $request = new static(); $lines = explode("\r\n", $string); $matches = null; $methods = implode('|', array( self::METHOD_OPTIONS, self::METHOD_GET, self::METHOD_HEAD, self::METHOD_POST, self::METHOD_PUT, self::METHOD_DELETE, self::METHOD_TRACE, self::METHOD_CONNECT, self::METHOD_PATCH )); $regex = '#^(?P&lt;method&gt;' . $methods . ')\s(?P&lt;uri&gt;[^ ]*)(?:\sHTTP\/(?P&lt;version&gt;\d+\.\d+)){0,1}#'; $firstLine = array_shift($lines); if (!preg_match($regex, $firstLine, $matches)) { throw new Exception\InvalidArgumentException( 'A valid request line was not found in the provided string' ); } $request-&gt;setMethod($matches['method']); $request-&gt;setUri($matches['uri']); if ($matches['version']) { $request-&gt;setVersion($matches['version']); } if (count($lines) == 0) { return $request; } $isHeader = true; $headers = $rawBody = array(); while ($lines) { $nextLine = array_shift($lines); if ($nextLine == '') { $isHeader = false; continue; } if ($isHeader) { $headers[] = $nextLine; } else { $rawBody[] = $nextLine; } } if ($headers) { $request-&gt;headers = implode("\r\n", $headers); } if ($rawBody) { $request-&gt;setContent(implode("\r\n", $rawBody)); } return $request; } public function setMethod($method) { $method = strtoupper($method); if (!defined('static::METHOD_' . $method)) { throw new Exception\InvalidArgumentException('Invalid HTTP method passed'); } $this-&gt;method = $method; return $this; } public function getMethod() { return $this-&gt;method; } public function setUri($uri) { if (is_string($uri)) { try { $uri = new HttpUri($uri); } catch (UriException\InvalidUriPartException $e) { throw new Exception\InvalidArgumentException( sprintf('Invalid URI passed as string (%s)', (string) $uri), $e-&gt;getCode(), $e ); } } elseif (!($uri instanceof HttpUri)) { throw new Exception\InvalidArgumentException( 'URI must be an instance of Zend\Uri\Http or a string' ); } $this-&gt;uri = $uri; return $this; } public function getUri() { if ($this-&gt;uri === null || is_string($this-&gt;uri)) { $this-&gt;uri = new HttpUri($this-&gt;uri); } return $this-&gt;uri; } public function getUriString() { if ($this-&gt;uri instanceof HttpUri) { return $this-&gt;uri-&gt;toString(); } return $this-&gt;uri; } public function setQuery(ParametersInterface $query) { $this-&gt;queryParams = $query; return $this; } public function getQuery($name = null, $default = null) { if ($this-&gt;queryParams === null) { $this-&gt;queryParams = new Parameters(); } if ($name === null) { return $this-&gt;queryParams; } return $this-&gt;queryParams-&gt;get($name, $default); } public function setPost(ParametersInterface $post) { $this-&gt;postParams = $post; return $this; } public function getPost($name = null, $default = null) { if ($this-&gt;postParams === null) { $this-&gt;postParams = new Parameters(); } if ($name === null) { return $this-&gt;postParams; } return $this-&gt;postParams-&gt;get($name, $default); } public function getCookie() { return $this-&gt;getHeaders()-&gt;get('Cookie'); } public function setFiles(ParametersInterface $files) { $this-&gt;fileParams = $files; return $this; } public function getFiles($name = null, $default = null) { if ($this-&gt;fileParams === null) { $this-&gt;fileParams = new Parameters(); } if ($name === null) { return $this-&gt;fileParams; } return $this-&gt;fileParams-&gt;get($name, $default); } public function getHeaders($name = null, $default = false) { if ($this-&gt;headers === null || is_string($this-&gt;headers)) { $this-&gt;headers = (is_string($this-&gt;headers)) ? Headers::fromString($this-&gt;headers) : new Headers(); } if ($name === null) { return $this-&gt;headers; } if ($this-&gt;headers-&gt;has($name)) { return $this-&gt;headers-&gt;get($name); } return $default; } public function getHeader($name, $default = false) { return $this-&gt;getHeaders($name, $default); } public function isOptions() { return ($this-&gt;method === self::METHOD_OPTIONS); } public function isPropFind() { return ($this-&gt;method === self::METHOD_PROPFIND); } public function isGet() { return ($this-&gt;method === self::METHOD_GET); } public function isHead() { return ($this-&gt;method === self::METHOD_HEAD); } public function isPost() { return ($this-&gt;method === self::METHOD_POST); } public function isPut() { return ($this-&gt;method === self::METHOD_PUT); } public function isDelete() { return ($this-&gt;method === self::METHOD_DELETE); } public function isTrace() { return ($this-&gt;method === self::METHOD_TRACE); } public function isConnect() { return ($this-&gt;method === self::METHOD_CONNECT); } public function isPatch() { return ($this-&gt;method === self::METHOD_PATCH); } public function isXmlHttpRequest() { $header = $this-&gt;getHeaders()-&gt;get('X_REQUESTED_WITH'); return false !== $header &amp;&amp; $header-&gt;getFieldValue() == 'XMLHttpRequest'; } public function isFlashRequest() { $header = $this-&gt;getHeaders()-&gt;get('USER_AGENT'); return false !== $header &amp;&amp; stristr($header-&gt;getFieldValue(), ' flash'); } public function renderRequestLine() { return $this-&gt;method . ' ' . (string) $this-&gt;uri . ' HTTP/' . $this-&gt;version; } public function toString() { $str = $this-&gt;renderRequestLine() . "\r\n"; $str .= $this-&gt;getHeaders()-&gt;toString(); $str .= "\r\n"; $str .= $this-&gt;getContent(); return $str; } } &lt;?php
 namespace Zend\Http\Header; use Zend\Uri\Http as HttpUri; class Referer extends AbstractLocation { public function setUri($uri) { parent::setUri($uri); $this-&gt;uri-&gt;setFragment(null); return $this; } public function getFieldName() { return 'Referer'; } } &lt;?php
 namespace Zend\Http\Header; class ContentMD5 implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-md5') { throw new Exception\InvalidArgumentException('Invalid header line for Content-MD5 string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-MD5'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-MD5: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Upgrade implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'upgrade') { throw new Exception\InvalidArgumentException('Invalid header line for Upgrade string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Upgrade'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Upgrade: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header\Accept\FieldValuePart; class AcceptFieldValuePart extends AbstractFieldValuePart { public function getSubtype() { return $this-&gt;getInternalValues()-&gt;subtype; } public function getSubtypeRaw() { return $this-&gt;getInternalValues()-&gt;subtypeRaw; } public function getFormat() { return $this-&gt;getInternalValues()-&gt;format; } } &lt;?php
 namespace Zend\Http\Header\Accept\FieldValuePart; class CharsetFieldValuePart extends AbstractFieldValuePart { public function getCharset() { return $this-&gt;getInternalValues()-&gt;type; } } &lt;?php
 namespace Zend\Http\Header\Accept\FieldValuePart; class EncodingFieldValuePart extends AbstractFieldValuePart { public function getEncoding() { return $this-&gt;type; } } &lt;?php
 namespace Zend\Http\Header\Accept\FieldValuePart; class LanguageFieldValuePart extends AbstractFieldValuePart { public function getLanguage() { return $this-&gt;getInternalValues()-&gt;typeString; } public function getPrimaryTag() { return $this-&gt;getInternalValues()-&gt;type; } public function getSubTag() { return $this-&gt;getInternalValues()-&gt;subtype; } } &lt;?php
 namespace Zend\Http\Header\Accept\FieldValuePart; abstract class AbstractFieldValuePart { private $internalValues; protected $matchedAgainst; public function __construct($internalValues) { $this-&gt;internalValues = $internalValues; } public function setMatchedAgainst(AbstractFieldValuePart $matchedAgainst) { $this-&gt;matchedAgainst = $matchedAgainst; return $this; } public function getMatchedAgainst() { return $this-&gt;matchedAgainst; } protected function getInternalValues() { return $this-&gt;internalValues; } public function getTypeString() { return $this-&gt;getInternalValues()-&gt;typeString; } public function getPriority() { return (float) $this-&gt;getInternalValues()-&gt;priority; } public function getParams() { return (object) $this-&gt;getInternalValues()-&gt;params; } public function getRaw() { return $this-&gt;getInternalValues()-&gt;raw; } public function __get($key) { return $this-&gt;getInternalValues()-&gt;$key; } } &lt;?php
 namespace Zend\Http\Header; class CacheControl implements HeaderInterface { protected $directives = array(); public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'cache-control') { throw new Exception\InvalidArgumentException('Invalid header line for Cache-Control string: "' . $name . '"'); } $header-&gt;directives = static::parseValue($value); return $header; } public function getFieldName() { return 'Cache-Control'; } public function isEmpty() { return empty($this-&gt;directives); } public function addDirective($key, $value = true) { $this-&gt;directives[$key] = $value; return $this; } public function hasDirective($key) { return array_key_exists($key, $this-&gt;directives); } public function getDirective($key) { return array_key_exists($key, $this-&gt;directives) ? $this-&gt;directives[$key] : null; } public function removeDirective($key) { unset($this-&gt;directives[$key]); return $this; } public function getFieldValue() { $parts = array(); ksort($this-&gt;directives); foreach ($this-&gt;directives as $key =&gt; $value) { if (true === $value) { $parts[] = $key; } else { if (preg_match('#[^a-zA-Z0-9._-]#', $value)) { $value = '"' . $value.'"'; } $parts[] = "$key=$value"; } } return implode(', ', $parts); } public function toString() { return 'Cache-Control: ' . $this-&gt;getFieldValue(); } protected static function parseValue($value) { $value = trim($value); $directives = array(); if ($value == '') { return $directives; } $lastMatch = null; state_directive: switch (static::match(array('[a-zA-Z][a-zA-Z_-]*'), $value, $lastMatch)) { case 0: $directive = $lastMatch; goto state_value; break; default: throw new Exception\InvalidArgumentException('expected DIRECTIVE'); break; } state_value: switch (static::match(array('="[^"]*"', '=[^",\s;]*'), $value, $lastMatch)) { case 0: $directives[$directive] = substr($lastMatch, 2, -1); goto state_separator; break; case 1: $directives[$directive] = rtrim(substr($lastMatch, 1)); goto state_separator; break; default: $directives[$directive] = true; goto state_separator; break; } state_separator: switch (static::match(array('\s*,\s*', '$'), $value, $lastMatch)) { case 0: goto state_directive; break; case 1: return $directives; break; default: throw new Exception\InvalidArgumentException('expected SEPARATOR or END'); break; } } protected static function match($tokens, &amp;$string, &amp;$lastMatch) { foreach ($tokens as $i =&gt; $token) { if (preg_match('/^' . $token . '/', $string, $matches)) { $lastMatch = $matches[0]; $string = substr($string, strlen($matches[0])); return $i; } } return -1; } } &lt;?php
 namespace Zend\Http\Header; class Warning implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'warning') { throw new Exception\InvalidArgumentException('Invalid header line for Warning string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Warning'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Warning: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Host implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'host') { throw new Exception\InvalidArgumentException('Invalid header line for Host string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Host'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Host: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class ContentEncoding implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-encoding') { throw new Exception\InvalidArgumentException('Invalid header line for Content-Encoding string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-Encoding'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-Encoding: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header\Exception; use Zend\Http\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Http\Header\Exception; use Zend\Http\Exception\ExceptionInterface as HttpException; interface ExceptionInterface extends HttpException {} &lt;?php
 namespace Zend\Http\Header\Exception; use Zend\Http\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\Http\Header; class TransferEncoding implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'transfer-encoding') { throw new Exception\InvalidArgumentException('Invalid header line for Transfer-Encoding string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Transfer-Encoding'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Transfer-Encoding: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class AcceptRanges implements HeaderInterface { protected $rangeUnit = null; public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'accept-ranges') { throw new Exception\InvalidArgumentException('Invalid header line for Accept-Ranges string'); } $header-&gt;rangeUnit = trim($value); return $header; } public function getFieldName() { return 'Accept-Ranges'; } public function getFieldValue() { return $this-&gt;getRangeUnit(); } public function setRangeUnit($rangeUnit) { $this-&gt;rangeUnit = $rangeUnit; return $this; } public function getRangeUnit() { return $this-&gt;rangeUnit; } public function toString() { return 'Accept-Ranges: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Trailer implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'trailer') { throw new Exception\InvalidArgumentException('Invalid header line for Trailer string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Trailer'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Trailer: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; use ArrayObject; class Cookie extends ArrayObject implements HeaderInterface { protected $encodeValue = true; public static function fromSetCookieArray(array $setCookies) { $nvPairs = array(); foreach ($setCookies as $setCookie) { if (!$setCookie instanceof SetCookie) { throw new Exception\InvalidArgumentException(__CLASS__ . '::' . __METHOD__ . ' requires an array of SetCookie objects'); } if (array_key_exists($setCookie-&gt;getName(), $nvPairs)) { throw new Exception\InvalidArgumentException('Two cookies with the same name were provided to ' . __CLASS__ . '::' . __METHOD__); } $nvPairs[$setCookie-&gt;getName()] = $setCookie-&gt;getValue(); } return new static($nvPairs); } public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'cookie') { throw new Exception\InvalidArgumentException('Invalid header line for Server string: "' . $name . '"'); } $nvPairs = preg_split('#;\s*#', $value); $arrayInfo = array(); foreach ($nvPairs as $nvPair) { $parts = explode('=', $nvPair, 2); if (count($parts) != 2) { throw new Exception\RuntimeException('Malformed Cookie header found'); } list($name, $value) = $parts; $arrayInfo[$name] = urldecode($value); } $header-&gt;exchangeArray($arrayInfo); return $header; } public function __construct(array $array = array()) { parent::__construct($array, ArrayObject::ARRAY_AS_PROPS); } public function setEncodeValue($encodeValue) { $this-&gt;encodeValue = (bool) $encodeValue; return $this; } public function getEncodeValue() { return $this-&gt;encodeValue; } public function getFieldName() { return 'Cookie'; } public function getFieldValue() { $nvPairs = array(); foreach ($this as $name =&gt; $value) { $nvPairs[] = $name . '=' . (($this-&gt;encodeValue) ? urlencode($value) : $value); } return implode('; ', $nvPairs); } public function toString() { return 'Cookie: ' . $this-&gt;getFieldValue(); } public function __toString() { return $this-&gt;toString(); } } &lt;?php
 namespace Zend\Http\Header; use Zend\Uri\Exception as UriException; use Zend\Uri\UriInterface; use Zend\Uri\UriFactory; use Zend\Uri\Uri; abstract class AbstractLocation implements HeaderInterface { protected $uri = null; public static function fromString($headerLine) { $locationHeader = new static(); list($name, $uri) = explode(':', $headerLine, 2); if (strtolower($name) !== strtolower($locationHeader-&gt;getFieldName())) { throw new Exception\InvalidArgumentException( 'Invalid header line for "' . $locationHeader-&gt;getFieldName() . '" header string' ); } $locationHeader-&gt;setUri(trim($uri)); return $locationHeader; } public function setUri($uri) { if (is_string($uri)) { try { $uri = UriFactory::factory($uri); } catch (UriException\InvalidUriPartException $e) { throw new Exception\InvalidArgumentException( sprintf('Invalid URI passed as string (%s)', (string) $uri), $e-&gt;getCode(), $e ); } } elseif (!($uri instanceof UriInterface)) { throw new Exception\InvalidArgumentException('URI must be an instance of Zend\Uri\Http or a string'); } $this-&gt;uri = $uri; return $this; } public function getUri() { if ($this-&gt;uri instanceof UriInterface) { return $this-&gt;uri-&gt;toString(); } return $this-&gt;uri; } public function uri() { if ($this-&gt;uri === null || is_string($this-&gt;uri)) { $this-&gt;uri = UriFactory::factory($this-&gt;uri); } return $this-&gt;uri; } public function getFieldValue() { return $this-&gt;getUri(); } public function toString() { return $this-&gt;getFieldName() . ': ' . $this-&gt;getUri(); } public function __toString() { return $this-&gt;toString(); } } &lt;?php
 namespace Zend\Http\Header; class RetryAfter extends AbstractDate { protected $deltaSeconds = 3600; public static function fromString($headerLine) { $dateHeader = new static(); list($name, $date) = explode(': ', $headerLine, 2); if (strtolower($name) !== strtolower($dateHeader-&gt;getFieldName())) { throw new Exception\InvalidArgumentException( 'Invalid header line for "' . $dateHeader-&gt;getFieldName() . '" header string' ); } if (is_numeric($date)) { $dateHeader-&gt;setDeltaSeconds($date); } else { $dateHeader-&gt;setDate($date); } return $dateHeader; } public function setDeltaSeconds($delta) { $this-&gt;deltaSeconds = (int) $delta; return $this; } public function getDeltaSeconds() { return $this-&gt;deltaSeconds; } public function getFieldName() { return 'Retry-After'; } public function getFieldValue() { return ($this-&gt;date === null) ? $this-&gt;deltaSeconds : $this-&gt;getDate(); } public function toString() { return 'Retry-After: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class ContentType implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-type') { throw new Exception\InvalidArgumentException('Invalid header line for Content-Type string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-Type'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-Type: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; use Zend\Http\Header\Accept\FieldValuePart; class AcceptEncoding extends AbstractAccept { protected $regexAddType = '#^([a-zA-Z0-9+-]+|\*)$#'; public function getFieldName() { return 'Accept-Encoding'; } public function toString() { return 'Accept-Encoding: ' . $this-&gt;getFieldValue(); } public function addEncoding($type, $priority = 1) { return $this-&gt;addType($type, $priority); } public function hasEncoding($type) { return $this-&gt;hasType($type); } protected function parseFieldValuePart($fieldValuePart) { $internalValues = parent::parseFieldValuePart($fieldValuePart); return new FieldValuePart\EncodingFieldValuePart($internalValues); } } &lt;?php
 namespace Zend\Http\Header; class ContentLength implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-length') { throw new Exception\InvalidArgumentException('Invalid header line for Content-Length string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-Length'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-Length: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class WWWAuthenticate implements MultipleHeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'www-authenticate') { throw new Exception\InvalidArgumentException('Invalid header line for WWW-Authenticate string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'WWW-Authenticate'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'WWW-Authenticate: ' . $this-&gt;getFieldValue(); } public function toStringMultipleHeaders(array $headers) { $strings = array($this-&gt;toString()); foreach ($headers as $header) { if (!$header instanceof WWWAuthenticate) { throw new Exception\RuntimeException( 'The WWWAuthenticate multiple header implementation can only accept an array of WWWAuthenticate headers' ); } $strings[] = $header-&gt;toString(); } return implode("\r\n", $strings); } } &lt;?php
 namespace Zend\Http\Header; class IfModifiedSince extends AbstractDate { public function getFieldName() { return 'If-Modified-Since'; } } &lt;?php
 namespace Zend\Http\Header; class ContentTransferEncoding implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-transfer-encoding') { throw new Exception\InvalidArgumentException('Invalid header line for Content-Transfer-Encoding string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-Transfer-Encoding'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-Transfer-Encoding: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Date extends AbstractDate { public function getFieldName() { return 'Date'; } } &lt;?php
 namespace Zend\Http\Header; use Zend\Http\Request; class Allow implements HeaderInterface { protected $methods = array( Request::METHOD_OPTIONS =&gt; false, Request::METHOD_GET =&gt; true, Request::METHOD_HEAD =&gt; false, Request::METHOD_POST =&gt; true, Request::METHOD_PUT =&gt; false, Request::METHOD_DELETE =&gt; false, Request::METHOD_TRACE =&gt; false, Request::METHOD_CONNECT =&gt; false, Request::METHOD_PATCH =&gt; false, ); public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'allow') { throw new Exception\InvalidArgumentException('Invalid header line for Allow string: "' . $name . '"'); } $header-&gt;methods = array_fill_keys(array_keys($header-&gt;methods), false); foreach (explode(',', $value) as $method) { $method = trim(strtoupper($method)); $header-&gt;methods[$method] = true; } return $header; } public function getFieldName() { return 'Allow'; } public function getFieldValue() { return implode(', ', array_keys($this-&gt;methods, true, true)); } public function getAllMethods() { return $this-&gt;methods; } public function getAllowedMethods() { return array_keys($this-&gt;methods, true, true); } public function allowMethods($allowedMethods) { foreach ((array) $allowedMethods as $method) { $method = trim(strtoupper($method)); $this-&gt;methods[$method] = true; } return $this; } public function disallowMethods($disallowedMethods) { foreach ((array) $disallowedMethods as $method) { $method = trim(strtoupper($method)); $this-&gt;methods[$method] = false; } return $this; } public function denyMethods($disallowedMethods) { return $this-&gt;disallowMethods($disallowedMethods); } public function isAllowedMethod($method) { $method = trim(strtoupper($method)); if (! isset($this-&gt;methods[$method])) { $this-&gt;methods[$method] = false; } return $this-&gt;methods[$method]; } public function toString() { return 'Allow: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Authorization implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'authorization') { throw new Exception\InvalidArgumentException('Invalid header line for Authorization string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Authorization'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Authorization: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class KeepAlive implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'keep-alive') { throw new Exception\InvalidArgumentException('Invalid header line for Keep-Alive string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Keep-Alive'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Keep-Alive: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; use Closure; use Zend\Uri\UriFactory; class SetCookie implements MultipleHeaderInterface { protected $name = null; protected $value = null; protected $version = null; protected $maxAge = null; protected $expires = null; protected $domain = null; protected $path = null; protected $secure = null; protected $httponly = null; public static function fromString($headerLine, $bypassHeaderFieldName = false) { static $setCookieProcessor = null; if ($setCookieProcessor === null) { $setCookieClass = get_called_class(); $setCookieProcessor = function ($headerLine) use ($setCookieClass) { $header = new $setCookieClass; $keyValuePairs = preg_split('#;\s*#', $headerLine); foreach ($keyValuePairs as $keyValue) { if (strpos($keyValue, '=')) { list($headerKey, $headerValue) = preg_split('#=\s*#', $keyValue, 2); } else { $headerKey = $keyValue; $headerValue = null; } if ($header-&gt;getName() === NULL) { $header-&gt;setName($headerKey); $header-&gt;setValue(urldecode($headerValue)); continue; } switch (str_replace(array('-', '_'), '', strtolower($headerKey))) { case 'expires' : $header-&gt;setExpires($headerValue); break; case 'domain' : $header-&gt;setDomain($headerValue); break; case 'path' : $header-&gt;setPath($headerValue); break; case 'secure' : $header-&gt;setSecure(true); break; case 'httponly': $header-&gt;setHttponly(true); break; case 'version' : $header-&gt;setVersion((int) $headerValue); break; case 'maxage' : $header-&gt;setMaxAge((int) $headerValue); break; default: } } return $header; }; } list($name, $value) = explode(':', $headerLine, 2); $value = ltrim($value); $name = (strtolower($name) =='set-cookie:') ? 'set-cookie' : $name; if (strtolower($name) !== 'set-cookie') { throw new Exception\InvalidArgumentException('Invalid header line for Set-Cookie string: "' . $name . '"'); } $multipleHeaders = preg_split('#(?&lt;!Sun|Mon|Tue|Wed|Thu|Fri|Sat),\s*#', $value); if (count($multipleHeaders) &lt;= 1) { return $setCookieProcessor(array_pop($multipleHeaders)); } else { $headers = array(); foreach ($multipleHeaders as $headerLine) { $headers[] = $setCookieProcessor($headerLine); } return $headers; } } public function __construct($name = null, $value = null, $expires = null, $path = null, $domain = null, $secure = false, $httponly = false, $maxAge = null, $version = null) { $this-&gt;type = 'Cookie'; if ($name) { $this-&gt;setName($name); } if ($value) { $this-&gt;setValue($value); } if ($version!==null) { $this-&gt;setVersion($version); } if ($maxAge!==null) { $this-&gt;setMaxAge($maxAge); } if ($domain) { $this-&gt;setDomain($domain); } if ($expires) { $this-&gt;setExpires($expires); } if ($path) { $this-&gt;setPath($path); } if ($secure) { $this-&gt;setSecure($secure); } if ($httponly) { $this-&gt;setHttpOnly($httponly); } } public function getFieldName() { return 'Set-Cookie'; } public function getFieldValue() { if ($this-&gt;getName() == '') { return ''; } $value = $this-&gt;getValue(); if (strpos($value, '"')!==false) { $value = '"'.urlencode(str_replace('"', '', $value)).'"'; } else { $value = urlencode($value); } $fieldValue = $this-&gt;getName() . '=' . $value; $version = $this-&gt;getVersion(); if ($version!==null) { $fieldValue .= '; Version=' . $version; } $maxAge = $this-&gt;getMaxAge(); if ($maxAge!==null) { $fieldValue .= '; Max-Age=' . $maxAge; } $expires = $this-&gt;getExpires(); if ($expires) { $fieldValue .= '; Expires=' . $expires; } $domain = $this-&gt;getDomain(); if ($domain) { $fieldValue .= '; Domain=' . $domain; } $path = $this-&gt;getPath(); if ($path) { $fieldValue .= '; Path=' . $path; } if ($this-&gt;isSecure()) { $fieldValue .= '; Secure'; } if ($this-&gt;isHttponly()) { $fieldValue .= '; HttpOnly'; } return $fieldValue; } public function setName($name) { if (preg_match("/[=,; \t\r\n\013\014]/", $name)) { throw new Exception\InvalidArgumentException("Cookie name cannot contain these characters: =,; \\t\\r\\n\\013\\014 ({$name})"); } $this-&gt;name = $name; return $this; } public function getName() { return $this-&gt;name; } public function setValue($value) { $this-&gt;value = $value; } public function getValue() { return $this-&gt;value; } public function setVersion($version) { if (!is_int($version)) { throw new Exception\InvalidArgumentException('Invalid Version number specified'); } $this-&gt;version = $version; } public function getVersion() { return $this-&gt;version; } public function setMaxAge($maxAge) { if (!is_int($maxAge) || ($maxAge&lt;0)) { throw new Exception\InvalidArgumentException('Invalid Max-Age number specified'); } $this-&gt;maxAge = $maxAge; } public function getMaxAge() { return $this-&gt;maxAge; } public function setExpires($expires) { if (!empty($expires)) { if (is_string($expires)) { $expires = strtotime($expires); } elseif (!is_int($expires)) { throw new Exception\InvalidArgumentException('Invalid expires time specified'); } $this-&gt;expires = (int) $expires; } return $this; } public function getExpires($inSeconds = false) { if ($this-&gt;expires == null) { return; } if ($inSeconds) { return $this-&gt;expires; } return gmdate('D, d-M-Y H:i:s', $this-&gt;expires) . ' GMT'; } public function setDomain($domain) { $this-&gt;domain = $domain; } public function getDomain() { return $this-&gt;domain; } public function setPath($path) { $this-&gt;path = $path; } public function getPath() { return $this-&gt;path; } public function setSecure($secure) { $this-&gt;secure = $secure; } public function isSecure() { return $this-&gt;secure; } public function setHttponly($httponly) { $this-&gt;httponly = $httponly; } public function isHttponly() { return $this-&gt;httponly; } public function isExpired($now = null) { if ($now === null) { $now = time(); } if (is_int($this-&gt;expires) &amp;&amp; $this-&gt;expires &lt; $now) { return true; } return false; } public function isSessionCookie() { return ($this-&gt;expires === null); } public function isValidForRequest($requestDomain, $path, $isSecure = false) { if ($this-&gt;getDomain() &amp;&amp; (strrpos($requestDomain, $this-&gt;getDomain()) === false)) { return false; } if ($this-&gt;getPath() &amp;&amp; (strpos($path, $this-&gt;getPath()) !== 0)) { return false; } if ($this-&gt;secure &amp;&amp; $this-&gt;isSecure()!==$isSecure) { return false; } return true; } public function match($uri, $matchSessionCookies = true, $now = null) { if (is_string ($uri)) { $uri = UriFactory::factory($uri); } if (! ($uri-&gt;isValid() &amp;&amp; ($uri-&gt;getScheme() == 'http' || $uri-&gt;getScheme() =='https'))) { throw new Exception\InvalidArgumentException('Passed URI is not a valid HTTP or HTTPS URI'); } if ($this-&gt;secure &amp;&amp; $uri-&gt;getScheme() != 'https') return false; if ($this-&gt;isExpired($now)) return false; if ($this-&gt;isSessionCookie() &amp;&amp; ! $matchSessionCookies) return false; if (! self::matchCookieDomain($this-&gt;getDomain(), $uri-&gt;getHost())) { return false; } if (! self::matchCookiePath($this-&gt;getPath(), $uri-&gt;getPath())) { return false; } return true; } public static function matchCookieDomain($cookieDomain, $host) { if (! $cookieDomain) { throw new Exception\InvalidArgumentException('$cookieDomain is expected to be a cookie domain'); } if (! $host) { throw new Exception\InvalidArgumentException('$host is expected to be a host name'); } $cookieDomain = strtolower($cookieDomain); $host = strtolower($host); return ($cookieDomain == $host || preg_match('/' . preg_quote($cookieDomain) . '$/', $host)); } public static function matchCookiePath($cookiePath, $path) { if (! $cookiePath) { throw new Exception\InvalidArgumentException('$cookiePath is expected to be a cookie path'); } if (! $path) { throw new Exception\InvalidArgumentException('$path is expected to be a host name'); } return (strpos($path, $cookiePath) === 0); } public function toString() { return 'Set-Cookie: ' . $this-&gt;getFieldValue(); } public function toStringMultipleHeaders(array $headers) { $headerLine = $this-&gt;toString(); foreach ($headers as $header) { if (!$header instanceof SetCookie) { throw new Exception\RuntimeException( 'The SetCookie multiple header implementation can only accept an array of SetCookie headers' ); } $headerLine .= ', ' . $header-&gt;getFieldValue(); } return $headerLine; } } &lt;?php
 namespace Zend\Http\Header; class ContentLanguage implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-language') { throw new Exception\InvalidArgumentException('Invalid header line for Content-Language string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-Language'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-Language: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class UserAgent implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (str_replace(array('_', ' ', '.'), '-', strtolower($name)) !== 'user-agent') { throw new Exception\InvalidArgumentException('Invalid header line for User-Agent string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'User-Agent'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'User-Agent: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class AuthenticationInfo implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'authentication-info') { throw new Exception\InvalidArgumentException('Invalid header line for Authentication-Info string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Authentication-Info'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Authentication-Info: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class LastModified extends AbstractDate { public function getFieldName() { return 'Last-Modified'; } } &lt;?php
 namespace Zend\Http\Header; use stdClass; abstract class AbstractAccept implements HeaderInterface { protected $fieldValueParts = array(); protected $regexAddType; protected $sorted = false; public function parseHeaderLine($headerLine) { $fieldName = $this-&gt;getFieldName(); $pos = strlen($fieldName) + 2; if (strtolower(substr($headerLine, 0, $pos)) == strtolower($fieldName) . ': ') { $headerLine = substr($headerLine, $pos); } foreach ($this-&gt;getFieldValuePartsFromHeaderLine($headerLine) as $value) { $this-&gt;addFieldValuePartToQueue($value); } } public static function fromString($headerLine) { $obj = new static(); $obj-&gt;parseHeaderLine($headerLine); return $obj; } public function getFieldValuePartsFromHeaderLine($headerLine) { if (!preg_match_all('/(?:[^,"]|"(?:[^\\\"]|\\\.)*")+/', $headerLine, $values) || !isset($values[0]) ) { throw new Exception\InvalidArgumentException( 'Invalid header line for ' . $this-&gt;getFieldName() . ' header string' ); } $out = array(); foreach ($values[0] as $value) { $value = trim($value); $out[] = $this-&gt;parseFieldValuePart($value); } return $out; } protected function parseFieldValuePart($fieldValuePart) { $raw = $subtypeWhole = $type = $fieldValuePart; if ($pos = strpos($fieldValuePart, ';')) { $type = substr($fieldValuePart, 0, $pos); } $params = $this-&gt;getParametersFromFieldValuePart($fieldValuePart); if ($pos = strpos($fieldValuePart, ';')) { $fieldValuePart = trim(substr($fieldValuePart, 0, $pos)); } $format = '*'; $subtype = '*'; return (object) array( 'typeString' =&gt; trim($fieldValuePart), 'type' =&gt; $type, 'subtype' =&gt; $subtype, 'subtypeRaw' =&gt; $subtypeWhole, 'format' =&gt; $format, 'priority' =&gt; isset($params['q']) ? $params['q'] : 1, 'params' =&gt; $params, 'raw' =&gt; trim($raw) ); } protected function getParametersFromFieldValuePart($fieldValuePart) { $params = array(); if ((($pos = strpos($fieldValuePart, ';')) !== false)) { preg_match_all('/(?:[^;"]|"(?:[^\\\"]|\\\.)*")+/', $fieldValuePart, $paramsStrings); if (isset($paramsStrings[0])) { array_shift($paramsStrings[0]); $paramsStrings = $paramsStrings[0]; } foreach ($paramsStrings as $param) { $explode = explode('=', $param, 2); $value = trim($explode[1]); if (isset($value[0]) &amp;&amp; $value[0] == '"' &amp;&amp; substr($value, -1) == '"') { $value = substr(substr($value, 1), 0, -1); } $params[trim($explode[0])] = stripslashes($value); } } return $params; } public function getFieldValue($values = null) { if (!$values) { return $this-&gt;getFieldValue($this-&gt;fieldValueParts); } $strings = array(); foreach ($values as $value) { $params = $value-&gt;params; array_walk($params, array($this, 'assembleAcceptParam')); $strings[] = implode(';', array($value-&gt;typeString) + $params); } return implode(', ', $strings); } protected function assembleAcceptParam(&amp;$value, $key) { $separators = array('(', ')', '&lt;', '&gt;', '@', ',', ';', ':', '/', '[', ']', '?', '=', '{', '}', ' ', "\t"); $escaped = preg_replace_callback('/[[:cntrl:]"\\\\]/', function ($v) { return '\\' . $v[0]; }, $value ); if ($escaped == $value &amp;&amp; !array_intersect(str_split($value), $separators)) { $value = $key . '=' . $value; } else { $value = $key . '="' . $escaped . '"'; } return $value; } protected function addType($type, $priority = 1, array $params = array()) { if (!preg_match($this-&gt;regexAddType, $type)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a valid type; received "%s"', __METHOD__, (string) $type )); } if (!is_int($priority) &amp;&amp; !is_float($priority) &amp;&amp; !is_numeric($priority) || $priority &gt; 1 || $priority &lt; 0 ) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a numeric priority; received %s', __METHOD__, (string) $priority )); } if ($priority != 1) { $params = array('q' =&gt; sprintf('%01.1f', $priority)) + $params; } $assembledString = $this-&gt;getFieldValue( array((object) array('typeString' =&gt; $type, 'params' =&gt; $params)) ); $value = $this-&gt;parseFieldValuePart($assembledString); $this-&gt;addFieldValuePartToQueue($value); return $this; } protected function hasType($matchAgainst) { return (bool) $this-&gt;match($matchAgainst); } public function match($matchAgainst) { if (is_string($matchAgainst)) { $matchAgainst = $this-&gt;getFieldValuePartsFromHeaderLine($matchAgainst); } foreach ($this-&gt;getPrioritized() as $left) { foreach ($matchAgainst as $right) { if ($right-&gt;type == '*' || $left-&gt;type == '*') { if ($this-&gt;matchAcceptParams($left, $right)) { $left-&gt;setMatchedAgainst($right); return $left; } } if ($left-&gt;type == $right-&gt;type) { if ((($left-&gt;subtype == $right-&gt;subtype || ($right-&gt;subtype == '*' || $left-&gt;subtype == '*')) &amp;&amp; ($left-&gt;format == $right-&gt;format || $right-&gt;format == '*' || $left-&gt;format == '*'))) { if ($this-&gt;matchAcceptParams($left, $right)) { $left-&gt;setMatchedAgainst($right); return $left; } } } } } return false; } protected function matchAcceptParams($match1, $match2) { foreach ($match2-&gt;params as $key =&gt; $value) { if (isset($match1-&gt;params[$key])) { if (strpos($value, '-')) { preg_match( '/^(?|([^"-]*)|"([^"]*)")-(?|([^"-]*)|"([^"]*)")\z/', $value, $pieces ); if (count($pieces) == 3 &amp;&amp; (version_compare($pieces[1], $match1-&gt;params[$key], '&lt;=') xor version_compare($pieces[2], $match1-&gt;params[$key], '&gt;=') ) ) { return false; } } elseif (strpos($value, '|')) { $options = explode('|', $value); $good = false; foreach ($options as $option) { if ($option == $match1-&gt;params[$key]) { $good = true; break; } } if (!$good) { return false; } } elseif ($match1-&gt;params[$key] != $value) { return false; } } } return $match1; } protected function addFieldValuePartToQueue($value) { $this-&gt;fieldValueParts[] = $value; $this-&gt;sorted = false; } protected function sortFieldValueParts() { $sort = function ($a, $b) { if ($a-&gt;priority &gt; $b-&gt;priority) { return -1; } elseif ($a-&gt;priority &lt; $b-&gt;priority) { return 1; } $values = array('type', 'subtype','format'); foreach ($values as $value) { if ($a-&gt;$value == '*' &amp;&amp; $b-&gt;$value != '*') { return 1; } elseif ($b-&gt;$value == '*' &amp;&amp; $a-&gt;$value != '*') { return -1; } } if ($a-&gt;type == 'application' &amp;&amp; $b-&gt;type != 'application') { return -1; } elseif ($b-&gt;type == 'application' &amp;&amp; $a-&gt;type != 'application') { return 1; } if (strlen($a-&gt;raw) == strlen($b-&gt;raw)) return 0; return (strlen($a-&gt;raw) &gt; strlen($b-&gt;raw)) ? -1 : 1; }; usort($this-&gt;fieldValueParts, $sort); $this-&gt;sorted = true; } public function getPrioritized() { if (!$this-&gt;sorted) { $this-&gt;sortFieldValueParts(); } return $this-&gt;fieldValueParts; } } &lt;?php
 namespace Zend\Http\Header; use DateTime; use DateTimeZone; abstract class AbstractDate implements HeaderInterface { const DATE_RFC1123 = 0; const DATE_RFC1036 = 1; const DATE_ANSIC = 2; protected $date = null; protected static $dateFormat = 'D, d M Y H:i:s \G\M\T'; protected static $dateFormats = array( self::DATE_RFC1123 =&gt; 'D, d M Y H:i:s \G\M\T', self::DATE_RFC1036 =&gt; 'D, d M y H:i:s \G\M\T', self::DATE_ANSIC =&gt; 'D M j H:i:s Y', ); public static function fromString($headerLine) { $dateHeader = new static(); list($name, $date) = explode(': ', $headerLine, 2); if (strtolower($name) !== strtolower($dateHeader-&gt;getFieldName())) { throw new Exception\InvalidArgumentException( 'Invalid header line for "' . $dateHeader-&gt;getFieldName() . '" header string' ); } $dateHeader-&gt;setDate($date); return $dateHeader; } public static function setDateFormat($format) { if (!isset(static::$dateFormats[$format])) { throw new Exception\InvalidArgumentException( "No constant defined for provided date format: {$format}" ); } static::$dateFormat = static::$dateFormats[$format]; } public static function getDateFormat() { return static::$dateFormat; } public function setDate($date) { if (is_string($date)) { try { $date = new DateTime($date, new DateTimeZone('GMT')); } catch (\Exception $e) { throw new Exception\InvalidArgumentException( sprintf('Invalid date passed as string (%s)', (string) $date), $e-&gt;getCode(), $e ); } } elseif (!($date instanceof DateTime)) { throw new Exception\InvalidArgumentException('Date must be an instance of \DateTime or a string'); } $date-&gt;setTimezone(new DateTimeZone('GMT')); $this-&gt;date = $date; return $this; } public function getDate() { return $this-&gt;date()-&gt;format(static::$dateFormat); } public function date() { if ($this-&gt;date === null) { $this-&gt;date = new DateTime(null, new DateTimeZone('GMT')); } return $this-&gt;date; } public function compareTo($date) { if (is_string($date)) { try { $date = new DateTime($date, new DateTimeZone('GMT')); } catch (\Exception $e) { throw new Exception\InvalidArgumentException( sprintf('Invalid Date passed as string (%s)', (string) $date), $e-&gt;getCode(), $e ); } } elseif (!($date instanceof DateTime)) { throw new Exception\InvalidArgumentException('Date must be an instance of \DateTime or a string'); } $dateTimestamp = $date-&gt;getTimestamp(); $thisTimestamp = $this-&gt;date()-&gt;getTimestamp(); return ($thisTimestamp === $dateTimestamp) ? 0 : (($thisTimestamp &gt; $dateTimestamp) ? 1 : -1); } public function getFieldValue() { return $this-&gt;getDate(); } public function toString() { return $this-&gt;getFieldName() . ': ' . $this-&gt;getDate(); } public function __toString() { return $this-&gt;toString(); } } &lt;?php
 namespace Zend\Http\Header; class Location extends AbstractLocation { public function getFieldName() { return 'Location'; } } &lt;?php
 namespace Zend\Http\Header; class IfMatch implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'if-match') { throw new Exception\InvalidArgumentException('Invalid header line for If-Match string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'If-Match'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'If-Match: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; use Zend\Http\Header\Accept\FieldValuePart; class Accept extends AbstractAccept { protected $regexAddType = '#^([a-zA-Z+-]+|\*)/(\*|[a-zA-Z0-9+-]+)$#'; public function getFieldName() { return 'Accept'; } public function toString() { return 'Accept: ' . $this-&gt;getFieldValue(); } public function addMediaType($type, $priority = 1, array $params = array()) { return $this-&gt;addType($type, $priority, $params); } public function hasMediaType($type) { return $this-&gt;hasType($type); } protected function parseFieldValuePart($fieldValuePart) { $raw = $fieldValuePart; if ($pos = strpos($fieldValuePart, '/')) { $type = trim(substr($fieldValuePart, 0, $pos)); } else { $type = trim(substr($fieldValuePart, 0)); } $params = $this-&gt;getParametersFromFieldValuePart($fieldValuePart); if ($pos = strpos($fieldValuePart, ';')) { $fieldValuePart = trim(substr($fieldValuePart, 0, $pos)); } if ($pos = strpos($fieldValuePart, '/')) { $subtypeWhole = $format = $subtype = trim(substr($fieldValuePart, strpos($fieldValuePart, '/')+1)); } else { $subtypeWhole = ''; $format = '*'; $subtype = '*'; } $pos = strpos($subtype, '+'); if (false !== $pos) { $format = trim(substr($subtype, $pos+1)); $subtype = trim(substr($subtype, 0, $pos)); } $aggregated = array( 'typeString' =&gt; trim($fieldValuePart), 'type' =&gt; $type, 'subtype' =&gt; $subtype, 'subtypeRaw' =&gt; $subtypeWhole, 'format' =&gt; $format, 'priority' =&gt; isset($params['q']) ? $params['q'] : 1, 'params' =&gt; $params, 'raw' =&gt; trim($raw) ); return new FieldValuePart\AcceptFieldValuePart((object) $aggregated); } } &lt;?php
 namespace Zend\Http\Header; class Range implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'range') { throw new Exception\InvalidArgumentException('Invalid header line for Range string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Range'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Range: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class ContentLocation extends AbstractLocation { public function getFieldName() { return 'Content-Location'; } } &lt;?php
 namespace Zend\Http\Header; class Expect implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'expect') { throw new Exception\InvalidArgumentException('Invalid header line for Expect string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Expect'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Expect: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class ProxyAuthorization implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'proxy-authorization') { throw new Exception\InvalidArgumentException('Invalid header line for Proxy-Authorization string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Proxy-Authorization'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Proxy-Authorization: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class IfRange implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'if-range') { throw new Exception\InvalidArgumentException('Invalid header line for If-Range string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'If-Range'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'If-Range: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Connection implements HeaderInterface { const CONNECTION_CLOSE = 'close'; const CONNECTION_KEEP_ALIVE = 'keep-alive'; protected $value = self::CONNECTION_KEEP_ALIVE; public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'connection') { throw new Exception\InvalidArgumentException('Invalid header line for Connection string: "' . $name . '"'); } $header-&gt;setValue(trim($value)); return $header; } public function setPersistent($flag) { if ((bool) $flag === true) { $this-&gt;value = self::CONNECTION_KEEP_ALIVE; } else { $this-&gt;value = self::CONNECTION_CLOSE; } return $this; } public function isPersistent() { return ($this-&gt;value === self::CONNECTION_KEEP_ALIVE); } public function setValue($value) { $this-&gt;value = strtolower($value); return $this; } public function getFieldName() { return 'Connection'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Connection: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class ContentDisposition implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-disposition') { throw new Exception\InvalidArgumentException('Invalid header line for Content-Disposition string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-Disposition'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-Disposition: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Via implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'via') { throw new Exception\InvalidArgumentException('Invalid header line for Via string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Via'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Via: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Refresh implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'refresh') { throw new Exception\InvalidArgumentException('Invalid header line for Refresh string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Refresh'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Refresh: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class From implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'from') { throw new Exception\InvalidArgumentException('Invalid header line for From string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'From'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'From: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Server implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'server') { throw new Exception\InvalidArgumentException('Invalid header line for Server string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Server'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Server: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class IfNoneMatch implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'if-none-match') { throw new Exception\InvalidArgumentException('Invalid header line for If-None-Match string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'If-None-Match'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'If-None-Match: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class ProxyAuthenticate implements MultipleHeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'proxy-authenticate') { throw new Exception\InvalidArgumentException('Invalid header line for Proxy-Authenticate string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Proxy-Authenticate'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Proxy-Authenticate: ' . $this-&gt;getFieldValue(); } public function toStringMultipleHeaders(array $headers) { $strings = array($this-&gt;toString()); foreach ($headers as $header) { if (!$header instanceof ProxyAuthenticate) { throw new Exception\RuntimeException( 'The ProxyAuthenticate multiple header implementation can only accept an array of ProxyAuthenticate headers' ); } $strings[] = $header-&gt;toString(); } return implode("\r\n", $strings); } } &lt;?php
 namespace Zend\Http\Header; interface MultipleHeaderInterface extends HeaderInterface { public function toStringMultipleHeaders(array $headers); } &lt;?php
 namespace Zend\Http\Header; class Pragma implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'pragma') { throw new Exception\InvalidArgumentException('Invalid header line for Pragma string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Pragma'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Pragma: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class GenericMultiHeader extends GenericHeader implements MultipleHeaderInterface { public static function fromString($headerLine) { list($fieldName, $fieldValue) = explode(': ', $headerLine, 2); if (strpos($fieldValue, ',')) { $headers = array(); foreach (explode(',', $fieldValue) as $multiValue) { $headers[] = new static($fieldName, $multiValue); } return $headers; } else { $header = new static($fieldName, $fieldValue); return $header; } } public function toStringMultipleHeaders(array $headers) { $name = $this-&gt;getFieldName(); $values = array($this-&gt;getFieldValue()); foreach ($headers as $header) { if (!$header instanceof static) { throw new Exception\InvalidArgumentException('This method toStringMultipleHeaders was expecting an array of headers of the same type'); } $values[] = $header-&gt;getFieldValue(); } return $name . ': ' . implode(',', $values) . "\r\n"; } } &lt;?php
 namespace Zend\Http\Header; class Expires extends AbstractDate { public function getFieldName() { return 'Expires'; } } &lt;?php
 namespace Zend\Http\Header; class TE implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'te') { throw new Exception\InvalidArgumentException('Invalid header line for TE string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'TE'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'TE: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; use Zend\Http\Header\Accept\FieldValuePart; class AcceptLanguage extends AbstractAccept { protected $regexAddType = '#^([a-zA-Z0-9+-]+|\*)$#'; public function getFieldName() { return 'Accept-Language'; } public function toString() { return 'Accept-Language: ' . $this-&gt;getFieldValue(); } public function addLanguage($type, $priority = 1) { return $this-&gt;addType($type, $priority); } public function hasLanguage($type) { return $this-&gt;hasType($type); } protected function parseFieldValuePart($fieldValuePart) { $raw = $fieldValuePart; if ($pos = strpos($fieldValuePart, '-')) { $type = trim(substr($fieldValuePart, 0, $pos)); } else { $type = trim(substr($fieldValuePart, 0)); } $params = $this-&gt;getParametersFromFieldValuePart($fieldValuePart); if ($pos = strpos($fieldValuePart, ';')) { $fieldValuePart = $type = trim(substr($fieldValuePart, 0, $pos)); } if ($pos = strpos($fieldValuePart, '-')) { $subtypeWhole = $format = $subtype = trim(substr($fieldValuePart, strpos($fieldValuePart, '-')+1)); } else { $subtypeWhole = ''; $format = '*'; $subtype = '*'; } $aggregated = array( 'typeString' =&gt; trim($fieldValuePart), 'type' =&gt; $type, 'subtype' =&gt; $subtype, 'subtypeRaw' =&gt; $subtypeWhole, 'format' =&gt; $format, 'priority' =&gt; isset($params['q']) ? $params['q'] : 1, 'params' =&gt; $params, 'raw' =&gt; trim($raw) ); return new FieldValuePart\LanguageFieldValuePart((object) $aggregated); } } &lt;?php
 namespace Zend\Http\Header; class IfUnmodifiedSince extends AbstractDate { public function getFieldName() { return 'If-Unmodified-Since'; } } &lt;?php
 namespace Zend\Http\Header; class MaxForwards implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'max-forwards') { throw new Exception\InvalidArgumentException('Invalid header line for Max-Forwards string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Max-Forwards'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Max-Forwards: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Etag implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'etag') { throw new Exception\InvalidArgumentException('Invalid header line for Etag string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Etag'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Etag: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; use Zend\Http\Header\Accept\FieldValuePart; class AcceptCharset extends AbstractAccept { protected $regexAddType = '#^([a-zA-Z0-9+-]+|\*)$#'; public function getFieldName() { return 'Accept-Charset'; } public function toString() { return 'Accept-Charset: ' . $this-&gt;getFieldValue(); } public function addCharset($type, $priority = 1) { return $this-&gt;addType($type, $priority); } public function hasCharset($type) { return $this-&gt;hasType($type); } protected function parseFieldValuePart($fieldValuePart) { $internalValues = parent::parseFieldValuePart($fieldValuePart); return new FieldValuePart\CharsetFieldValuePart($internalValues); } } &lt;?php
 namespace Zend\Http\Header; class Vary implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'vary') { throw new Exception\InvalidArgumentException('Invalid header line for Vary string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Vary'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Vary: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; interface HeaderInterface { public static function fromString($headerLine); public function getFieldName(); public function getFieldValue(); public function toString(); } &lt;?php
 namespace Zend\Http\Header; class GenericHeader implements HeaderInterface { protected $fieldName = null; protected $fieldValue = null; public static function fromString($headerLine) { list($fieldName, $fieldValue) = explode(': ', $headerLine, 2); $header = new static($fieldName, $fieldValue); return $header; } public function __construct($fieldName = null, $fieldValue = null) { if ($fieldName) { $this-&gt;setFieldName($fieldName); } if ($fieldValue) { $this-&gt;setFieldValue($fieldValue); } } public function setFieldName($fieldName) { if (!is_string($fieldName) || empty($fieldName)) { throw new Exception\InvalidArgumentException('Header name must be a string'); } $fieldName = str_replace(' ', '-', ucwords(str_replace(array('_', '-'), ' ', $fieldName))); if (!preg_match('/^[a-z][a-z0-9-]*$/i', $fieldName)) { throw new Exception\InvalidArgumentException( 'Header name must start with a letter, and consist of only letters, numbers, and dashes' ); } $this-&gt;fieldName = $fieldName; return $this; } public function getFieldName() { return $this-&gt;fieldName; } public function setFieldValue($fieldValue) { $fieldValue = (string) $fieldValue; if (empty($fieldValue) || preg_match('/^\s+$/', $fieldValue)) { $fieldValue = ''; } $this-&gt;fieldValue = $fieldValue; return $this; } public function getFieldValue() { return $this-&gt;fieldValue; } public function toString() { return $this-&gt;getFieldName() . ': ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Http\Header; class Age implements HeaderInterface { protected $deltaSeconds = null; public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'age') { throw new Exception\InvalidArgumentException('Invalid header line for Age string: "' . $name . '"'); } $header-&gt;deltaSeconds = (int) $value; return $header; } public function getFieldName() { return 'Age'; } public function getFieldValue() { return $this-&gt;getDeltaSeconds(); } public function setDeltaSeconds($delta) { $this-&gt;deltaSeconds = (int) $delta; return $this; } public function getDeltaSeconds() { return $this-&gt;deltaSeconds; } public function toString() { return 'Age: ' . (($this-&gt;deltaSeconds &gt;= PHP_INT_MAX) ? '2147483648' : $this-&gt;deltaSeconds); } } &lt;?php
 namespace Zend\Http\Header; class ContentRange implements HeaderInterface { public static function fromString($headerLine) { $header = new static(); list($name, $value) = explode(': ', $headerLine, 2); if (strtolower($name) !== 'content-range') { throw new Exception\InvalidArgumentException('Invalid header line for Content-Range string: "' . $name . '"'); } $header-&gt;value = $value; return $header; } public function getFieldName() { return 'Content-Range'; } public function getFieldValue() { return $this-&gt;value; } public function toString() { return 'Content-Range: ' . $this-&gt;getFieldValue(); } } &lt;?php
 namespace Zend\Code; class NameInformation { protected $namespace = null; protected $uses = array(); public function __construct($namespace = null, array $uses = array()) { if ($namespace) { $this-&gt;setNamespace($namespace); } if ($uses) { $this-&gt;setUses($uses); } } public function setNamespace($namespace) { $this-&gt;namespace = (string) $namespace; return $this; } public function getNamespace() { return $this-&gt;namespace; } public function hasNamespace() { return ($this-&gt;namespace != null); } public function setUses(array $uses) { $this-&gt;uses = array(); $this-&gt;addUses($uses); return $this; } public function addUses(array $uses) { foreach ($uses as $use =&gt; $as) { if (is_int($use)) { $this-&gt;addUse($as); } elseif (is_string($use)) { $this-&gt;addUse($use, $as); } } return $this; } public function addUse($use, $as = null) { if (is_array($use) &amp;&amp; array_key_exists('use', $use) &amp;&amp; array_key_exists('as', $use)) { $uses = $use; $use = $uses['use']; $as = $uses['as']; } $use = trim($use, '\\'); if ($as === null) { $as = trim($use, '\\'); $nsSeparatorPosition = strrpos($as, '\\'); if ($nsSeparatorPosition !== false &amp;&amp; $nsSeparatorPosition !== 0 &amp;&amp; $nsSeparatorPosition != strlen($as)) { $as = substr($as, $nsSeparatorPosition + 1); } } $this-&gt;uses[$use] = $as; } public function getUses() { return $this-&gt;uses; } public function resolveName($name) { if ($this-&gt;namespace &amp;&amp; !$this-&gt;uses &amp;&amp; strlen($name) &gt; 0 &amp;&amp; $name{0} != '\\') { return $this-&gt;namespace . '\\' . $name; } if (!$this-&gt;uses || strlen($name) &lt;= 0 || $name{0} == '\\') { return ltrim($name, '\\'); } if ($this-&gt;namespace || $this-&gt;uses) { $firstPart = $name; if (($firstPartEnd = strpos($firstPart, '\\')) !== false) { $firstPart = substr($firstPart, 0, $firstPartEnd); } else { $firstPartEnd = strlen($firstPart); } if (($fqns = array_search($firstPart, $this-&gt;uses)) !== false) { return substr_replace($name, $fqns, 0, $firstPartEnd); } if ($this-&gt;namespace) { return $this-&gt;namespace . '\\' . $name; } } return $name; } } &lt;?php
 namespace Zend\Code\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Code\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Annotation; interface AnnotationInterface { public function initialize($content); } &lt;?php
 namespace Zend\Code\Annotation\Parser; use Zend\EventManager\EventInterface; interface ParserInterface { public function onCreateAnnotation(EventInterface $e); public function registerAnnotation($annotation); public function registerAnnotations($annotations); } &lt;?php
 namespace Zend\Code\Annotation\Parser; use Traversable; use Zend\Code\Annotation\AnnotationInterface; use Zend\Code\Exception; use Zend\EventManager\EventInterface; class GenericAnnotationParser implements ParserInterface { protected $aliases = array(); protected $annotationNames = array(); protected $annotations = array(); public function onCreateAnnotation(EventInterface $e) { $class = $e-&gt;getParam('class', false); if (!$class || !$this-&gt;hasAnnotation($class)) { return false; } $content = $e-&gt;getParam('content', ''); $content = trim($content, '()'); if ($this-&gt;hasAlias($class)) { $class = $this-&gt;resolveAlias($class); } $index = array_search($class, $this-&gt;annotationNames); $annotation = $this-&gt;annotations[$index]; $newAnnotation = clone $annotation; if ($content) { $newAnnotation-&gt;initialize($content); } return $newAnnotation; } public function registerAnnotation($annotation) { $class = false; if (is_string($annotation) &amp;&amp; class_exists($annotation)) { $class = $annotation; $annotation = new $annotation(); } if (!$annotation instanceof AnnotationInterface) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects an instance of %s\AnnotationInterface; received "%s"', __METHOD__, __NAMESPACE__, (is_object($annotation) ? get_class($annotation) : gettype($annotation)) )); } $class = $class ?: get_class($annotation); if (in_array($class, $this-&gt;annotationNames)) { throw new Exception\InvalidArgumentException(sprintf( 'An annotation for this class %s already exists', $class )); } $this-&gt;annotations[] = $annotation; $this-&gt;annotationNames[] = $class; } public function registerAnnotations($annotations) { if (!is_array($annotations) &amp;&amp; !$annotations instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects an array or Traversable; received "%s"', __METHOD__, (is_object($annotations) ? get_class($annotations) : gettype($annotations)) )); } foreach ($annotations as $annotation) { $this-&gt;registerAnnotation($annotation); } return $this; } public function hasAnnotation($class) { if (in_array($class, $this-&gt;annotationNames)) { return true; } if ($this-&gt;hasAlias($class)) { return true; } return false; } public function setAlias($alias, $class) { if (!in_array($class, $this-&gt;annotationNames) &amp;&amp; !$this-&gt;hasAlias($class)) { throw new Exception\InvalidArgumentException(sprintf( '%s: Cannot alias "%s" to "%s", as class "%s" is not currently a registered annotation or alias', __METHOD__, $alias, $class, $class )); } $alias = $this-&gt;normalizeAlias($alias); $this-&gt;aliases[$alias] = $class; return $this; } protected function normalizeAlias($alias) { return strtolower(str_replace(array('-', '_', ' ', '\\', '/'), '', $alias)); } protected function hasAlias($alias) { $alias = $this-&gt;normalizeAlias($alias); return (isset($this-&gt;aliases[$alias])); } protected function resolveAlias($alias) { do { $normalized = $this-&gt;normalizeAlias($alias); $class = $this-&gt;aliases[$normalized]; } while ($this-&gt;hasAlias($class)); return $class; } } &lt;?php
 namespace Zend\Code\Annotation\Parser; use Doctrine\Common\Annotations\AnnotationRegistry; use Doctrine\Common\Annotations\DocParser; use Traversable; use Zend\Code\Exception; use Zend\EventManager\EventInterface; class DoctrineAnnotationParser implements ParserInterface { protected $allowedAnnotations = array(); protected $docParser; public function __construct() { AnnotationRegistry::registerLoader(function ($class) { return (bool) class_exists($class); }); } public function setDocParser(DocParser $docParser) { $this-&gt;docParser = $docParser; return $this; } public function getDocParser() { if (!$this-&gt;docParser instanceof DocParser) { $this-&gt;setDocParser(new DocParser()); } return $this-&gt;docParser; } public function onCreateAnnotation(EventInterface $e) { $annotationClass = $e-&gt;getParam('class', false); if (!$annotationClass) { return false; } if (!isset($this-&gt;allowedAnnotations[$annotationClass])) { return false; } $annotationString = $e-&gt;getParam('raw', false); if (!$annotationString) { return false; } $annotationString = preg_replace('/^(@)/', '$1\\', $annotationString); $parser = $this-&gt;getDocParser(); $annotations = $parser-&gt;parse($annotationString); if (empty($annotations)) { return false; } $annotation = array_shift($annotations); if (!is_object($annotation)) { return false; } return $annotation; } public function registerAnnotation($annotation) { $this-&gt;allowedAnnotations[$annotation] = true; return $this; } public function registerAnnotations($annotations) { if (!is_array($annotations) &amp;&amp; !$annotations instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s: expects an array or Traversable; received "%s"', __METHOD__, (is_object($annotations) ? get_class($annotations) : gettype($annotations)) )); } foreach ($annotations as $annotation) { $this-&gt;allowedAnnotations[$annotation] = true; } return $this; } } &lt;?php
 namespace Zend\Code\Annotation; use Zend\Code\Annotation\Parser\ParserInterface; use Zend\EventManager\Event; use Zend\EventManager\EventManager; use Zend\EventManager\EventManagerAwareInterface; use Zend\EventManager\EventManagerInterface; class AnnotationManager implements EventManagerAwareInterface { const EVENT_CREATE_ANNOTATION = 'createAnnotation'; protected $events; public function setEventManager(EventManagerInterface $events) { $events-&gt;setIdentifiers(array( __CLASS__, get_class($this), )); $this-&gt;events = $events; return $this; } public function getEventManager() { if (null === $this-&gt;events) { $this-&gt;setEventManager(new EventManager()); } return $this-&gt;events; } public function attach(ParserInterface $parser) { $this-&gt;getEventManager() -&gt;attach(self::EVENT_CREATE_ANNOTATION, array($parser, 'onCreateAnnotation')); return $this; } public function createAnnotation(array $annotationData) { $event = new Event(); $event-&gt;setName(self::EVENT_CREATE_ANNOTATION); $event-&gt;setTarget($this); $event-&gt;setParams(array( 'class' =&gt; $annotationData[0], 'content' =&gt; $annotationData[1], 'raw' =&gt; $annotationData[2], )); $eventManager = $this-&gt;getEventManager(); $results = $eventManager-&gt;trigger($event, function ($r) { return (is_object($r)); }); $annotation = $results-&gt;last(); return (is_object($annotation) ? $annotation : false); } } &lt;?php
 namespace Zend\Code\Annotation; use ArrayObject; class AnnotationCollection extends ArrayObject { public function hasAnnotation($class) { foreach ($this as $annotation) { if (get_class($annotation) == $class) { return true; } } return false; } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Generator\DocBlock\Tag as DockBlockTag; use Zend\Code\Reflection\DocBlockReflection; class DocBlockGenerator extends AbstractGenerator { protected $shortDescription = null; protected $longDescription = null; protected $tags = array(); protected $indentation = ''; protected $wordwrap = true; public static function fromReflection(DocBlockReflection $reflectionDocBlock) { $docBlock = new static(); $docBlock-&gt;setSourceContent($reflectionDocBlock-&gt;getContents()); $docBlock-&gt;setSourceDirty(false); $docBlock-&gt;setShortDescription($reflectionDocBlock-&gt;getShortDescription()); $docBlock-&gt;setLongDescription($reflectionDocBlock-&gt;getLongDescription()); foreach ($reflectionDocBlock-&gt;getTags() as $tag) { $docBlock-&gt;setTag(DockBlockTag::fromReflection($tag)); } return $docBlock; } public static function fromArray(array $array) { $docBlock = new static(); foreach ($array as $name =&gt; $value) { switch (strtolower(str_replace(array('.', '-', '_'), '', $name))) { case 'shortdescription': $docBlock-&gt;setShortDescription($value); case 'longdescription': $docBlock-&gt;setLongDescription($value); break; case 'tags': $docBlock-&gt;setTags($value); break; } } return $docBlock; } public function __construct($shortDescription = null, $longDescription = null, array $tags = array()) { if ($shortDescription) { $this-&gt;setShortDescription($shortDescription); } if ($longDescription) { $this-&gt;setLongDescription($longDescription); } if (is_array($tags) &amp;&amp; $tags) { $this-&gt;setTags($tags); } } public function setShortDescription($shortDescription) { $this-&gt;shortDescription = $shortDescription; return $this; } public function getShortDescription() { return $this-&gt;shortDescription; } public function setLongDescription($longDescription) { $this-&gt;longDescription = $longDescription; return $this; } public function getLongDescription() { return $this-&gt;longDescription; } public function setTags(array $tags) { foreach ($tags as $tag) { $this-&gt;setTag($tag); } return $this; } public function setTag($tag) { if (is_array($tag)) { $tag = new DockBlockTag($tag); } elseif (!$tag instanceof DockBlockTag) { throw new Exception\InvalidArgumentException( '%s expects either an array of method options or an instance of %s\DocBlock\Tag', __METHOD__, __NAMESPACE__ ); } $this-&gt;tags[] = $tag; return $this; } public function getTags() { return $this-&gt;tags; } public function setWordWrap($value) { $this-&gt;wordwrap = (boolean) $value; return $this; } public function getWordWrap() { return $this-&gt;wordwrap; } public function generate() { if (!$this-&gt;isSourceDirty()) { return $this-&gt;docCommentize($this-&gt;getSourceContent()); } $output = ''; if (null !== ($sd = $this-&gt;getShortDescription())) { $output .= $sd . self::LINE_FEED . self::LINE_FEED; } if (null !== ($ld = $this-&gt;getLongDescription())) { $output .= $ld . self::LINE_FEED . self::LINE_FEED; } foreach ($this-&gt;getTags() as $tag) { $output .= $tag-&gt;generate() . self::LINE_FEED; } return $this-&gt;docCommentize(trim($output)); } protected function docCommentize($content) { $indent = $this-&gt;getIndentation(); $output = $indent . '/**' . self::LINE_FEED; $content = $this-&gt;getWordWrap() == true ? wordwrap($content, 80, self::LINE_FEED) : $content; $lines = explode(self::LINE_FEED, $content); foreach ($lines as $line) { $output .= $indent . ' *'; if ($line) { $output .= " $line"; } $output .= self::LINE_FEED; } $output .= $indent . ' */' . self::LINE_FEED; return $output; } } &lt;?php
 namespace Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Reflection\DocBlock\Tag\TagInterface as ReflectionDocBlockTag; class ReturnTag extends Tag { protected $datatype = null; public static function fromReflection(ReflectionDocBlockTag $reflectionTagReturn) { $returnTag = new static(); $returnTag -&gt;setName('return') -&gt;setDatatype($reflectionTagReturn-&gt;getType()) -&gt;setDescription($reflectionTagReturn-&gt;getDescription()); return $returnTag; } public function setDatatype($datatype) { $this-&gt;datatype = $datatype; return $this; } public function getDatatype() { return $this-&gt;datatype; } public function generate() { return '@return ' . $this-&gt;datatype . ' ' . $this-&gt;description; } } &lt;?php
 namespace Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Reflection\DocBlock\Tag\TagInterface as ReflectionDocBlockTag; class ParamTag extends Tag { protected $datatype = null; protected $paramName = null; public static function fromReflection(ReflectionDocBlockTag $reflectionTagParam) { $paramTag = new static(); $paramTag -&gt;setName('param') -&gt;setDatatype($reflectionTagParam-&gt;getType()) -&gt;setParamName($reflectionTagParam-&gt;getVariableName()) -&gt;setDescription($reflectionTagParam-&gt;getDescription()); return $paramTag; } public function setDatatype($datatype) { $this-&gt;datatype = $datatype; return $this; } public function getDatatype() { return $this-&gt;datatype; } public function setParamName($paramName) { $this-&gt;paramName = $paramName; return $this; } public function getParamName() { return $this-&gt;paramName; } public function generate() { $output = '@param ' . (($this-&gt;datatype != null) ? $this-&gt;datatype : 'unknown') . (($this-&gt;paramName != null) ? ' $' . $this-&gt;paramName : '') . (($this-&gt;description != null) ? ' ' . $this-&gt;description : ''); return $output; } } &lt;?php
 namespace Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Reflection\DocBlock\Tag\TagInterface as ReflectionDocBlockTag; class LicenseTag extends Tag { protected $url = null; protected $licenseName = null; public function __construct(array $options = array()) { parent::__construct($options); if (isset($options['url'])) { $this-&gt;setUrl($options['url']); } if (empty($this-&gt;name)) { $this-&gt;setName('license'); } } public static function fromReflection(ReflectionDocBlockTag $reflectionTagLicense) { $licenseTag = new static(); $licenseTag -&gt;setName('license') -&gt;setUrl($reflectionTagLicense-&gt;getUrl()) -&gt;setLicenseName($reflectionTagLicense-&gt;getDescription()); return $licenseTag; } public function setUrl($url) { $this-&gt;url = $url; return $this; } public function getUrl() { return $this-&gt;url; } public function setLicenseName($name) { $this-&gt;licenseName = $name; return $this; } public function getLicenseName() { return $this-&gt;licenseName; } public function generate() { $output = '@license ' . (($this-&gt;url != null) ? $this-&gt;url : 'unknown') . (($this-&gt;licenseName != null) ? ' ' . $this-&gt;licenseName : '') . (($this-&gt;description != null) ? ' ' . $this-&gt;description : ''); return $output; } } &lt;?php
 namespace Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Generator\DocBlock\Tag; use Zend\Code\Reflection\DocBlock\Tag\TagInterface as ReflectionDocBlockTag; class AuthorTag extends Tag { protected $datatype = null; protected $paramName = null; public static function fromReflection(ReflectionDocBlockTag $reflectionTagParam) { $authorTag = new self(); $authorTag -&gt;setName('author') -&gt;setAuthorName($reflectionTagParam-&gt;getType()) -&gt;setAuthorEmail($reflectionTagParam-&gt;getVariableName()) -&gt;setDescription($reflectionTagParam-&gt;getDescription()); return $authorTag; } public function setDatatype($datatype) { $this-&gt;datatype = (string) $datatype; return $this; } public function getDatatype() { return $this-&gt;datatype; } public function setParamName($paramName) { $this-&gt;paramName = (string) $paramName; return $this; } public function getParamName() { return $this-&gt;paramName; } public function generate() { $output = '@param ' . (($this-&gt;datatype != null) ? $this-&gt;datatype : 'unknown') . (($this-&gt;paramName != null) ? ' $' . $this-&gt;paramName : '') . (($this-&gt;description != null) ? ' ' . $this-&gt;description : ''); return $output; } } &lt;?php
 namespace Zend\Code\Generator\DocBlock; use Zend\Code\Generator\AbstractGenerator; use Zend\Code\Reflection\DocBlock\Tag\TagInterface as ReflectionDocBlockTag; use ReflectionClass; use ReflectionMethod; class Tag extends AbstractGenerator { protected static $typeFormats = array( array( 'param', '@param &lt;type&gt; &lt;variable&gt; &lt;description&gt;' ), array( 'return', '@return &lt;type&gt; &lt;description&gt;' ), array( 'tag', '@&lt;name&gt; &lt;description&gt;' ) ); protected $name = null; protected $description = null; public function __construct(array $options = array()) { if (isset($options['name'])) { $this-&gt;setName($options['name']); } if (isset($options['description'])) { $this-&gt;setDescription($options['description']); } } public static function fromReflection(ReflectionDocBlockTag $reflectionTag) { $tagName = $reflectionTag-&gt;getName(); $codeGenDocBlockTag = new static(); $codeGenDocBlockTag-&gt;setName($tagName); $reflectionClass = new ReflectionClass($reflectionTag); foreach ($reflectionClass-&gt;getMethods(ReflectionMethod::IS_PUBLIC) as $method) { if (substr($method-&gt;getName(), 0, 3) == 'get') { $propertyName = substr($method-&gt;getName(), 3); if (method_exists($codeGenDocBlockTag, 'set' . $propertyName)) { $codeGenDocBlockTag-&gt;{'set' . $propertyName}($reflectionTag-&gt;{'get' . $propertyName}()); } } } return $codeGenDocBlockTag; } public function setName($name) { $this-&gt;name = ltrim($name, '@'); return $this; } public function getName() { return $this-&gt;name; } public function setDescription($description) { $this-&gt;description = $description; return $this; } public function getDescription() { return $this-&gt;description; } public function generate() { $output = '@' . $this-&gt;name . (($this-&gt;description != null) ? ' ' . $this-&gt;description : ''); return $output; } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Reflection\FileReflection; class FileGenerator extends AbstractGenerator { protected $filename = null; protected $docBlock = null; protected $requiredFiles = array(); protected $namespace = null; protected $uses = array(); protected $classes = array(); protected $body = null; public function __construct($options = null) { if (null !== $options) { $this-&gt;setOptions($options); } } public static function fromReflectedFileName($filePath, $includeIfNotAlreadyIncluded = true) { $realpath = realpath($filePath); if ( $realpath === false &amp;&amp; ($realpath = FileReflection::findRealpathInIncludePath($filePath)) === false ) { throw new Exception\InvalidArgumentException(sprintf( 'No file for %s was found.', $realpath )); } if ($includeIfNotAlreadyIncluded &amp;&amp; !in_array($realpath, get_included_files())) { include $realpath; } $fileReflector = new FileReflection($realpath); $codeGenerator = static::fromReflection($fileReflector); return $codeGenerator; } public static function fromReflection(FileReflection $fileReflection) { $file = new static(); $file-&gt;setSourceContent($fileReflection-&gt;getContents()); $file-&gt;setSourceDirty(false); $body = $fileReflection-&gt;getContents(); foreach ($fileReflection-&gt;getClasses() as $class) { $phpClass = ClassGenerator::fromReflection($class); $phpClass-&gt;setContainingFileGenerator($file); $file-&gt;setClass($phpClass); $classStartLine = $class-&gt;getStartLine(true); $classEndLine = $class-&gt;getEndLine(); $bodyLines = explode("\n", $body); $bodyReturn = array(); for ($lineNum = 1, $count = count($bodyLines); $lineNum &lt;= $count; $lineNum++) { if ($lineNum == $classStartLine) { $bodyReturn[] = str_replace( '?', $class-&gt;getName(), '/* Zend_Code_Generator_Php_File-ClassMarker: {?} */' ); $lineNum = $classEndLine; } else { $bodyReturn[] = $bodyLines[$lineNum - 1]; } } $body = implode("\n", $bodyReturn); unset($bodyLines, $bodyReturn, $classStartLine, $classEndLine); } $namespace = $fileReflection-&gt;getNamespace(); if ($namespace != '') { $file-&gt;setNamespace($namespace); } $uses = $fileReflection-&gt;getUses(); if ($uses) { $file-&gt;setUses($uses); } if (($fileReflection-&gt;getDocComment() != '')) { $docBlock = $fileReflection-&gt;getDocBlock(); $file-&gt;setDocBlock(DocBlockGenerator::fromReflection($docBlock)); $bodyLines = explode("\n", $body); $bodyReturn = array(); for ($lineNum = 1, $count = count($bodyLines); $lineNum &lt;= $count; $lineNum++) { if ($lineNum == $docBlock-&gt;getStartLine()) { $bodyReturn[] = str_replace( '?', $class-&gt;getName(), '/* Zend_Code_Generator_FileGenerator-DocBlockMarker */' ); $lineNum = $docBlock-&gt;getEndLine(); } else { $bodyReturn[] = $bodyLines[$lineNum - 1]; } } $body = implode("\n", $bodyReturn); unset($bodyLines, $bodyReturn, $classStartLine, $classEndLine); } $file-&gt;setBody($body); return $file; } public static function fromArray(array $values) { $fileGenerator = new static; foreach ($values as $name =&gt; $value) { switch (strtolower(str_replace(array('.', '-', '_'), '', $name))) { case 'filename': $fileGenerator-&gt;setFilename($value); continue; case 'class': $fileGenerator-&gt;setClass(($value instanceof ClassGenerator) ? : ClassGenerator::fromArray($value)); continue; case 'requiredfiles': $fileGenerator-&gt;setRequiredFiles($value); continue; default: if (property_exists($fileGenerator, $name)) { $fileGenerator-&gt;{$name} = $value; } elseif (method_exists($fileGenerator, 'set' . $name)) { $fileGenerator-&gt;{'set' . $name}($value); } } } return $fileGenerator; } public function setDocBlock($docBlock) { if (is_string($docBlock)) { $docBlock = array('shortDescription' =&gt; $docBlock); } if (is_array($docBlock)) { $docBlock = new DocBlockGenerator($docBlock); } elseif (!$docBlock instanceof DocBlockGenerator) { throw new Exception\InvalidArgumentException(sprintf( '%s is expecting either a string, array or an instance of %s\DocBlockGenerator', __METHOD__, __NAMESPACE__ )); } $this-&gt;docBlock = $docBlock; return $this; } public function getDocBlock() { return $this-&gt;docBlock; } public function setRequiredFiles(array $requiredFiles) { $this-&gt;requiredFiles = $requiredFiles; return $this; } public function getRequiredFiles() { return $this-&gt;requiredFiles; } public function setClasses(array $classes) { foreach ($classes as $class) { $this-&gt;setClass($class); } return $this; } public function getNamespace() { return $this-&gt;namespace; } public function setNamespace($namespace) { $this-&gt;namespace = (string) $namespace; return $this; } public function getUses($withResolvedAs = false) { $uses = $this-&gt;uses; if ($withResolvedAs) { for ($useIndex = 0, $count = count($uses); $useIndex &lt; $count; $useIndex++) { if ($uses[$useIndex][1] == '') { if (($lastSeparator = strrpos($uses[$useIndex][0], '\\')) !== false) { $uses[$useIndex][2] = substr($uses[$useIndex][0], $lastSeparator + 1); } else { $uses[$useIndex][2] = $uses[$useIndex][0]; } } else { $uses[$useIndex][2] = $uses[$useIndex][1]; } } } return $uses; } public function setUses(array $uses) { foreach ($uses as $use) { if (is_array($use)) { $this-&gt;setUse($use['use'], $use['as']); } else { $this-&gt;setUse($use); } } return $this; } public function setUse($use, $as = null) { if (!in_array(array($use, $as), $this-&gt;uses)) { $this-&gt;uses[] = array($use, $as); } return $this; } public function getClass($name = null) { if ($name == null) { reset($this-&gt;classes); return current($this-&gt;classes); } return $this-&gt;classes[(string) $name]; } public function setClass($class) { if (is_array($class)) { $class = ClassGenerator::fromArray($class); } elseif (is_string($class)) { $class = new ClassGenerator($class); } elseif (!$class instanceof ClassGenerator) { throw new Exception\InvalidArgumentException(sprintf( '%s is expecting either a string, array or an instance of %s\ClassGenerator', __METHOD__, __NAMESPACE__ )); } $className = $class-&gt;getName(); $this-&gt;classes[$className] = $class; return $this; } public function setFilename($filename) { $this-&gt;filename = (string) $filename; return $this; } public function getFilename() { return $this-&gt;filename; } public function getClasses() { return $this-&gt;classes; } public function setBody($body) { $this-&gt;body = (string) $body; return $this; } public function getBody() { return $this-&gt;body; } public function isSourceDirty() { $docBlock = $this-&gt;getDocBlock(); if ($docBlock &amp;&amp; $docBlock-&gt;isSourceDirty()) { return true; } foreach ($this-&gt;classes as $class) { if ($class-&gt;isSourceDirty()) { return true; } } return parent::isSourceDirty(); } public function generate() { if ($this-&gt;isSourceDirty() === false) { return $this-&gt;sourceContent; } $output = ''; $body = $this-&gt;getBody(); if (preg_match('#(?:\s*)&lt;\?php#', $body) == false) { $output = '&lt;?php' . self::LINE_FEED; } if (preg_match('#/\* Zend_Code_Generator_FileGenerator-(.*?)Marker:#', $body)) { $tokens = token_get_all($body); foreach ($tokens as $token) { if (is_array($token) &amp;&amp; in_array($token[0], array(T_OPEN_TAG, T_COMMENT, T_DOC_COMMENT, T_WHITESPACE)) ) { $output .= $token[1]; } } $body = ''; } if (null !== ($docBlock = $this-&gt;getDocBlock())) { $docBlock-&gt;setIndentation(''); if (preg_match('#/* Zend_Code_Generator_FileGenerator-DocBlockMarker */#', $output)) { $output = preg_replace('#/* Zend_CodeGenerator_Php_File-DocBlockMarker */#', $docBlock-&gt;generate(), $output, 1); } else { $output .= $docBlock-&gt;generate() . self::LINE_FEED; } } $output .= self::LINE_FEED; $namespace = $this-&gt;getNamespace(); if ($namespace) { $output .= sprintf('namespace %s;%s', $namespace, str_repeat(self::LINE_FEED, 2)); } $requiredFiles = $this-&gt;getRequiredFiles(); if (!empty($requiredFiles)) { foreach ($requiredFiles as $requiredFile) { $output .= 'require_once \'' . $requiredFile . '\';' . self::LINE_FEED; } $output .= self::LINE_FEED; } $uses = $this-&gt;getUses(); if (!empty($uses)) { foreach ($uses as $use) { list($import, $alias) = $use; if (null === $alias) { $output .= sprintf('use %s;%s', $import, self::LINE_FEED); } else { $output .= sprintf('use %s as %s;%s', $import, $alias, self::LINE_FEED); } } $output .= self::LINE_FEED; } $classes = $this-&gt;getClasses(); if (!empty($classes)) { foreach ($classes as $class) { $regex = str_replace('?', $class-&gt;getName(), '/* Zend_Code_Generator_FileGenerator-ClassMarker: {?} */'); $regex = preg_quote($regex, '#'); if (preg_match('#' . $regex . '#', $output)) { $output = preg_replace('#' . $regex . '#', $class-&gt;generate(), $output, 1); } else { if ($namespace) { $class-&gt;setNamespaceName(null); } $output .= $class-&gt;generate() . self::LINE_FEED; } } } if (!empty($body)) { if (!empty($classes)) { $output .= self::LINE_FEED; } $output .= $body; } return $output; } public function write() { if ($this-&gt;filename == '' || !is_writable(dirname($this-&gt;filename))) { throw new Exception\RuntimeException('This code generator object is not writable.'); } file_put_contents($this-&gt;filename, $this-&gt;generate()); return $this; } } &lt;?php
 namespace Zend\Code\Generator\Exception; use Zend\Code\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Generator\Exception; use Zend\Code\Exception\ExceptionInterface as Exception; interface ExceptionInterface extends Exception {} &lt;?php
 namespace Zend\Code\Generator\Exception; use Zend\Code\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Generator; class ValueGenerator extends AbstractGenerator { const TYPE_AUTO = 'auto'; const TYPE_BOOLEAN = 'boolean'; const TYPE_BOOL = 'bool'; const TYPE_NUMBER = 'number'; const TYPE_INTEGER = 'integer'; const TYPE_INT = 'int'; const TYPE_FLOAT = 'float'; const TYPE_DOUBLE = 'double'; const TYPE_STRING = 'string'; const TYPE_ARRAY = 'array'; const TYPE_CONSTANT = 'constant'; const TYPE_NULL = 'null'; const TYPE_OBJECT = 'object'; const TYPE_OTHER = 'other'; const OUTPUT_MULTIPLE_LINE = 'multipleLine'; const OUTPUT_SINGLE_LINE = 'singleLine'; protected $value = null; protected $type = self::TYPE_AUTO; protected $arrayDepth = 1; protected $outputMode = self::OUTPUT_MULTIPLE_LINE; protected $allowedTypes = null; public function __construct($value = null, $type = self::TYPE_AUTO, $outputMode = self::OUTPUT_MULTIPLE_LINE) { if ($value !== null) { $this-&gt;setValue($value); } if ($type !== self::TYPE_AUTO) { $this-&gt;setType($type); } if ($outputMode !== self::OUTPUT_MULTIPLE_LINE) { $this-&gt;setOutputMode($outputMode); } } public function isValidConstantType() { if ($this-&gt;type == self::TYPE_AUTO) { $type = $this-&gt;getAutoDeterminedType($this-&gt;value); } else { $type = $this-&gt;type; } $scalarTypes = array( self::TYPE_BOOLEAN, self::TYPE_BOOL, self::TYPE_NUMBER, self::TYPE_INTEGER, self::TYPE_INT, self::TYPE_FLOAT, self::TYPE_DOUBLE, self::TYPE_STRING, self::TYPE_CONSTANT, self::TYPE_NULL ); return in_array($type, $scalarTypes); } public function setValue($value) { $this-&gt;value = $value; return $this; } public function getValue() { return $this-&gt;value; } public function setType($type) { $this-&gt;type = (string) $type; return $this; } public function getType() { return $this-&gt;type; } public function setArrayDepth($arrayDepth) { $this-&gt;arrayDepth = (int) $arrayDepth; return $this; } public function getArrayDepth() { return $this-&gt;arrayDepth; } protected function getValidatedType($type) { $types = array( self::TYPE_AUTO, self::TYPE_BOOLEAN, self::TYPE_BOOL, self::TYPE_NUMBER, self::TYPE_INTEGER, self::TYPE_INT, self::TYPE_FLOAT, self::TYPE_DOUBLE, self::TYPE_STRING, self::TYPE_ARRAY, self::TYPE_CONSTANT, self::TYPE_NULL, self::TYPE_OBJECT, self::TYPE_OTHER ); if (in_array($type, $types)) { return $type; } return self::TYPE_AUTO; } public function getAutoDeterminedType($value) { switch (gettype($value)) { case 'boolean': return self::TYPE_BOOLEAN; case 'string': return self::TYPE_STRING; case 'double': case 'float': case 'integer': return self::TYPE_NUMBER; case 'array': return self::TYPE_ARRAY; case 'NULL': return self::TYPE_NULL; case 'object': case 'resource': case 'unknown type': default: return self::TYPE_OTHER; } } public function generate() { $type = $this-&gt;type; if ($type != self::TYPE_AUTO) { $type = $this-&gt;getValidatedType($type); } $value = $this-&gt;value; if ($type == self::TYPE_AUTO) { $type = $this-&gt;getAutoDeterminedType($value); if ($type == self::TYPE_ARRAY) { $rii = new \RecursiveIteratorIterator( $it = new \RecursiveArrayIterator($value), \RecursiveIteratorIterator::SELF_FIRST ); foreach ($rii as $curKey =&gt; $curValue) { if (!$curValue instanceof ValueGenerator) { $curValue = new self($curValue); $rii-&gt;getSubIterator()-&gt;offsetSet($curKey, $curValue); } $curValue-&gt;setArrayDepth($rii-&gt;getDepth()); } $value = $rii-&gt;getSubIterator()-&gt;getArrayCopy(); } } $output = ''; switch ($type) { case self::TYPE_BOOLEAN: case self::TYPE_BOOL: $output .= ($value ? 'true' : 'false'); break; case self::TYPE_STRING: $output .= self::escape($value); break; case self::TYPE_NULL: $output .= 'null'; break; case self::TYPE_NUMBER: case self::TYPE_INTEGER: case self::TYPE_INT: case self::TYPE_FLOAT: case self::TYPE_DOUBLE: case self::TYPE_CONSTANT: $output .= $value; break; case self::TYPE_ARRAY: $output .= 'array('; $curArrayMultiblock = false; if (count($value) &gt; 1) { $curArrayMultiblock = true; if ($this-&gt;outputMode == self::OUTPUT_MULTIPLE_LINE) { $output .= self::LINE_FEED . str_repeat($this-&gt;indentation, $this-&gt;arrayDepth + 1); } } $outputParts = array(); $noKeyIndex = 0; foreach ($value as $n =&gt; $v) { $v-&gt;setArrayDepth($this-&gt;arrayDepth + 1); $partV = $v-&gt;generate(); if ($n === $noKeyIndex) { $outputParts[] = $partV; $noKeyIndex++; } else { $outputParts[] = (is_int($n) ? $n : self::escape($n)) . ' =&gt; ' . $partV; } } $padding = ($this-&gt;outputMode == self::OUTPUT_MULTIPLE_LINE) ? self::LINE_FEED . str_repeat($this-&gt;indentation, $this-&gt;arrayDepth + 1) : ' '; $output .= implode(',' . $padding, $outputParts); if ($curArrayMultiblock == true &amp;&amp; $this-&gt;outputMode == self::OUTPUT_MULTIPLE_LINE) { $output .= self::LINE_FEED . str_repeat($this-&gt;indentation, $this-&gt;arrayDepth + 1); } $output .= ')'; break; case self::TYPE_OTHER: default: throw new Exception\RuntimeException(sprintf( 'Type "%s" is unknown or cannot be used as property default value.', get_class($value) )); } return $output; } public static function escape($input, $quote = true) { $output = addcslashes($input, "'"); if ($quote) { $output = "'" . $output . "'"; } return $output; } public function setOutputMode($outputMode) { $this-&gt;outputMode = (string) $outputMode; return $this; } public function getOutputMode() { return $this-&gt;outputMode; } public function __toString() { return $this-&gt;generate(); } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Reflection\MethodReflection; class MethodGenerator extends AbstractMemberGenerator { protected $docBlock = null; protected $parameters = array(); protected $body = null; public static function fromReflection(MethodReflection $reflectionMethod) { $method = new static(); $method-&gt;setSourceContent($reflectionMethod-&gt;getContents(false)); $method-&gt;setSourceDirty(false); if ($reflectionMethod-&gt;getDocComment() != '') { $method-&gt;setDocBlock(DocBlockGenerator::fromReflection($reflectionMethod-&gt;getDocBlock())); } $method-&gt;setFinal($reflectionMethod-&gt;isFinal()); if ($reflectionMethod-&gt;isPrivate()) { $method-&gt;setVisibility(self::VISIBILITY_PRIVATE); } elseif ($reflectionMethod-&gt;isProtected()) { $method-&gt;setVisibility(self::VISIBILITY_PROTECTED); } else { $method-&gt;setVisibility(self::VISIBILITY_PUBLIC); } $method-&gt;setStatic($reflectionMethod-&gt;isStatic()); $method-&gt;setName($reflectionMethod-&gt;getName()); foreach ($reflectionMethod-&gt;getParameters() as $reflectionParameter) { $method-&gt;setParameter(ParameterGenerator::fromReflection($reflectionParameter)); } $method-&gt;setBody($reflectionMethod-&gt;getBody()); return $method; } public static function fromArray(array $array) { if (!isset($array['name'])) { throw new Exception\InvalidArgumentException( 'Method generator requires that a name is provided for this object' ); } $method = new static($array['name']); foreach ($array as $name =&gt; $value) { switch (strtolower(str_replace(array('.', '-', '_'), '', $name))) { case 'docblock': $docBlock = ($value instanceof DocBlockGenerator) ? $value : DocBlockGenerator::fromArray($value); $method-&gt;setDocBlock($docBlock); break; case 'flags': $method-&gt;setFlags($value); break; case 'parameters': $method-&gt;setParameters($value); break; case 'body': $method-&gt;setBody($value); break; case 'abstract': $method-&gt;setAbstract($value); break; case 'final': $method-&gt;setFinal($value); break; case 'static': $method-&gt;setStatic($value); break; case 'visibility': $method-&gt;setVisibility($value); break; } } return $method; } public function __construct($name = null, array $parameters = array(), $flags = self::FLAG_PUBLIC, $body = null, $docBlock = null) { if ($name) { $this-&gt;setName($name); } if ($parameters) { $this-&gt;setParameters($parameters); } if ($flags !== self::FLAG_PUBLIC) { $this-&gt;setFlags($flags); } if ($body) { $this-&gt;setBody($body); } if ($docBlock) { $this-&gt;setDocBlock($docBlock); } } public function setParameters(array $parameters) { foreach ($parameters as $parameter) { $this-&gt;setParameter($parameter); } return $this; } public function setParameter($parameter) { if (is_string($parameter)) { $parameter = new ParameterGenerator($parameter); } elseif (!$parameter instanceof ParameterGenerator) { throw new Exception\InvalidArgumentException(sprintf( '%s is expecting either a string, array or an instance of %s\ParameterGenerator', __METHOD__, __NAMESPACE__ )); } $parameterName = $parameter-&gt;getName(); $this-&gt;parameters[$parameterName] = $parameter; return $this; } public function getParameters() { return $this-&gt;parameters; } public function setBody($body) { $this-&gt;body = $body; return $this; } public function getBody() { return $this-&gt;body; } public function generate() { $output = ''; $indent = $this-&gt;getIndentation(); if (($docBlock = $this-&gt;getDocBlock()) !== null) { $docBlock-&gt;setIndentation($indent); $output .= $docBlock-&gt;generate(); } $output .= $indent; if ($this-&gt;isAbstract()) { $output .= 'abstract '; } else { $output .= (($this-&gt;isFinal()) ? 'final ' : ''); } $output .= $this-&gt;getVisibility() . (($this-&gt;isStatic()) ? ' static' : '') . ' function ' . $this-&gt;getName() . '('; $parameters = $this-&gt;getParameters(); if (!empty($parameters)) { foreach ($parameters as $parameter) { $parameterOutput[] = $parameter-&gt;generate(); } $output .= implode(', ', $parameterOutput); } $output .= ')' . self::LINE_FEED . $indent . '{' . self::LINE_FEED; if ($this-&gt;body) { $output .= preg_replace('#^(.+?)$#m', $indent . $indent . '$1', trim($this-&gt;body)) . self::LINE_FEED; } $output .= $indent . '}' . self::LINE_FEED; return $output; } public function __toString() { return $this-&gt;generate(); } } &lt;?php
 namespace Zend\Code\Generator; use Traversable; abstract class AbstractGenerator implements GeneratorInterface { const LINE_FEED = "\n"; protected $isSourceDirty = true; protected $indentation = '    '; protected $sourceContent = null; public function __construct($options = array()) { if ($options) { $this-&gt;setOptions($options); } } public function setSourceDirty($isSourceDirty = true) { $this-&gt;isSourceDirty = (bool) $isSourceDirty; return $this; } public function isSourceDirty() { return $this-&gt;isSourceDirty; } public function setIndentation($indentation) { $this-&gt;indentation = (string) $indentation; return $this; } public function getIndentation() { return $this-&gt;indentation; } public function setSourceContent($sourceContent) { $this-&gt;sourceContent = (string) $sourceContent; return $this; } public function getSourceContent() { return $this-&gt;sourceContent; } public function setOptions($options) { if (!is_array($options) &amp;&amp; !$options instanceof Traversable) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable object; received "%s"', __METHOD__, (is_object($options) ? get_class($options) : gettype($options)) )); } foreach ($options as $optionName =&gt; $optionValue) { $methodName = 'set' . $optionName; if (method_exists($this, $methodName)) { $this-&gt;{$methodName}($optionValue); } } return $this; } } &lt;?php
 namespace Zend\Code\Generator; class BodyGenerator extends AbstractGenerator { protected $content = null; public function setContent($content) { $this-&gt;content = (string) $content; return $this; } public function getContent() { return $this-&gt;content; } public function generate() { return $this-&gt;getContent(); } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Generator\Exception; abstract class AbstractMemberGenerator extends AbstractGenerator { const FLAG_ABSTRACT = 0x01; const FLAG_FINAL = 0x02; const FLAG_STATIC = 0x04; const FLAG_PUBLIC = 0x10; const FLAG_PROTECTED = 0x20; const FLAG_PRIVATE = 0x40; const VISIBILITY_PUBLIC = 'public'; const VISIBILITY_PROTECTED = 'protected'; const VISIBILITY_PRIVATE = 'private'; protected $docBlock = null; protected $name = null; protected $flags = self::FLAG_PUBLIC; public function setFlags($flags) { if (is_array($flags)) { $flagsArray = $flags; $flags = 0x00; foreach ($flagsArray as $flag) { $flags |= $flag; } } $this-&gt;flags = $flags; return $this; } public function addFlag($flag) { $this-&gt;setFlags($this-&gt;flags | $flag); return $this; } public function removeFlag($flag) { $this-&gt;setFlags($this-&gt;flags &amp; ~$flag); return $this; } public function setAbstract($isAbstract) { return (($isAbstract) ? $this-&gt;addFlag(self::FLAG_ABSTRACT) : $this-&gt;removeFlag(self::FLAG_ABSTRACT)); } public function isAbstract() { return (bool) ($this-&gt;flags &amp; self::FLAG_ABSTRACT); } public function setFinal($isFinal) { return (($isFinal) ? $this-&gt;addFlag(self::FLAG_FINAL) : $this-&gt;removeFlag(self::FLAG_FINAL)); } public function isFinal() { return (bool) ($this-&gt;flags &amp; self::FLAG_FINAL); } public function setStatic($isStatic) { return (($isStatic) ? $this-&gt;addFlag(self::FLAG_STATIC) : $this-&gt;removeFlag(self::FLAG_STATIC)); } public function isStatic() { return (bool) ($this-&gt;flags &amp; self::FLAG_STATIC); } public function setVisibility($visibility) { switch ($visibility) { case self::VISIBILITY_PUBLIC: $this-&gt;removeFlag(self::FLAG_PRIVATE | self::FLAG_PROTECTED); $this-&gt;addFlag(self::FLAG_PUBLIC); break; case self::VISIBILITY_PROTECTED: $this-&gt;removeFlag(self::FLAG_PUBLIC | self::FLAG_PRIVATE); $this-&gt;addFlag(self::FLAG_PROTECTED); break; case self::VISIBILITY_PRIVATE: $this-&gt;removeFlag(self::FLAG_PUBLIC | self::FLAG_PROTECTED); $this-&gt;addFlag(self::FLAG_PRIVATE); break; } return $this; } public function getVisibility() { switch (true) { case ($this-&gt;flags &amp; self::FLAG_PROTECTED): return self::VISIBILITY_PROTECTED; case ($this-&gt;flags &amp; self::FLAG_PRIVATE): return self::VISIBILITY_PRIVATE; default: return self::VISIBILITY_PUBLIC; } } public function setName($name) { $this-&gt;name = (string) $name; return $this; } public function getName() { return $this-&gt;name; } public function setDocBlock($docBlock) { if (is_string($docBlock)) { $docBlock = new DocBlockGenerator($docBlock); } elseif (!$docBlock instanceof DocBlockGenerator) { throw new Exception\InvalidArgumentException(sprintf( '%s is expecting either a string, array or an instance of %s\DocBlockGenerator', __METHOD__, __NAMESPACE__ )); } $this-&gt;docBlock = $docBlock; return $this; } public function getDocBlock() { return $this-&gt;docBlock; } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Reflection\ParameterReflection; class ParameterGenerator extends AbstractGenerator { protected $name = null; protected $type = null; protected $defaultValue = null; protected $position = null; protected $passedByReference = false; protected static $simple = array('int', 'bool', 'string', 'float', 'resource', 'mixed', 'object'); public static function fromReflection(ParameterReflection $reflectionParameter) { $param = new ParameterGenerator(); $param-&gt;setName($reflectionParameter-&gt;getName()); if ($reflectionParameter-&gt;isArray()) { $param-&gt;setType('array'); } else { $typeClass = $reflectionParameter-&gt;getClass(); if ($typeClass) { $param-&gt;setType($typeClass-&gt;getName()); } } $param-&gt;setPosition($reflectionParameter-&gt;getPosition()); if ($reflectionParameter-&gt;isOptional()) { $param-&gt;setDefaultValue($reflectionParameter-&gt;getDefaultValue()); } $param-&gt;setPassedByReference($reflectionParameter-&gt;isPassedByReference()); return $param; } public static function fromArray(array $array) { if (!isset($array['name'])) { throw new Exception\InvalidArgumentException( 'Paramerer generator requires that a name is provided for this object' ); } $param = new static($array['name']); foreach ($array as $name =&gt; $value) { switch (strtolower(str_replace(array('.', '-', '_'), '', $name))) { case 'type': $param-&gt;setType($value); break; case 'defaultvalue': $param-&gt;setDefaultValue($value); break; case 'passedbyreference': $param-&gt;setPassedByReference($value); break; case 'position': $param-&gt;setPosition($value); break; case 'sourcedirty': $param-&gt;setSourceDirty($value); break; case 'indentation': $param-&gt;setIndentation($value); break; case 'sourcecontent': $param-&gt;setSourceContent($value); break; } } return $param; } public function __construct($name = null, $type = null, $defaultValue = null, $position = null, $passByReference = false) { if (null !== $name) { $this-&gt;setName($name); } if (null !== $type) { $this-&gt;setType($type); } if (null !== $defaultValue) { $this-&gt;setDefaultValue($defaultValue); } if (null !== $position) { $this-&gt;setPosition($position); } if (false !== $passByReference) { $this-&gt;setPassedByReference(true); } } public function setType($type) { $this-&gt;type = (string) $type; return $this; } public function getType() { return $this-&gt;type; } public function setName($name) { $this-&gt;name = (string) $name; return $this; } public function getName() { return $this-&gt;name; } public function setDefaultValue($defaultValue) { if (!($defaultValue instanceof ValueGenerator)) { $defaultValue = new ValueGenerator($defaultValue); } $this-&gt;defaultValue = $defaultValue; return $this; } public function getDefaultValue() { return $this-&gt;defaultValue; } public function setPosition($position) { $this-&gt;position = (int) $position; return $this; } public function getPosition() { return $this-&gt;position; } public function getPassedByReference() { return $this-&gt;passedByReference; } public function setPassedByReference($passedByReference) { $this-&gt;passedByReference = (bool) $passedByReference; return $this; } public function generate() { $output = ''; if ($this-&gt;type &amp;&amp; !in_array($this-&gt;type, static::$simple)) { $output .= $this-&gt;type . ' '; } if (true === $this-&gt;passedByReference) { $output .= '&amp;'; } $output .= '$' . $this-&gt;name; if ($this-&gt;defaultValue !== null) { $output .= ' = '; if (is_string($this-&gt;defaultValue)) { $output .= ValueGenerator::escape($this-&gt;defaultValue); } elseif ($this-&gt;defaultValue instanceof ValueGenerator) { $this-&gt;defaultValue-&gt;setOutputMode(ValueGenerator::OUTPUT_SINGLE_LINE); $output .= $this-&gt;defaultValue; } else { $output .= $this-&gt;defaultValue; } } return $output; } } &lt;?php
 namespace Zend\Code\Generator; interface GeneratorInterface { public function generate(); } &lt;?php
 namespace Zend\Code\Generator; class PropertyValueGenerator extends ValueGenerator { public function generate() { return parent::generate() . ';'; } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Reflection\PropertyReflection; class PropertyGenerator extends AbstractMemberGenerator { const FLAG_CONSTANT = 0x08; protected $isConst = null; protected $defaultValue = null; public static function fromReflection(PropertyReflection $reflectionProperty) { $property = new static(); $property-&gt;setName($reflectionProperty-&gt;getName()); $allDefaultProperties = $reflectionProperty-&gt;getDeclaringClass()-&gt;getDefaultProperties(); $property-&gt;setDefaultValue($allDefaultProperties[$reflectionProperty-&gt;getName()]); if ($reflectionProperty-&gt;getDocComment() != '') { $property-&gt;setDocBlock(DocBlockGenerator::fromReflection($reflectionProperty-&gt;getDocBlock())); } if ($reflectionProperty-&gt;isStatic()) { $property-&gt;setStatic(true); } if ($reflectionProperty-&gt;isPrivate()) { $property-&gt;setVisibility(self::VISIBILITY_PRIVATE); } elseif ($reflectionProperty-&gt;isProtected()) { $property-&gt;setVisibility(self::VISIBILITY_PROTECTED); } else { $property-&gt;setVisibility(self::VISIBILITY_PUBLIC); } $property-&gt;setSourceDirty(false); return $property; } public static function fromArray(array $array) { if (!isset($array['name'])) { throw new Exception\InvalidArgumentException( 'Property generator requires that a name is provided for this object' ); } $property = new static($array['name']); foreach ($array as $name =&gt; $value) { switch (strtolower(str_replace(array('.', '-', '_'), '', $name))) { case 'const': $property-&gt;setConst($value); break; case 'defaultvalue': $property-&gt;setDefaultValue($value); break; case 'docblock': $docBlock = ($value instanceof DocBlockGenerator) ? $value : DocBlockGenerator::fromArray($value); $property-&gt;setDocBlock($docBlock); break; case 'flags': $property-&gt;setFlags($value); break; case 'abstract': $property-&gt;setAbstract($value); break; case 'final': $property-&gt;setFinal($value); break; case 'static': $property-&gt;setStatic($value); break; case 'visibility': $property-&gt;setVisibility($value); break; } } return $property; } public function __construct($name = null, $defaultValue = null, $flags = self::FLAG_PUBLIC) { if (null !== $name) { $this-&gt;setName($name); } if (null !== $defaultValue) { $this-&gt;setDefaultValue($defaultValue); } if ($flags !== self::FLAG_PUBLIC) { $this-&gt;setFlags($flags); } } public function setConst($const) { if ($const) { $this-&gt;removeFlag(self::FLAG_PUBLIC | self::FLAG_PRIVATE | self::FLAG_PROTECTED); $this-&gt;setFlags(self::FLAG_CONSTANT); } else { $this-&gt;removeFlag(self::FLAG_CONSTANT); } return $this; } public function isConst() { return (bool) ($this-&gt;flags &amp; self::FLAG_CONSTANT); } public function setDefaultValue($defaultValue, $defaultValueType = PropertyValueGenerator::TYPE_AUTO, $defaultValueOutputMode = PropertyValueGenerator::OUTPUT_MULTIPLE_LINE) { if (!($defaultValue instanceof PropertyValueGenerator)) { $defaultValue = new PropertyValueGenerator($defaultValue, $defaultValueType, $defaultValueOutputMode); } $this-&gt;defaultValue = $defaultValue; return $this; } public function getDefaultValue() { return $this-&gt;defaultValue; } public function generate() { $name = $this-&gt;getName(); $defaultValue = $this-&gt;getDefaultValue(); $output = ''; if (($docBlock = $this-&gt;getDocBlock()) !== null) { $docBlock-&gt;setIndentation('    '); $output .= $docBlock-&gt;generate(); } if ($this-&gt;isConst()) { if ($defaultValue != null &amp;&amp; !$defaultValue-&gt;isValidConstantType()) { throw new Exception\RuntimeException(sprintf( 'The property %s is said to be ' . 'constant but does not have a valid constant value.', $this-&gt;name )); } $output .= $this-&gt;indentation . 'const ' . $name . ' = ' . (($defaultValue !== null) ? $defaultValue-&gt;generate() : 'null;'); } else { $output .= $this-&gt;indentation . $this-&gt;getVisibility() . (($this-&gt;isStatic()) ? ' static' : '') . ' $' . $name . ' = ' . (($defaultValue !== null) ? $defaultValue-&gt;generate() : 'null;'); } return $output; } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Reflection\ClassReflection; class ClassGenerator extends AbstractGenerator { const FLAG_ABSTRACT = 0x01; const FLAG_FINAL = 0x02; protected $containingFileGenerator = null; protected $namespaceName = null; protected $docBlock = null; protected $name = null; protected $flags = 0x00; protected $extendedClass = null; protected $implementedInterfaces = array(); protected $properties = array(); protected $methods = array(); protected $uses = array(); public static function fromReflection(ClassReflection $classReflection) { $cg = new static($classReflection-&gt;getName()); $cg-&gt;setSourceContent($cg-&gt;getSourceContent()); $cg-&gt;setSourceDirty(false); if ($classReflection-&gt;getDocComment() != '') { $cg-&gt;setDocBlock(DocBlockGenerator::fromReflection($classReflection-&gt;getDocBlock())); } $cg-&gt;setAbstract($classReflection-&gt;isAbstract()); if ($classReflection-&gt;inNamespace()) { $cg-&gt;setNamespaceName($classReflection-&gt;getNamespaceName()); } $parentClass = $classReflection-&gt;getParentClass(); if ($parentClass) { $cg-&gt;setExtendedClass($parentClass-&gt;getName()); $interfaces = array_diff($classReflection-&gt;getInterfaces(), $parentClass-&gt;getInterfaces()); } else { $interfaces = $classReflection-&gt;getInterfaces(); } $interfaceNames = array(); foreach ($interfaces AS $interface) { $interfaceNames[] = $interface-&gt;getName(); } $cg-&gt;setImplementedInterfaces($interfaceNames); $properties = array(); foreach ($classReflection-&gt;getProperties() as $reflectionProperty) { if ($reflectionProperty-&gt;getDeclaringClass()-&gt;getName() == $cg-&gt;getName()) { $properties[] = PropertyGenerator::fromReflection($reflectionProperty); } } $cg-&gt;addProperties($properties); $methods = array(); foreach ($classReflection-&gt;getMethods() as $reflectionMethod) { if ($reflectionMethod-&gt;getDeclaringClass()-&gt;getName() == $cg-&gt;getNamespaceName() . "\\" . $cg-&gt;getName()) { $methods[] = MethodGenerator::fromReflection($reflectionMethod); } } $cg-&gt;addMethods($methods); return $cg; } public static function fromArray(array $array) { if (!isset($array['name'])) { throw new Exception\InvalidArgumentException( 'Class generator requires that a name is provided for this object' ); } $cg = new static($array['name']); foreach ($array as $name =&gt; $value) { switch (strtolower(str_replace(array('.', '-', '_'), '', $name))) { case 'containingfile': $cg-&gt;setContainingFileGenerator($value); break; case 'namespacename': $cg-&gt;setNamespaceName($value); break; case 'docblock': $docBlock = ($value instanceof DocBlockGenerator) ? $value : DocBlockGenerator::fromArray($value); $cg-&gt;setDocBlock($docBlock); break; case 'flags': $cg-&gt;setFlags($value); break; case 'extendedclass': $cg-&gt;setExtendedClass($value); break; case 'implementedinterfaces': $cg-&gt;setImplementedInterfaces($value); break; case 'properties': $cg-&gt;addProperties($value); break; case 'methods': $cg-&gt;addMethods($value); break; } } return $cg; } public function __construct($name = null, $namespaceName = null, $flags = null, $extends = null, $interfaces = array(), $properties = array(), $methods = array(), $docBlock = null) { if ($name !== null) { $this-&gt;setName($name); } if ($namespaceName !== null) { $this-&gt;setNamespaceName($namespaceName); } if ($flags !== null) { $this-&gt;setFlags($flags); } if ($properties !== array()) { $this-&gt;addProperties($properties); } if ($extends !== null) { $this-&gt;setExtendedClass($extends); } if (is_array($interfaces)) { $this-&gt;setImplementedInterfaces($interfaces); } if ($methods !== array()) { $this-&gt;addMethods($methods); } if ($docBlock !== null) { $this-&gt;setDocBlock($docBlock); } } public function setName($name) { if (strstr($name, '\\')) { $namespace = substr($name, 0, strrpos($name, '\\')); $name = substr($name, strrpos($name, '\\') + 1); $this-&gt;setNamespaceName($namespace); } $this-&gt;name = $name; return $this; } public function getName() { return $this-&gt;name; } public function setNamespaceName($namespaceName) { $this-&gt;namespaceName = $namespaceName; return $this; } public function getNamespaceName() { return $this-&gt;namespaceName; } public function setContainingFileGenerator(FileGenerator $fileGenerator) { $this-&gt;containingFileGenerator = $fileGenerator; return $this; } public function getContainingFileGenerator() { return $this-&gt;containingFileGenerator; } public function setDocBlock(DocBlockGenerator $docBlock) { $this-&gt;docBlock = $docBlock; return $this; } public function getDocBlock() { return $this-&gt;docBlock; } public function setFlags($flags) { if (is_array($flags)) { $flagsArray = $flags; $flags = 0x00; foreach ($flagsArray as $flag) { $flags |= $flag; } } $this-&gt;flags = $flags; return $this; } public function addFlag($flag) { $this-&gt;setFlags($this-&gt;flags | $flag); return $this; } public function removeFlag($flag) { $this-&gt;setFlags($this-&gt;flags &amp; ~$flag); return $this; } public function setAbstract($isAbstract) { return (($isAbstract) ? $this-&gt;addFlag(self::FLAG_ABSTRACT) : $this-&gt;removeFlag(self::FLAG_ABSTRACT)); } public function isAbstract() { return (bool) ($this-&gt;flags &amp; self::FLAG_ABSTRACT); } public function setFinal($isFinal) { return (($isFinal) ? $this-&gt;addFlag(self::FLAG_FINAL) : $this-&gt;removeFlag(self::FLAG_FINAL)); } public function isFinal() { return ($this-&gt;flags &amp; self::FLAG_FINAL); } public function setExtendedClass($extendedClass) { $this-&gt;extendedClass = $extendedClass; return $this; } public function getExtendedClass() { return $this-&gt;extendedClass; } public function setImplementedInterfaces(array $implementedInterfaces) { $this-&gt;implementedInterfaces = $implementedInterfaces; return $this; } public function getImplementedInterfaces() { return $this-&gt;implementedInterfaces; } public function addProperties(array $properties) { foreach ($properties as $property) { if ($property instanceof PropertyGenerator) { $this-&gt;addPropertyFromGenerator($property); } else { if (is_string($property)) { $this-&gt;addProperty($property); } elseif (is_array($property)) { call_user_func_array(array($this, 'addProperty'), $property); } } } return $this; } public function addProperty($name, $defaultValue = null, $flags = PropertyGenerator::FLAG_PUBLIC) { if (!is_string($name)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects string for name', __METHOD__ )); } return $this-&gt;addPropertyFromGenerator(new PropertyGenerator($name, $defaultValue, $flags)); } public function addPropertyFromGenerator(PropertyGenerator $property) { $propertyName = $property-&gt;getName(); if (isset($this-&gt;properties[$propertyName])) { throw new Exception\InvalidArgumentException(sprintf( 'A property by name %s already exists in this class.', $propertyName )); } $this-&gt;properties[$propertyName] = $property; return $this; } public function addUse($use, $useAlias = null) { if (!empty($useAlias)) { $use .= ' as ' . $useAlias; } $this-&gt;uses[] = $use; } public function getProperties() { return $this-&gt;properties; } public function getProperty($propertyName) { foreach ($this-&gt;getProperties() as $property) { if ($property-&gt;getName() == $propertyName) { return $property; } } return false; } public function getUses() { return $this-&gt;uses; } public function hasProperty($propertyName) { return isset($this-&gt;properties[$propertyName]); } public function addMethods(array $methods) { foreach ($methods as $method) { if ($method instanceof MethodGenerator) { $this-&gt;addMethodFromGenerator($method); } else { if (is_string($method)) { $this-&gt;addMethod($method); } elseif (is_array($method)) { call_user_func_array(array($this, 'addMethod'), $method); } } } return $this; } public function addMethod($name = null, array $parameters = array(), $flags = MethodGenerator::FLAG_PUBLIC, $body = null, $docBlock = null) { if (!is_string($name)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects string for name', __METHOD__ )); } return $this-&gt;addMethodFromGenerator(new MethodGenerator($name, $parameters, $flags, $body, $docBlock)); } public function addMethodFromGenerator(MethodGenerator $method) { $methodName = $method-&gt;getName(); if (isset($this-&gt;methods[$methodName])) { throw new Exception\InvalidArgumentException(sprintf( 'A method by name %s already exists in this class.', $methodName )); } $this-&gt;methods[$methodName] = $method; return $this; } public function getMethods() { return $this-&gt;methods; } public function getMethod($methodName) { foreach ($this-&gt;getMethods() as $method) { if ($method-&gt;getName() == $methodName) { return $method; } } return false; } public function hasMethod($methodName) { return isset($this-&gt;methods[$methodName]); } public function isSourceDirty() { if (($docBlock = $this-&gt;getDocBlock()) &amp;&amp; $docBlock-&gt;isSourceDirty()) { return true; } foreach ($this-&gt;getProperties() as $property) { if ($property-&gt;isSourceDirty()) { return true; } } foreach ($this-&gt;getMethods() as $method) { if ($method-&gt;isSourceDirty()) { return true; } } return parent::isSourceDirty(); } public function generate() { if (!$this-&gt;isSourceDirty()) { $output = $this-&gt;getSourceContent(); if (!empty($output)) { return $output; } } $output = ''; if (null !== ($namespace = $this-&gt;getNamespaceName())) { $output .= 'namespace ' . $namespace . ';' . self::LINE_FEED . self::LINE_FEED; } $uses = $this-&gt;getUses(); if (!empty($uses)) { foreach ($uses as $use) { $output .= 'use ' . $use . ';' . self::LINE_FEED; } $output .= self::LINE_FEED; } if (null !== ($docBlock = $this-&gt;getDocBlock())) { $docBlock-&gt;setIndentation(''); $output .= $docBlock-&gt;generate(); } if ($this-&gt;isAbstract()) { $output .= 'abstract '; } $output .= 'class ' . $this-&gt;getName(); if (!empty($this-&gt;extendedClass)) { $output .= ' extends ' . $this-&gt;extendedClass; } $implemented = $this-&gt;getImplementedInterfaces(); if (!empty($implemented)) { $output .= ' implements ' . implode(', ', $implemented); } $output .= self::LINE_FEED . '{' . self::LINE_FEED . self::LINE_FEED; $properties = $this-&gt;getProperties(); if (!empty($properties)) { foreach ($properties as $property) { $output .= $property-&gt;generate() . self::LINE_FEED . self::LINE_FEED; } } $methods = $this-&gt;getMethods(); if (!empty($methods)) { foreach ($methods as $method) { $output .= $method-&gt;generate() . self::LINE_FEED; } } $output .= self::LINE_FEED . '}' . self::LINE_FEED; return $output; } } &lt;?php
 namespace Zend\Code\Generator; use Zend\Code\Generator\Exception\RuntimeException; class FileGeneratorRegistry { private static $fileCodeGenerators = array(); public static function registerFileCodeGenerator(FileGenerator $fileCodeGenerator, $fileName = null) { if ($fileName == null) { $fileName = $fileCodeGenerator-&gt;getFilename(); } if ($fileName == '') { throw new RuntimeException('FileName does not exist.'); } $fileName = str_replace(array('\\', '/'), DIRECTORY_SEPARATOR, $fileName); static::$fileCodeGenerators[$fileName] = $fileCodeGenerator; } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Exception; class DerivedClassScanner extends ClassScanner { protected $directoryScanner = null; protected $classScanner = null; protected $parentClassScanners = array(); protected $interfaceClassScanners = array(); public function __construct(ClassScanner $classScanner, DirectoryScanner $directoryScanner) { $this-&gt;classScanner = $classScanner; $this-&gt;directoryScanner = $directoryScanner; $currentScannerClass = $classScanner; while ($currentScannerClass &amp;&amp; $currentScannerClass-&gt;hasParentClass()) { $currentParentClassName = $currentScannerClass-&gt;getParentClass(); if ($directoryScanner-&gt;hasClass($currentParentClassName)) { $currentParentClass = $directoryScanner-&gt;getClass($currentParentClassName); $this-&gt;parentClassScanners[$currentParentClassName] = $currentParentClass; $currentScannerClass = $currentParentClass; } else { $currentScannerClass = false; } } foreach ($interfaces = $this-&gt;classScanner-&gt;getInterfaces() as $iName) { if ($directoryScanner-&gt;hasClass($iName)) { $this-&gt;interfaceClassScanners[$iName] = $directoryScanner-&gt;getClass($iName); } } } public function getName() { return $this-&gt;classScanner-&gt;getName(); } public function getShortName() { return $this-&gt;classScanner-&gt;getShortName(); } public function isInstantiable() { return $this-&gt;classScanner-&gt;isInstantiable(); } public function isFinal() { return $this-&gt;classScanner-&gt;isFinal(); } public function isAbstract() { return $this-&gt;classScanner-&gt;isAbstract(); } public function isInterface() { return $this-&gt;classScanner-&gt;isInterface(); } public function getParentClasses() { return array_keys($this-&gt;parentClassScanners); } public function hasParentClass() { return ($this-&gt;classScanner-&gt;getParentClass() != null); } public function getParentClass() { return $this-&gt;classScanner-&gt;getParentClass(); } public function getInterfaces($returnClassScanners = false) { if ($returnClassScanners) { return $this-&gt;interfaceClassScanners; } $interfaces = $this-&gt;classScanner-&gt;getInterfaces(); foreach ($this-&gt;parentClassScanners as $pClassScanner) { $interfaces = array_merge($interfaces, $pClassScanner-&gt;getInterfaces()); } return $interfaces; } public function getConstants() { $constants = $this-&gt;classScanner-&gt;getConstants(); foreach ($this-&gt;parentClassScanners as $pClassScanner) { $constants = array_merge($constants, $pClassScanner-&gt;getConstants()); } return $constants; } public function getProperties($returnScannerProperty = false) { $properties = $this-&gt;classScanner-&gt;getProperties($returnScannerProperty); foreach ($this-&gt;parentClassScanners as $pClassScanner) { $properties = array_merge($properties, $pClassScanner-&gt;getProperties($returnScannerProperty)); } return $properties; } public function getMethodNames() { $methods = $this-&gt;classScanner-&gt;getMethodNames(); foreach ($this-&gt;parentClassScanners as $pClassScanner) { $methods = array_merge($methods, $pClassScanner-&gt;getMethodNames()); } return $methods; } public function getMethods() { $methods = $this-&gt;classScanner-&gt;getMethods(); foreach ($this-&gt;parentClassScanners as $pClassScanner) { $methods = array_merge($methods, $pClassScanner-&gt;getMethods()); } return $methods; } public function getMethod($methodNameOrInfoIndex) { if ($this-&gt;classScanner-&gt;hasMethod($methodNameOrInfoIndex)) { return $this-&gt;classScanner-&gt;getMethod($methodNameOrInfoIndex); } foreach ($this-&gt;parentClassScanners as $pClassScanner) { if ($pClassScanner-&gt;hasMethod($methodNameOrInfoIndex)) { return $pClassScanner-&gt;getMethod($methodNameOrInfoIndex); } } throw new Exception\InvalidArgumentException(sprintf( 'Method %s not found in %s', $methodNameOrInfoIndex, $this-&gt;classScanner-&gt;getName() )); } public function hasMethod($name) { if ($this-&gt;classScanner-&gt;hasMethod($name)) { return true; } foreach ($this-&gt;parentClassScanners as $pClassScanner) { if ($pClassScanner-&gt;hasMethod($name)) { return true; } } return false; } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation; use Zend\Code\Exception; use Zend\Code\NameInformation; class PropertyScanner implements ScannerInterface { protected $isScanned = false; protected $tokens; protected $nameInformation; protected $class; protected $scannerClass; protected $lineStart; protected $isProtected = false; protected $isPublic = true; protected $isPrivate = false; protected $isStatic = false; protected $docComment; protected $name; protected $value; public function __construct(array $propertyTokens, NameInformation $nameInformation = null) { $this-&gt;tokens = $propertyTokens; $this-&gt;nameInformation = $nameInformation; } public function setClass($class) { $this-&gt;class = $class; } public function setScannerClass(ClassScanner $scannerClass) { $this-&gt;scannerClass = $scannerClass; } public function getClassScanner() { return $this-&gt;scannerClass; } public function getName() { $this-&gt;scan(); return $this-&gt;name; } public function isPublic() { $this-&gt;scan(); return $this-&gt;isPublic; } public function isPrivate() { $this-&gt;scan(); return $this-&gt;isPrivate; } public function isProtected() { $this-&gt;scan(); return $this-&gt;isProtected; } public function isStatic() { $this-&gt;scan(); return $this-&gt;isStatic; } public function getValue() { $this-&gt;scan(); return $this-&gt;value; } public function getDocComment() { $this-&gt;scan(); return $this-&gt;docComment; } public function getAnnotations(Annotation\AnnotationManager $annotationManager) { if (($docComment = $this-&gt;getDocComment()) == '') { return false; } return new AnnotationScanner($annotationManager, $docComment, $this-&gt;nameInformation); } public function __toString() { $this-&gt;scan(); return var_export($this, true); } protected function scan() { if ($this-&gt;isScanned) { return; } if (!$this-&gt;tokens) { throw new Exception\RuntimeException('No tokens were provided'); } $tokens = &amp;$this-&gt;tokens; reset($tokens); SCANNER_TOP: $token = current($tokens); if (!is_string($token)) { list($tokenType, $tokenContent, $tokenLine) = $token; switch ($tokenType) { case T_DOC_COMMENT: if ($this-&gt;docComment === null &amp;&amp; $this-&gt;name === null) { $this-&gt;docComment = $tokenContent; } goto SCANNER_CONTINUE; case T_VARIABLE: $this-&gt;name = ltrim($tokenContent, '$'); goto SCANNER_CONTINUE; case T_PUBLIC: goto SCANNER_CONTINUE; case T_PROTECTED: $this-&gt;isProtected = true; $this-&gt;isPublic = false; goto SCANNER_CONTINUE; case T_PRIVATE: $this-&gt;isPrivate = true; $this-&gt;isPublic = false; goto SCANNER_CONTINUE; case T_STATIC: $this-&gt;isStatic = true; goto SCANNER_CONTINUE; default: if ($this-&gt;name !== null &amp;&amp; trim($tokenContent) !== '') { $this-&gt;value .= (is_string($token)) ? $token : $tokenContent; if (substr($this-&gt;value, 0, 1) === '"' || substr($this-&gt;value, 0, 1) === "'") { $this-&gt;value = substr($this-&gt;value, 1, -1); } } goto SCANNER_CONTINUE; } } SCANNER_CONTINUE: if (next($this-&gt;tokens) === false) { goto SCANNER_END; } goto SCANNER_TOP; SCANNER_END: $this-&gt;isScanned = true; } } &lt;?php
 namespace Zend\Code\Scanner; use RecursiveDirectoryIterator; use RecursiveIteratorIterator; use Zend\Code\Exception; class DirectoryScanner implements ScannerInterface { protected $isScanned = false; protected $directories = array(); protected $fileScanners = array(); protected $classToFileScanner = null; public function __construct($directory = null) { if ($directory) { if (is_string($directory)) { $this-&gt;addDirectory($directory); } elseif (is_array($directory)) { foreach ($directory as $d) { $this-&gt;addDirectory($d); } } } } public function addDirectory($directory) { if ($directory instanceof DirectoryScanner) { $this-&gt;directories[] = $directory; } elseif (is_string($directory)) { $realDir = realpath($directory); if (!$realDir || !is_dir($realDir)) { throw new Exception\InvalidArgumentException(sprintf( 'Directory "%s" does not exist', $realDir )); } $this-&gt;directories[] = $realDir; } else { throw new Exception\InvalidArgumentException( 'The argument provided was neither a DirectoryScanner or directory path' ); } } public function addDirectoryScanner(DirectoryScanner $directoryScanner) { $this-&gt;addDirectory($directoryScanner); } public function addFileScanner(FileScanner $fileScanner) { $this-&gt;fileScanners[] = $fileScanner; } protected function scan() { if ($this-&gt;isScanned) { return; } foreach ($this-&gt;directories as $directory) { if ($directory instanceof DirectoryScanner) { $directory-&gt;scan(); if ($directory-&gt;fileScanners) { $this-&gt;fileScanners = array_merge($this-&gt;fileScanners, $directory-&gt;fileScanners); } } else { $rdi = new RecursiveDirectoryIterator($directory); foreach (new RecursiveIteratorIterator($rdi) as $item) { if ($item-&gt;isFile() &amp;&amp; pathinfo($item-&gt;getRealPath(), PATHINFO_EXTENSION) == 'php') { $this-&gt;fileScanners[] = new FileScanner($item-&gt;getRealPath()); } } } } $this-&gt;isScanned = true; } public function getNamespaces() { } public function getFiles($returnFileScanners = false) { $this-&gt;scan(); $return = array(); foreach ($this-&gt;fileScanners as $fileScanner) { $return[] = ($returnFileScanners) ? $fileScanner : $fileScanner-&gt;getFile(); } return $return; } public function getClassNames() { $this-&gt;scan(); if ($this-&gt;classToFileScanner === null) { $this-&gt;createClassToFileScannerCache(); } return array_keys($this-&gt;classToFileScanner); } public function getClasses($returnDerivedScannerClass = false) { $this-&gt;scan(); if ($this-&gt;classToFileScanner === null) { $this-&gt;createClassToFileScannerCache(); } $returnClasses = array(); foreach ($this-&gt;classToFileScanner as $className =&gt; $fsIndex) { $classScanner = $this-&gt;fileScanners[$fsIndex]-&gt;getClass($className); if ($returnDerivedScannerClass) { $classScanner = new DerivedClassScanner($classScanner, $this); } $returnClasses[] = $classScanner; } return $returnClasses; } public function hasClass($class) { $this-&gt;scan(); if ($this-&gt;classToFileScanner === null) { $this-&gt;createClassToFileScannerCache(); } return (isset($this-&gt;classToFileScanner[$class])); } public function getClass($class, $returnDerivedScannerClass = false) { $this-&gt;scan(); if ($this-&gt;classToFileScanner === null) { $this-&gt;createClassToFileScannerCache(); } if (!isset($this-&gt;classToFileScanner[$class])) { throw new Exception\InvalidArgumentException('Class not found.'); } $fs = $this-&gt;fileScanners[$this-&gt;classToFileScanner[$class]]; $returnClass = $fs-&gt;getClass($class); if (($returnClass instanceof ClassScanner) &amp;&amp; $returnDerivedScannerClass) { return new DerivedClassScanner($returnClass, $this); } return $returnClass; } protected function createClassToFileScannerCache() { if ($this-&gt;classToFileScanner !== null) { return; } $this-&gt;classToFileScanner = array(); foreach ($this-&gt;fileScanners as $fsIndex =&gt; $fileScanner) { $fsClasses = $fileScanner-&gt;getClassNames(); foreach ($fsClasses as $fsClassName) { $this-&gt;classToFileScanner[$fsClassName] = $fsIndex; } } } public static function export() { } public function __toString() { } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation; use Zend\Code\Exception; use Zend\Code\NameInformation; class ClassScanner implements ScannerInterface { protected $isScanned = false; protected $docComment = null; protected $name = null; protected $shortName = null; protected $lineStart = null; protected $lineEnd = null; protected $isFinal = false; protected $isAbstract = false; protected $isInterface = false; protected $parentClass = null; protected $shortParentClass = null; protected $interfaces = array(); protected $shortInterfaces = array(); protected $tokens = array(); protected $nameInformation = null; protected $infos = array(); public function __construct(array $classTokens, NameInformation $nameInformation = null) { $this-&gt;tokens = $classTokens; $this-&gt;nameInformation = $nameInformation; } public function getAnnotations(Annotation\AnnotationManager $annotationManager) { if (($docComment = $this-&gt;getDocComment()) == '') { return false; } return new AnnotationScanner($annotationManager, $docComment, $this-&gt;nameInformation); } public function getDocComment() { $this-&gt;scan(); return $this-&gt;docComment; } public function getDocBlock() { if (!$docComment = $this-&gt;getDocComment()) { return false; } return new DocBlockScanner($docComment); } public function getName() { $this-&gt;scan(); return $this-&gt;name; } public function getShortName() { $this-&gt;scan(); return $this-&gt;shortName; } public function getLineStart() { $this-&gt;scan(); return $this-&gt;lineStart; } public function getLineEnd() { $this-&gt;scan(); return $this-&gt;lineEnd; } public function isFinal() { $this-&gt;scan(); return $this-&gt;isFinal; } public function isInstantiable() { $this-&gt;scan(); return (!$this-&gt;isAbstract &amp;&amp; !$this-&gt;isInterface); } public function isAbstract() { $this-&gt;scan(); return $this-&gt;isAbstract; } public function isInterface() { $this-&gt;scan(); return $this-&gt;isInterface; } public function hasParentClass() { $this-&gt;scan(); return ($this-&gt;parentClass != null); } public function getParentClass() { $this-&gt;scan(); return $this-&gt;parentClass; } public function getInterfaces() { $this-&gt;scan(); return $this-&gt;interfaces; } public function getConstants() { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'constant') { continue; } $return[] = $info['name']; } return $return; } public function getPropertyNames() { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'property') { continue; } $return[] = $info['name']; } return $return; } public function getProperties() { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'property') { continue; } $return[] = $this-&gt;getProperty($info['name']); } return $return; } public function getProperty($propertyNameOrInfoIndex) { $this-&gt;scan(); if (is_int($propertyNameOrInfoIndex)) { $info = $this-&gt;infos[$propertyNameOrInfoIndex]; if ($info['type'] != 'property') { throw new Exception\InvalidArgumentException('Index of info offset is not about a property'); } } elseif (is_string($propertyNameOrInfoIndex)) { $propertyFound = false; foreach ($this-&gt;infos as $info) { if ($info['type'] === 'property' &amp;&amp; $info['name'] === $propertyNameOrInfoIndex) { $propertyFound = true; break; } } if (!$propertyFound) { return false; } } else { throw new Exception\InvalidArgumentException('Invalid property name of info index type.  Must be of type int or string'); } if (!isset($info)) { return false; } $p = new PropertyScanner( array_slice($this-&gt;tokens, $info['tokenStart'], $info['tokenEnd'] - $info['tokenStart'] + 1), $this-&gt;nameInformation ); $p-&gt;setClass($this-&gt;name); $p-&gt;setScannerClass($this); return $p; } public function getMethodNames() { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'method') { continue; } $return[] = $info['name']; } return $return; } public function getMethods() { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'method') { continue; } $return[] = $this-&gt;getMethod($info['name']); } return $return; } public function getMethod($methodNameOrInfoIndex) { $this-&gt;scan(); if (is_int($methodNameOrInfoIndex)) { $info = $this-&gt;infos[$methodNameOrInfoIndex]; if ($info['type'] != 'method') { throw new Exception\InvalidArgumentException('Index of info offset is not about a method'); } } elseif (is_string($methodNameOrInfoIndex)) { $methodFound = false; foreach ($this-&gt;infos as $info) { if ($info['type'] === 'method' &amp;&amp; $info['name'] === $methodNameOrInfoIndex) { $methodFound = true; break; } } if (!$methodFound) { return false; } } if (!isset($info)) { die('Massive Failure, test this'); } $m = new MethodScanner( array_slice($this-&gt;tokens, $info['tokenStart'], $info['tokenEnd'] - $info['tokenStart'] + 1), $this-&gt;nameInformation ); $m-&gt;setClass($this-&gt;name); $m-&gt;setScannerClass($this); return $m; } public function hasMethod($name) { $this-&gt;scan(); foreach ($this-&gt;infos as $info) { if ($info['type'] === 'method' &amp;&amp; $info['name'] === $name) { return true; } } return false; } public static function export() { } public function __toString() { } protected function scan() { if ($this-&gt;isScanned) { return; } if (!$this-&gt;tokens) { throw new Exception\RuntimeException('No tokens were provided'); } $tokens = &amp;$this-&gt;tokens; $infos = &amp;$this-&gt;infos; $tokenIndex = null; $token = null; $tokenType = null; $tokenContent = null; $tokenLine = null; $namespace = null; $infoIndex = 0; $braceCount = 0; $MACRO_TOKEN_ADVANCE = function () use (&amp;$tokens, &amp;$tokenIndex, &amp;$token, &amp;$tokenType, &amp;$tokenContent, &amp;$tokenLine) { static $lastTokenArray = null; $tokenIndex = ($tokenIndex === null) ? 0 : $tokenIndex + 1; if (!isset($tokens[$tokenIndex])) { $token = false; $tokenContent = false; $tokenType = false; $tokenLine = false; return false; } $token = $tokens[$tokenIndex]; if (is_string($token)) { $tokenType = null; $tokenContent = $token; $tokenLine = $tokenLine + substr_count($lastTokenArray[1], "\n"); } else { $lastTokenArray = $token; list($tokenType, $tokenContent, $tokenLine) = $token; } return $tokenIndex; }; $MACRO_INFO_ADVANCE = function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) { $infos[$infoIndex]['tokenEnd'] = $tokenIndex; $infos[$infoIndex]['lineEnd'] = $tokenLine; $infoIndex++; return $infoIndex; }; $MACRO_TOKEN_ADVANCE(); SCANNER_TOP: switch ($tokenType) { case T_DOC_COMMENT: $this-&gt;docComment = $tokenContent; goto SCANNER_CONTINUE; case T_FINAL: case T_ABSTRACT: case T_CLASS: case T_INTERFACE: $classContext = null; $classInterfaceIndex = 0; SCANNER_CLASS_INFO_TOP: if (is_string($tokens[$tokenIndex + 1]) &amp;&amp; $tokens[$tokenIndex + 1] === '{') { goto SCANNER_CLASS_INFO_END; } $this-&gt;lineStart = $tokenLine; switch ($tokenType) { case T_FINAL: $this-&gt;isFinal = true; goto SCANNER_CLASS_INFO_CONTINUE; case T_ABSTRACT: $this-&gt;isAbstract = true; goto SCANNER_CLASS_INFO_CONTINUE; case T_INTERFACE: $this-&gt;isInterface = true; case T_CLASS: $this-&gt;shortName = $tokens[$tokenIndex + 2][1]; if ($this-&gt;nameInformation &amp;&amp; $this-&gt;nameInformation-&gt;hasNamespace()) { $this-&gt;name = $this-&gt;nameInformation-&gt;getNamespace() . '\\' . $this-&gt;shortName; } else { $this-&gt;name = $this-&gt;shortName; } goto SCANNER_CLASS_INFO_CONTINUE; case T_NS_SEPARATOR: case T_STRING: switch ($classContext) { case T_EXTENDS: $this-&gt;shortParentClass .= $tokenContent; break; case T_IMPLEMENTS: $this-&gt;shortInterfaces[$classInterfaceIndex] .= $tokenContent; break; } goto SCANNER_CLASS_INFO_CONTINUE; case T_EXTENDS: case T_IMPLEMENTS: $classContext = $tokenType; if (($this-&gt;isInterface &amp;&amp; $classContext === T_EXTENDS) || $classContext === T_IMPLEMENTS) { $this-&gt;shortInterfaces[$classInterfaceIndex] = ''; } elseif (!$this-&gt;isInterface &amp;&amp; $classContext === T_EXTENDS) { $this-&gt;shortParentClass = ''; } goto SCANNER_CLASS_INFO_CONTINUE; case null: if ($classContext == T_IMPLEMENTS &amp;&amp; $tokenContent == ',') { $classInterfaceIndex++; $this-&gt;shortInterfaces[$classInterfaceIndex] = ''; } } SCANNER_CLASS_INFO_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_CLASS_INFO_TOP; SCANNER_CLASS_INFO_END: goto SCANNER_CONTINUE; } if ($tokenType === null &amp;&amp; $tokenContent === '{' &amp;&amp; $braceCount === 0) { $braceCount++; if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } SCANNER_CLASS_BODY_TOP: if ($braceCount === 0) { goto SCANNER_CLASS_BODY_END; } switch ($tokenType) { case T_CONST: $infos[$infoIndex] = array( 'type' =&gt; 'constant', 'tokenStart' =&gt; $tokenIndex, 'tokenEnd' =&gt; null, 'lineStart' =&gt; $tokenLine, 'lineEnd' =&gt; null, 'name' =&gt; null, 'value' =&gt; null, ); SCANNER_CLASS_BODY_CONST_TOP: if ($tokenContent === ';') { goto SCANNER_CLASS_BODY_CONST_END; } if ($tokenType === T_STRING) { $infos[$infoIndex]['name'] = $tokenContent; } SCANNER_CLASS_BODY_CONST_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_CLASS_BODY_CONST_TOP; SCANNER_CLASS_BODY_CONST_END: $MACRO_INFO_ADVANCE(); goto SCANNER_CLASS_BODY_CONTINUE; case T_DOC_COMMENT: case T_PUBLIC: case T_PROTECTED: case T_PRIVATE: case T_ABSTRACT: case T_FINAL: case T_VAR: case T_FUNCTION: $infos[$infoIndex] = array( 'type' =&gt; null, 'tokenStart' =&gt; $tokenIndex, 'tokenEnd' =&gt; null, 'lineStart' =&gt; $tokenLine, 'lineEnd' =&gt; null, 'name' =&gt; null, ); $memberContext = null; $methodBodyStarted = false; SCANNER_CLASS_BODY_MEMBER_TOP: if ($memberContext === 'method') { switch ($tokenContent) { case '{': $methodBodyStarted = true; $braceCount++; goto SCANNER_CLASS_BODY_MEMBER_CONTINUE; case '}': $braceCount--; goto SCANNER_CLASS_BODY_MEMBER_CONTINUE; } } if ($memberContext !== null) { if ( ($memberContext === 'property' &amp;&amp; $tokenContent === ';') || ($memberContext === 'method' &amp;&amp; $methodBodyStarted &amp;&amp; $braceCount === 1) || ($memberContext === 'method' &amp;&amp; $this-&gt;isInterface &amp;&amp; $tokenContent === ';') ) { goto SCANNER_CLASS_BODY_MEMBER_END; } } switch ($tokenType) { case T_VARIABLE: if ($memberContext === null) { $memberContext = 'property'; $infos[$infoIndex]['type'] = 'property'; $infos[$infoIndex]['name'] = ltrim($tokenContent, '$'); } goto SCANNER_CLASS_BODY_MEMBER_CONTINUE; case T_FUNCTION: $memberContext = 'method'; $infos[$infoIndex]['type'] = 'method'; goto SCANNER_CLASS_BODY_MEMBER_CONTINUE; case T_STRING: if ($memberContext === 'method' &amp;&amp; $infos[$infoIndex]['name'] === null) { $infos[$infoIndex]['name'] = $tokenContent; } goto SCANNER_CLASS_BODY_MEMBER_CONTINUE; } SCANNER_CLASS_BODY_MEMBER_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_CLASS_BODY_MEMBER_TOP; SCANNER_CLASS_BODY_MEMBER_END: $memberContext = null; $MACRO_INFO_ADVANCE(); goto SCANNER_CLASS_BODY_CONTINUE; case null: switch ($tokenContent) { case '{': $braceCount++; goto SCANNER_CLASS_BODY_CONTINUE; case '}': $braceCount--; goto SCANNER_CLASS_BODY_CONTINUE; } } SCANNER_CLASS_BODY_CONTINUE: if ($braceCount === 0 || $MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_CONTINUE; } goto SCANNER_CLASS_BODY_TOP; SCANNER_CLASS_BODY_END: goto SCANNER_CONTINUE; } SCANNER_CONTINUE: if ($tokenContent === '}') { $this-&gt;lineEnd = $tokenLine; } if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_TOP; SCANNER_END: if ($this-&gt;nameInformation) { if ($this-&gt;shortParentClass) { $this-&gt;parentClass = $this-&gt;nameInformation-&gt;resolveName($this-&gt;shortParentClass); } if ($this-&gt;shortInterfaces) { foreach ($this-&gt;shortInterfaces as $siIndex =&gt; $si) { $this-&gt;interfaces[$siIndex] = $this-&gt;nameInformation-&gt;resolveName($si); } } } else { $this-&gt;parentClass = $this-&gt;shortParentClass; $this-&gt;interfaces = $this-&gt;shortInterfaces; } $this-&gt;isScanned = true; return; } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\NameInformation; class DocBlockScanner implements ScannerInterface { protected $isScanned = false; protected $docComment = null; protected $nameInformation = null; protected $annotationManager = null; protected $shortDescription = null; protected $longDescription = ''; protected $tags = array(); protected $annotations = array(); public function __construct($docComment, NameInformation $nameInformation = null) { $this-&gt;docComment = $docComment; $this-&gt;nameInformation = $nameInformation; } public function getShortDescription() { $this-&gt;scan(); return $this-&gt;shortDescription; } public function getLongDescription() { $this-&gt;scan(); return $this-&gt;longDescription; } public function getTags() { $this-&gt;scan(); return $this-&gt;tags; } public function getAnnotations() { $this-&gt;scan(); return $this-&gt;annotations; } protected function scan() { if ($this-&gt;isScanned) { return; } $mode = 1; $tokens = $this-&gt;tokenize(); $tagIndex = null; reset($tokens); SCANNER_TOP: $token = current($tokens); switch ($token[0]) { case 'DOCBLOCK_NEWLINE': if ($this-&gt;shortDescription != '' &amp;&amp; $tagIndex === null) { $mode = 2; } else { $this-&gt;longDescription .= $token[1]; } goto SCANNER_CONTINUE; case 'DOCBLOCK_WHITESPACE': case 'DOCBLOCK_TEXT': if ($tagIndex !== null) { $this-&gt;tags[$tagIndex]['value'] .= ($this-&gt;tags[$tagIndex]['value'] == '') ? $token[1] : ' ' . $token[1]; goto SCANNER_CONTINUE; } elseif ($mode &lt;= 2) { if ($mode == 1) { $this-&gt;shortDescription .= $token[1]; } else { $this-&gt;longDescription .= $token[1]; } goto SCANNER_CONTINUE; } case 'DOCBLOCK_TAG': array_push($this-&gt;tags, array('name' =&gt; $token[1], 'value' =&gt; '')); end($this-&gt;tags); $tagIndex = key($this-&gt;tags); $mode = 3; goto SCANNER_CONTINUE; case 'DOCBLOCK_COMMENTEND': goto SCANNER_END; } SCANNER_CONTINUE: if (next($tokens) === false) { goto SCANNER_END; } goto SCANNER_TOP; SCANNER_END: $this-&gt;shortDescription = rtrim($this-&gt;shortDescription); $this-&gt;longDescription = rtrim($this-&gt;longDescription); $this-&gt;isScanned = true; } protected function tokenize() { static $CONTEXT_INSIDE_DOCBLOCK = 0x01; static $CONTEXT_INSIDE_ASTERISK = 0x02; $context = 0x00; $stream = $this-&gt;docComment; $streamIndex = null; $tokens = array(); $tokenIndex = null; $currentChar = null; $currentWord = null; $currentLine = null; $MACRO_STREAM_ADVANCE_CHAR = function ($positionsForward = 1) use (&amp;$stream, &amp;$streamIndex, &amp;$currentChar, &amp;$currentWord, &amp;$currentLine) { $positionsForward = ($positionsForward &gt; 0) ? $positionsForward : 1; $streamIndex = ($streamIndex === null) ? 0 : $streamIndex + $positionsForward; if (!isset($stream[$streamIndex])) { $currentChar = false; return false; } $currentChar = $stream[$streamIndex]; $matches = array(); $currentLine = (preg_match('#(.*)\n#', $stream, $matches, null, $streamIndex) === 1) ? $matches[1] : substr($stream, $streamIndex); if ($currentChar === ' ') { $currentWord = (preg_match('#( +)#', $currentLine, $matches) === 1) ? $matches[1] : $currentLine; } else { $currentWord = (($matches = strpos($currentLine, ' ')) !== false) ? substr($currentLine, 0, $matches) : $currentLine; } return $currentChar; }; $MACRO_STREAM_ADVANCE_WORD = function () use (&amp;$currentWord, &amp;$MACRO_STREAM_ADVANCE_CHAR) { return $MACRO_STREAM_ADVANCE_CHAR(strlen($currentWord)); }; $MACRO_STREAM_ADVANCE_LINE = function () use (&amp;$currentLine, &amp;$MACRO_STREAM_ADVANCE_CHAR) { return $MACRO_STREAM_ADVANCE_CHAR(strlen($currentLine)); }; $MACRO_TOKEN_ADVANCE = function () use (&amp;$tokenIndex, &amp;$tokens) { $tokenIndex = ($tokenIndex === null) ? 0 : $tokenIndex + 1; $tokens[$tokenIndex] = array('DOCBLOCK_UNKNOWN', ''); }; $MACRO_TOKEN_SET_TYPE = function ($type) use (&amp;$tokenIndex, &amp;$tokens) { $tokens[$tokenIndex][0] = $type; }; $MACRO_TOKEN_APPEND_CHAR = function () use (&amp;$currentChar, &amp;$tokens, &amp;$tokenIndex) { $tokens[$tokenIndex][1] .= $currentChar; }; $MACRO_TOKEN_APPEND_WORD = function () use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) { $tokens[$tokenIndex][1] .= $currentWord; }; $MACRO_TOKEN_APPEND_WORD_PARTIAL = function ($length) use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) { $tokens[$tokenIndex][1] .= substr($currentWord, 0, $length); }; $MACRO_TOKEN_APPEND_LINE = function () use (&amp;$currentLine, &amp;$tokens, &amp;$tokenIndex) { $tokens[$tokenIndex][1] .= $currentLine; }; $MACRO_STREAM_ADVANCE_CHAR(); $MACRO_TOKEN_ADVANCE(); TOKENIZER_TOP: if ($context === 0x00 &amp;&amp; $currentChar === '/' &amp;&amp; $currentWord === '/**') { $MACRO_TOKEN_SET_TYPE('DOCBLOCK_COMMENTSTART'); $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); $context |= $CONTEXT_INSIDE_DOCBLOCK; $context |= $CONTEXT_INSIDE_ASTERISK; if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($context &amp; $CONTEXT_INSIDE_DOCBLOCK &amp;&amp; $currentWord === '*/') { $MACRO_TOKEN_SET_TYPE('DOCBLOCK_COMMENTEND'); $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); $context &amp;= ~$CONTEXT_INSIDE_DOCBLOCK; if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === ' ' || $currentChar === "\t") { $MACRO_TOKEN_SET_TYPE(($context &amp; $CONTEXT_INSIDE_ASTERISK) ? 'DOCBLOCK_WHITESPACE' : 'DOCBLOCK_WHITESPACE_INDENT'); $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === '*') { if (($context &amp; $CONTEXT_INSIDE_DOCBLOCK) &amp;&amp; ($context &amp; $CONTEXT_INSIDE_ASTERISK)) { $MACRO_TOKEN_SET_TYPE('DOCBLOCK_TEXT'); } else { $MACRO_TOKEN_SET_TYPE('DOCBLOCK_ASTERISK'); $context |= $CONTEXT_INSIDE_ASTERISK; } $MACRO_TOKEN_APPEND_CHAR(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === '@') { $MACRO_TOKEN_SET_TYPE('DOCBLOCK_TAG'); $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === "\n") { $MACRO_TOKEN_SET_TYPE('DOCBLOCK_NEWLINE'); $MACRO_TOKEN_APPEND_CHAR(); $MACRO_TOKEN_ADVANCE(); $context &amp;= ~$CONTEXT_INSIDE_ASTERISK; if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } $MACRO_TOKEN_SET_TYPE('DOCBLOCK_TEXT'); $MACRO_TOKEN_APPEND_LINE(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_LINE() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; TOKENIZER_END: array_pop($tokens); return $tokens; } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation\AnnotationCollection; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\NameInformation; class AnnotationScanner extends AnnotationCollection implements ScannerInterface { protected $isScanned = false; protected $docComment = null; protected $nameInformation = null; protected $annotationManager = null; protected $annotations = array(); public function __construct(AnnotationManager $annotationManager, $docComment, NameInformation $nameInformation = null) { $this-&gt;annotationManager = $annotationManager; $this-&gt;docComment = $docComment; $this-&gt;nameInformation = $nameInformation; $this-&gt;scan($this-&gt;tokenize()); } public function setNameInformation(NameInformation $nameInformation) { $this-&gt;nameInformation = $nameInformation; } protected function scan(array $tokens) { $annotations = array(); $annotationIndex = -1; $contentEnd = false; reset($tokens); SCANNER_TOP: $token = current($tokens); switch ($token[0]) { case 'ANNOTATION_CLASS': $contentEnd = false; $annotationIndex++; $class = substr($token[1], 1); $class = $this-&gt;nameInformation-&gt;resolveName($class); $annotations[$annotationIndex] = array($class, null); goto SCANNER_CONTINUE; case 'ANNOTATION_CONTENT_START': $annotations[$annotationIndex][1] = ''; case 'ANNOTATION_CONTENT_END': case 'ANNOTATION_CONTENT': case 'ANNOTATION_WHITESPACE': case 'ANNOTATION_NEWLINE': if (!$contentEnd &amp;&amp; isset($annotations[$annotationIndex]) &amp;&amp; is_string($annotations[$annotationIndex][1])) { $annotations[$annotationIndex][1] .= $token[1]; } if ($token[0] === 'ANNOTATION_CONTENT_END') { $contentEnd = true; } goto SCANNER_CONTINUE; } SCANNER_CONTINUE: if (next($tokens) === false) { goto SCANNER_END; } goto SCANNER_TOP; SCANNER_END: foreach ($annotations as $annotation) { $annotation[] = '@' . $annotation[0] . $annotation[1]; $annotationObject = $this-&gt;annotationManager-&gt;createAnnotation($annotation); if ($annotationObject) { $this-&gt;append($annotationObject); } } } protected function tokenize() { static $CONTEXT_DOCBLOCK = 0x01; static $CONTEXT_ASTERISK = 0x02; static $CONTEXT_CLASS = 0x04; static $CONTEXT_CONTENT = 0x08; $context = 0x00; $stream = $this-&gt;docComment; $streamIndex = null; $tokens = array(); $tokenIndex = null; $currentChar = null; $currentWord = null; $currentLine = null; $annotationParentCount = 0; $MACRO_STREAM_ADVANCE_CHAR = function ($positionsForward = 1) use (&amp;$stream, &amp;$streamIndex, &amp;$currentChar, &amp;$currentWord, &amp;$currentLine) { $positionsForward = ($positionsForward &gt; 0) ? $positionsForward : 1; $streamIndex = ($streamIndex === null) ? 0 : $streamIndex + $positionsForward; if (!isset($stream[$streamIndex])) { $currentChar = false; return false; } $currentChar = $stream[$streamIndex]; $matches = array(); $currentLine = (preg_match('#(.*)\n#', $stream, $matches, null, $streamIndex) === 1) ? $matches[1] : substr($stream, $streamIndex); if ($currentChar === ' ') { $currentWord = (preg_match('#( +)#', $currentLine, $matches) === 1) ? $matches[1] : $currentLine; } else { $currentWord = (($matches = strpos($currentLine, ' ')) !== false) ? substr($currentLine, 0, $matches) : $currentLine; } return $currentChar; }; $MACRO_STREAM_ADVANCE_WORD = function () use (&amp;$currentWord, &amp;$MACRO_STREAM_ADVANCE_CHAR) { return $MACRO_STREAM_ADVANCE_CHAR(strlen($currentWord)); }; $MACRO_STREAM_ADVANCE_LINE = function () use (&amp;$currentLine, &amp;$MACRO_STREAM_ADVANCE_CHAR) { return $MACRO_STREAM_ADVANCE_CHAR(strlen($currentLine)); }; $MACRO_TOKEN_ADVANCE = function () use (&amp;$tokenIndex, &amp;$tokens) { $tokenIndex = ($tokenIndex === null) ? 0 : $tokenIndex + 1; $tokens[$tokenIndex] = array('ANNOTATION_UNKNOWN', ''); }; $MACRO_TOKEN_SET_TYPE = function ($type) use (&amp;$tokenIndex, &amp;$tokens) { $tokens[$tokenIndex][0] = $type; }; $MACRO_TOKEN_APPEND_CHAR = function () use (&amp;$currentChar, &amp;$tokens, &amp;$tokenIndex) { $tokens[$tokenIndex][1] .= $currentChar; }; $MACRO_TOKEN_APPEND_WORD = function () use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) { $tokens[$tokenIndex][1] .= $currentWord; }; $MACRO_TOKEN_APPEND_LINE = function () use (&amp;$currentLine, &amp;$tokens, &amp;$tokenIndex) { $tokens[$tokenIndex][1] .= $currentLine; }; $MACRO_HAS_CONTEXT = function ($which) use (&amp;$context) { return (($context &amp; $which) === $which); }; $MACRO_STREAM_ADVANCE_CHAR(); $MACRO_TOKEN_ADVANCE(); TOKENIZER_TOP: if ($context === 0x00 &amp;&amp; $currentChar === '/' &amp;&amp; $currentWord === '/**') { $MACRO_TOKEN_SET_TYPE('ANNOTATION_COMMENTSTART'); $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); $context |= $CONTEXT_DOCBLOCK; $context |= $CONTEXT_ASTERISK; if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($MACRO_HAS_CONTEXT($CONTEXT_CLASS)) { if (in_array($currentChar, array(' ', '(', "\n"))) { $context &amp;= ~$CONTEXT_CLASS; $MACRO_TOKEN_ADVANCE(); } else { $MACRO_TOKEN_APPEND_CHAR(); if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } } if ($currentChar === "\n") { $MACRO_TOKEN_SET_TYPE('ANNOTATION_NEWLINE'); $MACRO_TOKEN_APPEND_CHAR(); $MACRO_TOKEN_ADVANCE(); $context &amp;= ~$CONTEXT_ASTERISK; $context &amp;= ~$CONTEXT_CLASS; if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === ' ') { $MACRO_TOKEN_SET_TYPE(($MACRO_HAS_CONTEXT($CONTEXT_ASTERISK)) ? 'ANNOTATION_WHITESPACE' : 'ANNOTATION_WHITESPACE_INDENT'); $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($MACRO_HAS_CONTEXT($CONTEXT_CONTENT) &amp;&amp; $MACRO_HAS_CONTEXT($CONTEXT_ASTERISK)) { $MACRO_TOKEN_SET_TYPE('ANNOTATION_CONTENT'); $annotationParentCount += substr_count($currentWord, '('); $annotationParentCount -= substr_count($currentWord, ')'); if ($annotationParentCount === 0) { $context &amp;= ~$CONTEXT_CONTENT; $MACRO_TOKEN_SET_TYPE('ANNOTATION_CONTENT_END'); } $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === '(' &amp;&amp; $tokens[$tokenIndex - 1][0] === 'ANNOTATION_CLASS') { $context |= $CONTEXT_CONTENT; $annotationParentCount = 1; $MACRO_TOKEN_SET_TYPE('ANNOTATION_CONTENT_START'); $MACRO_TOKEN_APPEND_CHAR(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($MACRO_HAS_CONTEXT($CONTEXT_DOCBLOCK) &amp;&amp; $currentWord === '*/') { $MACRO_TOKEN_SET_TYPE('ANNOTATION_COMMENTEND'); $MACRO_TOKEN_APPEND_WORD(); $MACRO_TOKEN_ADVANCE(); $context &amp;= ~$CONTEXT_DOCBLOCK; if ($MACRO_STREAM_ADVANCE_WORD() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === '*') { if ($MACRO_HAS_CONTEXT($CONTEXT_DOCBLOCK) &amp;&amp; ($MACRO_HAS_CONTEXT($CONTEXT_ASTERISK))) { $MACRO_TOKEN_SET_TYPE('ANNOTATION_IGNORE'); } else { $MACRO_TOKEN_SET_TYPE('ANNOTATION_ASTERISK'); $context |= $CONTEXT_ASTERISK; } $MACRO_TOKEN_APPEND_CHAR(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } if ($currentChar === '@') { $MACRO_TOKEN_SET_TYPE('ANNOTATION_CLASS'); $context |= $CONTEXT_CLASS; $MACRO_TOKEN_APPEND_CHAR(); if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } goto TOKENIZER_TOP; } TOKENIZER_CONTINUE: if ($context &amp;&amp; $CONTEXT_CONTENT) { $MACRO_TOKEN_APPEND_CHAR(); if ($MACRO_STREAM_ADVANCE_CHAR() === false) { goto TOKENIZER_END; } } else { $MACRO_TOKEN_SET_TYPE('ANNOTATION_IGNORE'); $MACRO_TOKEN_APPEND_LINE(); $MACRO_TOKEN_ADVANCE(); if ($MACRO_STREAM_ADVANCE_LINE() === false) { goto TOKENIZER_END; } } goto TOKENIZER_TOP; TOKENIZER_END: array_pop($tokens); return $tokens; } } &lt;?php
 namespace Zend\Code\Scanner; class ValueScanner { } &lt;?php
 namespace Zend\Code\Scanner; class FunctionScanner { } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\NameInformation; class ParameterScanner { protected $isScanned = false; protected $declaringScannerClass = null; protected $declaringClass = null; protected $declaringScannerFunction = null; protected $declaringFunction = null; protected $defaultValue = null; protected $class = null; protected $name = null; protected $position = null; protected $isArray = false; protected $isDefaultValueAvailable = false; protected $isOptional = false; protected $isPassedByReference = false; protected $tokens = null; protected $nameInformation = null; public function __construct(array $parameterTokens, NameInformation $nameInformation = null) { $this-&gt;tokens = $parameterTokens; $this-&gt;nameInformation = $nameInformation; } public function setDeclaringClass($class) { $this-&gt;declaringClass = (string) $class; } public function setDeclaringScannerClass(ClassScanner $scannerClass) { $this-&gt;declaringScannerClass = $scannerClass; } public function setDeclaringFunction($function) { $this-&gt;declaringFunction = $function; } public function setDeclaringScannerFunction(MethodScanner $scannerFunction) { $this-&gt;declaringScannerFunction = $scannerFunction; } public function setPosition($position) { $this-&gt;position = $position; } protected function scan() { if ($this-&gt;isScanned) { return; } $tokens = &amp;$this-&gt;tokens; reset($tokens); SCANNER_TOP: $token = current($tokens); if (is_string($token)) { if ($token === '&amp;') { $this-&gt;isPassedByReference = true; goto SCANNER_CONTINUE; } if ($token === '=') { $this-&gt;isOptional = true; $this-&gt;isDefaultValueAvailable = true; goto SCANNER_CONTINUE; } } else { if ($this-&gt;name === null &amp;&amp; ($token[0] === T_STRING || $token[0] === T_NS_SEPARATOR)) { $this-&gt;class .= $token[1]; goto SCANNER_CONTINUE; } if ($token[0] === T_VARIABLE) { $this-&gt;name = ltrim($token[1], '$'); goto SCANNER_CONTINUE; } } if ($this-&gt;name !== null) { $this-&gt;defaultValue .= (is_string($token)) ? $token : $token[1]; } SCANNER_CONTINUE: if (next($this-&gt;tokens) === false) { goto SCANNER_END; } goto SCANNER_TOP; SCANNER_END: if ($this-&gt;class &amp;&amp; $this-&gt;nameInformation) { $this-&gt;class = $this-&gt;nameInformation-&gt;resolveName($this-&gt;class); } $this-&gt;isScanned = true; } public function getDeclaringScannerClass() { return $this-&gt;declaringScannerClass; } public function getDeclaringClass() { return $this-&gt;declaringClass; } public function getDeclaringScannerFunction() { return $this-&gt;declaringScannerFunction; } public function getDeclaringFunction() { return $this-&gt;declaringFunction; } public function getDefaultValue() { $this-&gt;scan(); return $this-&gt;defaultValue; } public function getClass() { $this-&gt;scan(); return $this-&gt;class; } public function getName() { $this-&gt;scan(); return $this-&gt;name; } public function getPosition() { $this-&gt;scan(); return $this-&gt;position; } public function isArray() { $this-&gt;scan(); return $this-&gt;isArray; } public function isDefaultValueAvailable() { $this-&gt;scan(); return $this-&gt;isDefaultValueAvailable; } public function isOptional() { $this-&gt;scan(); return $this-&gt;isOptional; } public function isPassedByReference() { $this-&gt;scan(); return $this-&gt;isPassedByReference; } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Exception; use Zend\Code\NameInformation; class CachingFileScanner extends FileScanner { protected static $cache = array(); protected $fileScanner = null; public function __construct($file, AnnotationManager $annotationManager = null) { if (!file_exists($file)) { throw new Exception\InvalidArgumentException(sprintf( 'File "%s" not found', $file )); } $file = realpath($file); $cacheId = md5($file) . '/' . ((isset($annotationManager) ? spl_object_hash($annotationManager) : 'no-annotation')); if (isset(static::$cache[$cacheId])) { $this-&gt;fileScanner = static::$cache[$cacheId]; } else { $this-&gt;fileScanner = new FileScanner($file, $annotationManager); static::$cache[$cacheId] = $this-&gt;fileScanner; } } public static function clearCache() { static::$cache = array(); } public function getAnnotationManager() { return $this-&gt;fileScanner-&gt;getAnnotationManager(); } public function getFile() { return $this-&gt;fileScanner-&gt;getFile(); } public function getDocComment() { return $this-&gt;fileScanner-&gt;getDocComment(); } public function getNamespaces() { return $this-&gt;fileScanner-&gt;getNamespaces(); } public function getUses($namespace = null) { return $this-&gt;fileScanner-&gt;getUses($namespace); } public function getIncludes() { return $this-&gt;fileScanner-&gt;getIncludes(); } public function getClassNames() { return $this-&gt;fileScanner-&gt;getClassNames(); } public function getClasses() { return $this-&gt;fileScanner-&gt;getClasses(); } public function getClass($className) { return $this-&gt;fileScanner-&gt;getClass($className); } public function getClassNameInformation($className) { return $this-&gt;fileScanner-&gt;getClassNameInformation($className); } public function getFunctionNames() { return $this-&gt;fileScanner-&gt;getFunctionNames(); } public function getFunctions() { return $this-&gt;fileScanner-&gt;getFunctions(); } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Exception; class AggregateDirectoryScanner extends DirectoryScanner { protected $isScanned = false; public function getNamespaces($returnScannerClass = false) { } public function getIncludes($returnScannerClass = false) { } public function getClasses($returnScannerClass = false, $returnDerivedScannerClass = false) { $classes = array(); foreach ($this-&gt;directories as $scanner) { $classes += $scanner-&gt;getClasses(); } if ($returnScannerClass) { foreach ($classes as $index =&gt; $class) { $classes[$index] = $this-&gt;getClass($class, $returnScannerClass, $returnDerivedScannerClass); } } return $classes; } public function hasClass($class) { foreach ($this-&gt;directories as $scanner) { if ($scanner-&gt;hasClass($class)) { break; } else { unset($scanner); } } return (isset($scanner)); } public function getClass($class, $returnScannerClass = true, $returnDerivedScannerClass = false) { foreach ($this-&gt;directories as $scanner) { if ($scanner-&gt;hasClass($class)) { break; } else { unset($scanner); } } if (!isset($scanner)) { throw new Exception\RuntimeException('Class by that name was not found.'); } $classScanner = $scanner-&gt;getClass($class); return new DerivedClassScanner($classScanner, $this); } public function getFunctions($returnScannerClass = false) { $this-&gt;scan(); if (!$returnScannerClass) { $functions = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] == 'function') { $functions[] = $info['name']; } } return $functions; } $scannerClass = new FunctionScanner(); } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Exception; use Zend\Code\NameInformation; class TokenArrayScanner implements ScannerInterface { protected $isScanned = false; protected $tokens = array(); protected $docComment = null; protected $nameInformation = null; protected $infos = array(); protected $annotationManager = null; public function __construct($tokens, AnnotationManager $annotationManager = null) { $this-&gt;tokens = $tokens; $this-&gt;annotationManager = $annotationManager; } public function getAnnotationManager() { return $this-&gt;annotationManager; } public function getDocComment() { foreach ($this-&gt;tokens as $token) { $type = $token[0]; $value = $token[1]; if (($type == T_OPEN_TAG) || ($type == T_WHITESPACE)) { continue; } elseif ($type == T_DOC_COMMENT) { $this-&gt;docComment = $value; return $this-&gt;docComment; } else { return; } } } public function getNamespaces() { $this-&gt;scan(); $namespaces = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] == 'namespace') { $namespaces[] = $info['namespace']; } } return $namespaces; } public function getUses($namespace = null) { $this-&gt;scan(); return $this-&gt;getUsesNoScan($namespace); } public function getIncludes() { $this-&gt;scan(); } public function getClassNames() { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'class') { continue; } $return[] = $info['name']; } return $return; } public function getClasses() { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'class') { continue; } $return[] = $this-&gt;getClass($info['name']); } return $return; } public function getClass($name) { $this-&gt;scan(); if (is_int($name)) { $info = $this-&gt;infos[$name]; if ($info['type'] != 'class') { throw new Exception\InvalidArgumentException('Index of info offset is not about a class'); } } elseif (is_string($name)) { $classFound = false; foreach ($this-&gt;infos as $info) { if ($info['type'] === 'class' &amp;&amp; $info['name'] === $name) { $classFound = true; break; } } if (!$classFound) { return false; } } return new ClassScanner( array_slice( $this-&gt;tokens, $info['tokenStart'], ($info['tokenEnd'] - $info['tokenStart'] + 1) ), new NameInformation($info['namespace'], $info['uses']) ); } public function getClassNameInformation($className) { $this-&gt;scan(); $classFound = false; foreach ($this-&gt;infos as $info) { if ($info['type'] === 'class' &amp;&amp; $info['name'] === $className) { $classFound = true; break; } } if (!$classFound) { return false; } if (!isset($info)) { return null; } return new NameInformation($info['namespace'], $info['uses']); } public function getFunctionNames() { $this-&gt;scan(); $functionNames = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] == 'function') { $functionNames[] = $info['name']; } } return $functionNames; } public function getFunctions() { $this-&gt;scan(); $functions = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] == 'function') { } } return $functions; } public static function export($tokens) { } public function __toString() { } protected function scan() { if ($this-&gt;isScanned) { return; } if (!$this-&gt;tokens) { throw new Exception\RuntimeException('No tokens were provided'); } $tokens = &amp;$this-&gt;tokens; $infos = &amp;$this-&gt;infos; $tokenIndex = null; $token = null; $tokenType = null; $tokenContent = null; $tokenLine = null; $namespace = null; $docCommentIndex = false; $infoIndex = 0; $MACRO_TOKEN_ADVANCE = function () use (&amp;$tokens, &amp;$tokenIndex, &amp;$token, &amp;$tokenType, &amp;$tokenContent, &amp;$tokenLine) { $tokenIndex = ($tokenIndex === null) ? 0 : $tokenIndex + 1; if (!isset($tokens[$tokenIndex])) { $token = false; $tokenContent = false; $tokenType = false; $tokenLine = false; return false; } if (is_string($tokens[$tokenIndex]) &amp;&amp; $tokens[$tokenIndex] === '"') { do { $tokenIndex++; } while (!(is_string($tokens[$tokenIndex]) &amp;&amp; $tokens[$tokenIndex] === '"')); } $token = $tokens[$tokenIndex]; if (is_array($token)) { list($tokenType, $tokenContent, $tokenLine) = $token; } else { $tokenType = null; $tokenContent = $token; } return $tokenIndex; }; $MACRO_TOKEN_LOGICAL_START_INDEX = function () use (&amp;$tokenIndex, &amp;$docCommentIndex) { return ($docCommentIndex === false) ? $tokenIndex : $docCommentIndex; }; $MACRO_DOC_COMMENT_START = function () use (&amp;$tokenIndex, &amp;$docCommentIndex) { $docCommentIndex = $tokenIndex; return $docCommentIndex; }; $MACRO_DOC_COMMENT_VALIDATE = function () use (&amp;$tokenType, &amp;$docCommentIndex) { static $validTrailingTokens = null; if ($validTrailingTokens === null) { $validTrailingTokens = array(T_WHITESPACE, T_FINAL, T_ABSTRACT, T_INTERFACE, T_CLASS, T_FUNCTION); } if ($docCommentIndex !== false &amp;&amp; !in_array($tokenType, $validTrailingTokens)) { $docCommentIndex = false; } return $docCommentIndex; }; $MACRO_INFO_ADVANCE = function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) { $infos[$infoIndex]['tokenEnd'] = $tokenIndex; $infos[$infoIndex]['lineEnd'] = $tokenLine; $infoIndex++; return $infoIndex; }; $MACRO_TOKEN_ADVANCE(); SCANNER_TOP: if ($token === false) { goto SCANNER_END; } $MACRO_DOC_COMMENT_VALIDATE(); switch ($tokenType) { case T_DOC_COMMENT: $MACRO_DOC_COMMENT_START(); goto SCANNER_CONTINUE; case T_NAMESPACE: $infos[$infoIndex] = array( 'type' =&gt; 'namespace', 'tokenStart' =&gt; $MACRO_TOKEN_LOGICAL_START_INDEX(), 'tokenEnd' =&gt; null, 'lineStart' =&gt; $token[2], 'lineEnd' =&gt; null, 'namespace' =&gt; null, ); if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } SCANNER_NAMESPACE_TOP: if ($tokenType === null &amp;&amp; $tokenContent === ';' || $tokenContent === '{') { goto SCANNER_NAMESPACE_END; } if ($tokenType === T_WHITESPACE) { goto SCANNER_NAMESPACE_CONTINUE; } if ($tokenType === T_NS_SEPARATOR || $tokenType === T_STRING) { $infos[$infoIndex]['namespace'] .= $tokenContent; } SCANNER_NAMESPACE_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_NAMESPACE_TOP; SCANNER_NAMESPACE_END: $namespace = $infos[$infoIndex]['namespace']; $MACRO_INFO_ADVANCE(); goto SCANNER_CONTINUE; case T_USE: $infos[$infoIndex] = array( 'type' =&gt; 'use', 'tokenStart' =&gt; $MACRO_TOKEN_LOGICAL_START_INDEX(), 'tokenEnd' =&gt; null, 'lineStart' =&gt; $tokens[$tokenIndex][2], 'lineEnd' =&gt; null, 'namespace' =&gt; $namespace, 'statements' =&gt; array(0 =&gt; array('use' =&gt; null, 'as' =&gt; null)), ); $useStatementIndex = 0; $useAsContext = false; if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } SCANNER_USE_TOP: if ($tokenType === null) { if ($tokenContent === ';') { goto SCANNER_USE_END; } elseif ($tokenContent === ',') { $useAsContext = false; $useStatementIndex++; $infos[$infoIndex]['statements'][$useStatementIndex] = array('use' =&gt; null, 'as' =&gt; null); } } if ($tokenType !== null) { if ($tokenType == T_AS) { $useAsContext = true; goto SCANNER_USE_CONTINUE; } if ($tokenType == T_NS_SEPARATOR || $tokenType == T_STRING) { if ($useAsContext == false) { $infos[$infoIndex]['statements'][$useStatementIndex]['use'] .= $tokenContent; } else { $infos[$infoIndex]['statements'][$useStatementIndex]['as'] = $tokenContent; } } } SCANNER_USE_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_USE_TOP; SCANNER_USE_END: $MACRO_INFO_ADVANCE(); goto SCANNER_CONTINUE; case T_INCLUDE: case T_INCLUDE_ONCE: case T_REQUIRE: case T_REQUIRE_ONCE: static $includeTypes = array( T_INCLUDE =&gt; 'include', T_INCLUDE_ONCE =&gt; 'include_once', T_REQUIRE =&gt; 'require', T_REQUIRE_ONCE =&gt; 'require_once' ); $infos[$infoIndex] = array( 'type' =&gt; 'include', 'tokenStart' =&gt; $MACRO_TOKEN_LOGICAL_START_INDEX(), 'tokenEnd' =&gt; null, 'lineStart' =&gt; $tokens[$tokenIndex][2], 'lineEnd' =&gt; null, 'includeType' =&gt; $includeTypes[$tokens[$tokenIndex][0]], 'path' =&gt; '', ); if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } SCANNER_INCLUDE_TOP: if ($tokenType === null &amp;&amp; $tokenContent === ';') { goto SCANNER_INCLUDE_END; } $infos[$infoIndex]['path'] .= $tokenContent; SCANNER_INCLUDE_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_INCLUDE_TOP; SCANNER_INCLUDE_END: $MACRO_INFO_ADVANCE(); goto SCANNER_CONTINUE; case T_FUNCTION: case T_FINAL: case T_ABSTRACT: case T_CLASS: case T_INTERFACE: $infos[$infoIndex] = array( 'type' =&gt; ($tokenType === T_FUNCTION) ? 'function' : 'class', 'tokenStart' =&gt; $MACRO_TOKEN_LOGICAL_START_INDEX(), 'tokenEnd' =&gt; null, 'lineStart' =&gt; $tokens[$tokenIndex][2], 'lineEnd' =&gt; null, 'namespace' =&gt; $namespace, 'uses' =&gt; $this-&gt;getUsesNoScan($namespace), 'name' =&gt; null, 'shortName' =&gt; null, ); $classBraceCount = 0; SCANNER_CLASS_TOP: if ($infos[$infoIndex]['shortName'] == '' &amp;&amp; (($tokenType === T_CLASS || $tokenType === T_INTERFACE) &amp;&amp; $infos[$infoIndex]['type'] === 'class' || ($tokenType === T_FUNCTION &amp;&amp; $infos[$infoIndex]['type'] === 'function')) ) { $infos[$infoIndex]['shortName'] = $tokens[$tokenIndex + 2][1]; $infos[$infoIndex]['name'] = (($namespace != null) ? $namespace . '\\' : '') . $infos[$infoIndex]['shortName']; } if ($tokenType === null) { if ($tokenContent == '{') { $classBraceCount++; } if ($tokenContent == '}') { $classBraceCount--; if ($classBraceCount === 0) { goto SCANNER_CLASS_END; } } } SCANNER_CLASS_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_CLASS_TOP; SCANNER_CLASS_END: $MACRO_INFO_ADVANCE(); goto SCANNER_CONTINUE; } SCANNER_CONTINUE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_TOP; SCANNER_END: $this-&gt;isScanned = true; } public function hasNamespace($namespace) { $this-&gt;scan(); foreach ($this-&gt;infos as $info) { if ($info['type'] == 'namespace' &amp;&amp; $info['namespace'] == $namespace) { return true; } } return false; } protected function getUsesNoScan($namespace) { $namespaces = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] == 'namespace') { $namespaces[] = $info['namespace']; } } if ($namespace === null) { $namespace = array_shift($namespaces); } elseif (!is_string($namespace)) { throw new Exception\InvalidArgumentException('Invalid namespace provided'); } elseif (!in_array($namespace, $namespaces)) { return null; } $uses = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] !== 'use') { continue; } foreach ($info['statements'] as $statement) { if ($info['namespace'] == $namespace) { $uses[] = $statement; } } } return $uses; } } &lt;?php
 namespace Zend\Code\Scanner; use stdClass; use Zend\Code\Exception; class Util { public static function resolveImports(&amp;$value, $key = null, stdClass $data) { if (!property_exists($data, 'uses') || !property_exists($data, 'namespace')) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a data object containing "uses" and "namespace" properties; on or both missing', __METHOD__ )); } if ($data-&gt;namespace &amp;&amp; !$data-&gt;uses &amp;&amp; strlen($value) &gt; 0 &amp;&amp; $value{0} != '\\') { $value = $data-&gt;namespace . '\\' . $value; return; } if (!$data-&gt;uses || strlen($value) &lt;= 0 || $value{0} == '\\') { $value = ltrim($value, '\\'); return; } if ($data-&gt;namespace || $data-&gt;uses) { $firstPart = $value; if (($firstPartEnd = strpos($firstPart, '\\')) !== false) { $firstPart = substr($firstPart, 0, $firstPartEnd); } else { $firstPartEnd = strlen($firstPart); } if (array_key_exists($firstPart, $data-&gt;uses)) { $value = substr_replace($value, $data-&gt;uses[$firstPart], 0, $firstPartEnd); return; } if ($data-&gt;namespace) { $value = $data-&gt;namespace . '\\' . $value; return; } } } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Exception; class FileScanner extends TokenArrayScanner implements ScannerInterface { protected $file = null; public function __construct($file, AnnotationManager $annotationManager = null) { $this-&gt;file = $file; if (!file_exists($file)) { throw new Exception\InvalidArgumentException(sprintf( 'File "%s" not found', $file )); } parent::__construct(token_get_all(file_get_contents($file)), $annotationManager); } public function getFile() { return $this-&gt;file; } } &lt;?php
 namespace Zend\Code\Scanner; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Exception; use Zend\Code\NameInformation; class MethodScanner implements ScannerInterface { protected $isScanned = false; protected $docComment = null; protected $scannerClass = null; protected $class = null; protected $name = null; protected $lineStart = null; protected $lineEnd = null; protected $isFinal = false; protected $isAbstract = false; protected $isPublic = true; protected $isProtected = false; protected $isPrivate = false; protected $isStatic = false; protected $body = ''; protected $tokens = array(); protected $nameInformation = null; protected $infos = array(); public function __construct(array $methodTokens, NameInformation $nameInformation = null) { $this-&gt;tokens = $methodTokens; $this-&gt;nameInformation = $nameInformation; } public function setClass($class) { $this-&gt;class = (string) $class; return $this; } public function setScannerClass(ClassScanner $scannerClass) { $this-&gt;scannerClass = $scannerClass; return $this; } public function getClassScanner() { return $this-&gt;scannerClass; } public function getName() { $this-&gt;scan(); return $this-&gt;name; } public function getLineStart() { $this-&gt;scan(); return $this-&gt;lineStart; } public function getLineEnd() { $this-&gt;scan(); return $this-&gt;lineEnd; } public function getDocComment() { $this-&gt;scan(); return $this-&gt;docComment; } public function getAnnotations(AnnotationManager $annotationManager) { if (($docComment = $this-&gt;getDocComment()) == '') { return false; } return new AnnotationScanner($annotationManager, $docComment, $this-&gt;nameInformation); } public function isFinal() { $this-&gt;scan(); return $this-&gt;isFinal; } public function isAbstract() { $this-&gt;scan(); return $this-&gt;isAbstract; } public function isPublic() { $this-&gt;scan(); return $this-&gt;isPublic; } public function isProtected() { $this-&gt;scan(); return $this-&gt;isProtected; } public function isPrivate() { $this-&gt;scan(); return $this-&gt;isPrivate; } public function isStatic() { $this-&gt;scan(); return $this-&gt;isStatic; } public function getNumberOfParameters() { return count($this-&gt;getParameters()); } public function getParameters($returnScanner = false) { $this-&gt;scan(); $return = array(); foreach ($this-&gt;infos as $info) { if ($info['type'] != 'parameter') { continue; } if (!$returnScanner) { $return[] = $info['name']; } else { $return[] = $this-&gt;getParameter($info['name']); } } return $return; } public function getParameter($parameterNameOrInfoIndex) { $this-&gt;scan(); if (is_int($parameterNameOrInfoIndex)) { $info = $this-&gt;infos[$parameterNameOrInfoIndex]; if ($info['type'] != 'parameter') { throw new Exception\InvalidArgumentException('Index of info offset is not about a parameter'); } } elseif (is_string($parameterNameOrInfoIndex)) { foreach ($this-&gt;infos as $info) { if ($info['type'] === 'parameter' &amp;&amp; $info['name'] === $parameterNameOrInfoIndex) { break; } unset($info); } if (!isset($info)) { throw new Exception\InvalidArgumentException('Index of info offset is not about a parameter'); } } $p = new ParameterScanner( array_slice($this-&gt;tokens, $info['tokenStart'], $info['tokenEnd'] - $info['tokenStart']), $this-&gt;nameInformation ); $p-&gt;setDeclaringFunction($this-&gt;name); $p-&gt;setDeclaringScannerFunction($this); $p-&gt;setDeclaringClass($this-&gt;class); $p-&gt;setDeclaringScannerClass($this-&gt;scannerClass); $p-&gt;setPosition($info['position']); return $p; } public function getBody() { $this-&gt;scan(); return $this-&gt;body; } public static function export() { } public function __toString() { $this-&gt;scan(); return var_export($this, true); } protected function scan() { if ($this-&gt;isScanned) { return; } if (!$this-&gt;tokens) { throw new Exception\RuntimeException('No tokens were provided'); } $tokens = &amp;$this-&gt;tokens; $infos = &amp;$this-&gt;infos; $tokenIndex = null; $token = null; $tokenType = null; $tokenContent = null; $tokenLine = null; $infoIndex = 0; $parentCount = 0; $MACRO_TOKEN_ADVANCE = function () use (&amp;$tokens, &amp;$tokenIndex, &amp;$token, &amp;$tokenType, &amp;$tokenContent, &amp;$tokenLine) { static $lastTokenArray = null; $tokenIndex = ($tokenIndex === null) ? 0 : $tokenIndex + 1; if (!isset($tokens[$tokenIndex])) { $token = false; $tokenContent = false; $tokenType = false; $tokenLine = false; return false; } $token = $tokens[$tokenIndex]; if (is_string($token)) { $tokenType = null; $tokenContent = $token; $tokenLine = $tokenLine + substr_count($lastTokenArray[1], "\n"); } else { list($tokenType, $tokenContent, $tokenLine) = $token; } return $tokenIndex; }; $MACRO_INFO_START = function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) { $infos[$infoIndex] = array( 'type' =&gt; 'parameter', 'tokenStart' =&gt; $tokenIndex, 'tokenEnd' =&gt; null, 'lineStart' =&gt; $tokenLine, 'lineEnd' =&gt; $tokenLine, 'name' =&gt; null, 'position' =&gt; $infoIndex + 1, ); }; $MACRO_INFO_ADVANCE = function () use (&amp;$infoIndex, &amp;$infos, &amp;$tokenIndex, &amp;$tokenLine) { $infos[$infoIndex]['tokenEnd'] = $tokenIndex; $infos[$infoIndex]['lineEnd'] = $tokenLine; $infoIndex++; return $infoIndex; }; $MACRO_TOKEN_ADVANCE(); SCANNER_TOP: $this-&gt;lineStart = ($this-&gt;lineStart) ? : $tokenLine; switch ($tokenType) { case T_DOC_COMMENT: $this-&gt;lineStart = null; if ($this-&gt;docComment === null &amp;&amp; $this-&gt;name === null) { $this-&gt;docComment = $tokenContent; } goto SCANNER_CONTINUE_SIGNATURE; case T_FINAL: $this-&gt;isFinal = true; goto SCANNER_CONTINUE_SIGNATURE; case T_ABSTRACT: $this-&gt;isAbstract = true; goto SCANNER_CONTINUE_SIGNATURE; case T_PUBLIC: goto SCANNER_CONTINUE_SIGNATURE; case T_PROTECTED: $this-&gt;isProtected = true; $this-&gt;isPublic = false; goto SCANNER_CONTINUE_SIGNATURE; case T_PRIVATE: $this-&gt;isPrivate = true; $this-&gt;isPublic = false; goto SCANNER_CONTINUE_SIGNATURE; case T_STATIC: $this-&gt;isStatic = true; goto SCANNER_CONTINUE_SIGNATURE; case T_VARIABLE: case T_STRING: if ($tokenType === T_STRING &amp;&amp; $parentCount === 0) { $this-&gt;name = $tokenContent; } if ($parentCount === 1) { if (!isset($infos[$infoIndex])) { $MACRO_INFO_START(); } if ($tokenType === T_VARIABLE) { $infos[$infoIndex]['name'] = ltrim($tokenContent, '$'); } } goto SCANNER_CONTINUE_SIGNATURE; case null: switch ($tokenContent) { case '&amp;': if (!isset($infos[$infoIndex])) { $MACRO_INFO_START(); } goto SCANNER_CONTINUE_SIGNATURE; case '(': $parentCount++; goto SCANNER_CONTINUE_SIGNATURE; case ')': $parentCount--; if ($parentCount === 0) { if ($infos) { $MACRO_INFO_ADVANCE(); } $context = 'body'; } goto SCANNER_CONTINUE_BODY; case ',': if ($parentCount === 1) { $MACRO_INFO_ADVANCE(); } goto SCANNER_CONTINUE_SIGNATURE; } } SCANNER_CONTINUE_SIGNATURE: if ($MACRO_TOKEN_ADVANCE() === false) { goto SCANNER_END; } goto SCANNER_TOP; SCANNER_CONTINUE_BODY: $braceCount = 0; while ($MACRO_TOKEN_ADVANCE() !== false) { if ($tokenContent == '}') { $braceCount--; } if ($braceCount &gt; 0) { $this-&gt;body .= $tokenContent; } if ($tokenContent == '{') { $braceCount++; } $this-&gt;lineEnd = $tokenLine; } SCANNER_END: $this-&gt;isScanned = true; return; } } &lt;?php
 namespace Zend\Code\Scanner; interface ScannerInterface { } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class ReturnTag implements TagInterface, PhpDocTypedTagInterface { protected $types = array(); protected $description = null; public function getName() { return 'return'; } public function initialize($tagDocBlockLine) { $matches = array(); if (!preg_match('#((?:[\w|\\\]+(?:\[\])*\|?)+)(?:\s+(.*))?#s', $tagDocBlockLine, $matches)) { return; } $this-&gt;types = explode('|', $matches[1]); if (isset($matches[2])) { $this-&gt;description = trim(preg_replace('#\s+#', ' ', $matches[2])); } } public function getType() { if (empty($this-&gt;types)) { return ''; } return $this-&gt;types[0]; } public function getTypes() { return $this-&gt;types; } public function getDescription() { return $this-&gt;description; } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class PropertyTag implements TagInterface, PhpDocTypedTagInterface { protected $types = array(); protected $propertyName = null; protected $description = null; public function getName() { return 'property'; } public function initialize($tagDocblockLine) { $match = array(); if (!preg_match('#^(.+)?(\$[\S]+)[\s]*(.*)$#m', $tagDocblockLine, $match)) { return; } if ($match[1] !== '') { $this-&gt;types = explode('|', rtrim($match[1])); } if ($match[2] !== '') { $this-&gt;propertyName = $match[2]; } if ($match[3] !== '') { $this-&gt;description = $match[3]; } } public function getType() { if (empty($this-&gt;types)) { return null; } return $this-&gt;types[0]; } public function getTypes() { return $this-&gt;types; } public function getPropertyName() { return $this-&gt;propertyName; } public function getDescription() { return $this-&gt;description; } public function __toString() { return 'DocBlock Tag [ * @' . $this-&gt;getName() . ' ]' . PHP_EOL; } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class ParamTag implements TagInterface, PhpDocTypedTagInterface { protected $types = array(); protected $variableName = null; protected $description = null; public function getName() { return 'param'; } public function initialize($tagDocBlockLine) { $matches = array(); if (!preg_match('#((?:[\w|\\\]+(?:\[\])*\|?)+)(?:\s+(\$\S+))?(?:\s+(.*))?#s', $tagDocBlockLine, $matches)) { return; } $this-&gt;types = explode('|', $matches[1]); if (isset($matches[2])) { $this-&gt;variableName = $matches[2]; } if (isset($matches[3])) { $this-&gt;description = trim(preg_replace('#\s+#', ' ', $matches[3])); } } public function getType() { if (empty($this-&gt;types)) { return ''; } return $this-&gt;types[0]; } public function getTypes() { return $this-&gt;types; } public function getVariableName() { return $this-&gt;variableName; } public function getDescription() { return $this-&gt;description; } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; interface TagInterface { public function getName(); public function initialize($content); } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class LicenseTag implements TagInterface { protected $url = null; protected $licenseName = null; public function getName() { return 'license'; } public function initialize($tagDocblockLine) { $match = array(); if (!preg_match('#^([\S]*)(?:\s+(.*))?$#m', $tagDocblockLine, $match)) { return; } if ($match[1] !== '') { $this-&gt;url = trim($match[1]); } if (isset($match[2]) &amp;&amp; $match[2] !== '') { $this-&gt;licenseName = $match[2]; } } public function getUrl() { return $this-&gt;url; } public function getLicenseName() { return $this-&gt;licenseName; } public function __toString() { return 'DocBlock Tag [ * @' . $this-&gt;getName() . ' ]' . PHP_EOL; } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class ThrowsTag implements TagInterface, PhpDocTypedTagInterface { protected $type = null; protected $description = null; public function getName() { return 'throws'; } public function initialize($tagDocBlockLine) { $matches = array(); preg_match('#([\w|\\\]+)(?:\s+(.*))?#', $tagDocBlockLine, $matches); $this-&gt;type = $matches[1]; if (isset($matches[2])) { $this-&gt;description = $matches[2]; } } public function getType() { return $this-&gt;type; } public function getTypes() { return array($this-&gt;type); } public function getDescription() { return $this-&gt;description; } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class GenericTag implements TagInterface { protected $name = null; protected $content = null; protected $contentSplitCharacter = null; protected $values = array(); public function __construct($contentSplitCharacter = ' ') { $this-&gt;contentSplitCharacter = $contentSplitCharacter; } public function initialize($tagDocBlockLine) { $this-&gt;parse($tagDocBlockLine); } public function getName() { return $this-&gt;name; } public function setName($name) { $this-&gt;name = $name; } public function getContent() { return $this-&gt;content; } public function returnValue($position) { return $this-&gt;values[$position]; } public function __toString() { return 'DocBlock Tag [ * @' . $this-&gt;name . ' ]' . PHP_EOL; } protected function parse($docBlockLine) { $this-&gt;content = trim($docBlockLine); $this-&gt;values = explode($this-&gt;contentSplitCharacter, $docBlockLine); } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; interface PhpDocTypedTagInterface { public function getTypes(); } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class MethodTag implements TagInterface, PhpDocTypedTagInterface { protected $types = array(); protected $methodName = null; protected $description = null; protected $isStatic = false; public function getName() { return 'method'; } public function initialize($tagDocblockLine) { $match = array(); if (!preg_match('#^(static[\s]+)?(.+[\s]+)?(.+\(\))[\s]*(.*)$#m', $tagDocblockLine, $match)) { return; } if ($match[1] !== '') { $this-&gt;isStatic = true; } if ($match[2] !== '') { $this-&gt;types = explode('|', rtrim($match[2])); } $this-&gt;methodName = $match[3]; if ($match[4] !== '') { $this-&gt;description = $match[4]; } } public function getReturnType() { if (empty($this-&gt;types)) { return null; } return $this-&gt;types[0]; } public function getTypes() { return $this-&gt;types; } public function getMethodName() { return $this-&gt;methodName; } public function getDescription() { return $this-&gt;description; } public function isStatic() { return $this-&gt;isStatic; } public function __toString() { return 'DocBlock Tag [ * @' . $this-&gt;getName() . ' ]' . PHP_EOL; } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock\Tag; class AuthorTag implements TagInterface { protected $authorName = null; protected $authorEmail = null; public function getName() { return 'author'; } public function initialize($tagDocblockLine) { $match = array(); if (!preg_match('/^([^\&lt;]*)(\&lt;([^\&gt;]*)\&gt;)?(.*)$/u', $tagDocblockLine, $match)) { return; } if ($match[1] !== '') { $this-&gt;authorName = rtrim($match[1]); } if (isset($match[3]) &amp;&amp; $match[3] !== '') { $this-&gt;authorEmail = $match[3]; } } public function getAuthorName() { return $this-&gt;authorName; } public function getAuthorEmail() { return $this-&gt;authorEmail; } public function __toString() { return 'DocBlock Tag [ * @' . $this-&gt;getName() . ' ]' . PHP_EOL; } } &lt;?php
 namespace Zend\Code\Reflection\DocBlock; use Zend\Code\Reflection\Exception; use Zend\Code\Reflection\DocBlock\Tag\GenericTag; use Zend\Code\Reflection\DocBlock\Tag\TagInterface; class TagManager { const USE_DEFAULT_PROTOTYPES = 'default'; protected $tagNames = array(); protected $tags = array(); protected $genericTag = null; public function __construct($prototypes = null) { if (is_array($prototypes)) { foreach ($prototypes as $prototype) { $this-&gt;addTagPrototype($prototype); } } elseif ($prototypes === self::USE_DEFAULT_PROTOTYPES) { $this-&gt;useDefaultPrototypes(); } } public function useDefaultPrototypes() { $this-&gt;addTagPrototype(new Tag\ParamTag()); $this-&gt;addTagPrototype(new Tag\ReturnTag()); $this-&gt;addTagPrototype(new Tag\MethodTag()); $this-&gt;addTagPrototype(new Tag\PropertyTag()); $this-&gt;addTagPrototype(new Tag\AuthorTag()); $this-&gt;addTagPrototype(new Tag\LicenseTag()); $this-&gt;addTagPrototype(new Tag\ThrowsTag()); $this-&gt;addTagPrototype(new Tag\GenericTag()); } public function addTagPrototype(TagInterface $tag) { $tagName = str_replace(array('-', '_'), '', $tag-&gt;getName()); if (in_array($tagName, $this-&gt;tagNames)) { throw new Exception\InvalidArgumentException('A tag with this name already exists in this manager'); } $this-&gt;tagNames[] = $tagName; $this-&gt;tags[] = $tag; if ($tag instanceof GenericTag) { $this-&gt;genericTag = $tag; } } public function hasTag($tagName) { return in_array(str_replace(array('-', '_'), '', $tagName), $this-&gt;tagNames); } public function createTag($tagName, $content = null) { $tagName = str_replace(array('-', '_'), '', $tagName); if (!$this-&gt;hasTag($tagName) &amp;&amp; !isset($this-&gt;genericTag)) { throw new Exception\RuntimeException('This tag name is not supported by this tag manager'); } $index = array_search($tagName, $this-&gt;tagNames); $tag = ($index !== false) ? $this-&gt;tags[$index] : $this-&gt;genericTag; $newTag = clone $tag; if ($content) { $newTag-&gt;initialize($content); } if ($newTag instanceof GenericTag) { $newTag-&gt;setName($tagName); } return $newTag; } } &lt;?php
 namespace Zend\Code\Reflection; use ReflectionParameter; class ParameterReflection extends ReflectionParameter implements ReflectionInterface { protected $isFromMethod = false; public function getDeclaringClass() { $phpReflection = parent::getDeclaringClass(); $zendReflection = new ClassReflection($phpReflection-&gt;getName()); unset($phpReflection); return $zendReflection; } public function getClass() { $phpReflection = parent::getClass(); if ($phpReflection == null) { return null; } $zendReflection = new ClassReflection($phpReflection-&gt;getName()); unset($phpReflection); return $zendReflection; } public function getDeclaringFunction() { $phpReflection = parent::getDeclaringFunction(); if ($phpReflection instanceof \ReflectionMethod) { $zendReflection = new MethodReflection($this-&gt;getDeclaringClass()-&gt;getName(), $phpReflection-&gt;getName()); } else { $zendReflection = new FunctionReflection($phpReflection-&gt;getName()); } unset($phpReflection); return $zendReflection; } public function getType() { if ($this-&gt;isArray()) { return 'array'; } if (($class = $this-&gt;getClass()) instanceof \ReflectionClass) { return $class-&gt;getName(); } $docBlock = $this-&gt;getDeclaringFunction()-&gt;getDocBlock(); if (!$docBlock instanceof DocBlockReflection) { return null; } $params = $docBlock-&gt;getTags('param'); if (isset($params[$this-&gt;getPosition()])) { return $params[$this-&gt;getPosition()]-&gt;getType(); } return null; } public function toString() { return parent::__toString(); } public function __toString() { return parent::__toString(); } } &lt;?php
 namespace Zend\Code\Reflection\Exception; use Zend\Code\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Reflection\Exception; use Zend\Code\Exception\ExceptionInterface as Exception; interface ExceptionInterface extends Exception {} &lt;?php
 namespace Zend\Code\Reflection\Exception; use Zend\Code\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Reflection\Exception; use Zend\Code\Exception; class BadMethodCallException extends Exception\BadMethodCallException implements ExceptionInterface {} &lt;?php
 namespace Zend\Code\Reflection; use Reflector; interface ReflectionInterface extends Reflector { public function toString(); } &lt;?php
 namespace Zend\Code\Reflection; use ReflectionFunction; use Zend\Code\Reflection\DocBlock\Tag\ReturnTag; class FunctionReflection extends ReflectionFunction implements ReflectionInterface { public function getDocBlock() { if ('' == ($comment = $this-&gt;getDocComment())) { throw new Exception\InvalidArgumentException(sprintf( '%s does not have a DocBlock', $this-&gt;getName() )); } $instance = new DocBlockReflection($comment); return $instance; } public function getStartLine($includeDocComment = false) { if ($includeDocComment) { if ($this-&gt;getDocComment() != '') { return $this-&gt;getDocBlock()-&gt;getStartLine(); } } return parent::getStartLine(); } public function getContents($includeDocBlock = true) { return implode("\n", array_splice( file($this-&gt;getFileName()), $this-&gt;getStartLine($includeDocBlock), ($this-&gt;getEndLine() - $this-&gt;getStartLine()), true ) ); } public function getParameters() { $phpReflections = parent::getParameters(); $zendReflections = array(); while ($phpReflections &amp;&amp; ($phpReflection = array_shift($phpReflections))) { $instance = new ParameterReflection($this-&gt;getName(), $phpReflection-&gt;getName()); $zendReflections[] = $instance; unset($phpReflection); } unset($phpReflections); return $zendReflections; } public function getReturn() { $docBlock = $this-&gt;getDocBlock(); if (!$docBlock-&gt;hasTag('return')) { throw new Exception\InvalidArgumentException( 'Function does not specify an @return annotation tag; cannot determine return type' ); } $tag = $docBlock-&gt;getTag('return'); return new DocBlockReflection('@return ' . $tag-&gt;getDescription()); } public function toString() { return $this-&gt;__toString(); } public function __toString() { return parent::__toString(); } } &lt;?php
 namespace Zend\Code\Reflection; use Zend\Code\Reflection\DocBlock\Tag\TagInterface as DocBlockTagInterface; use Zend\Code\Reflection\DocBlock\TagManager as DocBlockTagManager; use Zend\Code\Scanner\DocBlockScanner; use Reflector; class DocBlockReflection implements ReflectionInterface { protected $reflector = null; protected $docComment = null; protected $tagManager = null; protected $startLine = null; protected $endLine = null; protected $cleanDocComment = null; protected $longDescription = null; protected $shortDescription = null; protected $tags = array(); protected $isReflected = false; public static function export() { } public function __construct($commentOrReflector, DocBlockTagManager $tagManager = null) { $this-&gt;tagManager = $tagManager ? : new DocBlockTagManager(DocBlockTagManager::USE_DEFAULT_PROTOTYPES); if ($commentOrReflector instanceof Reflector) { $this-&gt;reflector = $commentOrReflector; if (!method_exists($commentOrReflector, 'getDocComment')) { throw new Exception\InvalidArgumentException('Reflector must contain method "getDocComment"'); } $this-&gt;docComment = $commentOrReflector-&gt;getDocComment(); $lineCount = substr_count($this-&gt;docComment, "\n"); $this-&gt;startLine = $this-&gt;reflector-&gt;getStartLine() - $lineCount - 1; $this-&gt;endLine = $this-&gt;reflector-&gt;getStartLine() - 1; } elseif (is_string($commentOrReflector)) { $this-&gt;docComment = $commentOrReflector; } else { throw new Exception\InvalidArgumentException(sprintf( '%s must have a (string) DocComment or a Reflector in the constructor', get_called_class() )); } if ($this-&gt;docComment == '') { throw new Exception\InvalidArgumentException('DocComment cannot be empty'); } $this-&gt;reflect(); } public function getContents() { $this-&gt;reflect(); return $this-&gt;cleanDocComment; } public function getStartLine() { $this-&gt;reflect(); return $this-&gt;startLine; } public function getEndLine() { $this-&gt;reflect(); return $this-&gt;endLine; } public function getShortDescription() { $this-&gt;reflect(); return $this-&gt;shortDescription; } public function getLongDescription() { $this-&gt;reflect(); return $this-&gt;longDescription; } public function hasTag($name) { $this-&gt;reflect(); foreach ($this-&gt;tags as $tag) { if ($tag-&gt;getName() == $name) { return true; } } return false; } public function getTag($name) { $this-&gt;reflect(); foreach ($this-&gt;tags as $tag) { if ($tag-&gt;getName() == $name) { return $tag; } } return false; } public function getTags($filter = null) { $this-&gt;reflect(); if ($filter === null || !is_string($filter)) { return $this-&gt;tags; } $returnTags = array(); foreach ($this-&gt;tags as $tag) { if ($tag-&gt;getName() == $filter) { $returnTags[] = $tag; } } return $returnTags; } protected function reflect() { if ($this-&gt;isReflected) { return; } $docComment = $this-&gt;docComment; $this-&gt;cleanDocComment = preg_replace("#[ \t]*(?:/\*\*|\*/|\*)[ ]{0,1}(.*)?#", '$1', $docComment); $this-&gt;cleanDocComment = ltrim($this-&gt;cleanDocComment, "\r\n"); $scanner = new DocBlockScanner($docComment); $this-&gt;shortDescription = ltrim($scanner-&gt;getShortDescription()); $this-&gt;longDescription = ltrim($scanner-&gt;getLongDescription()); foreach ($scanner-&gt;getTags() as $tag) { $this-&gt;tags[] = $this-&gt;tagManager-&gt;createTag(ltrim($tag['name'], '@'), ltrim($tag['value'])); } $this-&gt;isReflected = true; } public function toString() { $str = "DocBlock [ /* DocBlock */ ] {" . PHP_EOL . PHP_EOL; $str .= "  - Tags [" . count($this-&gt;tags) . "] {" . PHP_EOL; foreach ($this-&gt;tags AS $tag) { $str .= "    " . $tag; } $str .= "  }" . PHP_EOL; $str .= "}" . PHP_EOL; return $str; } public function __toString() { return $this-&gt;toString(); } } &lt;?php
 namespace Zend\Code\Reflection; use Zend\Code\Scanner\CachingFileScanner; class FileReflection implements ReflectionInterface { protected $filePath = null; protected $docComment = null; protected $startLine = 1; protected $endLine = null; protected $namespaces = array(); protected $uses = array(); protected $requiredFiles = array(); protected $classes = array(); protected $functions = array(); protected $contents = null; public function __construct($filename) { if (($fileRealPath = realpath($filename)) === false) { $fileRealPath = stream_resolve_include_path($filename); } if (!$fileRealPath || !in_array($fileRealPath, get_included_files())) { throw new Exception\RuntimeException(sprintf( 'File %s must be required before it can be reflected', $filename )); } $this-&gt;filePath = $fileRealPath; $this-&gt;reflect(); } public static function export() { return null; } public function getFileName() { return $this-&gt;filePath; } public function getStartLine() { return $this-&gt;startLine; } public function getEndLine() { return $this-&gt;endLine; } public function getDocComment() { return $this-&gt;docComment; } public function getDocBlock() { if (!($docComment = $this-&gt;getDocComment())) { return false; } $instance = new DocBlockReflection($docComment); return $instance; } public function getNamespaces() { return $this-&gt;namespaces; } public function getNamespace() { if (count($this-&gt;namespaces) == 0) { return null; } return $this-&gt;namespaces[0]; } public function getUses() { return $this-&gt;uses; } public function getClasses() { $classes = array(); foreach ($this-&gt;classes as $class) { $classes[] = new ClassReflection($class); } return $classes; } public function getFunctions() { $functions = array(); foreach ($this-&gt;functions as $function) { $functions[] = new FunctionReflection($function); } return $functions; } public function getClass($name = null) { if (null === $name) { reset($this-&gt;classes); $selected = current($this-&gt;classes); return new ClassReflection($selected); } if (in_array($name, $this-&gt;classes)) { return new ClassReflection($name); } throw new Exception\InvalidArgumentException(sprintf( 'Class by name %s not found.', $name )); } public function getContents() { return file_get_contents($this-&gt;filePath); } public function toString() { return ''; } public function __toString() { return ''; } protected function reflect() { $scanner = new CachingFileScanner($this-&gt;filePath); $this-&gt;docComment = $scanner-&gt;getDocComment(); $this-&gt;requiredFiles = $scanner-&gt;getIncludes(); $this-&gt;classes = $scanner-&gt;getClassNames(); $this-&gt;namespaces = $scanner-&gt;getNamespaces(); $this-&gt;uses = $scanner-&gt;getUses(); } protected function checkFileDocBlock($tokens) { foreach ($tokens as $token) { $type = $token[0]; $value = $token[1]; $lineNum = $token[2]; if (($type == T_OPEN_TAG) || ($type == T_WHITESPACE)) { continue; } elseif ($type == T_DOC_COMMENT) { $this-&gt;docComment = $value; $this-&gt;startLine = $lineNum + substr_count($value, "\n") + 1; return; } else { return; } } } } &lt;?php
 namespace Zend\Code\Reflection; use ReflectionProperty as PhpReflectionProperty; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Scanner\AnnotationScanner; use Zend\Code\Scanner\CachingFileScanner; class PropertyReflection extends PhpReflectionProperty implements ReflectionInterface { protected $annotations; public function getDeclaringClass() { $phpReflection = parent::getDeclaringClass(); $zendReflection = new ClassReflection($phpReflection-&gt;getName()); unset($phpReflection); return $zendReflection; } public function getDocComment() { return parent::getDocComment(); } public function getDocBlock() { if (!($docComment = $this-&gt;getDocComment())) { return false; } $docBlockReflection = new DocBlockReflection($docComment); return $docBlockReflection; } public function getAnnotations(AnnotationManager $annotationManager) { if (null !== $this-&gt;annotations) { return $this-&gt;annotations; } if (($docComment = $this-&gt;getDocComment()) == '') { return false; } $class = $this-&gt;getDeclaringClass(); $cachingFileScanner = new CachingFileScanner($class-&gt;getFileName()); $nameInformation = $cachingFileScanner-&gt;getClassNameInformation($class-&gt;getName()); $this-&gt;annotations = new AnnotationScanner($annotationManager, $docComment, $nameInformation); return $this-&gt;annotations; } public function toString() { return $this-&gt;__toString(); } } &lt;?php
 namespace Zend\Code\Reflection; use ReflectionMethod as PhpReflectionMethod; use Zend\Code\Annotation\AnnotationCollection; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Scanner\AnnotationScanner; use Zend\Code\Scanner\CachingFileScanner; class MethodReflection extends PhpReflectionMethod implements ReflectionInterface { protected $annotations = null; public function getDocBlock() { if ('' == $this-&gt;getDocComment()) { return false; } $instance = new DocBlockReflection($this); return $instance; } public function getAnnotations(AnnotationManager $annotationManager) { if (($docComment = $this-&gt;getDocComment()) == '') { return false; } if (!$this-&gt;annotations) { $cachingFileScanner = new CachingFileScanner($this-&gt;getFileName()); $nameInformation = $cachingFileScanner-&gt;getClassNameInformation($this-&gt;getDeclaringClass()-&gt;getName()); $this-&gt;annotations = new AnnotationScanner($annotationManager, $docComment, $nameInformation); } return $this-&gt;annotations; } public function getStartLine($includeDocComment = false) { if ($includeDocComment) { if ($this-&gt;getDocComment() != '') { return $this-&gt;getDocBlock()-&gt;getStartLine(); } } return parent::getStartLine(); } public function getDeclaringClass() { $phpReflection = parent::getDeclaringClass(); $zendReflection = new ClassReflection($phpReflection-&gt;getName()); unset($phpReflection); return $zendReflection; } public function getParameters() { $phpReflections = parent::getParameters(); $zendReflections = array(); while ($phpReflections &amp;&amp; ($phpReflection = array_shift($phpReflections))) { $instance = new ParameterReflection(array( $this-&gt;getDeclaringClass()-&gt;getName(), $this-&gt;getName()), $phpReflection-&gt;getName() ); $zendReflections[] = $instance; unset($phpReflection); } unset($phpReflections); return $zendReflections; } public function getContents($includeDocBlock = true) { $fileContents = file($this-&gt;getFileName()); $startNum = $this-&gt;getStartLine($includeDocBlock); $endNum = ($this-&gt;getEndLine() - $this-&gt;getStartLine()); return implode("\n", array_splice($fileContents, $startNum, $endNum, true)); } public function getBody() { $lines = array_slice( file($this-&gt;getDeclaringClass()-&gt;getFileName(), FILE_IGNORE_NEW_LINES), $this-&gt;getStartLine(), ($this-&gt;getEndLine() - $this-&gt;getStartLine()), true ); $firstLine = array_shift($lines); if (trim($firstLine) !== '{') { array_unshift($lines, $firstLine); } $lastLine = array_pop($lines); if (trim($lastLine) !== '}') { array_push($lines, $lastLine); } return rtrim(ltrim(implode("\n", $lines), '{'), '}'); } public function toString() { return parent::__toString(); } public function __toString() { return parent::__toString(); } } &lt;?php
 namespace Zend\Code\Reflection; use ReflectionClass; use Zend\Code\Annotation\AnnotationCollection; use Zend\Code\Annotation\AnnotationManager; use Zend\Code\Reflection\FileReflection; use Zend\Code\Scanner\AnnotationScanner; use Zend\Code\Scanner\FileScanner; class ClassReflection extends ReflectionClass implements ReflectionInterface { protected $annotations = null; protected $docBlock = null; public function getDeclaringFile() { $instance = new FileReflection($this-&gt;getFileName()); return $instance; } public function getDocBlock() { if (isset($this-&gt;docBlock)) { return $this-&gt;docBlock; } if ('' == $this-&gt;getDocComment()) { return false; } $this-&gt;docBlock = new DocBlockReflection($this); return $this-&gt;docBlock; } public function getAnnotations(AnnotationManager $annotationManager) { $docComment = $this-&gt;getDocComment(); if ($docComment == '') { return false; } if (!$this-&gt;annotations) { $fileScanner = new FileScanner($this-&gt;getFileName()); $nameInformation = $fileScanner-&gt;getClassNameInformation($this-&gt;getName()); $this-&gt;annotations = new AnnotationScanner($annotationManager, $docComment, $nameInformation); } return $this-&gt;annotations; } public function getStartLine($includeDocComment = false) { if ($includeDocComment &amp;&amp; $this-&gt;getDocComment() != '') { return $this-&gt;getDocBlock()-&gt;getStartLine(); } return parent::getStartLine(); } public function getContents($includeDocBlock = true) { $filename = $this-&gt;getFileName(); $filelines = file($filename); $startnum = $this-&gt;getStartLine($includeDocBlock); $endnum = $this-&gt;getEndLine() - $this-&gt;getStartLine(); $lines = array_slice($filelines, $startnum, $endnum); array_unshift($lines, $filelines[$startnum-1]); return strstr(implode('', $lines), '{'); } public function getInterfaces() { $phpReflections = parent::getInterfaces(); $zendReflections = array(); while ($phpReflections &amp;&amp; ($phpReflection = array_shift($phpReflections))) { $instance = new ClassReflection($phpReflection-&gt;getName()); $zendReflections[] = $instance; unset($phpReflection); } unset($phpReflections); return $zendReflections; } public function getMethod($name) { $method = new MethodReflection($this-&gt;getName(), parent::getMethod($name)-&gt;getName()); return $method; } public function getMethods($filter = -1) { $methods = array(); foreach (parent::getMethods($filter) as $method) { $instance = new MethodReflection($this-&gt;getName(), $method-&gt;getName()); $methods[] = $instance; } return $methods; } public function getParentClass() { $phpReflection = parent::getParentClass(); if ($phpReflection) { $zendReflection = new ClassReflection($phpReflection-&gt;getName()); unset($phpReflection); return $zendReflection; } return false; } public function getProperty($name) { $phpReflection = parent::getProperty($name); $zendReflection = new PropertyReflection($this-&gt;getName(), $phpReflection-&gt;getName()); unset($phpReflection); return $zendReflection; } public function getProperties($filter = -1) { $phpReflections = parent::getProperties($filter); $zendReflections = array(); while ($phpReflections &amp;&amp; ($phpReflection = array_shift($phpReflections))) { $instance = new PropertyReflection($this-&gt;getName(), $phpReflection-&gt;getName()); $zendReflections[] = $instance; unset($phpReflection); } unset($phpReflections); return $zendReflections; } public function toString() { return parent::__toString(); } public function __toString() { return parent::__toString(); } } &lt;?php
 namespace Zend\File\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\File\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\File\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\File\Exception; class BadMethodCallException extends \BadMethodCallException implements ExceptionInterface {} &lt;?php
 namespace Zend\File; use SplFileInfo; class PhpClassFile extends SplFileInfo { protected $classes; public function getClasses() { return $this-&gt;classes; } public function addClass($class) { $this-&gt;classes[] = $class; return $this; } } &lt;?php
 namespace Zend\File; use DirectoryIterator; use FilterIterator; use RecursiveDirectoryIterator; use RecursiveIterator; use RecursiveIteratorIterator; use SplFileInfo; class ClassFileLocator extends FilterIterator { public function __construct($dirOrIterator = '.') { if (is_string($dirOrIterator)) { if (!is_dir($dirOrIterator)) { throw new Exception\InvalidArgumentException('Expected a valid directory name'); } $dirOrIterator = new RecursiveDirectoryIterator($dirOrIterator, RecursiveDirectoryIterator::FOLLOW_SYMLINKS); } elseif (!$dirOrIterator instanceof DirectoryIterator) { throw new Exception\InvalidArgumentException('Expected a DirectoryIterator'); } if ($dirOrIterator instanceof RecursiveIterator) { $dirOrIterator = new RecursiveIteratorIterator($dirOrIterator); } parent::__construct($dirOrIterator); $this-&gt;setInfoClass('Zend\File\PhpClassFile'); } public function accept() { $file = $this-&gt;getInnerIterator()-&gt;current(); if (!$file instanceof SplFileInfo) { return false; } if (!$file-&gt;isFile()) { return false; } if ($file-&gt;getBasename('.php') == $file-&gt;getBasename()) { return false; } $contents = file_get_contents($file-&gt;getRealPath()); $tokens = token_get_all($contents); $count = count($tokens); $t_trait = defined('T_TRAIT') ? T_TRAIT : -1; for ($i = 0; $i &lt; $count; $i++) { $token = $tokens[$i]; if (!is_array($token)) { $i++; continue; } switch ($token[0]) { case T_NAMESPACE: $namespace = ''; for ($i++; $i &lt; $count; $i++) { $token = $tokens[$i]; if (is_string($token)) { if (';' === $token) { $saveNamespace = false; break; } if ('{' === $token) { $saveNamespace = true; break; } continue; } list($type, $content, $line) = $token; switch ($type) { case T_STRING: case T_NS_SEPARATOR: $namespace .= $content; break; } } if ($saveNamespace) { $savedNamespace = $namespace; } break; case $t_trait: case T_CLASS: case T_INTERFACE: for ($i++; $i &lt; $count; $i++) { $token = $tokens[$i]; if (is_string($token)) { continue; } list($type, $content, $line) = $token; if (T_STRING == $type) { if (!isset($namespace) || null === $namespace) { if (isset($saveNamespace) &amp;&amp; $saveNamespace) { $namespace = $savedNamespace; } else { $namespace = null; } } $class = (null === $namespace) ? $content : $namespace . '\\' . $content; $file-&gt;addClass($class); $namespace = null; break; } } break; default: break; } } $classes = $file-&gt;getClasses(); if (!empty($classes)) { return true; } return false; } } &lt;?php
 namespace Zend\File\Transfer; class Transfer { protected $adapter = array(); public function __construct($adapter = 'Http', $direction = false, $options = array()) { $this-&gt;setAdapter($adapter, $direction, $options); } public function setAdapter($adapter, $direction = false, $options = array()) { if (!is_string($adapter)) { throw new Exception\InvalidArgumentException('Adapter must be a string'); } if ($adapter[0] != '\\') { $adapter = '\Zend\File\Transfer\Adapter\\' . ucfirst($adapter); } $direction = (integer) $direction; $this-&gt;adapter[$direction] = new $adapter($options); if (!$this-&gt;adapter[$direction] instanceof Adapter\AbstractAdapter) { throw new Exception\InvalidArgumentException( 'Adapter ' . $adapter . ' does not extend Zend\File\Transfer\Adapter\AbstractAdapter' ); } return $this; } public function getAdapter($direction = null) { if ($direction === null) { return $this-&gt;adapter; } $direction = (integer) $direction; return $this-&gt;adapter[$direction]; } public function __call($method, array $options) { if (array_key_exists('direction', $options)) { $direction = (integer) $options['direction']; } else { $direction = 0; } if (method_exists($this-&gt;adapter[$direction], $method)) { return call_user_func_array(array($this-&gt;adapter[$direction], $method), $options); } throw new Exception\BadMethodCallException("Unknown method '" . $method . "' called!"); } } &lt;?php
 namespace Zend\File\Transfer\Exception; class PhpEnvironmentException extends RuntimeException {} &lt;?php
 namespace Zend\File\Transfer\Exception; use Zend\File\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\File\Transfer\Exception; use Zend\File\Exception\ExceptionInterface as FileException; interface ExceptionInterface extends FileException { } &lt;?php
 namespace Zend\File\Transfer\Exception; use Zend\File\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\File\Transfer\Exception; use Zend\File\Exception; class BadMethodCallException extends Exception\BadMethodCallException implements ExceptionInterface {} &lt;?php
 namespace Zend\File\Transfer\Adapter; use Zend\Filter\FilterPluginManager as BaseManager; class FilterPluginManager extends BaseManager { protected $aliases = array( 'decrypt' =&gt;'filedecrypt', 'encrypt' =&gt;'fileencrypt', 'lowercase' =&gt;'filelowercase', 'rename' =&gt;'filerename', 'uppercase' =&gt;'fileuppercase', ); } &lt;?php
 namespace Zend\File\Transfer\Adapter; use Zend\File\Transfer; use Zend\File\Transfer\Exception; use Zend\ProgressBar; use Zend\ProgressBar\Adapter; class Http extends AbstractAdapter { protected static $callbackApc = 'apc_fetch'; protected static $callbackUploadProgress = 'uploadprogress_get_info'; public function __construct($options = array()) { if (ini_get('file_uploads') == false) { throw new Exception\PhpEnvironmentException('File uploads are not allowed in your php config!'); } $this-&gt;setOptions($options); $this-&gt;prepareFiles(); $this-&gt;addValidator('Upload', false, $this-&gt;files); } public function setValidators(array $validators, $files = null) { $this-&gt;clearValidators(); return $this-&gt;addValidators($validators, $files); } public function removeValidator($name) { if ($name == 'Upload') { return $this; } return parent::removeValidator($name); } public function clearValidators() { parent::clearValidators(); $this-&gt;addValidator('Upload', false, $this-&gt;files); return $this; } public function send($options = null) { throw new Exception\BadMethodCallException('Method not implemented'); } public function isValid($files = null) { $content = 0; if (isset($_SERVER['CONTENT_LENGTH'])) { $content = $_SERVER['CONTENT_LENGTH']; } elseif (!empty($_POST)) { $content = serialize($_POST); } if (empty($this-&gt;files) &amp;&amp; ($content &gt; 0)) { if (is_array($files)) { $files = current($files); } $temp = array($files =&gt; array( 'name' =&gt; $files, 'error' =&gt; 1)); $validator = $this-&gt;validators['Zend\Validator\File\Upload']; $validator-&gt;setTranslator($this-&gt;getTranslator()) -&gt;setFiles($temp) -&gt;isValid($files, null); $this-&gt;messages += $validator-&gt;getMessages(); return false; } return parent::isValid($files); } public function receive($files = null) { if (!$this-&gt;isValid($files)) { return false; } $check = $this-&gt;getFiles($files); foreach ($check as $file =&gt; $content) { if (!$content['received']) { $directory = ''; $destination = $this-&gt;getDestination($file); if ($destination !== null) { $directory = $destination . DIRECTORY_SEPARATOR; } $filename = $directory . $content['name']; $rename = $this-&gt;getFilter('Rename'); if ($rename !== null) { $tmp = $rename-&gt;getNewName($content['tmp_name']); if ($tmp != $content['tmp_name']) { $filename = $tmp; } if (dirname($filename) == '.') { $filename = $directory . $filename; } $key = array_search(get_class($rename), $this-&gt;files[$file]['filters']); unset($this-&gt;files[$file]['filters'][$key]); } if (!move_uploaded_file($content['tmp_name'], $filename)) { if ($content['options']['ignoreNoFile']) { $this-&gt;files[$file]['received'] = true; $this-&gt;files[$file]['filtered'] = true; continue; } $this-&gt;files[$file]['received'] = false; return false; } if ($rename !== null) { $this-&gt;files[$file]['destination'] = dirname($filename); $this-&gt;files[$file]['name'] = basename($filename); } $this-&gt;files[$file]['tmp_name'] = $filename; $this-&gt;files[$file]['received'] = true; } if (!$content['filtered']) { if (!$this-&gt;filter($file)) { $this-&gt;files[$file]['filtered'] = false; return false; } $this-&gt;files[$file]['filtered'] = true; } } return true; } public function isSent($files = null) { throw new Exception\BadMethodCallException('Method not implemented'); } public function isReceived($files = null) { $files = $this-&gt;getFiles($files, false, true); if (empty($files)) { return false; } foreach ($files as $content) { if ($content['received'] !== true) { return false; } } return true; } public function isFiltered($files = null) { $files = $this-&gt;getFiles($files, false, true); if (empty($files)) { return false; } foreach ($files as $content) { if ($content['filtered'] !== true) { return false; } } return true; } public function isUploaded($files = null) { $files = $this-&gt;getFiles($files, false, true); if (empty($files)) { return false; } foreach ($files as $file) { if (empty($file['name'])) { return false; } } return true; } public static function getProgress($id = null) { if (!static::isApcAvailable() &amp;&amp; !static::isUploadProgressAvailable()) { throw new Exception\PhpEnvironmentException('Neither APC nor UploadProgress extension installed'); } $session = 'Zend\File\Transfer\Adapter\Http\ProgressBar'; $status = array( 'total' =&gt; 0, 'current' =&gt; 0, 'rate' =&gt; 0, 'message' =&gt; '', 'done' =&gt; false ); if (is_array($id)) { if (isset($id['progress'])) { $adapter = $id['progress']; } if (isset($id['session'])) { $session = $id['session']; } if (isset($id['id'])) { $id = $id['id']; } else { unset($id); } } if (!empty($id) &amp;&amp; (($id instanceof Adapter\AbstractAdapter) || ($id instanceof ProgressBar\ProgressBar))) { $adapter = $id; unset($id); } if (empty($id)) { if (!isset($_GET['progress_key'])) { $status['message'] = 'No upload in progress'; $status['done'] = true; } else { $id = $_GET['progress_key']; } } if (!empty($id)) { if (static::isApcAvailable()) { $call = call_user_func(static::$callbackApc, ini_get('apc.rfc1867_prefix') . $id); if (is_array($call)) { $status = $call + $status; } } elseif (static::isUploadProgressAvailable()) { $call = call_user_func(static::$callbackUploadProgress, $id); if (is_array($call)) { $status = $call + $status; $status['total'] = $status['bytes_total']; $status['current'] = $status['bytes_uploaded']; $status['rate'] = $status['speed_average']; if ($status['total'] == $status['current']) { $status['done'] = true; } } } if (!is_array($call)) { $status['done'] = true; $status['message'] = 'Failure while retrieving the upload progress'; } elseif (!empty($status['cancel_upload'])) { $status['done'] = true; $status['message'] = 'The upload has been canceled'; } else { $status['message'] = static::toByteString($status['current']) . " - " . static::toByteString($status['total']); } $status['id'] = $id; } if (isset($adapter) &amp;&amp; isset($status['id'])) { if ($adapter instanceof Adapter\AbstractAdapter) { $adapter = new ProgressBar\ProgressBar($adapter, 0, $status['total'], $session); } if (!($adapter instanceof ProgressBar\ProgressBar)) { throw new Exception\RuntimeException('Unknown Adapter given'); } if ($status['done']) { $adapter-&gt;finish(); } else { $adapter-&gt;update($status['current'], $status['message']); } $status['progress'] = $adapter; } return $status; } public static function isApcAvailable() { return (bool) ini_get('apc.enabled') &amp;&amp; (bool) ini_get('apc.rfc1867') &amp;&amp; is_callable(static::$callbackApc); } public static function isUploadProgressAvailable() { return is_callable(static::$callbackUploadProgress); } protected function prepareFiles() { $this-&gt;files = array(); foreach ($_FILES as $form =&gt; $content) { if (is_array($content['name'])) { foreach ($content as $param =&gt; $file) { foreach ($file as $number =&gt; $target) { $this-&gt;files[$form . '_' . $number . '_'][$param] = $target; $this-&gt;files[$form]['multifiles'][$number] = $form . '_' . $number . '_'; } } $this-&gt;files[$form]['name'] = $form; foreach ($this-&gt;files[$form]['multifiles'] as $key =&gt; $value) { $this-&gt;files[$value]['options'] = $this-&gt;options; $this-&gt;files[$value]['validated'] = false; $this-&gt;files[$value]['received'] = false; $this-&gt;files[$value]['filtered'] = false; $mimetype = $this-&gt;detectMimeType($this-&gt;files[$value]); $this-&gt;files[$value]['type'] = $mimetype; $filesize = $this-&gt;detectFileSize($this-&gt;files[$value]); $this-&gt;files[$value]['size'] = $filesize; if ($this-&gt;options['detectInfos']) { $_FILES[$form]['type'][$key] = $mimetype; $_FILES[$form]['size'][$key] = $filesize; } } } else { $this-&gt;files[$form] = $content; $this-&gt;files[$form]['options'] = $this-&gt;options; $this-&gt;files[$form]['validated'] = false; $this-&gt;files[$form]['received'] = false; $this-&gt;files[$form]['filtered'] = false; $mimetype = $this-&gt;detectMimeType($this-&gt;files[$form]); $this-&gt;files[$form]['type'] = $mimetype; $filesize = $this-&gt;detectFileSize($this-&gt;files[$form]); $this-&gt;files[$form]['size'] = $filesize; if ($this-&gt;options['detectInfos']) { $_FILES[$form]['type'] = $mimetype; $_FILES[$form]['size'] = $filesize; } } } return $this; } } &lt;?php
 namespace Zend\File\Transfer\Adapter; use Zend\Validator\ValidatorPluginManager as BaseManager; class ValidatorPluginManager extends BaseManager { protected $aliases = array( 'count' =&gt;'filecount', 'crc32' =&gt;'filecrc32', 'excludeextension' =&gt;'fileexcludeextension', 'excludemimetype' =&gt;'fileexcludemimetype', 'exists' =&gt;'fileexists', 'extension' =&gt;'fileextension', 'filessize' =&gt;'filefilessize', 'hash' =&gt;'filehash', 'imagesize' =&gt;'fileimagesize', 'iscompressed' =&gt;'fileiscompressed', 'isimage' =&gt;'fileisimage', 'md5' =&gt;'filemd5', 'mimetype' =&gt;'filemimetype', 'notexists' =&gt;'filenotexists', 'sha1' =&gt;'filesha1', 'size' =&gt;'filesize', 'upload' =&gt;'fileupload', 'wordcount' =&gt;'filewordcount', ); } &lt;?php
 namespace Zend\File\Transfer\Adapter; use ErrorException; use Zend\File\Transfer; use Zend\File\Transfer\Exception; use Zend\Filter; use Zend\Filter\Exception as FilterException; use Zend\I18n\Translator\Translator; use Zend\I18n\Translator\TranslatorAwareInterface; use Zend\Stdlib\ErrorHandler; use Zend\Validator; abstract class AbstractAdapter implements TranslatorAwareInterface { const FILTER = 'FILTER'; const VALIDATOR = 'VALIDATOR'; protected $break = array(); protected $filterManager; protected $filters = array(); protected $loaders = array(); protected $messages = array(); protected $translator; protected $translatorEnabled = true; protected $translatorTextDomain = 'default'; protected $validatorManager; protected $validators = array(); protected $files = array(); protected $tmpDir; protected $options = array( 'ignoreNoFile' =&gt; false, 'useByteString' =&gt; true, 'magicFile' =&gt; null, 'detectInfos' =&gt; true, ); abstract public function send($options = null); abstract public function receive($options = null); abstract public function isSent($files = null); abstract public function isReceived($files = null); abstract public function isUploaded($files = null); abstract public function isFiltered($files = null); public function setFilterManager(FilterPluginManager $filterManager) { $this-&gt;filterManager = $filterManager; return $this; } public function getFilterManager() { if (!$this-&gt;filterManager instanceof FilterPluginManager) { $this-&gt;setFilterManager(new FilterPluginManager()); } return $this-&gt;filterManager; } public function setValidatorManager(ValidatorPluginManager $validatorManager) { $this-&gt;validatorManager = $validatorManager; return $this; } public function getValidatorManager() { if (!$this-&gt;validatorManager instanceof ValidatorPluginManager) { $this-&gt;setValidatorManager(new ValidatorPluginManager()); } return $this-&gt;validatorManager; } public function addValidator($validator, $breakChainOnFailure = false, $options = null, $files = null) { if (is_string($validator)) { $validator = $this-&gt;getValidatorManager()-&gt;get($validator, $options); if (is_array($options) &amp;&amp; isset($options['messages'])) { if (is_array($options['messages'])) { $validator-&gt;setMessages($options['messages']); } elseif (is_string($options['messages'])) { $validator-&gt;setMessage($options['messages']); } unset($options['messages']); } } if (!$validator instanceof Validator\ValidatorInterface) { throw new Exception\InvalidArgumentException( 'Invalid validator provided to addValidator; ' . 'must be string or Zend\Validator\ValidatorInterface' ); } $name = get_class($validator); $this-&gt;validators[$name] = $validator; $this-&gt;break[$name] = $breakChainOnFailure; $files = $this-&gt;getFiles($files, true, true); foreach ($files as $file) { if ($name == 'NotEmpty') { $temp = $this-&gt;files[$file]['validators']; $this-&gt;files[$file]['validators'] = array($name); $this-&gt;files[$file]['validators'] += $temp; } else { $this-&gt;files[$file]['validators'][] = $name; } $this-&gt;files[$file]['validated'] = false; } return $this; } public function addValidators(array $validators, $files = null) { foreach ($validators as $name =&gt; $validatorInfo) { if ($validatorInfo instanceof Validator\ValidatorInterface) { $this-&gt;addValidator($validatorInfo, null, null, $files); } elseif (is_string($validatorInfo)) { if (!is_int($name)) { $this-&gt;addValidator($name, null, $validatorInfo, $files); } else { $this-&gt;addValidator($validatorInfo, null, null, $files); } } elseif (is_array($validatorInfo)) { $argc = count($validatorInfo); $breakChainOnFailure = false; $options = array(); if (isset($validatorInfo['validator'])) { $validator = $validatorInfo['validator']; if (isset($validatorInfo['breakChainOnFailure'])) { $breakChainOnFailure = $validatorInfo['breakChainOnFailure']; } if (isset($validatorInfo['options'])) { $options = $validatorInfo['options']; } $this-&gt;addValidator($validator, $breakChainOnFailure, $options, $files); } else { if (is_string($name)) { $validator = $name; $options = $validatorInfo; $this-&gt;addValidator($validator, $breakChainOnFailure, $options, $files); } else { $file = $files; switch (true) { case (0 == $argc): break; case (1 &lt;= $argc): $validator = array_shift($validatorInfo); case (2 &lt;= $argc): $breakChainOnFailure = array_shift($validatorInfo); case (3 &lt;= $argc): $options = array_shift($validatorInfo); case (4 &lt;= $argc): if (!empty($validatorInfo)) { $file = array_shift($validatorInfo); } default: $this-&gt;addValidator($validator, $breakChainOnFailure, $options, $file); break; } } } } else { throw new Exception\InvalidArgumentException('Invalid validator passed to addValidators()'); } } return $this; } public function setValidators(array $validators, $files = null) { $this-&gt;clearValidators(); return $this-&gt;addValidators($validators, $files); } public function hasValidator($name) { return (false !== $this-&gt;getValidatorIdentifier($name)); } public function getValidator($name) { if (false === ($identifier = $this-&gt;getValidatorIdentifier($name))) { return null; } return $this-&gt;validators[$identifier]; } public function getValidators($files = null) { if ($files == null) { return $this-&gt;validators; } $files = $this-&gt;getFiles($files, true, true); $validators = array(); foreach ($files as $file) { if (!empty($this-&gt;files[$file]['validators'])) { $validators += $this-&gt;files[$file]['validators']; } } $validators = array_unique($validators); $result = array(); foreach ($validators as $validator) { $result[$validator] = $this-&gt;validators[$validator]; } return $result; } public function removeValidator($name) { if (false === ($key = $this-&gt;getValidatorIdentifier($name))) { return $this; } unset($this-&gt;validators[$key]); foreach (array_keys($this-&gt;files) as $file) { if (empty($this-&gt;files[$file]['validators'])) { continue; } $index = array_search($key, $this-&gt;files[$file]['validators']); if ($index === false) { continue; } unset($this-&gt;files[$file]['validators'][$index]); $this-&gt;files[$file]['validated'] = false; } return $this; } public function clearValidators() { $this-&gt;validators = array(); foreach (array_keys($this-&gt;files) as $file) { $this-&gt;files[$file]['validators'] = array(); $this-&gt;files[$file]['validated'] = false; } return $this; } public function setOptions($options = array(), $files = null) { $file = $this-&gt;getFiles($files, false, true); if (is_array($options)) { if (empty($file)) { $this-&gt;options = array_merge($this-&gt;options, $options); } foreach ($options as $name =&gt; $value) { foreach ($file as $key =&gt; $content) { switch ($name) { case 'magicFile' : $this-&gt;files[$key]['options'][$name] = (string) $value; break; case 'ignoreNoFile' : case 'useByteString' : case 'detectInfos' : $this-&gt;files[$key]['options'][$name] = (bool) $value; break; default: continue; } } } } return $this; } public function getOptions($files = null) { $file = $this-&gt;getFiles($files, false, true); foreach ($file as $key =&gt; $content) { if (isset($this-&gt;files[$key]['options'])) { $options[$key] = $this-&gt;files[$key]['options']; } else { $options[$key] = array(); } } return $options; } public function isValid($files = null) { $check = $this-&gt;getFiles($files, false, true); if (empty($check)) { return false; } $translator = $this-&gt;getTranslator(); $this-&gt;messages = array(); $break = false; foreach ($check as $content) { if (array_key_exists('validators', $content) &amp;&amp; in_array('Zend\Validator\File\Count', $content['validators'])) { $validator = $this-&gt;validators['Zend\Validator\File\Count']; $count = $content; if (empty($content['tmp_name'])) { continue; } if (array_key_exists('destination', $content)) { $checkit = $content['destination']; } else { $checkit = dirname($content['tmp_name']); } $checkit .= DIRECTORY_SEPARATOR . $content['name']; $validator-&gt;addFile($checkit); } } if (isset($count)) { if (!$validator-&gt;isValid($count['tmp_name'], $count)) { $this-&gt;messages += $validator-&gt;getMessages(); } } foreach ($check as $key =&gt; $content) { $fileerrors = array(); if (array_key_exists('validators', $content) &amp;&amp; $content['validated']) { continue; } if (array_key_exists('validators', $content)) { foreach ($content['validators'] as $class) { $validator = $this-&gt;validators[$class]; if (method_exists($validator, 'setTranslator')) { $validator-&gt;setTranslator($translator); } if (($class === 'Zend\Validator\File\Upload') &amp;&amp; (empty($content['tmp_name']))) { $tocheck = $key; } else { $tocheck = $content['tmp_name']; } if (!$validator-&gt;isValid($tocheck, $content)) { $fileerrors += $validator-&gt;getMessages(); } if (!empty($content['options']['ignoreNoFile']) &amp;&amp; (isset($fileerrors['fileUploadErrorNoFile']))) { unset($fileerrors['fileUploadErrorNoFile']); break; } if (($class === 'Zend\Validator\File\Upload') &amp;&amp; (count($fileerrors) &gt; 0)) { break; } if (($this-&gt;break[$class]) &amp;&amp; (count($fileerrors) &gt; 0)) { $break = true; break; } } } if (count($fileerrors) &gt; 0) { $this-&gt;files[$key]['validated'] = false; } else { $this-&gt;files[$key]['validated'] = true; } $this-&gt;messages += $fileerrors; if ($break) { break; } } if (count($this-&gt;messages) &gt; 0) { return false; } return true; } public function getMessages() { return $this-&gt;messages; } public function getErrors() { return array_keys($this-&gt;messages); } public function hasErrors() { return (!empty($this-&gt;messages)); } public function addFilter($filter, $options = null, $files = null) { if (is_string($filter)) { $filter = $this-&gt;getFilterManager()-&gt;get($filter, $options); } if (!$filter instanceof Filter\FilterInterface) { throw new Exception\InvalidArgumentException('Invalid filter specified'); } $class = get_class($filter); $this-&gt;filters[$class] = $filter; $files = $this-&gt;getFiles($files, true, true); foreach ($files as $file) { $this-&gt;files[$file]['filters'][] = $class; } return $this; } public function addFilters(array $filters, $files = null) { foreach ($filters as $key =&gt; $spec) { if ($spec instanceof Filter\FilterInterface) { $this-&gt;addFilter($spec, null, $files); continue; } if (is_string($key)) { $this-&gt;addFilter($key, $spec, $files); continue; } if (is_int($key)) { if (is_string($spec)) { $this-&gt;addFilter($spec, null, $files); continue; } if (is_array($spec)) { if (!array_key_exists('filter', $spec)) { continue; } $filter = $spec['filter']; unset($spec['filter']); $this-&gt;addFilter($filter, $spec, $files); continue; } continue; } } return $this; } public function setFilters(array $filters, $files = null) { $this-&gt;clearFilters(); return $this-&gt;addFilters($filters, $files); } public function hasFilter($name) { return (false !== $this-&gt;getFilterIdentifier($name)); } public function getFilter($name) { if (false === ($identifier = $this-&gt;getFilterIdentifier($name))) { return null; } return $this-&gt;filters[$identifier]; } public function getFilters($files = null) { if ($files === null) { return $this-&gt;filters; } $files = $this-&gt;getFiles($files, true, true); $filters = array(); foreach ($files as $file) { if (!empty($this-&gt;files[$file]['filters'])) { $filters += $this-&gt;files[$file]['filters']; } } $filters = array_unique($filters); $result = array(); foreach ($filters as $filter) { $result[] = $this-&gt;filters[$filter]; } return $result; } public function removeFilter($name) { if (false === ($key = $this-&gt;getFilterIdentifier($name))) { return $this; } unset($this-&gt;filters[$key]); foreach (array_keys($this-&gt;files) as $file) { if (empty($this-&gt;files[$file]['filters'])) { continue; } $index = array_search($key, $this-&gt;files[$file]['filters']); if ($index === false) { continue; } unset($this-&gt;files[$file]['filters'][$index]); } return $this; } public function clearFilters() { $this-&gt;filters = array(); foreach (array_keys($this-&gt;files) as $file) { $this-&gt;files[$file]['filters'] = array(); } return $this; } public function getFileName($file = null, $path = true) { $files = $this-&gt;getFiles($file, true, true); $result = array(); $directory = ""; foreach ($files as $file) { if (empty($this-&gt;files[$file]['name'])) { continue; } if ($path === true) { $directory = $this-&gt;getDestination($file) . DIRECTORY_SEPARATOR; } $result[$file] = $directory . $this-&gt;files[$file]['name']; } if (count($result) == 1) { return current($result); } return $result; } public function getFileInfo($file = null) { return $this-&gt;getFiles($file); } public function setDestination($destination, $files = null) { $orig = $files; $destination = rtrim($destination, "/\\"); if (!is_dir($destination)) { throw new Exception\InvalidArgumentException('The given destination is not a directory or does not exist'); } if (!is_writable($destination)) { throw new Exception\InvalidArgumentException('The given destination is not writeable'); } if ($files === null) { foreach ($this-&gt;files as $file =&gt; $content) { $this-&gt;files[$file]['destination'] = $destination; } } else { $files = $this-&gt;getFiles($files, true, true); if (empty($files) and is_string($orig)) { $this-&gt;files[$orig]['destination'] = $destination; } foreach ($files as $file) { $this-&gt;files[$file]['destination'] = $destination; } } return $this; } public function getDestination($files = null) { $orig = $files; $files = $this-&gt;getFiles($files, false, true); $destinations = array(); if (empty($files) and is_string($orig)) { if (isset($this-&gt;files[$orig]['destination'])) { $destinations[$orig] = $this-&gt;files[$orig]['destination']; } else { throw new Exception\InvalidArgumentException( sprintf('The file transfer adapter can not find "%s"', $orig) ); } } foreach ($files as $key =&gt; $content) { if (isset($this-&gt;files[$key]['destination'])) { $destinations[$key] = $this-&gt;files[$key]['destination']; } else { $tmpdir = $this-&gt;getTmpDir(); $this-&gt;setDestination($tmpdir, $key); $destinations[$key] = $tmpdir; } } if (empty($destinations)) { $destinations = $this-&gt;getTmpDir(); } elseif (count($destinations) == 1) { $destinations = current($destinations); } return $destinations; } public function setTranslator(Translator $translator = null, $textDomain = null) { $this-&gt;translator = $translator; if (null !== $textDomain) { $this-&gt;setTranslatorTextDomain($textDomain); } return $this; } public function getTranslator() { if ($this-&gt;isTranslatorEnabled()) { return null; } return $this-&gt;translator; } public function hasTranslator() { return (bool) $this-&gt;getTranslator(); } public function setTranslatorEnabled($flag = true) { $this-&gt;translatorEnabled = (bool) $flag; return $this; } public function isTranslatorEnabled() { return $this-&gt;translatorEnabled; } public function setTranslatorTextDomain($textDomain = 'default') { $this-&gt;translatorTextDomain = $textDomain; return $this; } public function getTranslatorTextDomain() { return $this-&gt;translatorTextDomain; } public function getHash($hash = 'crc32', $files = null) { if (!in_array($hash, hash_algos())) { throw new Exception\InvalidArgumentException('Unknown hash algorithm'); } $files = $this-&gt;getFiles($files); $result = array(); foreach ($files as $key =&gt; $value) { if (file_exists($value['name'])) { $result[$key] = hash_file($hash, $value['name']); } elseif (file_exists($value['tmp_name'])) { $result[$key] = hash_file($hash, $value['tmp_name']); } elseif (empty($value['options']['ignoreNoFile'])) { throw new Exception\InvalidArgumentException("The file '{$value['name']}' does not exist"); } } if (count($result) == 1) { return current($result); } return $result; } public function getFileSize($files = null) { $files = $this-&gt;getFiles($files); $result = array(); foreach ($files as $key =&gt; $value) { if (file_exists($value['name']) || file_exists($value['tmp_name'])) { if ($value['options']['useByteString']) { $result[$key] = static::toByteString($value['size']); } else { $result[$key] = $value['size']; } } elseif (empty($value['options']['ignoreNoFile'])) { throw new Exception\InvalidArgumentException("The file '{$value['name']}' does not exist"); } else { continue; } } if (count($result) == 1) { return current($result); } return $result; } protected function detectFileSize($value) { if (file_exists($value['name'])) { $filename = $value['name']; } elseif (file_exists($value['tmp_name'])) { $filename = $value['tmp_name']; } else { return null; } ErrorHandler::start(); $filesize = filesize($filename); $return = ErrorHandler::stop(); if ($return instanceof ErrorException) { $filesize = 0; } return sprintf("%u", $filesize); } public function getMimeType($files = null) { $files = $this-&gt;getFiles($files); $result = array(); foreach ($files as $key =&gt; $value) { if (file_exists($value['name']) || file_exists($value['tmp_name'])) { $result[$key] = $value['type']; } elseif (empty($value['options']['ignoreNoFile'])) { throw new Exception\InvalidArgumentException("the file '{$value['name']}' does not exist"); } else { continue; } } if (count($result) == 1) { return current($result); } return $result; } protected function detectMimeType($value) { if (file_exists($value['name'])) { $file = $value['name']; } elseif (file_exists($value['tmp_name'])) { $file = $value['tmp_name']; } else { return null; } if (class_exists('finfo', false)) { $const = defined('FILEINFO_MIME_TYPE') ? FILEINFO_MIME_TYPE : FILEINFO_MIME; if (!empty($value['options']['magicFile'])) { ErrorHandler::start(); $mime = finfo_open($const, $value['options']['magicFile']); ErrorHandler::stop(); } if (empty($mime)) { ErrorHandler::start(); $mime = finfo_open($const); ErrorHandler::stop(); } if (!empty($mime)) { $result = finfo_file($mime, $file); } unset($mime); } if (empty($result) &amp;&amp; (function_exists('mime_content_type') &amp;&amp; ini_get('mime_magic.magicfile'))) { $result = mime_content_type($file); } if (empty($result)) { $result = 'application/octet-stream'; } return $result; } protected static function toByteString($size) { $sizes = array('B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'); for ($i=0; $size &gt;= 1024 &amp;&amp; $i &lt; 9; $i++) { $size /= 1024; } return round($size, 2) . $sizes[$i]; } protected function filter($files = null) { $check = $this-&gt;getFiles($files); foreach ($check as $name =&gt; $content) { if (array_key_exists('filters', $content)) { foreach ($content['filters'] as $class) { $filter = $this-&gt;filters[$class]; try { $result = $filter-&gt;filter($this-&gt;getFileName($name)); $this-&gt;files[$name]['destination'] = dirname($result); $this-&gt;files[$name]['name'] = basename($result); } catch (FilterException\ExceptionInterface $e) { $this-&gt;messages += array($e-&gt;getMessage()); } } } } if (count($this-&gt;messages) &gt; 0) { return false; } return true; } protected function getTmpDir() { if (null === $this-&gt;tmpDir) { $tmpdir = array(); if (function_exists('sys_get_temp_dir')) { $tmpdir[] = sys_get_temp_dir(); } if (!empty($_ENV['TMP'])) { $tmpdir[] = realpath($_ENV['TMP']); } if (!empty($_ENV['TMPDIR'])) { $tmpdir[] = realpath($_ENV['TMPDIR']); } if (!empty($_ENV['TEMP'])) { $tmpdir[] = realpath($_ENV['TEMP']); } $upload = ini_get('upload_tmp_dir'); if ($upload) { $tmpdir[] = realpath($upload); } foreach ($tmpdir as $directory) { if ($this-&gt;isPathWriteable($directory)) { $this-&gt;tmpDir = $directory; } } if (empty($this-&gt;tmpDir)) { $tempFile = tempnam(md5(uniqid(rand(), true)), ''); if ($tempFile) { $this-&gt;tmpDir = realpath(dirname($tempFile)); unlink($tempFile); } else { throw new Exception\RuntimeException('Could not determine a temporary directory'); } } $this-&gt;tmpDir = rtrim($this-&gt;tmpDir, "/\\"); } return $this-&gt;tmpDir; } protected function isPathWriteable($path) { $tempFile = rtrim($path, "/\\"); $tempFile .= '/' . 'test.1'; ErrorHandler::start(); $result = file_put_contents($tempFile, 'TEST'); ErrorHandler::stop(); if ($result == false) { return false; } ErrorHandler::start(); $result = unlink($tempFile); ErrorHandler::stop(); if ($result == false) { return false; } return true; } protected function getFiles($files, $names = false, $noexception = false) { $check = array(); if (is_string($files)) { $files = array($files); } if (is_array($files)) { foreach ($files as $find) { $found = array(); foreach ($this-&gt;files as $file =&gt; $content) { if (!isset($content['name'])) { continue; } if (($content['name'] === $find) &amp;&amp; isset($content['multifiles'])) { foreach ($content['multifiles'] as $multifile) { $found[] = $multifile; } break; } if ($file === $find) { $found[] = $file; break; } if ($content['name'] === $find) { $found[] = $file; break; } } if (empty($found)) { if ($noexception !== false) { return array(); } throw new Exception\RuntimeException(sprintf('The file transfer adapter can not find "%s"', $find)); } foreach ($found as $checked) { $check[$checked] = $this-&gt;files[$checked]; } } } if ($files === null) { $check = $this-&gt;files; $keys = array_keys($check); foreach ($keys as $key) { if (isset($check[$key]['multifiles'])) { unset($check[$key]); } } } if ($names) { $check = array_keys($check); } return $check; } protected function getValidatorIdentifier($name) { if (array_key_exists($name, $this-&gt;validators)) { return $name; } foreach (array_keys($this-&gt;validators) as $test) { if (preg_match('/' . preg_quote($name) . '$/i', $test)) { return $test; } } return false; } protected function getFilterIdentifier($name) { if (array_key_exists($name, $this-&gt;filters)) { return $name; } foreach (array_keys($this-&gt;filters) as $test) { if (preg_match('/' . preg_quote($name) . '$/i', $test)) { return $test; } } return false; } } &lt;?php
 namespace Zend\ModuleManager\Exception; class MissingDependencyModuleException extends RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\ModuleManager\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\ModuleManager\Exception; interface ExceptionInterface { } &lt;?php
 namespace Zend\ModuleManager\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\ModuleManager\Feature; interface RouteProviderInterface { public function getRouteConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface ControllerProviderInterface { public function getControllerConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface FormElementProviderInterface { public function getFormElementConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface ConfigProviderInterface { public function getConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface ServiceProviderInterface { public function getServiceConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface DependencyIndicatorInterface { public function getModuleDependencies(); } &lt;?php
 namespace Zend\ModuleManager\Feature; use Zend\ModuleManager\ModuleManagerInterface; interface InitProviderInterface { public function init(ModuleManagerInterface $manager); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface SerializerProviderInterface { public function getSerializerConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; use Zend\Console\Adapter\AdapterInterface; interface ConsoleUsageProviderInterface { public function getConsoleUsage(AdapterInterface $console); } &lt;?php
 namespace Zend\ModuleManager\Feature; use Zend\EventManager\EventInterface; interface BootstrapListenerInterface { public function onBootstrap(EventInterface $e); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface ViewHelperProviderInterface { public function getViewHelperConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface ControllerPluginProviderInterface { public function getControllerPluginConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface ValidatorProviderInterface { public function getValidatorConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface LocatorRegisteredInterface { } &lt;?php
 namespace Zend\ModuleManager\Feature; use Zend\Console\Adapter\AdapterInterface; interface ConsoleBannerProviderInterface { public function getConsoleBanner(AdapterInterface $console); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface AutoloaderProviderInterface { public function getAutoloaderConfig(); } &lt;?php
 namespace Zend\ModuleManager\Feature; interface FilterProviderInterface { public function getFilterConfig(); } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\ModuleManager\Feature\InitProviderInterface; use Zend\ModuleManager\ModuleEvent; class InitTrigger extends AbstractListener { public function __invoke(ModuleEvent $e) { $module = $e-&gt;getModule(); if (!$module instanceof InitProviderInterface &amp;&amp; !method_exists($module, 'init') ) { return; } $module-&gt;init($e-&gt;getTarget()); } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\ModuleManager\Feature\BootstrapListenerInterface; use Zend\ModuleManager\ModuleEvent; use Zend\Mvc\MvcEvent; class OnBootstrapListener extends AbstractListener { public function __invoke(ModuleEvent $e) { $module = $e-&gt;getModule(); if (!$module instanceof BootstrapListenerInterface &amp;&amp; !method_exists($module, 'onBootstrap') ) { return; } $moduleManager = $e-&gt;getTarget(); $events = $moduleManager-&gt;getEventManager(); $sharedEvents = $events-&gt;getSharedManager(); $sharedEvents-&gt;attach('Zend\Mvc\Application', MvcEvent::EVENT_BOOTSTRAP, array($module, 'onBootstrap')); } } &lt;?php
 namespace Zend\ModuleManager\Listener\Exception; use Zend\ModuleManager\Exception; class InvalidArgumentException extends Exception\InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\ModuleManager\Listener\Exception; use Zend\ModuleManager\Exception\ExceptionInterface as Exception; interface ExceptionInterface extends Exception { } &lt;?php
 namespace Zend\ModuleManager\Listener\Exception; use Zend\ModuleManager\Exception; class RuntimeException extends Exception\RuntimeException implements ExceptionInterface { } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\ModuleManager\ModuleEvent; class ModuleResolverListener extends AbstractListener { public function __invoke(ModuleEvent $e) { $moduleName = $e-&gt;getModuleName(); $class = $moduleName . '\Module'; if (!class_exists($class)) { return false; } $module = new $class; return $module; } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\EventManager\ListenerAggregateInterface; use Zend\ServiceManager\ServiceManager; interface ServiceListenerInterface extends ListenerAggregateInterface { public function addServiceManager($serviceManager, $key, $moduleInterface, $method); public function setDefaultServiceConfig($configuration); } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\Loader\ModuleAutoloader; use Zend\ModuleManager\ModuleEvent; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; class ModuleLoaderListener extends AbstractListener implements ListenerAggregateInterface { protected $moduleLoader; protected $generateCache; protected $listeners = array(); public function __construct(ListenerOptions $options = null) { parent::__construct($options); $this-&gt;generateCache = $this-&gt;options-&gt;getModuleMapCacheEnabled(); $this-&gt;moduleLoader = new ModuleAutoloader($this-&gt;options-&gt;getModulePaths()); if ($this-&gt;hasCachedClassMap()) { $this-&gt;generateCache = false; $this-&gt;moduleLoader-&gt;setModuleClassMap($this-&gt;getCachedConfig()); } } public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach( ModuleEvent::EVENT_LOAD_MODULES, array($this-&gt;moduleLoader, 'register'), 9000 ); if ($this-&gt;generateCache) { $this-&gt;listeners[] = $events-&gt;attach( ModuleEvent::EVENT_LOAD_MODULES_POST, array($this, 'onLoadModulesPost') ); } return $this; } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $key =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$key]); } } } protected function hasCachedClassMap() { if ( $this-&gt;options-&gt;getModuleMapCacheEnabled() &amp;&amp; file_exists($this-&gt;options-&gt;getModuleMapCacheFile()) ) { return true; } return false; } protected function getCachedConfig() { return include $this-&gt;options-&gt;getModuleMapCacheFile(); } public function onLoadModulesPost(ModuleEvent $event) { $this-&gt;moduleLoader-&gt;unregister(); $this-&gt;writeArrayToFile( $this-&gt;options-&gt;getModuleMapCacheFile(), $this-&gt;moduleLoader-&gt;getModuleClassMap() ); } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Traversable; use Zend\Config\Config; use Zend\Config\Factory as ConfigFactory; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\ModuleManager\Feature\ConfigProviderInterface; use Zend\ModuleManager\ModuleEvent; use Zend\Stdlib\ArrayUtils; use Zend\Stdlib\Glob; class ConfigListener extends AbstractListener implements ConfigMergerInterface, ListenerAggregateInterface { const STATIC_PATH = 'static_path'; const GLOB_PATH = 'glob_path'; protected $listeners = array(); protected $configs = array(); protected $mergedConfig = array(); protected $mergedConfigObject; protected $skipConfig = false; protected $paths = array(); public function __construct(ListenerOptions $options = null) { parent::__construct($options); if ($this-&gt;hasCachedConfig()) { $this-&gt;skipConfig = true; $this-&gt;setMergedConfig($this-&gt;getCachedConfig()); } else { $this-&gt;addConfigGlobPaths($this-&gt;getOptions()-&gt;getConfigGlobPaths()); $this-&gt;addConfigStaticPaths($this-&gt;getOptions()-&gt;getConfigStaticPaths()); } } public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULES, array($this, 'onloadModulesPre'), 1000); if ($this-&gt;skipConfig) { return $this; } $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE, array($this, 'onLoadModule')); $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULES, array($this, 'onLoadModulesPost'), -1000); return $this; } public function onloadModulesPre(ModuleEvent $e) { $e-&gt;setConfigListener($this); return $this; } public function onLoadModule(ModuleEvent $e) { $module = $e-&gt;getModule(); if (!$module instanceof ConfigProviderInterface &amp;&amp; !is_callable(array($module, 'getConfig')) ) { return $this; } $config = $module-&gt;getConfig(); $this-&gt;addConfig($e-&gt;getModuleName(), $config); return $this; } public function onLoadModulesPost(ModuleEvent $e) { foreach ($this-&gt;paths as $path) { $this-&gt;addConfigByPath($path['path'], $path['type']); } $this-&gt;mergedConfig = $this-&gt;getOptions()-&gt;getExtraConfig() ?: array(); foreach ($this-&gt;configs as $config) { $this-&gt;mergedConfig = ArrayUtils::merge($this-&gt;mergedConfig, $config); } if ( $this-&gt;getOptions()-&gt;getConfigCacheEnabled() &amp;&amp; false === $this-&gt;skipConfig ) { $configFile = $this-&gt;getOptions()-&gt;getConfigCacheFile(); $this-&gt;writeArrayToFile($configFile, $this-&gt;getMergedConfig(false)); } return $this; } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $key =&gt; $listener) { $events-&gt;detach($listener); unset($this-&gt;listeners[$key]); } $this-&gt;listeners = array(); return $this; } public function getMergedConfig($returnConfigAsObject = true) { if ($returnConfigAsObject === true) { if ($this-&gt;mergedConfigObject === null) { $this-&gt;mergedConfigObject = new Config($this-&gt;mergedConfig); } return $this-&gt;mergedConfigObject; } return $this-&gt;mergedConfig; } public function setMergedConfig(array $config) { $this-&gt;mergedConfig = $config; $this-&gt;mergedConfigObject = null; return $this; } public function addConfigGlobPaths($globPaths) { $this-&gt;addConfigPaths($globPaths, self::GLOB_PATH); return $this; } public function addConfigGlobPath($globPath) { $this-&gt;addConfigPath($globPath, self::GLOB_PATH); return $this; } public function addConfigStaticPaths($staticPaths) { $this-&gt;addConfigPaths($staticPaths, self::STATIC_PATH); return $this; } public function addConfigStaticPath($staticPath) { $this-&gt;addConfigPath($staticPath, self::STATIC_PATH); return $this; } protected function addConfigPaths($paths, $type) { if ($paths instanceof Traversable) { $paths = ArrayUtils::iteratorToArray($paths); } if (!is_array($paths)) { throw new Exception\InvalidArgumentException( sprintf('Argument passed to %::%s() must be an array, ' . 'implement the Traversable interface, or be an ' . 'instance of Zend\Config\Config. %s given.', __CLASS__, __METHOD__, gettype($paths)) ); } foreach ($paths as $path) { $this-&gt;addConfigPath($path, $type); } } protected function addConfigPath($path, $type) { if (!is_string($path)) { throw new Exception\InvalidArgumentException( sprintf('Parameter to %s::%s() must be a string; %s given.', __CLASS__, __METHOD__, gettype($path)) ); } $this-&gt;paths[] = array('type' =&gt; $type, 'path' =&gt; $path); return $this; } protected function addConfig($key, $config) { if ($config instanceof Traversable) { $config = ArrayUtils::iteratorToArray($config); } if (!is_array($config)) { throw new Exception\InvalidArgumentException( sprintf('Config being merged must be an array, ' . 'implement the Traversable interface, or be an ' . 'instance of Zend\Config\Config. %s given.', gettype($config)) ); } $this-&gt;configs[$key] = $config; return $this; } protected function addConfigByPath($path, $type) { switch ($type) { case self::STATIC_PATH: $this-&gt;addConfig($path, ConfigFactory::fromFile($path)); break; case self::GLOB_PATH: foreach (Glob::glob($path, Glob::GLOB_BRACE) as $file) { $this-&gt;addConfig($file, ConfigFactory::fromFile($file)); } break; } return $this; } protected function hasCachedConfig() { if (($this-&gt;getOptions()-&gt;getConfigCacheEnabled()) &amp;&amp; (file_exists($this-&gt;getOptions()-&gt;getConfigCacheFile())) ) { return true; } return false; } protected function getCachedConfig() { return include $this-&gt;getOptions()-&gt;getConfigCacheFile(); } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Traversable; use Zend\Stdlib\AbstractOptions; class ListenerOptions extends AbstractOptions { protected $modulePaths = array(); protected $configGlobPaths = array(); protected $configStaticPaths = array(); protected $extraConfig = array(); protected $configCacheEnabled = false; protected $configCacheKey; protected $cacheDir; protected $checkDependencies = true; protected $moduleMapCacheEnabled = false; protected $moduleMapCacheKey; public function getModulePaths() { return $this-&gt;modulePaths; } public function setModulePaths($modulePaths) { if (!is_array($modulePaths) &amp;&amp; !$modulePaths instanceof Traversable) { throw new Exception\InvalidArgumentException( sprintf('Argument passed to %s::%s() must be an array, ' . 'implement the Traversable interface, or be an ' . 'instance of Zend\Config\Config. %s given.', __CLASS__, __METHOD__, gettype($modulePaths)) ); } $this-&gt;modulePaths = $modulePaths; return $this; } public function getConfigGlobPaths() { return $this-&gt;configGlobPaths; } public function getConfigStaticPaths() { return $this-&gt;configStaticPaths; } public function setConfigGlobPaths($configGlobPaths) { if (!is_array($configGlobPaths) &amp;&amp; !$configGlobPaths instanceof Traversable) { throw new Exception\InvalidArgumentException( sprintf('Argument passed to %s::%s() must be an array, ' . 'implement the Traversable interface, or be an ' . 'instance of Zend\Config\Config. %s given.', __CLASS__, __METHOD__, gettype($configGlobPaths)) ); } $this-&gt;configGlobPaths = $configGlobPaths; return $this; } public function setConfigStaticPaths($configStaticPaths) { if (!is_array($configStaticPaths) &amp;&amp; !$configStaticPaths instanceof Traversable) { throw new Exception\InvalidArgumentException( sprintf('Argument passed to %s::%s() must be an array, ' . 'implement the Traversable interface, or be an ' . 'instance of Zend\Config\Config. %s given.', __CLASS__, __METHOD__, gettype($configStaticPaths)) ); } $this-&gt;configStaticPaths = $configStaticPaths; return $this; } public function getExtraConfig() { return $this-&gt;extraConfig; } public function setExtraConfig($extraConfig) { if (!is_array($extraConfig) &amp;&amp; !$extraConfig instanceof Traversable) { throw new Exception\InvalidArgumentException( sprintf('Argument passed to %s::%s() must be an array, ' . 'implement the Traversable interface, or be an ' . 'instance of Zend\Config\Config. %s given.', __CLASS__, __METHOD__, gettype($extraConfig)) ); } $this-&gt;extraConfig = $extraConfig; return $this; } public function getConfigCacheEnabled() { return $this-&gt;configCacheEnabled; } public function setConfigCacheEnabled($enabled) { $this-&gt;configCacheEnabled = (bool) $enabled; return $this; } public function getConfigCacheKey() { return (string) $this-&gt;configCacheKey; } public function setConfigCacheKey($configCacheKey) { $this-&gt;configCacheKey = $configCacheKey; return $this; } public function getConfigCacheFile() { return $this-&gt;getCacheDir() . '/module-config-cache.' . $this-&gt;getConfigCacheKey().'.php'; } public function getCacheDir() { return $this-&gt;cacheDir; } public function setCacheDir($cacheDir) { if (null === $cacheDir) { $this-&gt;cacheDir = $cacheDir; } else { $this-&gt;cacheDir = static::normalizePath($cacheDir); } return $this; } public function getModuleMapCacheEnabled() { return $this-&gt;moduleMapCacheEnabled; } public function setModuleMapCacheEnabled($enabled) { $this-&gt;moduleMapCacheEnabled = (bool) $enabled; return $this; } public function getModuleMapCacheKey() { return (string) $this-&gt;moduleMapCacheKey; } public function setModuleMapCacheKey($moduleMapCacheKey) { $this-&gt;moduleMapCacheKey = $moduleMapCacheKey; return $this; } public function getModuleMapCacheFile() { return $this-&gt;getCacheDir() . '/module-classmap-cache.'.$this-&gt;getModuleMapCacheKey().'.php'; } public function getCheckDependencies() { return $this-&gt;checkDependencies; } public function setCheckDependencies($checkDependencies) { $this-&gt;checkDependencies = (bool) $checkDependencies; return $this; } public static function normalizePath($path) { $path = rtrim($path, '/'); $path = rtrim($path, '\\'); return $path; } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\Loader\AutoloaderFactory; use Zend\ModuleManager\Feature\AutoloaderProviderInterface; use Zend\ModuleManager\ModuleEvent; class AutoloaderListener extends AbstractListener { public function __invoke(ModuleEvent $e) { $module = $e-&gt;getModule(); if (!$module instanceof AutoloaderProviderInterface &amp;&amp; !method_exists($module, 'getAutoloaderConfig') ) { return; } $autoloaderConfig = $module-&gt;getAutoloaderConfig(); AutoloaderFactory::factory($autoloaderConfig); } } &lt;?php
 namespace Zend\ModuleManager\Listener; abstract class AbstractListener { protected $options; public function __construct(ListenerOptions $options = null) { if (null === $options) { $this-&gt;setOptions(new ListenerOptions); } else { $this-&gt;setOptions($options); } } public function getOptions() { return $this-&gt;options; } public function setOptions(ListenerOptions $options) { $this-&gt;options = $options; return $this; } protected function writeArrayToFile($filePath, $array) { $content = "&lt;?php\nreturn " . var_export($array, 1) . ';'; file_put_contents($filePath, $content); return $this; } } &lt;?php
 namespace Zend\ModuleManager\Listener; interface ConfigMergerInterface { public function getMergedConfig($returnConfigAsObject = true); public function setMergedConfig(array $config); } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\EventManager\Event; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\ModuleManager\Feature\LocatorRegisteredInterface; use Zend\ModuleManager\ModuleEvent; use Zend\Mvc\MvcEvent; class LocatorRegistrationListener extends AbstractListener implements ListenerAggregateInterface { protected $modules = array(); protected $listeners = array(); public function onLoadModule(ModuleEvent $e) { if (!$e-&gt;getModule() instanceof LocatorRegisteredInterface) { return; } $this-&gt;modules[] = $e-&gt;getModule(); } public function onLoadModules(Event $e) { $moduleManager = $e-&gt;getTarget(); $events = $moduleManager-&gt;getEventManager()-&gt;getSharedManager(); if (!$events) { return; } $events-&gt;attach('Zend\Mvc\Application', MvcEvent::EVENT_BOOTSTRAP, function ($e) use ($moduleManager) { $moduleClassName = get_class($moduleManager); $application = $e-&gt;getApplication(); $services = $application-&gt;getServiceManager(); if (!$services-&gt;has($moduleClassName)) { $services-&gt;setService($moduleClassName, $moduleManager); } }, 1000); if (0 === count($this-&gt;modules)) { return; } $events-&gt;attach('Zend\Mvc\Application', MvcEvent::EVENT_BOOTSTRAP, array($this, 'onBootstrap'), 1000); } public function onBootstrap(Event $e) { $application = $e-&gt;getApplication(); $services = $application-&gt;getServiceManager(); foreach ($this-&gt;modules as $module) { $moduleClassName = get_class($module); if (!$services-&gt;has($moduleClassName)) { $services-&gt;setService($moduleClassName, $module); } } } public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE, array($this, 'onLoadModule')); $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULES, array($this, 'onLoadModules'), -1000); return $this; } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $key =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$key]); } } } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\ModuleManager\Exception; use Zend\ModuleManager\Feature\DependencyIndicatorInterface; use Zend\ModuleManager\ModuleEvent; class ModuleDependencyCheckerListener { protected $loaded = array(); public function __invoke(ModuleEvent $e) { $module = $e-&gt;getModule(); if ($module instanceof DependencyIndicatorInterface || method_exists($module, 'getModuleDependencies')) { $dependencies = $module-&gt;getModuleDependencies(); foreach ($dependencies as $dependencyModule) { if (!isset($this-&gt;loaded[$dependencyModule])) { throw new Exception\MissingDependencyModuleException( sprintf( 'Module "%s" depends on module "%s", which was not initialized before it', $e-&gt;getModuleName(), $dependencyModule ) ); } } } $this-&gt;loaded[$e-&gt;getModuleName()] = true; } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Traversable; use Zend\EventManager\EventManagerInterface; use Zend\ModuleManager\ModuleEvent; use Zend\ServiceManager\Config as ServiceConfig; use Zend\ServiceManager\ServiceManager; use Zend\Stdlib\ArrayUtils; class ServiceListener implements ServiceListenerInterface { protected $listeners = array(); protected $defaultServiceManager; protected $defaultServiceConfig; protected $serviceManagers = array(); public function __construct(ServiceManager $serviceManager, $configuration = null) { $this-&gt;defaultServiceManager = $serviceManager; if ($configuration !== null) { $this-&gt;setDefaultServiceConfig($configuration); } } public function setDefaultServiceConfig($configuration) { $this-&gt;defaultServiceConfig = $configuration; return $this; } public function addServiceManager($serviceManager, $key, $moduleInterface, $method) { if (is_string($serviceManager)) { $smKey = $serviceManager; } elseif ($serviceManager instanceof ServiceManager) { $smKey = spl_object_hash($serviceManager); } else { throw new Exception\RuntimeException(sprintf( 'Invalid service manager provided, expected ServiceManager or string, %s provided', (string) $serviceManager )); } $this-&gt;serviceManagers[$smKey] = array( 'service_manager' =&gt; $serviceManager, 'config_key' =&gt; $key, 'module_class_interface' =&gt; $moduleInterface, 'module_class_method' =&gt; $method, 'configuration' =&gt; array(), ); if ($key === 'service_manager' &amp;&amp; $this-&gt;defaultServiceConfig) { $this-&gt;serviceManagers[$smKey]['configuration']['default_config'] = $this-&gt;defaultServiceConfig; } return $this; } public function attach(EventManagerInterface $events) { $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE, array($this, 'onLoadModule')); $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULES_POST, array($this, 'onLoadModulesPost')); return $this; } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $key =&gt; $listener) { if ($events-&gt;detach($listener)) { unset($this-&gt;listeners[$key]); } } } public function onLoadModule(ModuleEvent $e) { $module = $e-&gt;getModule(); foreach ($this-&gt;serviceManagers as $key =&gt; $sm) { if (!$module instanceof $sm['module_class_interface'] &amp;&amp; !method_exists($module, $sm['module_class_method']) ) { continue; } $config = $module-&gt;{$sm['module_class_method']}(); if ($config instanceof ServiceConfig) { $config = $this-&gt;serviceConfigToArray($config); } if ($config instanceof Traversable) { $config = ArrayUtils::iteratorToArray($config); } if (!is_array($config)) { continue; } $fullname = $e-&gt;getModuleName() . '::' . $sm['module_class_method'] . '()'; $this-&gt;serviceManagers[$key]['configuration'][$fullname] = $config; } } public function onLoadModulesPost(ModuleEvent $e) { $configListener = $e-&gt;getConfigListener(); $config = $configListener-&gt;getMergedConfig(false); foreach ($this-&gt;serviceManagers as $key =&gt; $sm) { if (isset($config[$sm['config_key']]) &amp;&amp; is_array($config[$sm['config_key']]) &amp;&amp; !empty($config[$sm['config_key']]) ) { $this-&gt;serviceManagers[$key]['configuration']['merged_config'] = $config[$sm['config_key']]; } $smConfig = array(); foreach ($this-&gt;serviceManagers[$key]['configuration'] as $configs) { if (isset($configs['configuration_classes'])) { foreach ($configs['configuration_classes'] as $class) { $configs = ArrayUtils::merge($configs, $this-&gt;serviceConfigToArray($class)); } } $smConfig = ArrayUtils::merge($smConfig, $configs); } if (!$sm['service_manager'] instanceof ServiceManager) { $instance = $this-&gt;defaultServiceManager-&gt;get($sm['service_manager']); if (!$instance instanceof ServiceManager) { throw new Exception\RuntimeException(sprintf( 'Could not find a valid ServiceManager for %s', $sm['service_manager'] )); } $sm['service_manager'] = $instance; } $serviceConfig = new ServiceConfig($smConfig); $serviceConfig-&gt;configureServiceManager($sm['service_manager']); } } protected function serviceConfigToArray($config) { if (is_string($config) &amp;&amp; class_exists($config)) { $class = $config; $config = new $class; } if (!$config instanceof ServiceConfig) { throw new Exception\RuntimeException(sprintf( 'Invalid service manager configuration class provided; received "%s", expected an instance of Zend\ServiceManager\Config', $class )); } return array( 'abstract_factories' =&gt; $config-&gt;getAbstractFactories(), 'aliases' =&gt; $config-&gt;getAliases(), 'initializers' =&gt; $config-&gt;getInitializers(), 'factories' =&gt; $config-&gt;getFactories(), 'invokables' =&gt; $config-&gt;getInvokables(), 'services' =&gt; $config-&gt;getServices(), 'shared' =&gt; $config-&gt;getShared(), ); } } &lt;?php
 namespace Zend\ModuleManager\Listener; use Zend\EventManager\EventManagerInterface; use Zend\EventManager\ListenerAggregateInterface; use Zend\ModuleManager\ModuleEvent; use Zend\Stdlib\CallbackHandler; class DefaultListenerAggregate extends AbstractListener implements ListenerAggregateInterface { protected $listeners = array(); protected $configListener; public function attach(EventManagerInterface $events) { $options = $this-&gt;getOptions(); $configListener = $this-&gt;getConfigListener(); $locatorRegistrationListener = new LocatorRegistrationListener($options); $this-&gt;listeners[] = $events-&gt;attach(new ModuleLoaderListener($options)); $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE_RESOLVE, new ModuleResolverListener); $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE, new AutoloaderListener($options), 9000); if ($options-&gt;getCheckDependencies()) { $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE, new ModuleDependencyCheckerListener, 8000); } $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE, new InitTrigger($options)); $this-&gt;listeners[] = $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULE, new OnBootstrapListener($options)); $this-&gt;listeners[] = $events-&gt;attach($locatorRegistrationListener); $this-&gt;listeners[] = $events-&gt;attach($configListener); return $this; } public function detach(EventManagerInterface $events) { foreach ($this-&gt;listeners as $key =&gt; $listener) { $detached = false; if ($listener === $this) { continue; } if ($listener instanceof ListenerAggregateInterface) { $detached = $listener-&gt;detach($events); } elseif ($listener instanceof CallbackHandler) { $detached = $events-&gt;detach($listener); } if ($detached) { unset($this-&gt;listeners[$key]); } } } public function getConfigListener() { if (!$this-&gt;configListener instanceof ConfigMergerInterface) { $this-&gt;setConfigListener(new ConfigListener($this-&gt;getOptions())); } return $this-&gt;configListener; } public function setConfigListener(ConfigMergerInterface $configListener) { $this-&gt;configListener = $configListener; return $this; } } &lt;?php
 namespace Zend\ModuleManager; use Zend\EventManager\Event; class ModuleEvent extends Event { CONST EVENT_LOAD_MODULES = 'loadModules'; CONST EVENT_LOAD_MODULE_RESOLVE = 'loadModule.resolve'; CONST EVENT_LOAD_MODULE = 'loadModule'; CONST EVENT_LOAD_MODULES_POST = 'loadModules.post'; protected $module; protected $moduleName; protected $configListener; public function getModuleName() { return $this-&gt;moduleName; } public function setModuleName($moduleName) { if (!is_string($moduleName)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a string as an argument; %s provided' ,__METHOD__, gettype($moduleName) )); } $this-&gt;moduleName = $moduleName; return $this; } public function getModule() { return $this-&gt;module; } public function setModule($module) { if (!is_object($module)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects a module object as an argument; %s provided' ,__METHOD__, gettype($module) )); } $this-&gt;module = $module; return $this; } public function getConfigListener() { return $this-&gt;configListener; } public function setConfigListener(Listener\ConfigMergerInterface $configListener) { $this-&gt;setParam('configListener', $configListener); $this-&gt;configListener = $configListener; return $this; } } &lt;?php
 namespace Zend\ModuleManager; use Traversable; use Zend\EventManager\EventManager; use Zend\EventManager\EventManagerInterface; class ModuleManager implements ModuleManagerInterface { protected $loadedModules = array(); protected $events; protected $event; protected $loadFinished; protected $modules = array(); protected $modulesAreLoaded = false; public function __construct($modules, EventManagerInterface $eventManager = null) { $this-&gt;setModules($modules); if ($eventManager instanceof EventManagerInterface) { $this-&gt;setEventManager($eventManager); } } public function onLoadModules() { if (true === $this-&gt;modulesAreLoaded) { return $this; } foreach ($this-&gt;getModules() as $moduleName) { $this-&gt;loadModule($moduleName); } $this-&gt;modulesAreLoaded = true; } public function loadModules() { if (true === $this-&gt;modulesAreLoaded) { return $this; } $this-&gt;getEventManager()-&gt;trigger(ModuleEvent::EVENT_LOAD_MODULES, $this, $this-&gt;getEvent()); $this-&gt;getEventManager()-&gt;trigger(ModuleEvent::EVENT_LOAD_MODULES_POST, $this, $this-&gt;getEvent()); return $this; } public function loadModule($moduleName) { if (isset($this-&gt;loadedModules[$moduleName])) { return $this-&gt;loadedModules[$moduleName]; } $event = ($this-&gt;loadFinished === false) ? clone $this-&gt;getEvent() : $this-&gt;getEvent(); $event-&gt;setModuleName($moduleName); $this-&gt;loadFinished = false; $result = $this-&gt;getEventManager()-&gt;trigger(ModuleEvent::EVENT_LOAD_MODULE_RESOLVE, $this, $event, function ($r) { return (is_object($r)); }); $module = $result-&gt;last(); if (!is_object($module)) { throw new Exception\RuntimeException(sprintf( 'Module (%s) could not be initialized.', $moduleName )); } $event-&gt;setModule($module); $this-&gt;loadedModules[$moduleName] = $module; $this-&gt;getEventManager()-&gt;trigger(ModuleEvent::EVENT_LOAD_MODULE, $this, $event); $this-&gt;loadFinished = true; return $module; } public function getLoadedModules($loadModules = false) { if (true === $loadModules) { $this-&gt;loadModules(); } return $this-&gt;loadedModules; } public function getModule($moduleName) { if (!isset($this-&gt;loadedModules[$moduleName])) { return null; } return $this-&gt;loadedModules[$moduleName]; } public function getModules() { return $this-&gt;modules; } public function setModules($modules) { if (is_array($modules) || $modules instanceof Traversable) { $this-&gt;modules = $modules; } else { throw new Exception\InvalidArgumentException(sprintf( 'Parameter to %s\'s %s method must be an array or implement the Traversable interface', __CLASS__, __METHOD__ )); } return $this; } public function getEvent() { if (!$this-&gt;event instanceof ModuleEvent) { $this-&gt;setEvent(new ModuleEvent); } return $this-&gt;event; } public function setEvent(ModuleEvent $event) { $this-&gt;event = $event; return $this; } public function setEventManager(EventManagerInterface $events) { $events-&gt;setIdentifiers(array( __CLASS__, get_called_class(), 'module_manager', )); $this-&gt;events = $events; $this-&gt;attachDefaultListeners(); return $this; } public function getEventManager() { if (!$this-&gt;events instanceof EventManagerInterface) { $this-&gt;setEventManager(new EventManager()); } return $this-&gt;events; } protected function attachDefaultListeners() { $events = $this-&gt;getEventManager(); $events-&gt;attach(ModuleEvent::EVENT_LOAD_MODULES, array($this, 'onLoadModules')); } } &lt;?php
 namespace Zend\ModuleManager; use Zend\EventManager\EventManagerAwareInterface; interface ModuleManagerInterface extends EventManagerAwareInterface { public function loadModules(); public function loadModule($moduleName); public function getLoadedModules($loadModules); public function getModules(); public function setModules($modules); } &lt;?php
 namespace Zend\Version; use Zend\Json\Json; final class Version { const VERSION = '2.1.3'; const VERSION_SERVICE_GITHUB = 'GITHUB'; const VERSION_SERVICE_ZEND = 'ZEND'; protected static $latestVersion; public static function compareVersion($version) { $version = strtolower($version); $version = preg_replace('/(\d)pr(\d?)/', '$1a$2', $version); return version_compare($version, strtolower(self::VERSION)); } public static function getLatest($service = self::VERSION_SERVICE_GITHUB) { if (null === static::$latestVersion) { static::$latestVersion = 'not available'; if ($service == self::VERSION_SERVICE_GITHUB) { $url = 'https://api.github.com/repos/zendframework/zf2/git/refs/tags/release-'; $apiResponse = Json::decode(file_get_contents($url), Json::TYPE_ARRAY); $tags = array_map(function ($tag) { return substr($tag['ref'], 18); }, $apiResponse); static::$latestVersion = array_reduce($tags, function ($a, $b) { return version_compare($a, $b, '&gt;') ? $a : $b; }); } elseif($service == self::VERSION_SERVICE_ZEND) { $handle = fopen('http://framework.zend.com/api/zf-version?v=2', 'r'); if (false !== $handle) { static::$latestVersion = stream_get_contents($handle); fclose($handle); } } } return static::$latestVersion; } public static function isLatest() { return static::compareVersion(static::getLatest()) &lt; 1; } } &lt;?php
 namespace Zend\I18n\Translator; use Zend\I18n\Exception; use Zend\ServiceManager\AbstractPluginManager; class LoaderPluginManager extends AbstractPluginManager { protected $invokableClasses = array( 'gettext' =&gt; 'Zend\I18n\Translator\Loader\Gettext', 'ini' =&gt; 'Zend\I18n\Translator\Loader\Ini', 'phparray' =&gt; 'Zend\I18n\Translator\Loader\PhpArray', ); public function validatePlugin($plugin) { if ($plugin instanceof Loader\FileLoaderInterface || $plugin instanceof Loader\RemoteLoaderInterface) { return; } throw new Exception\RuntimeException(sprintf( 'Plugin of type %s is invalid; must implement %s\Loader\FileLoaderInterface or %s\Loader\RemoteLoaderInterface', (is_object($plugin) ? get_class($plugin) : gettype($plugin)), __NAMESPACE__ )); } } &lt;?php
 namespace Zend\I18n\Translator; use Zend\I18n\Translator\Translator; trait TranslatorAwareTrait { protected $translator = null; protected $translatorEnabled = true; protected $translatorTextDomain = 'default'; public function setTranslator(Translator $translator = null, $textDomain = null) { $this-&gt;translator = $translator; if (!is_null($textDomain)) { $this-&gt;setTranslatorTextDomain($textDomain); } return $this; } public function getTranslator() { return $this-&gt;translator; } public function hasTranslator() { return !is_null($this-&gt;translator); } public function setTranslatorEnabled($enabled = true) { $this-&gt;translatorEnabled = $enabled; return $this; } public function isTranslatorEnabled() { return $this-&gt;translatorEnabled; } public function setTranslatorTextDomain($textDomain = 'default') { $this-&gt;translatorTextDomain = $textDomain; return $this; } public function getTranslatorTextDomain() { return $this-&gt;translatorTextDomain; } } &lt;?php
 namespace Zend\I18n\Translator\Loader; interface FileLoaderInterface { public function load($locale, $filename); } &lt;?php
 namespace Zend\I18n\Translator\Loader; use Zend\I18n\Exception; use Zend\I18n\Translator\Plural\Rule as PluralRule; use Zend\I18n\Translator\TextDomain; class PhpArray implements FileLoaderInterface { public function load($locale, $filename) { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\InvalidArgumentException(sprintf( 'Could not open file %s for reading', $filename )); } $messages = include $filename; if (!is_array($messages)) { throw new Exception\InvalidArgumentException(sprintf( 'Expected an array, but received %s', gettype($messages) )); } $textDomain = new TextDomain($messages); if (array_key_exists('', $textDomain)) { if (isset($textDomain['']['plural_forms'])) { $textDomain-&gt;setPluralRule( PluralRule::fromString($textDomain['']['plural_forms']) ); } unset($textDomain['']); } return $textDomain; } } &lt;?php
 namespace Zend\I18n\Translator\Loader; interface RemoteLoaderInterface { public function load($locale, $textDomain); } &lt;?php
 namespace Zend\I18n\Translator\Loader; use Zend\Config\Reader\Ini as IniReader; use Zend\I18n\Exception; use Zend\I18n\Translator\Plural\Rule as PluralRule; use Zend\I18n\Translator\TextDomain; class Ini implements FileLoaderInterface { public function load($locale, $filename) { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\InvalidArgumentException(sprintf( 'Could not open file %s for reading', $filename )); } $messages = array(); $iniReader = new IniReader(); $messagesNamespaced = $iniReader-&gt;fromFile($filename); $list = $messagesNamespaced; if (isset($messagesNamespaced['translation'])) { $list = $messagesNamespaced['translation']; } foreach ($list as $message) { if (!is_array($message) || count($message) &lt; 2) { throw new Exception\InvalidArgumentException( 'Each INI row must be an array with message and translation' ); } if (isset($message['message']) &amp;&amp; isset($message['translation'])) { $messages[$message['message']] = $message['translation']; continue; } $messages[array_shift($message)] = array_shift($message); } if (!is_array($messages)) { throw new Exception\InvalidArgumentException(sprintf( 'Expected an array, but received %s', gettype($messages) )); } $textDomain = new TextDomain($messages); if (array_key_exists('plural', $messagesNamespaced) &amp;&amp; isset($messagesNamespaced['plural']['plural_forms']) ) { $textDomain-&gt;setPluralRule( PluralRule::fromString($messagesNamespaced['plural']['plural_forms']) ); } return $textDomain; } } &lt;?php
 namespace Zend\I18n\Translator\Loader; use Zend\I18n\Exception; use Zend\I18n\Translator\Plural\Rule as PluralRule; use Zend\I18n\Translator\TextDomain; use Zend\Stdlib\ErrorHandler; class Gettext implements FileLoaderInterface { protected $file; protected $littleEndian; public function load($locale, $filename) { if (!is_file($filename) || !is_readable($filename)) { throw new Exception\InvalidArgumentException(sprintf( 'Could not open file %s for reading', $filename )); } $textDomain = new TextDomain(); ErrorHandler::start(); $this-&gt;file = fopen($filename, 'rb'); $error = ErrorHandler::stop(); if (false === $this-&gt;file) { throw new Exception\InvalidArgumentException(sprintf( 'Could not open file %s for reading', $filename ), 0, $error); } $magic = fread($this-&gt;file, 4); if ($magic == "\x95\x04\x12\xde") { $this-&gt;littleEndian = false; } elseif ($magic == "\xde\x12\x04\x95") { $this-&gt;littleEndian = true; } else { fclose($this-&gt;file); throw new Exception\InvalidArgumentException(sprintf( '%s is not a valid gettext file', $filename )); } $majorRevision = ($this-&gt;readInteger() &gt;&gt; 16); if ($majorRevision !== 0 &amp;&amp; $majorRevision !== 1) { fclose($this-&gt;file); throw new Exception\InvalidArgumentException(sprintf( '%s has an unknown major revision', $filename )); } $numStrings = $this-&gt;readInteger(); $originalStringTableOffset = $this-&gt;readInteger(); $translationStringTableOffset = $this-&gt;readInteger(); fseek($this-&gt;file, $originalStringTableOffset); $originalStringTable = $this-&gt;readIntegerList(2 * $numStrings); fseek($this-&gt;file, $translationStringTableOffset); $translationStringTable = $this-&gt;readIntegerList(2 * $numStrings); for ($current = 0; $current &lt; $numStrings; $current++) { $sizeKey = $current * 2 + 1; $offsetKey = $current * 2 + 2; $originalStringSize = $originalStringTable[$sizeKey]; $originalStringOffset = $originalStringTable[$offsetKey]; $translationStringSize = $translationStringTable[$sizeKey]; $translationStringOffset = $translationStringTable[$offsetKey]; $originalString = array(''); if ($originalStringSize &gt; 0) { fseek($this-&gt;file, $originalStringOffset); $originalString = explode("\0", fread($this-&gt;file, $originalStringSize)); } if ($translationStringSize &gt; 0) { fseek($this-&gt;file, $translationStringOffset); $translationString = explode("\0", fread($this-&gt;file, $translationStringSize)); if (count($originalString) &gt; 1 &amp;&amp; count($translationString) &gt; 1) { $textDomain[$originalString[0]] = $translationString; array_shift($originalString); foreach ($originalString as $string) { $textDomain[$string] = ''; } } else { $textDomain[$originalString[0]] = $translationString[0]; } } } if (array_key_exists('', $textDomain)) { $rawHeaders = explode("\n", trim($textDomain[''])); foreach ($rawHeaders as $rawHeader) { list($header, $content) = explode(':', $rawHeader, 2); if (trim(strtolower($header)) === 'plural-forms') { $textDomain-&gt;setPluralRule(PluralRule::fromString($content)); } } unset($textDomain['']); } fclose($this-&gt;file); return $textDomain; } protected function readInteger() { if ($this-&gt;littleEndian) { $result = unpack('Vint', fread($this-&gt;file, 4)); } else { $result = unpack('Nint', fread($this-&gt;file, 4)); } return $result['int']; } protected function readIntegerList($num) { if ($this-&gt;littleEndian) { return unpack('V' . $num, fread($this-&gt;file, 4 * $num)); } return unpack('N' . $num, fread($this-&gt;file, 4 * $num)); } } &lt;?php
 namespace Zend\I18n\Translator; interface TranslatorAwareInterface { public function setTranslator(Translator $translator = null, $textDomain = null); public function getTranslator(); public function hasTranslator(); public function setTranslatorEnabled($enabled = true); public function isTranslatorEnabled(); public function setTranslatorTextDomain($textDomain = 'default'); public function getTranslatorTextDomain(); } &lt;?php
 namespace Zend\I18n\Translator; use ArrayObject; use Zend\I18n\Translator\Plural\Rule as PluralRule; class TextDomain extends ArrayObject { protected $pluralRule; public function setPluralRule(PluralRule $rule) { $this-&gt;pluralRule = $rule; return $this; } public function getPluralRule() { if ($this-&gt;pluralRule === null) { $this-&gt;setPluralRule(PluralRule::fromString('nplurals=2; plural=n==1')); } return $this-&gt;pluralRule; } } &lt;?php
 namespace Zend\I18n\Translator; use Locale; use Traversable; use Zend\Cache; use Zend\Cache\Storage\StorageInterface as CacheStorage; use Zend\I18n\Exception; use Zend\I18n\Translator\Loader\FileLoaderInterface; use Zend\I18n\Translator\Loader\RemoteLoaderInterface; use Zend\Stdlib\ArrayUtils; class Translator { protected $messages = array(); protected $files = array(); protected $patterns = array(); protected $remote = array(); protected $locale; protected $fallbackLocale; protected $cache; protected $pluginManager; public static function factory($options) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } elseif (!is_array($options)) { throw new Exception\InvalidArgumentException(sprintf( '%s expects an array or Traversable object; received "%s"', __METHOD__, (is_object($options) ? get_class($options) : gettype($options)) )); } $translator = new static(); if (isset($options['locale'])) { $locales = (array) $options['locale']; $translator-&gt;setLocale(array_shift($locales)); if (count($locales) &gt; 0) { $translator-&gt;setFallbackLocale(array_shift($locales)); } } if (isset($options['translation_file_patterns'])) { if (!is_array($options['translation_file_patterns'])) { throw new Exception\InvalidArgumentException( '"translation_file_patterns" should be an array' ); } $requiredKeys = array('type', 'base_dir', 'pattern'); foreach ($options['translation_file_patterns'] as $pattern) { foreach ($requiredKeys as $key) { if (!isset($pattern[$key])) { throw new Exception\InvalidArgumentException( "'{$key}' is missing for translation pattern options" ); } } $translator-&gt;addTranslationFilePattern( $pattern['type'], $pattern['base_dir'], $pattern['pattern'], isset($pattern['text_domain']) ? $pattern['text_domain'] : 'default' ); } } if (isset($options['translation_files'])) { if (!is_array($options['translation_files'])) { throw new Exception\InvalidArgumentException( '"translation_files" should be an array' ); } $requiredKeys = array('type', 'filename'); foreach ($options['translation_files'] as $file) { foreach ($requiredKeys as $key) { if (!isset($file[$key])) { throw new Exception\InvalidArgumentException( "'{$key}' is missing for translation file options" ); } } $translator-&gt;addTranslationFile( $file['type'], $file['filename'], isset($file['text_domain']) ? $file['text_domain'] : 'default', isset($file['locale']) ? $file['locale'] : null ); } } if (isset($options['remote_translation'])) { if (!is_array($options['remote_translation'])) { throw new Exception\InvalidArgumentException( '"remote_translation" should be an array' ); } $requiredKeys = array('type'); foreach ($options['remote_translation'] as $remote) { foreach ($requiredKeys as $key) { if (!isset($remote[$key])) { throw new Exception\InvalidArgumentException( "'{$key}' is missing for remote translation options" ); } } $translator-&gt;addRemoteTranslations( $remote['type'], isset($remote['text_domain']) ? $remote['text_domain'] : 'default' ); } } if (isset($options['cache'])) { if ($options['cache'] instanceof CacheStorage) { $translator-&gt;setCache($options['cache']); } else { $translator-&gt;setCache(Cache\StorageFactory::factory($options['cache'])); } } return $translator; } public function setLocale($locale) { $this-&gt;locale = $locale; return $this; } public function getLocale() { if ($this-&gt;locale === null) { $this-&gt;locale = Locale::getDefault(); } return $this-&gt;locale; } public function setFallbackLocale($locale) { $this-&gt;fallbackLocale = $locale; return $this; } public function getFallbackLocale() { return $this-&gt;fallbackLocale; } public function setCache(CacheStorage $cache = null) { $this-&gt;cache = $cache; return $this; } public function getCache() { return $this-&gt;cache; } public function setPluginManager(LoaderPluginManager $pluginManager) { $this-&gt;pluginManager = $pluginManager; return $this; } public function getPluginManager() { if (!$this-&gt;pluginManager instanceof LoaderPluginManager) { $this-&gt;setPluginManager(new LoaderPluginManager()); } return $this-&gt;pluginManager; } public function translate($message, $textDomain = 'default', $locale = null) { $locale = ($locale ?: $this-&gt;getLocale()); $translation = $this-&gt;getTranslatedMessage($message, $locale, $textDomain); if ($translation !== null &amp;&amp; $translation !== '') { return $translation; } if (null !== ($fallbackLocale = $this-&gt;getFallbackLocale()) &amp;&amp; $locale !== $fallbackLocale ) { return $this-&gt;translate($message, $textDomain, $fallbackLocale); } return $message; } public function translatePlural( $singular, $plural, $number, $textDomain = 'default', $locale = null ) { $locale = $locale ?: $this-&gt;getLocale(); $translation = $this-&gt;getTranslatedMessage($singular, $locale, $textDomain); if ($translation === null || $translation === '') { if (null !== ($fallbackLocale = $this-&gt;getFallbackLocale()) &amp;&amp; $locale !== $fallbackLocale ) { return $this-&gt;translatePlural( $singular, $plural, $number, $textDomain, $fallbackLocale ); } return ($number == 1 ? $singular : $plural); } $index = $this-&gt;messages[$textDomain][$locale] -&gt;getPluralRule() -&gt;evaluate($number); if (!isset($translation[$index])) { throw new Exception\OutOfBoundsException(sprintf( 'Provided index %d does not exist in plural array', $index )); } return $translation[$index]; } protected function getTranslatedMessage( $message, $locale = null, $textDomain = 'default' ) { if ($message === '') { return ''; } if (!isset($this-&gt;messages[$textDomain][$locale])) { $this-&gt;loadMessages($textDomain, $locale); } if (!isset($this-&gt;messages[$textDomain][$locale][$message])) { return null; } return $this-&gt;messages[$textDomain][$locale][$message]; } public function addTranslationFile( $type, $filename, $textDomain = 'default', $locale = null ) { $locale = $locale ?: '*'; if (!isset($this-&gt;files[$textDomain])) { $this-&gt;files[$textDomain] = array(); } $this-&gt;files[$textDomain][$locale][] = array( 'type' =&gt; $type, 'filename' =&gt; $filename, ); return $this; } public function addTranslationFilePattern( $type, $baseDir, $pattern, $textDomain = 'default' ) { if (!isset($this-&gt;patterns[$textDomain])) { $this-&gt;patterns[$textDomain] = array(); } $this-&gt;patterns[$textDomain][] = array( 'type' =&gt; $type, 'baseDir' =&gt; rtrim($baseDir, '/'), 'pattern' =&gt; $pattern, ); return $this; } public function addRemoteTranslations($type, $textDomain = 'default') { if (!isset($this-&gt;remote[$textDomain])) { $this-&gt;remote[$textDomain] = array(); } $this-&gt;remote[$textDomain][] = $type; return $this; } protected function loadMessages($textDomain, $locale) { if (!isset($this-&gt;messages[$textDomain])) { $this-&gt;messages[$textDomain] = array(); } if (null !== ($cache = $this-&gt;getCache())) { $cacheId = 'Zend_I18n_Translator_Messages_' . md5($textDomain . $locale); if (null !== ($result = $cache-&gt;getItem($cacheId))) { $this-&gt;messages[$textDomain][$locale] = $result; return; } } $hasToCache = false; if (isset($this-&gt;remote[$textDomain])) { foreach ($this-&gt;remote[$textDomain] as $loaderType) { $loader = $this-&gt;getPluginManager()-&gt;get($loaderType); if (!$loader instanceof RemoteLoaderInterface) { throw new Exception\RuntimeException('Specified loader is not a remote loader'); } if (isset($this-&gt;messages[$textDomain][$locale])) { $this-&gt;messages[$textDomain][$locale]-&gt;exchangeArray(array_merge( (array) $this-&gt;messages[$textDomain][$locale], (array) $loader-&gt;load($locale, $textDomain) )); } else { $this-&gt;messages[$textDomain][$locale] = $loader-&gt;load($locale, $textDomain); } $hasToCache = true; } } if (isset($this-&gt;patterns[$textDomain])) { foreach ($this-&gt;patterns[$textDomain] as $pattern) { $filename = $pattern['baseDir'] . '/' . sprintf($pattern['pattern'], $locale); if (is_file($filename)) { $loader = $this-&gt;getPluginManager()-&gt;get($pattern['type']); if (!$loader instanceof FileLoaderInterface) { throw new Exception\RuntimeException('Specified loader is not a file loader'); } if (isset($this-&gt;messages[$textDomain][$locale])) { $this-&gt;messages[$textDomain][$locale]-&gt;exchangeArray(array_merge( (array) $this-&gt;messages[$textDomain][$locale], (array) $loader-&gt;load($locale, $filename) )); } else { $this-&gt;messages[$textDomain][$locale] = $loader-&gt;load($locale, $filename); } $hasToCache = true; } } } foreach (array($locale, '*') as $currentLocale) { if (!isset($this-&gt;files[$textDomain][$currentLocale])) { continue; } foreach ($this-&gt;files[$textDomain][$currentLocale] as $file) { $loader = $this-&gt;getPluginManager()-&gt;get($file['type']); if (!$loader instanceof FileLoaderInterface) { throw new Exception\RuntimeException('Specified loader is not a file loader'); } if (isset($this-&gt;messages[$textDomain][$locale])) { $this-&gt;messages[$textDomain][$locale]-&gt;exchangeArray(array_merge( (array) $this-&gt;messages[$textDomain][$locale], (array) $loader-&gt;load($locale, $file['filename']) )); } else { $this-&gt;messages[$textDomain][$locale] = $loader-&gt;load($locale, $file['filename']); } $hasToCache = true; } unset($this-&gt;files[$textDomain][$currentLocale]); } if ($hasToCache &amp;&amp; $cache !== null) { $cache-&gt;setItem($cacheId, $this-&gt;messages[$textDomain][$locale]); } } } &lt;?php
 namespace Zend\I18n\Translator; use Zend\ServiceManager\FactoryInterface; use Zend\ServiceManager\ServiceLocatorInterface; class TranslatorServiceFactory implements FactoryInterface { public function createService(ServiceLocatorInterface $serviceLocator) { $config = $serviceLocator-&gt;get('Config'); $trConfig = isset($config['translator']) ? $config['translator'] : array(); $translator = Translator::factory($trConfig); return $translator; } } &lt;?php
 namespace Zend\I18n\Translator\Plural; use Zend\I18n\Exception; class Parser { protected $string; protected $currentPos; protected $currentToken; protected $symbolTable = array(); public function __construct() { $this-&gt;populateSymbolTable(); } protected function populateSymbolTable() { $this-&gt;registerSymbol('?', 20)-&gt;setLeftDenotationGetter( function (Symbol $self, Symbol $left) { $self-&gt;first = $left; $self-&gt;second = $self-&gt;parser-&gt;expression(); $self-&gt;parser-&gt;advance(':'); $self-&gt;third = $self-&gt;parser-&gt;expression(); return $self; } ); $this-&gt;registerSymbol(':'); $this-&gt;registerLeftInfixSymbol('||', 30); $this-&gt;registerLeftInfixSymbol('&amp;&amp;', 40); $this-&gt;registerLeftInfixSymbol('==', 50); $this-&gt;registerLeftInfixSymbol('!=', 50); $this-&gt;registerLeftInfixSymbol('&gt;', 50); $this-&gt;registerLeftInfixSymbol('&lt;', 50); $this-&gt;registerLeftInfixSymbol('&gt;=', 50); $this-&gt;registerLeftInfixSymbol('&lt;=', 50); $this-&gt;registerLeftInfixSymbol('-', 60); $this-&gt;registerLeftInfixSymbol('+', 60); $this-&gt;registerLeftInfixSymbol('*', 70); $this-&gt;registerLeftInfixSymbol('/', 70); $this-&gt;registerLeftInfixSymbol('%', 70); $this-&gt;registerPrefixSymbol('!', 80); $this-&gt;registerSymbol('n')-&gt;setNullDenotationGetter( function (Symbol $self) { return $self; } ); $this-&gt;registerSymbol('number')-&gt;setNullDenotationGetter( function (Symbol $self) { return $self; } ); $this-&gt;registerSymbol('(')-&gt;setNullDenotationGetter( function (Symbol $self) { $expression = $self-&gt;parser-&gt;expression(); $self-&gt;parser-&gt;advance(')'); return $expression; } ); $this-&gt;registerSymbol(')'); $this-&gt;registerSymbol('eof'); } protected function registerLeftInfixSymbol($id, $leftBindingPower) { $this-&gt;registerSymbol($id, $leftBindingPower)-&gt;setLeftDenotationGetter( function (Symbol $self, Symbol $left) use ($leftBindingPower) { $self-&gt;first = $left; $self-&gt;second = $self-&gt;parser-&gt;expression($leftBindingPower); return $self; } ); } protected function registerRightInfixSymbol($id, $leftBindingPower) { $this-&gt;registerSymbol($id, $leftBindingPower)-&gt;setLeftDenotationGetter( function (Symbol $self, Symbol $left) use ($leftBindingPower) { $self-&gt;first = $left; $self-&gt;second = $self-&gt;parser-&gt;expression($leftBindingPower - 1); return $self; } ); } protected function registerPrefixSymbol($id, $leftBindingPower) { $this-&gt;registerSymbol($id, $leftBindingPower)-&gt;setNullDenotationGetter( function (Symbol $self) use ($leftBindingPower) { $self-&gt;first = $self-&gt;parser-&gt;expression($leftBindingPower); $self-&gt;second = null; return $self; } ); } protected function registerSymbol($id, $leftBindingPower = 0) { if (isset($this-&gt;symbolTable[$id])) { $symbol = $this-&gt;symbolTable[$id]; $symbol-&gt;leftBindingPower = max( $symbol-&gt;leftBindingPower, $leftBindingPower ); } else { $symbol = new Symbol($this, $id, $leftBindingPower); $this-&gt;symbolTable[$id] = $symbol; } return $symbol; } protected function getSymbol($id) { if (!isset($this-&gt;symbolTable[$id])) { } return clone $this-&gt;symbolTable[$id]; } public function parse($string) { $this-&gt;string = $string . "\0"; $this-&gt;currentPos = 0; $this-&gt;currentToken = $this-&gt;getNextToken(); return $this-&gt;expression(); } public function expression($rightBindingPower = 0) { $token = $this-&gt;currentToken; $this-&gt;currentToken = $this-&gt;getNextToken(); $left = $token-&gt;getNullDenotation(); while ($rightBindingPower &lt; $this-&gt;currentToken-&gt;leftBindingPower) { $token = $this-&gt;currentToken; $this-&gt;currentToken = $this-&gt;getNextToken(); $left = $token-&gt;getLeftDenotation($left); } return $left; } public function advance($id = null) { if ($id !== null &amp;&amp; $this-&gt;currentToken-&gt;id !== $id) { throw new Exception\ParseException(sprintf( 'Expected token with id %s but received %s', $id, $this-&gt;currentToken-&gt;id )); } $this-&gt;currentToken = $this-&gt;getNextToken(); } protected function getNextToken() { while ($this-&gt;string[$this-&gt;currentPos] === ' ' || $this-&gt;string[$this-&gt;currentPos] === "\t") { $this-&gt;currentPos++; } $result = $this-&gt;string[$this-&gt;currentPos++]; $value = null; switch ($result) { case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': while (ctype_digit($this-&gt;string[$this-&gt;currentPos])) { $result .= $this-&gt;string[$this-&gt;currentPos++]; } $id = 'number'; $value = (int) $result; break; case '=': case '&amp;': case '|': if ($this-&gt;string[$this-&gt;currentPos] === $result) { $this-&gt;currentPos++; $id = $result . $result; } else { } break; case '!': case '&lt;': case '&gt;': if ($this-&gt;string[$this-&gt;currentPos] === '=') { $this-&gt;currentPos++; $result .= '='; } $id = $result; break; case '*': case '/': case '%': case '+': case '-': case 'n': case '?': case ':': case '(': case ')': $id = $result; break; case ';': case "\n": case "\0": $id = 'eof'; $this-&gt;currentPos--; break; default: throw new Exception\ParseException(sprintf( 'Found invalid character "%s" in input stream', $result )); break; } $token = $this-&gt;getSymbol($id); $token-&gt;value = $value; return $token; } } &lt;?php
 namespace Zend\I18n\Translator\Plural; use Zend\I18n\Exception; class Rule { protected static $parser; protected $ast; protected $numPlurals; protected function __construct($numPlurals, array $ast) { $this-&gt;numPlurals = $numPlurals; $this-&gt;ast = $ast; } public function evaluate($number) { $result = $this-&gt;evaluateAstPart($this-&gt;ast, abs((int) $number)); if ($result &lt; 0 || $result &gt;= $this-&gt;numPlurals) { throw new Exception\RangeException(sprintf( 'Calculated result %s is between 0 and %d', $result, ($this-&gt;numPlurals - 1) )); } return $result; } protected function evaluateAstPart(array $ast, $number) { switch ($ast['id']) { case 'number': return $ast['arguments'][0]; case 'n': return $number; case '+': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) + $this-&gt;evaluateAstPart($ast['arguments'][1], $number); case '-': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) - $this-&gt;evaluateAstPart($ast['arguments'][1], $number); case '/': return floor( $this-&gt;evaluateAstPart($ast['arguments'][0], $number) / $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ); case '*': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) * $this-&gt;evaluateAstPart($ast['arguments'][1], $number); case '%': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) % $this-&gt;evaluateAstPart($ast['arguments'][1], $number); case '&gt;': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) &gt; $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '&gt;=': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) &gt;= $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '&lt;': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) &lt; $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '&lt;=': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) &lt;= $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '==': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) == $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '!=': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) != $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '&amp;&amp;': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) &amp;&amp; $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '||': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) || $this-&gt;evaluateAstPart($ast['arguments'][1], $number) ? 1 : 0; case '!': return !$this-&gt;evaluateAstPart($ast['arguments'][0], $number) ? 1 : 0; case '?': return $this-&gt;evaluateAstPart($ast['arguments'][0], $number) ? $this-&gt;evaluateAstPart($ast['arguments'][1], $number) : $this-&gt;evaluateAstPart($ast['arguments'][2], $number); default: throw new Exception\ParseException(sprintf( 'Unknown token: %s', $ast['id'] )); } } public static function fromString($string) { if (static::$parser === null) { static::$parser = new Parser(); } if (!preg_match('(nplurals=(?P&lt;nplurals&gt;\d+))', $string, $match)) { throw new Exception\ParseException(sprintf( 'Unknown or invalid parser rule: %s', $string )); } $numPlurals = (int) $match['nplurals']; if (!preg_match('(plural=(?P&lt;plural&gt;[^;\n]+))', $string, $match)) { throw new Exception\ParseException(sprintf( 'Unknown or invalid parser rule: %s', $string )); } $tree = static::$parser-&gt;parse($match['plural']); $ast = static::createAst($tree); return new static($numPlurals, $ast); } protected static function createAst(Symbol $symbol) { $ast = array('id' =&gt; $symbol-&gt;id, 'arguments' =&gt; array()); switch ($symbol-&gt;id) { case 'n': break; case 'number': $ast['arguments'][] = $symbol-&gt;value; break; case '!': $ast['arguments'][] = static::createAst($symbol-&gt;first); break; case '?': $ast['arguments'][] = static::createAst($symbol-&gt;first); $ast['arguments'][] = static::createAst($symbol-&gt;second); $ast['arguments'][] = static::createAst($symbol-&gt;third); break; default: $ast['arguments'][] = static::createAst($symbol-&gt;first); $ast['arguments'][] = static::createAst($symbol-&gt;second); break; } return $ast; } } &lt;?php
 namespace Zend\I18n\Translator\Plural; use Closure; use Zend\I18n\Exception; class Symbol { public $parser; public $id; public $leftBindingPower; protected $nullDenotationGetter; protected $leftDenotationGetter; public $value; public $first; public $second; public $third; public function __construct(Parser $parser, $id, $leftBindingPower) { $this-&gt;parser = $parser; $this-&gt;id = $id; $this-&gt;leftBindingPower = $leftBindingPower; } public function setNullDenotationGetter(Closure $getter) { $this-&gt;nullDenotationGetter = $getter; return $this; } public function setLeftDenotationGetter(Closure $getter) { $this-&gt;leftDenotationGetter = $getter; return $this; } public function getNullDenotation() { if ($this-&gt;nullDenotationGetter === null) { throw new Exception\ParseException(sprintf( 'Syntax error: %s', $this-&gt;id )); } $function = $this-&gt;nullDenotationGetter; return $function($this); } public function getLeftDenotation($left) { if ($this-&gt;leftDenotationGetter === null) { throw new Exception\ParseException(sprintf( 'Unknown operator: %s', $this-&gt;id )); } $function = $this-&gt;leftDenotationGetter; return $function($this, $left); } } &lt;?php
 namespace Zend\I18n\Validator; use Zend\I18n\Filter\Alpha as AlphaFilter; class Alpha extends Alnum { const INVALID = 'alphaInvalid'; const NOT_ALPHA = 'notAlpha'; const STRING_EMPTY = 'alphaStringEmpty'; protected static $filter = null; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String expected", self::NOT_ALPHA =&gt; "The input contains non alphabetic characters", self::STRING_EMPTY =&gt; "The input is an empty string" ); protected $options = array( 'allowWhiteSpace' =&gt; false, ); public function isValid($value) { if (!is_string($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); if ('' === $value) { $this-&gt;error(self::STRING_EMPTY); return false; } if (null === static::$filter) { static::$filter = new AlphaFilter(); } static::$filter-&gt;setAllowWhiteSpace($this-&gt;options['allowWhiteSpace']); if ($value !== static::$filter-&gt;filter($value)) { $this-&gt;error(self::NOT_ALPHA); return false; } return true; } } &lt;?php
 namespace Zend\I18n\Validator; use Zend\I18n\Filter\Alnum as AlnumFilter; use Zend\Validator\AbstractValidator; class Alnum extends AbstractValidator { const INVALID = 'alnumInvalid'; const NOT_ALNUM = 'notAlnum'; const STRING_EMPTY = 'alnumStringEmpty'; protected static $filter = null; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String, integer or float expected", self::NOT_ALNUM =&gt; "The input contains characters which are non alphabetic and no digits", self::STRING_EMPTY =&gt; "The input is an empty string", ); protected $options = array( 'allowWhiteSpace' =&gt; false, ); public function __construct($allowWhiteSpace = false) { $options = is_array($allowWhiteSpace) ? $allowWhiteSpace : null; parent::__construct($options); if (is_scalar($allowWhiteSpace)) { $this-&gt;options['allowWhiteSpace'] = (bool) $allowWhiteSpace; } } public function getAllowWhiteSpace() { return $this-&gt;options['allowWhiteSpace']; } public function setAllowWhiteSpace($allowWhiteSpace) { $this-&gt;options['allowWhiteSpace'] = (bool) $allowWhiteSpace; return $this; } public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value) &amp;&amp; !is_float($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); if ('' === $value) { $this-&gt;error(self::STRING_EMPTY); return false; } if (null === static::$filter) { static::$filter = new AlnumFilter(); } static::$filter-&gt;setAllowWhiteSpace($this-&gt;options['allowWhiteSpace']); if ($value != static::$filter-&gt;filter($value)) { $this-&gt;error(self::NOT_ALNUM); return false; } return true; } } &lt;?php
 namespace Zend\I18n\Validator; use Locale; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Validator\AbstractValidator; use Zend\Validator\Callback; use Zend\Validator\Exception; class PostCode extends AbstractValidator { const INVALID = 'postcodeInvalid'; const NO_MATCH = 'postcodeNoMatch'; const SERVICE = 'postcodeService'; const SERVICEFAILURE = 'postcodeServiceFailure'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String or integer expected", self::NO_MATCH =&gt; "The input does not appear to be a postal code", self::SERVICE =&gt; "The input does not appear to be a postal code", self::SERVICEFAILURE =&gt; "An exception has been raised while validating the input", ); protected $locale; protected $format; protected $service; protected static $postCodeRegex = array( 'GB' =&gt; 'GIR[ ]?0AA|((AB|AL|B|BA|BB|BD|BH|BL|BN|BR|BS|BT|CA|CB|CF|CH|CM|CO|CR|CT|CV|CW|DA|DD|DE|DG|DH|DL|DN|DT|DY|E|EC|EH|EN|EX|FK|FY|G|GL|GY|GU|HA|HD|HG|HP|HR|HS|HU|HX|IG|IM|IP|IV|JE|KA|KT|KW|KY|L|LA|LD|LE|LL|LN|LS|LU|M|ME|MK|ML|N|NE|NG|NN|NP|NR|NW|OL|OX|PA|PE|PH|PL|PO|PR|RG|RH|RM|S|SA|SE|SG|SK|SL|SM|SN|SO|SP|SR|SS|ST|SW|SY|TA|TD|TF|TN|TQ|TR|TS|TW|UB|W|WA|WC|WD|WF|WN|WR|WS|WV|YO|ZE)(\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}))|BFPO[ ]?\d{1,4}', 'JE' =&gt; 'JE\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}', 'GG' =&gt; 'GY\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}', 'IM' =&gt; 'IM\d[\dA-Z]?[ ]?\d[ABD-HJLN-UW-Z]{2}', 'US' =&gt; '\d{5}([ \-]\d{4})?', 'CA' =&gt; '[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][ ]?\d[ABCEGHJ-NPRSTV-Z]\d', 'DE' =&gt; '\d{5}', 'JP' =&gt; '\d{3}-\d{4}', 'FR' =&gt; '\d{2}[ ]?\d{3}', 'AU' =&gt; '\d{4}', 'IT' =&gt; '\d{5}', 'CH' =&gt; '\d{4}', 'AT' =&gt; '\d{4}', 'ES' =&gt; '\d{5}', 'NL' =&gt; '\d{4}[ ]?[A-Z]{2}', 'BE' =&gt; '\d{4}', 'DK' =&gt; '\d{4}', 'SE' =&gt; '\d{3}[ ]?\d{2}', 'NO' =&gt; '\d{4}', 'BR' =&gt; '\d{5}[\-]?\d{3}', 'PT' =&gt; '\d{4}([\-]\d{3})?', 'FI' =&gt; '\d{5}', 'AX' =&gt; '22\d{3}', 'KR' =&gt; '\d{3}[\-]\d{3}', 'CN' =&gt; '\d{6}', 'TW' =&gt; '\d{3}(\d{2})?', 'SG' =&gt; '\d{6}', 'DZ' =&gt; '\d{5}', 'AD' =&gt; 'AD\d{3}', 'AR' =&gt; '([A-HJ-NP-Z])?\d{4}([A-Z]{3})?', 'AM' =&gt; '(37)?\d{4}', 'AZ' =&gt; '\d{4}', 'BH' =&gt; '((1[0-2]|[2-9])\d{2})?', 'BD' =&gt; '\d{4}', 'BB' =&gt; '(BB\d{5})?', 'BY' =&gt; '\d{6}', 'BM' =&gt; '[A-Z]{2}[ ]?[A-Z0-9]{2}', 'BA' =&gt; '\d{5}', 'IO' =&gt; 'BBND 1ZZ', 'BN' =&gt; '[A-Z]{2}[ ]?\d{4}', 'BG' =&gt; '\d{4}', 'KH' =&gt; '\d{5}', 'CV' =&gt; '\d{4}', 'CL' =&gt; '\d{7}', 'CR' =&gt; '\d{4,5}|\d{3}-\d{4}', 'HR' =&gt; '\d{5}', 'CY' =&gt; '\d{4}', 'CZ' =&gt; '\d{3}[ ]?\d{2}', 'DO' =&gt; '\d{5}', 'EC' =&gt; '([A-Z]\d{4}[A-Z]|(?:[A-Z]{2})?\d{6})?', 'EG' =&gt; '\d{5}', 'EE' =&gt; '\d{5}', 'FO' =&gt; '\d{3}', 'GE' =&gt; '\d{4}', 'GR' =&gt; '\d{3}[ ]?\d{2}', 'GL' =&gt; '39\d{2}', 'GT' =&gt; '\d{5}', 'HT' =&gt; '\d{4}', 'HN' =&gt; '(?:\d{5})?', 'HU' =&gt; '\d{4}', 'IS' =&gt; '\d{3}', 'IN' =&gt; '\d{6}', 'ID' =&gt; '\d{5}', 'IE' =&gt; '((D|DUBLIN)?([1-9]|6[wW]|1[0-8]|2[024]))?', 'IL' =&gt; '\d{5}', 'JO' =&gt; '\d{5}', 'KZ' =&gt; '\d{6}', 'KE' =&gt; '\d{5}', 'KW' =&gt; '\d{5}', 'LA' =&gt; '\d{5}', 'LV' =&gt; '\d{4}', 'LB' =&gt; '(\d{4}([ ]?\d{4})?)?', 'LI' =&gt; '(948[5-9])|(949[0-7])', 'LT' =&gt; '\d{5}', 'LU' =&gt; '\d{4}', 'MK' =&gt; '\d{4}', 'MY' =&gt; '\d{5}', 'MV' =&gt; '\d{5}', 'MT' =&gt; '[A-Z]{3}[ ]?\d{2,4}', 'MU' =&gt; '(\d{3}[A-Z]{2}\d{3})?', 'MX' =&gt; '\d{5}', 'MD' =&gt; '\d{4}', 'MC' =&gt; '980\d{2}', 'MA' =&gt; '\d{5}', 'NP' =&gt; '\d{5}', 'NZ' =&gt; '\d{4}', 'NI' =&gt; '((\d{4}-)?\d{3}-\d{3}(-\d{1})?)?', 'NG' =&gt; '(\d{6})?', 'OM' =&gt; '(PC )?\d{3}', 'PK' =&gt; '\d{5}', 'PY' =&gt; '\d{4}', 'PH' =&gt; '\d{4}', 'PL' =&gt; '\d{2}-\d{3}', 'PR' =&gt; '00[679]\d{2}([ \-]\d{4})?', 'RO' =&gt; '\d{6}', 'RU' =&gt; '\d{6}', 'SM' =&gt; '4789\d', 'SA' =&gt; '\d{5}', 'SN' =&gt; '\d{5}', 'SK' =&gt; '\d{3}[ ]?\d{2}', 'SI' =&gt; '\d{4}', 'ZA' =&gt; '\d{4}', 'LK' =&gt; '\d{5}', 'TJ' =&gt; '\d{6}', 'TH' =&gt; '\d{5}', 'TN' =&gt; '\d{4}', 'TR' =&gt; '\d{5}', 'TM' =&gt; '\d{6}', 'UA' =&gt; '\d{5}', 'UY' =&gt; '\d{5}', 'UZ' =&gt; '\d{6}', 'VA' =&gt; '00120', 'VE' =&gt; '\d{4}', 'ZM' =&gt; '\d{5}', 'AS' =&gt; '96799', 'CC' =&gt; '6799', 'CK' =&gt; '\d{4}', 'RS' =&gt; '\d{6}', 'ME' =&gt; '8\d{4}', 'CS' =&gt; '\d{5}', 'YU' =&gt; '\d{5}', 'CX' =&gt; '6798', 'ET' =&gt; '\d{4}', 'FK' =&gt; 'FIQQ 1ZZ', 'NF' =&gt; '2899', 'FM' =&gt; '(9694[1-4])([ \-]\d{4})?', 'GF' =&gt; '9[78]3\d{2}', 'GN' =&gt; '\d{3}', 'GP' =&gt; '9[78][01]\d{2}', 'GS' =&gt; 'SIQQ 1ZZ', 'GU' =&gt; '969[123]\d([ \-]\d{4})?', 'GW' =&gt; '\d{4}', 'HM' =&gt; '\d{4}', 'IQ' =&gt; '\d{5}', 'KG' =&gt; '\d{6}', 'LR' =&gt; '\d{4}', 'LS' =&gt; '\d{3}', 'MG' =&gt; '\d{3}', 'MH' =&gt; '969[67]\d([ \-]\d{4})?', 'MN' =&gt; '\d{6}', 'MP' =&gt; '9695[012]([ \-]\d{4})?', 'MQ' =&gt; '9[78]2\d{2}', 'NC' =&gt; '988\d{2}', 'NE' =&gt; '\d{4}', 'VI' =&gt; '008(([0-4]\d)|(5[01]))([ \-]\d{4})?', 'PF' =&gt; '987\d{2}', 'PG' =&gt; '\d{3}', 'PM' =&gt; '9[78]5\d{2}', 'PN' =&gt; 'PCRN 1ZZ', 'PW' =&gt; '96940', 'RE' =&gt; '9[78]4\d{2}', 'SH' =&gt; '(ASCN|STHL) 1ZZ', 'SJ' =&gt; '\d{4}', 'SO' =&gt; '\d{5}', 'SZ' =&gt; '[HLMS]\d{3}', 'TC' =&gt; 'TKCA 1ZZ', 'WF' =&gt; '986\d{2}', 'YT' =&gt; '976\d{2}', ); public function __construct($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (array_key_exists('locale', $options)) { $this-&gt;setLocale($options['locale']); } else { $this-&gt;setLocale(Locale::getDefault()); } if (array_key_exists('format', $options)) { $this-&gt;setFormat($options['format']); } if (array_key_exists('service', $options)) { $this-&gt;setService($options['service']); } parent::__construct($options); } public function getLocale() { return $this-&gt;locale; } public function setLocale($locale) { $this-&gt;locale = $locale; return $this; } public function getFormat() { return $this-&gt;format; } public function setFormat($format) { $this-&gt;format = $format; return $this; } public function getService() { return $this-&gt;service; } public function setService($service) { $this-&gt;service = $service; return $this; } public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); $service = $this-&gt;getService(); $locale = $this-&gt;getLocale(); $format = $this-&gt;getFormat(); if ((null === $format || '' === $format) &amp;&amp; !empty($locale)) { $region = Locale::getRegion($locale); if ('' === $region) { throw new Exception\InvalidArgumentException("Locale must contain a region"); } if (isset(static::$postCodeRegex[$region])) { $format = static::$postCodeRegex[$region]; } } if (null === $format || '' === $format) { throw new Exception\InvalidArgumentException("A postcode-format string has to be given for validation"); } if ($format[0] !== '/') { $format = '/^' . $format; } if ($format[strlen($format) - 1] !== '/') { $format .= '$/'; } if (!empty($service)) { if (!is_callable($service)) { throw new Exception\InvalidArgumentException('Invalid callback given'); } try { $callback = new Callback($service); $callback-&gt;setOptions(array( 'format' =&gt; $format, 'locale' =&gt; $locale, )); if (!$callback-&gt;isValid($value)) { $this-&gt;error(self::SERVICE, $value); return false; } } catch (\Exception $e) { $this-&gt;error(self::SERVICEFAILURE, $value); return false; } } if (!preg_match($format, $value)) { $this-&gt;error(self::NO_MATCH); return false; } return true; } } &lt;?php
 namespace Zend\I18n\Validator; use Locale; use NumberFormatter; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Int extends AbstractValidator { const INVALID = 'intInvalid'; const NOT_INT = 'notInt'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String or integer expected", self::NOT_INT =&gt; "The input does not appear to be an integer", ); protected $locale; public function __construct($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (array_key_exists('locale', $options)) { $this-&gt;setLocale($options['locale']); } parent::__construct($options); } public function getLocale() { if (null === $this-&gt;locale) { $this-&gt;locale = Locale::getDefault(); } return $this-&gt;locale; } public function setLocale($locale) { $this-&gt;locale = $locale; return $this; } public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value) &amp;&amp; !is_float($value)) { $this-&gt;error(self::INVALID); return false; } if (is_int($value)) { return true; } $this-&gt;setValue($value); $locale = $this-&gt;getLocale(); $format = new NumberFormatter($locale, NumberFormatter::DECIMAL); if (intl_is_failure($format-&gt;getErrorCode())) { throw new Exception\InvalidArgumentException("Invalid locale string given"); } $parsedInt = $format-&gt;parse($value, NumberFormatter::TYPE_INT64); if (intl_is_failure($format-&gt;getErrorCode())) { $this-&gt;error(self::NOT_INT); return false; } $decimalSep = $format-&gt;getSymbol(NumberFormatter::DECIMAL_SEPARATOR_SYMBOL); $groupingSep = $format-&gt;getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL); $valueFiltered = str_replace($groupingSep, '', $value); $valueFiltered = str_replace($decimalSep, '.', $valueFiltered); if (strval($parsedInt) !== $valueFiltered) { $this-&gt;error(self::NOT_INT); return false; } return true; } } &lt;?php
 namespace Zend\I18n\Validator; use Locale; use NumberFormatter; use Traversable; use Zend\Stdlib\ArrayUtils; use Zend\Validator\AbstractValidator; use Zend\Validator\Exception; class Float extends AbstractValidator { const INVALID = 'floatInvalid'; const NOT_FLOAT = 'notFloat'; protected $messageTemplates = array( self::INVALID =&gt; "Invalid type given. String, integer or float expected", self::NOT_FLOAT =&gt; "The input does not appear to be a float", ); protected $locale; public function __construct($options = array()) { if ($options instanceof Traversable) { $options = ArrayUtils::iteratorToArray($options); } if (array_key_exists('locale', $options)) { $this-&gt;setLocale($options['locale']); } parent::__construct($options); } public function getLocale() { if (null === $this-&gt;locale) { $this-&gt;locale = Locale::getDefault(); } return $this-&gt;locale; } public function setLocale($locale) { $this-&gt;locale = $locale; return $this; } public function isValid($value) { if (!is_string($value) &amp;&amp; !is_int($value) &amp;&amp; !is_float($value)) { $this-&gt;error(self::INVALID); return false; } $this-&gt;setValue($value); if (is_float($value)) { return true; } $locale = $this-&gt;getLocale(); $format = new NumberFormatter($locale, NumberFormatter::DECIMAL); if (intl_is_failure($format-&gt;getErrorCode())) { throw new Exception\InvalidArgumentException("Invalid locale string given"); } $parsedFloat = $format-&gt;parse($value, NumberFormatter::TYPE_DOUBLE); if (intl_is_failure($format-&gt;getErrorCode())) { $this-&gt;error(self::NOT_FLOAT); return false; } $decimalSep = $format-&gt;getSymbol(NumberFormatter::DECIMAL_SEPARATOR_SYMBOL); $groupingSep = $format-&gt;getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL); $valueFiltered = str_replace($groupingSep, '', $value); $valueFiltered = str_replace($decimalSep, '.', $valueFiltered); while (strpos($valueFiltered, '.') !== false &amp;&amp; (substr($valueFiltered, -1) == '0' || substr($valueFiltered, -1) == '.') ) { $valueFiltered = substr($valueFiltered, 0, strlen($valueFiltered) - 1); } if (strval($parsedFloat) !== $valueFiltered) { $this-&gt;error(self::NOT_FLOAT); return false; } return true; } } &lt;?php
 namespace Zend\I18n\Exception; class OutOfBoundsException extends \OutOfBoundsException implements ExceptionInterface {} &lt;?php
 namespace Zend\I18n\Exception; class ParseException extends RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\I18n\Exception; class RangeException extends \RangeException implements ExceptionInterface {} &lt;?php
 namespace Zend\I18n\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface {} &lt;?php
 namespace Zend\I18n\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\I18n\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface {} &lt;?php
 namespace Zend\I18n\Filter; use Locale; class Alpha extends Alnum { public function filter($value) { $whiteSpace = $this-&gt;options['allow_white_space'] ? '\s' : ''; $language = Locale::getPrimaryLanguage($this-&gt;getLocale()); if (!static::hasPcreUnicodeSupport()) { $pattern = '/[^a-zA-Z' . $whiteSpace . ']/'; } elseif ($language == 'ja' || $language == 'ko' || $language == 'zh') { $pattern = '/[^a-zA-Z' . $whiteSpace . ']/u'; } else { $pattern = '/[^\p{L}' . $whiteSpace . ']/u'; } return preg_replace($pattern, '', (string) $value); } } &lt;?php
 namespace Zend\I18n\Filter; use Locale; use Zend\Filter\AbstractFilter; abstract class AbstractLocale extends AbstractFilter { public function setLocale($locale = null) { $this-&gt;options['locale'] = $locale; return $this; } public function getLocale() { if (!isset($this-&gt;options['locale'])) { $this-&gt;options['locale'] = Locale::getDefault(); } return $this-&gt;options['locale']; } } &lt;?php
 namespace Zend\I18n\Filter; use Locale; use Traversable; class Alnum extends AbstractLocale { protected $options = array( 'locale' =&gt; null, 'allow_white_space' =&gt; false, ); public function __construct($allowWhiteSpaceOrOptions = null, $locale = null) { if ($allowWhiteSpaceOrOptions !== null) { if (static::isOptions($allowWhiteSpaceOrOptions)) { $this-&gt;setOptions($allowWhiteSpaceOrOptions); } else { $this-&gt;setAllowWhiteSpace($allowWhiteSpaceOrOptions); $this-&gt;setLocale($locale); } } } public function setAllowWhiteSpace($flag = true) { $this-&gt;options['allow_white_space'] = (bool) $flag; return $this; } public function getAllowWhiteSpace() { return $this-&gt;options['allow_white_space']; } public function filter($value) { $whiteSpace = $this-&gt;options['allow_white_space'] ? '\s' : ''; $language = Locale::getPrimaryLanguage($this-&gt;getLocale()); if (!static::hasPcreUnicodeSupport()) { $pattern = '/[^a-zA-Z0-9' . $whiteSpace . ']/'; } elseif ($language == 'ja'|| $language == 'ko' || $language == 'zh') { $pattern = '/[^a-zA-Z0-9' . $whiteSpace . ']/u'; } else { $pattern = '/[^\p{L}\p{N}' . $whiteSpace . ']/u'; } return preg_replace($pattern, '', (string) $value); } } &lt;?php
 namespace Zend\I18n\Filter; use NumberFormatter; use Traversable; use Zend\I18n\Exception; use Zend\Stdlib\ErrorHandler; class NumberFormat extends AbstractLocale { protected $options = array( 'locale' =&gt; null, 'style' =&gt; NumberFormatter::DEFAULT_STYLE, 'type' =&gt; NumberFormatter::TYPE_DOUBLE ); protected $formatter = null; public function __construct( $localeOrOptions = null, $style = NumberFormatter::DEFAULT_STYLE, $type = NumberFormatter::TYPE_DOUBLE) { if ($localeOrOptions !== null) { if ($localeOrOptions instanceof Traversable) { $localeOrOptions = iterator_to_array($localeOrOptions); } if (!is_array($localeOrOptions)) { $this-&gt;setLocale($localeOrOptions); $this-&gt;setStyle($style); $this-&gt;setType($type); } else { $this-&gt;setOptions($localeOrOptions); } } } public function setLocale($locale = null) { $this-&gt;options['locale'] = $locale; $this-&gt;formatter = null; return $this; } public function setStyle($style) { $this-&gt;options['style'] = (int) $style; $this-&gt;formatter = null; return $this; } public function getStyle() { return $this-&gt;options['style']; } public function setType($type) { $this-&gt;options['type'] = (int) $type; return $this; } public function getType() { return $this-&gt;options['type']; } public function setFormatter(NumberFormatter $formatter) { $this-&gt;formatter = $formatter; return $this; } public function getFormatter() { if ($this-&gt;formatter === null) { $formatter = NumberFormatter::create($this-&gt;getLocale(), $this-&gt;getStyle()); if (!$formatter) { throw new Exception\RuntimeException( 'Can not create NumberFormatter instance; ' . intl_get_error_message() ); } $this-&gt;formatter = $formatter; } return $this-&gt;formatter; } public function filter($value) { $formatter = $this-&gt;getFormatter(); $type = $this-&gt;getType(); if (is_int($value) || is_float($value)) { ErrorHandler::start(); $result = $formatter-&gt;format($value, $type); ErrorHandler::stop(); } else { $value = str_replace(array("\xC2\xA0", ' '), '', $value); ErrorHandler::start(); $result = $formatter-&gt;parse($value, $type); ErrorHandler::stop(); } if ($result === false) { return $value; } return str_replace("\xC2\xA0", ' ', $result); } } &lt;?php
 namespace Zend\I18n\View\Helper; use DateTime; use IntlDateFormatter; use Locale; use Zend\I18n\Exception; use Zend\View\Helper\AbstractHelper; class DateFormat extends AbstractHelper { protected $locale; protected $timezone; protected $formatters = array(); public function setTimezone($timezone) { $this-&gt;timezone = (string) $timezone; foreach ($this-&gt;formatters as $formatter) { $formatter-&gt;setTimeZoneId($this-&gt;timezone); } return $this; } public function getTimezone() { if (!$this-&gt;timezone) { return date_default_timezone_get(); } return $this-&gt;timezone; } public function setlocale($locale) { $this-&gt;locale = (string) $locale; return $this; } public function getlocale() { if ($this-&gt;locale === null) { $this-&gt;locale = Locale::getDefault(); } return $this-&gt;locale; } public function __invoke( $date, $dateType = IntlDateFormatter::NONE, $timeType = IntlDateFormatter::NONE, $locale = null, $pattern = null ) { if ($locale === null) { $locale = $this-&gt;getlocale(); } $timezone = $this-&gt;getTimezone(); $formatterId = md5($dateType . "\0" . $timeType . "\0" . $locale ."\0" . $pattern); if (!isset($this-&gt;formatters[$formatterId])) { $this-&gt;formatters[$formatterId] = new IntlDateFormatter( $locale, $dateType, $timeType, $timezone, IntlDateFormatter::GREGORIAN, $pattern ); } if ($date instanceof DateTime &amp;&amp; version_compare(PHP_VERSION, '5.3.4', '&lt;')) { $date = $date-&gt;getTimestamp(); } return $this-&gt;formatters[$formatterId]-&gt;format($date); } } &lt;?php
 namespace Zend\I18n\View\Helper; use Locale; use NumberFormatter; use Zend\View\Helper\AbstractHelper; class CurrencyFormat extends AbstractHelper { protected $locale; protected $currencyCode; protected $showDecimals = true; protected $formatters = array(); public function setCurrencyCode($currencyCode) { $this-&gt;currencyCode = $currencyCode; return $this; } public function getCurrencyCode() { return $this-&gt;currencyCode; } public function setShouldShowDecimals($showDecimals) { $this-&gt;showDecimals = (bool) $showDecimals; return $this; } public function shouldShowDecimals() { return $this-&gt;showDecimals; } public function setLocale($locale) { $this-&gt;locale = (string) $locale; return $this; } public function getLocale() { if ($this-&gt;locale === null) { $this-&gt;locale = Locale::getDefault(); } return $this-&gt;locale; } public function __invoke( $number, $currencyCode = null, $showDecimals = null, $locale = null ) { if (null === $locale) { $locale = $this-&gt;getLocale(); } if (null === $currencyCode) { $currencyCode = $this-&gt;getCurrencyCode(); } if (null !== $showDecimals) { $this-&gt;setShouldShowDecimals($showDecimals); } $formatterId = md5($locale); if (!isset($this-&gt;formatters[$formatterId])) { $this-&gt;formatters[$formatterId] = new NumberFormatter( $locale, NumberFormatter::CURRENCY ); } if ($this-&gt;shouldShowDecimals()) { $this-&gt;formatters[$formatterId]-&gt;setAttribute(NumberFormatter::FRACTION_DIGITS, 2); } else { $this-&gt;formatters[$formatterId]-&gt;setAttribute(NumberFormatter::FRACTION_DIGITS, 0); } return $this-&gt;formatters[$formatterId]-&gt;formatCurrency( $number, $currencyCode ); } } &lt;?php
 namespace Zend\I18n\View\Helper; use Zend\I18n\Exception; class TranslatePlural extends AbstractTranslatorHelper { public function __invoke( $singular, $plural, $number, $textDomain = null, $locale = null ) { $translator = $this-&gt;getTranslator(); if (null === $translator) { throw new Exception\RuntimeException('Translator has not been set'); } if (null === $textDomain) { $textDomain = $this-&gt;getTranslatorTextDomain(); } return $translator-&gt;translatePlural($singular, $plural, $number, $textDomain, $locale); } } &lt;?php
 namespace Zend\I18n\View\Helper; use Zend\I18n\Exception; class Translate extends AbstractTranslatorHelper { public function __invoke($message, $textDomain = null, $locale = null) { $translator = $this-&gt;getTranslator(); if (null === $translator) { throw new Exception\RuntimeException('Translator has not been set'); } if (null === $textDomain) { $textDomain = $this-&gt;getTranslatorTextDomain(); } return $translator-&gt;translate($message, $textDomain, $locale); } } &lt;?php
 namespace Zend\I18n\View\Helper; use Zend\I18n\Translator\Translator; use Zend\I18n\Translator\TranslatorAwareInterface; use Zend\View\Helper\AbstractHelper; abstract class AbstractTranslatorHelper extends AbstractHelper implements TranslatorAwareInterface { protected $translator; protected $translatorTextDomain = 'default'; protected $translatorEnabled = true; public function setTranslator(Translator $translator = null, $textDomain = null) { $this-&gt;translator = $translator; if (null !== $textDomain) { $this-&gt;setTranslatorTextDomain($textDomain); } return $this; } public function getTranslator() { if (! $this-&gt;isTranslatorEnabled()) { return null; } return $this-&gt;translator; } public function hasTranslator() { return (bool) $this-&gt;getTranslator(); } public function setTranslatorEnabled($enabled = true) { $this-&gt;translatorEnabled = (bool) $enabled; return $this; } public function isTranslatorEnabled() { return $this-&gt;translatorEnabled; } public function setTranslatorTextDomain($textDomain = 'default') { $this-&gt;translatorTextDomain = $textDomain; return $this; } public function getTranslatorTextDomain() { return $this-&gt;translatorTextDomain; } } &lt;?php
 namespace Zend\I18n\View\Helper; use Zend\I18n\Exception; use Zend\I18n\Translator\Plural\Rule as PluralRule; use Zend\View\Helper\AbstractHelper; class Plural extends AbstractHelper { protected $rule; public function setPluralRule($pluralRule) { if (!$pluralRule instanceof PluralRule) { $pluralRule = PluralRule::fromString($pluralRule); } $this-&gt;rule = $pluralRule; return $this; } public function __invoke($strings, $number) { if ($this-&gt;rule === null) { throw new Exception\InvalidArgumentException(sprintf( 'No plural rule was set' )); } if (!is_array($strings)) { $strings = (array) $strings; } $pluralIndex = $this-&gt;rule-&gt;evaluate($number); return $strings[$pluralIndex]; } } &lt;?php
 namespace Zend\I18n\View\Helper; use Locale; use NumberFormatter; use Zend\View\Helper\AbstractHelper; class NumberFormat extends AbstractHelper { protected $locale; protected $formatStyle; protected $formatType; protected $formatters = array(); public function setFormatStyle($formatStyle) { $this-&gt;formatStyle = (int) $formatStyle; return $this; } public function getFormatStyle() { if (null === $this-&gt;formatStyle) { $this-&gt;formatStyle = NumberFormatter::DECIMAL; } return $this-&gt;formatStyle; } public function setFormatType($formatType) { $this-&gt;formatType = (int) $formatType; return $this; } public function getFormatType() { if (null === $this-&gt;formatType) { $this-&gt;formatType = NumberFormatter::TYPE_DEFAULT; } return $this-&gt;formatType; } public function setLocale($locale) { $this-&gt;locale = (string) $locale; return $this; } public function getLocale() { if ($this-&gt;locale === null) { $this-&gt;locale = Locale::getDefault(); } return $this-&gt;locale; } public function __invoke( $number, $formatStyle = null, $formatType = null, $locale = null ) { if (null === $locale) { $locale = $this-&gt;getLocale(); } if (null === $formatStyle) { $formatStyle = $this-&gt;getFormatStyle(); } if (null === $formatType) { $formatType = $this-&gt;getFormatType(); } $formatterId = md5($formatStyle . "\0" . $locale); if (!isset($this-&gt;formatters[$formatterId])) { $this-&gt;formatters[$formatterId] = new NumberFormatter( $locale, $formatStyle ); } return $this-&gt;formatters[$formatterId]-&gt;format($number, $formatType); } } &lt;?php
 namespace Zend\I18n\View; use Zend\ServiceManager\ConfigInterface; use Zend\ServiceManager\ServiceManager; class HelperConfig implements ConfigInterface { protected $invokables = array( 'currencyformat' =&gt; 'Zend\I18n\View\Helper\CurrencyFormat', 'dateformat' =&gt; 'Zend\I18n\View\Helper\DateFormat', 'numberformat' =&gt; 'Zend\I18n\View\Helper\NumberFormat', 'plural' =&gt; 'Zend\I18n\View\Helper\Plural', 'translate' =&gt; 'Zend\I18n\View\Helper\Translate', 'translateplural' =&gt; 'Zend\I18n\View\Helper\TranslatePlural', ); public function configureServiceManager(ServiceManager $serviceManager) { foreach ($this-&gt;invokables as $name =&gt; $service) { $serviceManager-&gt;setInvokableClass($name, $service); } } } &lt;?php
 namespace Zend\Escaper; use Zend\Escaper\Exception; class Escaper { protected static $htmlNamedEntityMap = array( 34 =&gt; 'quot', 38 =&gt; 'amp', 60 =&gt; 'lt', 62 =&gt; 'gt', ); protected $encoding = 'utf-8'; protected $htmlSpecialCharsFlags = \ENT_QUOTES; protected $htmlAttrMatcher; protected $jsMatcher; protected $cssMatcher; protected $supportedEncodings = array( 'iso-8859-1', 'iso8859-1', 'iso-8859-5', 'iso8859-5', 'iso-8859-15', 'iso8859-15', 'utf-8', 'cp866', 'ibm866', '866', 'cp1251', 'windows-1251', 'win-1251', '1251', 'cp1252', 'windows-1252', '1252', 'koi8-r', 'koi8-ru', 'koi8r', 'big5', '950', 'gb2312', '936', 'big5-hkscs', 'shift_jis', 'sjis', 'sjis-win', 'cp932', '932', 'euc-jp', 'eucjp', 'eucjp-win', 'macroman' ); public function __construct($encoding = null) { if ($encoding !== null) { $encoding = (string) $encoding; if ($encoding === '') { throw new Exception\InvalidArgumentException( get_called_class() . ' constructor parameter does not allow a blank value' ); } $encoding = strtolower($encoding); if (!in_array($encoding, $this-&gt;supportedEncodings)) { throw new Exception\InvalidArgumentException( 'Value of \'' . $encoding . '\' passed to ' . get_called_class() . ' constructor parameter is invalid. Provide an encoding supported by htmlspecialchars()' ); } $this-&gt;encoding = $encoding; } if (defined('ENT_SUBSTITUTE')) { $this-&gt;htmlSpecialCharsFlags|= \ENT_SUBSTITUTE; } $this-&gt;htmlAttrMatcher = array($this, 'htmlAttrMatcher'); $this-&gt;jsMatcher = array($this, 'jsMatcher'); $this-&gt;cssMatcher = array($this, 'cssMatcher'); } public function getEncoding() { return $this-&gt;encoding; } public function escapeHtml($string) { $result = htmlspecialchars($string, $this-&gt;htmlSpecialCharsFlags, $this-&gt;encoding); return $result; } public function escapeHtmlAttr($string) { $string = $this-&gt;toUtf8($string); if ($string === '' || ctype_digit($string)) { return $string; } $result = preg_replace_callback('/[^a-z0-9,\.\-_]/iSu', $this-&gt;htmlAttrMatcher, $string); return $this-&gt;fromUtf8($result); } public function escapeJs($string) { $string = $this-&gt;toUtf8($string); if ($string === '' || ctype_digit($string)) { return $string; } $result = preg_replace_callback('/[^a-z0-9,\._]/iSu', $this-&gt;jsMatcher, $string); return $this-&gt;fromUtf8($result); } public function escapeUrl($string) { return rawurlencode($string); } public function escapeCss($string) { $string = $this-&gt;toUtf8($string); if ($string === '' || ctype_digit($string)) { return $string; } $result = preg_replace_callback('/[^a-z0-9]/iSu', $this-&gt;cssMatcher, $string); return $this-&gt;fromUtf8($result); } protected function htmlAttrMatcher($matches) { $chr = $matches[0]; $ord = ord($chr); if (($ord &lt;= 0x1f &amp;&amp; $chr != "\t" &amp;&amp; $chr != "\n" &amp;&amp; $chr != "\r") || ($ord &gt;= 0x7f &amp;&amp; $ord &lt;= 0x9f) ) { return '&amp;#xFFFD;'; } if (strlen($chr) &gt; 1) { $chr = $this-&gt;convertEncoding($chr, 'UTF-16BE', 'UTF-8'); } $hex = bin2hex($chr); $ord = hexdec($hex); if (isset(static::$htmlNamedEntityMap[$ord])) { return '&amp;' . static::$htmlNamedEntityMap[$ord] . ';'; } if ($ord &gt; 255) { return sprintf('&amp;#x%04X;', $ord); } return sprintf('&amp;#x%02X;', $ord); } protected function jsMatcher($matches) { $chr = $matches[0]; if (strlen($chr) == 1) { return sprintf('\\x%02X', ord($chr)); } $chr = $this-&gt;convertEncoding($chr, 'UTF-16BE', 'UTF-8'); return sprintf('\\u%04s', strtoupper(bin2hex($chr))); } protected function cssMatcher($matches) { $chr = $matches[0]; if (strlen($chr) == 1) { $ord = ord($chr); } else { $chr = $this-&gt;convertEncoding($chr, 'UTF-16BE', 'UTF-8'); $ord = hexdec(bin2hex($chr)); } return sprintf('\\%X ', $ord); } protected function toUtf8($string) { if ($this-&gt;getEncoding() === 'utf-8') { $result = $string; } else { $result = $this-&gt;convertEncoding($string, 'UTF-8', $this-&gt;getEncoding()); } if (!$this-&gt;isUtf8($result)) { throw new Exception\RuntimeException(sprintf( 'String to be escaped was not valid UTF-8 or could not be converted: %s', $result )); } return $result; } protected function fromUtf8($string) { if ($this-&gt;getEncoding() === 'utf-8') { return $string; } return $this-&gt;convertEncoding($string, $this-&gt;getEncoding(), 'UTF-8'); } protected function isUtf8($string) { return ($string === '' || preg_match('/^./su', $string)); } protected function convertEncoding($string, $to, $from) { $result = ''; if (function_exists('iconv')) { $result = iconv($from, $to, $string); } elseif (function_exists('mb_convert_encoding')) { $result = mb_convert_encoding($string, $to, $from); } else { throw new Exception\RuntimeException( get_called_class() . ' requires either the iconv or mbstring extension to be installed' . ' when escaping for non UTF-8 strings.' ); } if ($result === false) { return ''; } return $result; } } &lt;?php
 namespace Zend\Escaper\Exception; class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface { } &lt;?php
 namespace Zend\Escaper\Exception; interface ExceptionInterface {} &lt;?php
 namespace Zend\Escaper\Exception; class RuntimeException extends \RuntimeException implements ExceptionInterface { } &lt;?php
return array( 'ZFTool' =&gt; array( 'disableUsage' =&gt; false, ), 'service_manager' =&gt; array( 'factories' =&gt; array( 'translator' =&gt; 'Zend\I18n\Translator\TranslatorServiceFactory', ), ), 'controllers' =&gt; array( 'invokables' =&gt; array( 'ZFTool\Controller\Info' =&gt; 'ZFTool\Controller\InfoController', 'ZFTool\Controller\Module' =&gt; 'ZFTool\Controller\ModuleController', 'ZFTool\Controller\Classmap' =&gt; 'ZFTool\Controller\ClassmapController', 'ZFTool\Controller\Create' =&gt; 'ZFTool\Controller\CreateController', 'ZFTool\Controller\Install' =&gt; 'ZFTool\Controller\InstallController', ), ), 'console' =&gt; array( 'router' =&gt; array( 'routes' =&gt; array( 'zftool-version' =&gt; array( 'options' =&gt; array( 'route' =&gt; 'version', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Info', 'action' =&gt; 'version', ), ), ), 'zftool-version2' =&gt; array( 'options' =&gt; array( 'route' =&gt; '--version', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Info', 'action' =&gt; 'version', ), ), ), 'zftool-config-list' =&gt; array( 'options' =&gt; array( 'route' =&gt; 'config [list]', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Info', 'action' =&gt; 'config', ), ), ), 'zftool-classmap-generate' =&gt; array( 'options' =&gt; array( 'route' =&gt; 'classmap generate &lt;directory&gt; [&lt;destination&gt;] [--append|-a] [--overwrite|-w]', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Classmap', 'action' =&gt; 'generate', ), ), ), 'zftool-modules-list' =&gt; array( 'options' =&gt; array( 'route' =&gt; 'modules [list]', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Module', 'action' =&gt; 'list', ), ), ), 'zftool-create-project' =&gt; array( 'options' =&gt; array( 'route' =&gt; 'create project &lt;path&gt;', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Create', 'action' =&gt; 'project', ), ), ), 'zftool-create-module' =&gt; array( 'options' =&gt; array( 'route' =&gt; 'create module &lt;name&gt; [&lt;path&gt;]', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Create', 'action' =&gt; 'module', ), ), ), 'zftool-install-zf' =&gt; array( 'options' =&gt; array( 'route' =&gt; 'install zf &lt;path&gt; [&lt;version&gt;]', 'defaults' =&gt; array( 'controller' =&gt; 'ZFTool\Controller\Install', 'action' =&gt; 'zf', ), ), ), ), ), ), ); &lt;?php
 namespace ZFTool\Controller; use Zend\Mvc\Controller\AbstractActionController; use Zend\View\Model\ViewModel; use Zend\Stdlib\ArrayUtils; use Zend\ServiceManager\Exception\ServiceNotFoundException; use Zend\View\Model\ConsoleModel; use Zend\Version; use Zend\Console\ColorInterface as Color; class ModuleController extends AbstractActionController { public function listAction() { $sm = $this-&gt;getServiceLocator(); try{ $mm = $sm-&gt;get('modulemanager'); } catch(ServiceNotFoundException $e) { return $this-&gt;sendError( 'Cannot get Zend\ModuleManager\ModuleManager instance. Is your application using it?' ); } $console = $this-&gt;getServiceLocator()-&gt;get('console'); $modules = array_keys($mm-&gt;getLoadedModules(false)); $modules = array_diff($modules, array('ZFTool')); if (empty($modules)) { $console-&gt;writeLine('No modules installed. Are you in the root folder of a ZF2 application?'); return; } $console-&gt;writeLine("Modules installed:"); foreach ($modules as $module) { $console-&gt;writeLine($module, Color::GREEN); } } private function sendError($msg) { $m = new ConsoleModel(); $m-&gt;setErrorLevel(2); $m-&gt;setResult($msg . PHP_EOL); return $m; } } &lt;?php
 namespace ZFTool\Controller; use Zend\Mvc\Controller\AbstractActionController; use Zend\View\Model\ViewModel; use Zend\Stdlib\ArrayUtils; use Zend\ServiceManager\Exception\ServiceNotFoundException; use Zend\View\Model\ConsoleModel; use Zend\File\ClassFileLocator; use Zend\Loader\StandardAutoloader; use Zend\Console\ColorInterface as Color; use Zend\Version; class ClassmapController extends AbstractActionController { public function generateAction() { $request = $this-&gt;getRequest(); $console = $this-&gt;getServiceLocator()-&gt;get('console'); $relativePath = ''; $usingStdout = false; $directory = $request-&gt;getParam('directory'); $appending = $request-&gt;getParam('append', false) || $request-&gt;getParam('a', false); $overwrite = $request-&gt;getParam('overwrite', false) || $request-&gt;getParam('w', false); if (!is_dir($directory)) { $m = new ConsoleModel(); $m-&gt;setErrorLevel(2); $m-&gt;setResult('Invalid library directory provided "' . $directory . '"' . PHP_EOL); return $m; } $output = $request-&gt;getParam('destination', $directory . '/autoload_classmap.php'); if ('-' == $output) { $output = STDOUT; $usingStdout = true; } elseif (is_dir($output)) { $m = new ConsoleModel(); $m-&gt;setErrorLevel(2); $m-&gt;setResult('Invalid output file provided' . PHP_EOL); return $m; } elseif (!is_writeable(dirname($output))) { $m = new ConsoleModel(); $m-&gt;setErrorLevel(2); $m-&gt;setResult("Cannot write to '$output'; aborting." . PHP_EOL); return $m; } elseif (file_exists($output) &amp;&amp; !$overwrite &amp;&amp; !$appending) { $m = new ConsoleModel(); $m-&gt;setErrorLevel(2); $m-&gt;setResult( "Autoload file already exists at '$output'," . PHP_EOL . "but 'overwrite' or 'appending' flag was not specified; aborting." . PHP_EOL ); return $m; } else { $classmapPath = str_replace(DIRECTORY_SEPARATOR, '/', realpath(dirname($output))); if (strpos($directory, $classmapPath) === 0) { $relativePath = substr($directory, strlen($classmapPath) + 1) . '/'; } else { $libraryPathParts = explode('/', $directory); $classmapPathParts = explode('/', $classmapPath); $count = count($classmapPathParts); for ($i = 0; $i &lt; $count; $i++) { if (!isset($libraryPathParts[$i]) || $libraryPathParts[$i] != $classmapPathParts[$i]) { break; } } $relativePath = str_repeat('../', $count - $i); $count = count($libraryPathParts); for (; $i &lt; $count; $i++) { $relativePath .= $libraryPathParts[$i] . '/'; } } } if (!$usingStdout) { if ($appending) { $console-&gt;write('Appending to class file map '); $console-&gt;write($output, Color::LIGHT_WHITE); $console-&gt;write(' for library in '); $console-&gt;writeLine($directory, Color::LIGHT_WHITE); } else { $console-&gt;write('Creating classmap file for library in '); $console-&gt;writeLine($directory, Color::LIGHT_WHITE); } $console-&gt;write('Scanning for files containing PHP classes '); } $l = new ClassFileLocator($directory); $map = new \stdClass; $count = 0; foreach ($l as $file) { $filename = str_replace($directory . '/', '', str_replace(DIRECTORY_SEPARATOR, '/', $file-&gt;getPath()) . '/' . $file-&gt;getFilename()); $filename = $relativePath . $filename; foreach ($file-&gt;getClasses() as $class) { $map-&gt;{$class} = $filename; } $count++; $console-&gt;write('.'); } if (!$usingStdout) { $console-&gt;writeLine(" DONE", Color::GREEN); $console-&gt;write('Found '); $console-&gt;write((int)$count, Color::LIGHT_WHITE); $console-&gt;writeLine(' PHP classes'); $console-&gt;write('Creating classmap code ...'); } if (!$count) { $console-&gt;writeLine('Cannot find any PHP classes in ' . $directory . '. Aborting!', Color::YELLOW); exit(1); } if ($appending) { $content = var_export((array)$map, true) . ';'; $content = preg_replace("#(=&gt; ')#", "=&gt; __DIR__ . '/", $content); $content = str_replace("\\'", "'", $content); $content = explode(PHP_EOL, $content); array_shift($content); $existing = file($output, FILE_IGNORE_NEW_LINES); array_pop($existing); $content = implode(PHP_EOL, array_merge($existing, $content)); } else { $content = '&lt;' . "?php\n" . "// Generated by Zend Framework 2\n" . 'return ' . var_export((array)$map, true) . ';'; $content = preg_replace("#(=&gt; ')#", "=&gt; __DIR__ . '/", $content); $content = str_replace("\\'", "'", $content); } $content = str_replace('\\\\', '\\', $content); $content = str_replace('array (', 'array(', $content); preg_match_all('(\n\s+([^=]+)=&gt;)', $content, $matches, PREG_SET_ORDER); $maxWidth = 0; foreach ($matches as $match) { $maxWidth = max($maxWidth, strlen($match[1])); } $content = preg_replace('(\n\s+([^=]+)=&gt;)e', "'\n    \\1' . str_repeat(' ', " . $maxWidth . " - strlen('\\1')) . '=&gt;'", $content); if (!$usingStdout) { $console-&gt;writeLine(" DONE" . PHP_EOL, Color::GREEN); $console-&gt;write('Writing classmap to '); $console-&gt;write($output, Color::LIGHT_WHITE); $console-&gt;write('... '); } file_put_contents($output, $content); if (!$usingStdout) { $console-&gt;writeLine(" DONE", Color::GREEN); $console-&gt;writeLine('Wrote classmap to ' . realpath($output), Color::LIGHT_WHITE); } } } &lt;?php
 namespace ZFTool\Controller; use Zend\Mvc\Controller\AbstractActionController; use Zend\View\Model\ViewModel; use Zend\View\Model\ConsoleModel; use ZFTool\Model\Skeleton; use ZFTool\Model\Utility; use Zend\Console\ColorInterface as Color; class CreateController extends AbstractActionController { public function projectAction() { if (!extension_loaded('zip')) { return $this-&gt;sendError('You need to install the ZIP extension of PHP'); } if (!extension_loaded('openssl')) { return $this-&gt;sendError('You need to install the OpenSSL extension of PHP'); } $console = $this-&gt;getServiceLocator()-&gt;get('console'); $tmpDir = sys_get_temp_dir(); $request = $this-&gt;getRequest(); $path = rtrim($request-&gt;getParam('path'), '/'); if (file_exists($path)) { return $this-&gt;sendError ( "The directory $path already exists. You cannot create a ZF2 project here." ); } $commit = Skeleton::getLastCommit(); if (false === $commit) { $tmpFile = Skeleton::getLastZip($tmpDir); if (empty($tmpFile)) { return $this-&gt;sendError('I cannot access the API of github.'); } $console-&gt;writeLine( "Warning: I cannot connect to github, I will use the last download of ZF2 Skeleton.", Color::GRAY ); } else { $tmpFile = Skeleton::getTmpFileName($tmpDir, $commit); } if (!file_exists($tmpFile)) { if (!Skeleton::getSkeletonApp($tmpFile)) { return $this-&gt;sendError('I cannot access the ZF2 skeleton application in github.'); } } $zip = new \ZipArchive; if ($zip-&gt;open($tmpFile)) { $stateIndex0 = $zip-&gt;statIndex(0); $tmpSkeleton = $tmpDir . '/' . rtrim($stateIndex0['name'], "/"); if (!$zip-&gt;extractTo($tmpDir)) { return $this-&gt;sendError("Error during the unzip of $tmpFile."); } $result = Utility::copyFiles($tmpSkeleton, $path); if (file_exists($tmpSkeleton)) { Utility::deleteFolder($tmpSkeleton); } $zip-&gt;close(); if (false === $result) { return $this-&gt;sendError("Error during the copy of the files in $path."); } } if (file_exists("$path/composer.phar")) { chmod("$path/composer.phar", 0755); } $console-&gt;writeLine("ZF2 skeleton application installed in $path.", Color::GREEN); $console-&gt;writeLine("In order to execute the skeleton application you need to install the ZF2 library."); $console-&gt;writeLine("Execute: \"composer.phar install\" in $path"); $console-&gt;writeLine("For more info in $path/README.md"); } public function moduleAction() { $console = $this-&gt;getServiceLocator()-&gt;get('console'); $tmpDir = sys_get_temp_dir(); $request = $this-&gt;getRequest(); $name = $request-&gt;getParam('name'); $path = rtrim($request-&gt;getParam('path'), '/'); if (empty($path)) { $path = '.'; } if (!file_exists("$path/module") || !file_exists("$path/config/application.config.php")) { return $this-&gt;sendError( "The path $path doesn't contain a ZF2 application. I cannot create a module here." ); } if (file_exists("$path/module/$name")) { return $this-&gt;sendError( "The module $name already exists." ); } $name = ucfirst($name); mkdir("$path/module/$name"); mkdir("$path/module/$name/config"); mkdir("$path/module/$name/src"); mkdir("$path/module/$name/src/$name"); mkdir("$path/module/$name/src/$name/Controller"); mkdir("$path/module/$name/view"); file_put_contents("$path/module/$name/Module.php", Skeleton::getModule($name)); file_put_contents("$path/module/$name/config/module.config.php", Skeleton::getModuleConfig($name)); $application = require "$path/config/application.config.php"; if (!in_array($name, $application['modules'])) { $application['modules'][] = $name; copy ("$path/config/application.config.php", "$path/config/application.config.old"); $content = &lt;&lt;&lt;EOD
&lt;?php
/**
 * Configuration file generated by ZFTool
 * The previous configuration file is stored in application.config.old
 *
 * @see https://github.com/zendframework/ZFTool
 */

EOD;
$content .= 'return '. Skeleton::exportConfig($application) . ";\n"; file_put_contents("$path/config/application.config.php", $content); } if ($path === '.') { $console-&gt;writeLine("The module $name has been created", Color::GREEN); } else { $console-&gt;writeLine("The module $name has been created in $path", Color::GREEN); } } protected function sendError($msg) { $m = new ConsoleModel(); $m-&gt;setErrorLevel(2); $m-&gt;setResult($msg . PHP_EOL); return $m; } } &lt;?php
 namespace ZFTool\Controller; use Zend\Mvc\Controller\AbstractActionController; use Zend\View\Model\ViewModel; use Zend\View\Model\ConsoleModel; use ZFTool\Model\Zf; use ZFTool\Model\Utility; use Zend\Console\ColorInterface as Color; class InstallController extends AbstractActionController { public function zfAction() { if (!extension_loaded('zip')) { return $this-&gt;sendError('You need to install the ZIP extension of PHP'); } $console = $this-&gt;getServiceLocator()-&gt;get('console'); $tmpDir = sys_get_temp_dir(); $request = $this-&gt;getRequest(); $version = $request-&gt;getParam('version'); $path = rtrim($request-&gt;getParam('path'), '/'); if (file_exists($path)) { return $this-&gt;sendError ( "The directory $path already exists. You cannot install the ZF2 library here." ); } if (empty($version)) { $version = Zf::getLastVersion(); if (false === $version) { return $this-&gt;sendError ( "I cannot connect to the Zend Framework website." ); } } else { if (!Zf::checkVersion($version)) { return $this-&gt;sendError ( "The specified ZF version, $version, doesn't exist." ); } } $tmpFile = ZF::getTmpFileName($tmpDir, $version); if (!file_exists($tmpFile)) { if (!Zf::downloadZip($tmpFile, $version)) { return $this-&gt;sendError ( "I cannot download the ZF2 library from github." ); } } $zip = new \ZipArchive; if ($zip-&gt;open($tmpFile)) { $zipFolders = $zip-&gt;statIndex(0); $zipFolder = $tmpDir . '/' . rtrim($zipFolders['name'], "/"); if (!$zip-&gt;extractTo($tmpDir)) { return $this-&gt;sendError("Error during the unzip of $tmpFile."); } $result = Utility::copyFiles($zipFolder, $path); if (file_exists($zipFolder)) { Utility::deleteFolder($zipFolder); } $zip-&gt;close(); if (false === $result) { return $this-&gt;sendError("Error during the copy of the files in $path."); } } $console-&gt;writeLine("The ZF library $version has been installed in $path.", Color::GREEN); } protected function sendError($msg) { $m = new ConsoleModel(); $m-&gt;setErrorLevel(2); $m-&gt;setResult($msg . PHP_EOL); return $m; } } &lt;?php
 namespace ZFTool\Controller; use Zend\Mvc\Controller\AbstractActionController; use Zend\View\Model\ViewModel; use Zend\Stdlib\ArrayUtils; use Zend\Version\Version; use Zend\Console\ColorInterface as Color; use ZFTool\Module; class InfoController extends AbstractActionController { public function versionAction() { $console = $this-&gt;getServiceLocator()-&gt;get('console'); $zf2Path = $this-&gt;getZF2Path(); if (file_exists($zf2Path . '/Zend/Version/Version.php')) { require_once $zf2Path . '/Zend/Version/Version.php'; $msg = 'The application in this folder is using Zend Framework '; } else { $msg = 'The ZFTool is using Zend Framework '; } $console-&gt;writeLine(Module::NAME . ' ver. ' . Module::VERSION, Color::GREEN); $console-&gt;writeLine($msg . Version::VERSION); } public function configAction() { $console = $this-&gt;getServiceLocator()-&gt;get('console'); $sm = $this-&gt;getServiceLocator(); $config = $sm-&gt;get('Configuration'); if(!is_array($config)){ $config = ArrayUtils::iteratorToArray($config, true); } $console-&gt;writeLine ('Configuration:', Color::GREEN); print_r($config); } protected function getZF2Path() { if (getenv('ZF2_PATH')) { return getenv('ZF2_PATH'); } elseif (get_cfg_var('zf2_path')) { return get_cfg_var('zf2_path'); } elseif (is_dir('vendor/ZF2/library')) { return 'vendor/ZF2/library'; } elseif (is_dir('vendor/zendframework/zendframework/library')) { return 'vendor/zendframework/zendframework/library'; } elseif (is_dir('vendor/zendframework/zend-version')) { return 'vendor/zendframework/zend-version'; } return false; } } &lt;?php
namespace ZFTool\Model; class Zf { const LAST_VERSION = 'http://framework.zend.com/api/zf-version?v=2'; const GET_TAGS = 'https://api.github.com/repos/zendframework/zf2/tags'; const RELEASE_NAME = 'release-'; protected static $valueGenerator; protected static $tags = array(); public static function getLastVersion() { $content = @file_get_contents(self::LAST_VERSION); if (!empty($content)) { return $content; } return false; } public static function checkVersion($version) { $tags = self::getTags(); return isset($tags[self::RELEASE_NAME . $version]); } public static function getTags() { if (empty(self::$tags)) { $tags = json_decode(@file_get_contents(self::GET_TAGS), true); foreach ($tags as $tag) { self::$tags[$tag['name']] = $tag['zipball_url']; } } return self::$tags; } public static function downloadZip($file, $version) { $tags = self::getTags(); if (!isset($tags[self::RELEASE_NAME . $version])) { return false; } $content = @file_get_contents($tags[self::RELEASE_NAME . $version]); if (empty($content)) { return false; } return (file_put_contents($file, $content) !== false); } public static function getTmpFileName($tmpDir, $version) { return "$tmpDir/ZF_$version.zip"; } } &lt;?php
namespace ZFTool\Model; use \RecursiveIteratorIterator; use \RecursiveDirectoryIterator; class Utility { public static function copyFiles($source, $dest) { if (!file_exists($source)) { return false; } if (!file_exists($dest)) { mkdir($dest); } $iterator = new RecursiveIteratorIterator( new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST ); foreach ($iterator as $item) { $destName = $dest . DIRECTORY_SEPARATOR . $iterator-&gt;getSubPathName(); if ($item-&gt;isDir()) { if (!file_exists($destName)) { if (!@mkdir($destName)) { return false; } } } else { if (!@copy($item, $destName)) { return false; } chmod ($destName, fileperms($item)); } } return true; } public static function deleteFolder($source) { if (!file_exists($source)) { return false; } $iterator = new RecursiveIteratorIterator( new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS), RecursiveIteratorIterator::CHILD_FIRST ); foreach ($iterator as $item) { if ($item-&gt;isDir()){ if (!@rmdir($item-&gt;getRealPath())) { return false; } } else { if (!@unlink($item-&gt;getRealPath())) { return false; } } } return @rmdir($source); } } &lt;?php
namespace ZFTool\Model; use Zend\Code\Generator\ValueGenerator; class Skeleton { const SKELETON_URL = 'https://github.com/zendframework/ZendSkeletonApplication/archive/master.zip'; const API_LAST_COMMIT = 'https://api.github.com/repos/zendframework/ZendSkeletonApplication/commits?per_page=1'; const SKELETON_FILE = 'ZF2SA'; protected static $valueGenerator; public static function getLastCommit() { $content = json_decode(@file_get_contents(self::API_LAST_COMMIT, false, self::getContextProxy()), true); if (is_array($content)) { return $content[0]; } return false; } public static function getSkeletonApp($file) { $content = @file_get_contents(self::SKELETON_URL, false, self::getContextProxy()); if (empty($content)) { return false; } return (file_put_contents($file, $content) !== false); } public static function getLastZip($dir) { $files = glob("$dir/" . self::SKELETON_FILE . "_*.zip"); $last = 0; $file = ''; foreach ($files as $f) { if (filemtime($f) &gt; $last) { $file = $f; } } return $file; } public static function getTmpFileName($dir, $commit) { $filename = ''; if (is_array($commit) &amp;&amp; isset($commit['sha'])) { $filename = $dir . '/' . self::SKELETON_FILE . '_' . $commit['sha'] . '.zip'; } return $filename; } public static function exportConfig($config, $indent = 0) { if (empty(static::$valueGenerator)) { static::$valueGenerator = new ValueGenerator(); } static::$valueGenerator-&gt;setValue($config); static::$valueGenerator-&gt;setArrayDepth($indent); return static::$valueGenerator; } public static function getModule($name) { return &lt;&lt;&lt;EOD
&lt;?php
namespace $name;

class Module
{
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }

    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\StandardAutoloader' =&gt; array(
                'namespaces' =&gt; array(
                    __NAMESPACE__ =&gt; __DIR__ . '/src/' . __NAMESPACE__,
                ),
            ),
        );
    }
}

EOD;
} public static function getModuleConfig($name) { return &lt;&lt;&lt;EOD
&lt;?php
return array(
);
EOD;
} public static function getContextProxy() { $proxyURL = getenv('HTTP_PROXY'); if (!$proxyURL) { return; } $config_env = explode('@', $proxyURL); $auth = base64_encode(str_replace('http://', '', $config_env[0])); $aContext = array( 'http' =&gt; array( 'proxy' =&gt; 'tcp://' . $config_env[1], 'request_fulluri' =&gt; true, 'header' =&gt; "Proxy-Authorization: Basic $auth", ), ); return stream_context_create($aContext); } } &lt;?php
 namespace ZFTool; use Zend\Mvc\ModuleRouteListener; use Zend\ModuleManager\Feature\ConsoleUsageProviderInterface; use Zend\ModuleManager\Feature\AutoloaderProviderInterface; use Zend\ModuleManager\Feature\ConfigProviderInterface; use Zend\Console\Adapter\AdapterInterface as ConsoleAdapterInterface; class Module implements ConsoleUsageProviderInterface, AutoloaderProviderInterface, ConfigProviderInterface { const VERSION = '0.1'; const NAME = 'ZFTool - Zend Framework 2 command line Tool'; protected $config; public function onBootstrap($e) { } public function getConfig() { return $this-&gt;config = include __DIR__ . '/../../config/module.config.php'; } public function getAutoloaderConfig() { return array( 'Zend\Loader\StandardAutoloader' =&gt; array( 'namespaces' =&gt; array( __NAMESPACE__ =&gt; __DIR__, ), ), ); } public function getConsoleBanner(ConsoleAdapterInterface $console) { return self::NAME . ' ver. ' . self::VERSION; } public function getConsoleUsage(ConsoleAdapterInterface $console) { if(!empty($this-&gt;config-&gt;disableUsage)){ return null; } return array( 'Basic information:', 'modules [list]' =&gt; 'show loaded modules', 'version | --version' =&gt; 'display current Zend Framework version', 'Application configuration:', 'config [list]' =&gt; 'list all configuration options', 'config get &lt;name&gt;' =&gt; 'display a single config value, i.e. "config get db.host"', 'config set &lt;name&gt; &lt;value&gt;' =&gt; 'set a single config value (use only to change scalar values)', 'Project creation:', 'create project &lt;path&gt;' =&gt; 'create a skeleton application', array('&lt;path&gt;', 'The path of the project to be created'), 'Module creation:', 'create module &lt;name&gt; [&lt;path&gt;]' =&gt; 'create a module', array('&lt;name&gt;', 'The name of the module to be created'), array('&lt;path&gt;', 'The root path of a ZF2 application where to create the module'), 'Classmap generator:', 'classmap generate &lt;directory&gt; &lt;classmap file&gt; [--append|-a] [--overwrite|-w]' =&gt; '', array('&lt;directory&gt;', 'The directory to scan for PHP classes (use "." to use current directory)'), array('&lt;classmap file&gt;', 'File name for generated class map file  or - for standard output.'. 'If not supplied, defaults to autoload_classmap.php inside &lt;directory&gt;.'), array('--append | -a', 'Append to classmap file if it exists'), array('--overwrite | -w', 'Whether or not to overwrite existing classmap file'), 'Zend Framework 2 installation:', 'install zf &lt;path&gt; [&lt;version&gt;]' =&gt; '', array('&lt;path&gt;', 'The directory where to install the ZF2 library'), array('&lt;version&gt;', 'The version to install, if not specified uses the last available'), ); } } 3��l.�Y�㒒R��W(�!����GBMB</pre></body></html>